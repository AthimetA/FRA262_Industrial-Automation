
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba6c  0800ba6c  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba74  0800ba74  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800ba7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  200003c8  0800be40  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800be40  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173bc  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa1  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a8  00000000  00000000  0003c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b19  00000000  00000000  00053f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fa1  00000000  00000000  00069a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fca0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  000fcad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00101408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ba34 	.word	0x0800ba34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800ba34 	.word	0x0800ba34

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a fdba 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a fdb1 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a fda8 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a fd9f 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a fd96 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a fd8d 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a fd84 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a fd7b 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a fd72 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a fd69 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a fd60 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a fd57 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a fd4e 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a fd45 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a fd3c 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a fd32 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a fd28 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f00a fd1e 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f00a fd14 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f00a fd0a 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f00a fd00 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f00a fcf6 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f00a fcec 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f00a fce2 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f00a fcd8 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f00a fcce 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f00a fcc4 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f00a fcba 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f00a fcb0 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f00a fca6 	bl	800b8e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f00a fc9c 	bl	800b8e4 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f00a fa26 	bl	800b40c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f00a fa1c 	bl	800b40c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f00a fa12 	bl	800b40c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f00a facc 	bl	800b598 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f00a fac0 	bl	800b598 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f00a fa30 	bl	800b598 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f00a fa1f 	bl	800b598 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f00a fa0e 	bl	800b598 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f00a fba7 	bl	800b8ec <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f00a f9e8 	bl	800b598 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f00a f96d 	bl	800b4c4 <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f00a f9c6 	bl	800b598 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f00a f9b5 	bl	800b598 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f00a fb4e 	bl	800b8ec <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f00a fa35 	bl	800b6d8 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f00a f984 	bl	800b598 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f00a f973 	bl	800b598 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f00a f962 	bl	800b598 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f00a fafb 	bl	800b8ec <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f00a f940 	bl	800b598 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f00a f8c5 	bl	800b4c4 <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f00a f91e 	bl	800b598 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <PIDAController_Init>:
#define PIDVELO_KD  0.0f
#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <PIDAController_Init+0x58>)
 80013b4:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <PIDAController_Init+0x5c>)
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	461c4000 	.word	0x461c4000
 80013cc:	c61c4000 	.word	0xc61c4000

080013d0 <PIDAVelocityController_Update>:

float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0a02 	vstr	s0, [r7, #8]
 80013de:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	61bb      	str	r3, [r7, #24]
    float deadzone = 2.5;
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <PIDAVelocityController_Update+0x1b0>)
 80013f8:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	pid->KpUse = pid->Kp;
//    }

    if(AbsVal(setpoint) <= 10.0) // 10 deg/s
 80013fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fe:	f000 f9dc 	bl	80017ba <AbsVal>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d80a      	bhi.n	800142a <PIDAVelocityController_Update+0x5a>
    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 6.0;
//    	pid->Kd  = 0.0;
    	pid->Kp  = PIDVELO_KP;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 8001418:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 800141e:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e009      	b.n	800143e <PIDAVelocityController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PIDVELO_KP;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 800142e:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 8001434:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	edd7 7a06 	vldr	s15, [r7, #24]
 8001448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 6a00 	vldr	s13, [r3]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 7a08 	vldr	s15, [r3, #32]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a01 	vldr	s14, [r3, #4]
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f80e 	bl	80004a0 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	69b8      	ldr	r0, [r7, #24]
 800148a:	f7ff f809 	bl	80004a0 <__aeabi_f2d>
 800148e:	4680      	mov	r8, r0
 8001490:	4689      	mov	r9, r1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f802 	bl	80004a0 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f7fe fea0 	bl	80001e4 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7fe fe98 	bl	80001e0 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	4699      	mov	r9, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffef 	bl	80004a0 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4640      	mov	r0, r8
 80014c8:	4649      	mov	r1, r9
 80014ca:	f7fe fe8b 	bl	80001e4 <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff f83b 	bl	8000550 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fa67 	bl	80009b4 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001502:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	dd04      	ble.n	8001536 <PIDAVelocityController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
 8001534:	e00e      	b.n	8001554 <PIDAVelocityController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d503      	bpl.n	8001554 <PIDAVelocityController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	ee07 3a90 	vmov	s15, r3
}
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800157e:	bf00      	nop
 8001580:	40200000 	.word	0x40200000
 8001584:	3e23e1d3 	.word	0x3e23e1d3
 8001588:	4048ecf7 	.word	0x4048ecf7

0800158c <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement)
{
 800158c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001590:	b088      	sub	sp, #32
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	ed87 0a02 	vstr	s0, [r7, #8]
 800159a:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 800159e:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	61bb      	str	r3, [r7, #24]
    float deadzone = 0.4;
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <PIDAPositonController_Update+0x1b0>)
 80015b4:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	errorDZ = error + deadzone;
//    }

    if(AbsVal(setpoint) < 10.0) // 10 deg/s
 80015b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80015ba:	f000 f8fe 	bl	80017ba <AbsVal>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d50a      	bpl.n	80015e6 <PIDAPositonController_Update+0x5a>
    {
    	pid->Kp  = PID_KP;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015d4:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015da:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e009      	b.n	80015fa <PIDAPositonController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PID_KP;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015ea:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015f0:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 7a08 	vldr	s15, [r3, #32]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7a01 	vldr	s14, [r3, #4]
 8001628:	edd7 7a06 	vldr	s15, [r7, #24]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	69b8      	ldr	r0, [r7, #24]
 8001646:	f7fe ff2b 	bl	80004a0 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff24 	bl	80004a0 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	f7fe fdc2 	bl	80001e4 <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4640      	mov	r0, r8
 8001666:	4649      	mov	r1, r9
 8001668:	f7fe fdba 	bl	80001e0 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff11 	bl	80004a0 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f7fe fdad 	bl	80001e4 <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f989 	bl	80009b4 <__aeabi_d2f>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a04 	vldr	s15, [r3, #16]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd04      	ble.n	80016f2 <PIDAPositonController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
 80016f0:	e00e      	b.n	8001710 <PIDAPositonController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d503      	bpl.n	8001710 <PIDAPositonController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	ee07 3a90 	vmov	s15, r3
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	3ecccccd 	.word	0x3ecccccd
 8001740:	40c00000 	.word	0x40c00000
 8001744:	3d4ccccd 	.word	0x3d4ccccd

08001748 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d50e      	bpl.n	80017f0 <AbsVal+0x36>
  {
    return number*-1.0;
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fe64 	bl	80004a0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f8e8 	bl	80009b4 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef1 7a67 	vneg.f32	s15, s15
 80017ee:	e001      	b.n	80017f4 <AbsVal+0x3a>
  }
  else
  {
    return number;
 80017f0:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	ed87 0a02 	vstr	s0, [r7, #8]
 800180e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001812:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
//	traject -> Amax = 28.64789;
//	traject -> Jmax = 572.957795 ;
	traject -> Amax = 21.77;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <CoefficientAndTimeCalculation+0xa0>)
 8001848:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 114.59 ;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <CoefficientAndTimeCalculation+0xa4>)
 800184e:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d502      	bpl.n	800186c <CoefficientAndTimeCalculation+0x6c>
	{
		gain = -1.0;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <CoefficientAndTimeCalculation+0xa8>)
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e002      	b.n	8001872 <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 800186c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001870:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f7ff ff9d 	bl	80017ba <AbsVal>
 8001880:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018ac <CoefficientAndTimeCalculation+0xac>
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	db0e      	blt.n	80018b4 <CoefficientAndTimeCalculation+0xb4>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <CoefficientAndTimeCalculation+0xb0>)
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e07a      	b.n	8001994 <CoefficientAndTimeCalculation+0x194>
 800189e:	bf00      	nop
 80018a0:	41ae28f6 	.word	0x41ae28f6
 80018a4:	42e52e14 	.word	0x42e52e14
 80018a8:	bf800000 	.word	0xbf800000
 80018ac:	43020000 	.word	0x43020000
 80018b0:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	ee17 0a90 	vmov	r0, s15
 80018d0:	f7fe fde6 	bl	80004a0 <__aeabi_f2d>
 80018d4:	f60f 3378 	addw	r3, pc, #2936	; 0xb78
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe38 	bl	8000550 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fdd0 	bl	80004a0 <__aeabi_f2d>
 8001900:	f60f 3354 	addw	r3, pc, #2900	; 0xb54
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe22 	bl	8000550 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4640      	mov	r0, r8
 8001912:	4649      	mov	r1, r9
 8001914:	f7fe fc66 	bl	80001e4 <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	edd7 7a04 	vldr	s15, [r7, #16]
 8001924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fdb8 	bl	80004a0 <__aeabi_f2d>
 8001930:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe0a 	bl	8000550 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4640      	mov	r0, r8
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fc4c 	bl	80001e0 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4690      	mov	r8, r2
 800194e:	4699      	mov	r9, r3
 8001950:	6938      	ldr	r0, [r7, #16]
 8001952:	f7fe fda5 	bl	80004a0 <__aeabi_f2d>
 8001956:	f60f 3310 	addw	r3, pc, #2832	; 0xb10
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fdf7 	bl	8000550 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4640      	mov	r0, r8
 8001968:	4649      	mov	r1, r9
 800196a:	f7fe fc3b 	bl	80001e4 <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f60f 23f8 	addw	r3, pc, #2808	; 0xaf8
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fc31 	bl	80001e4 <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f813 	bl	80009b4 <__aeabi_d2f>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]
	}

	if(traject -> Vmax > Veloinput)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	edd3 7a02 	vldr	s15, [r3, #8]
 800199a:	ed97 7a00 	vldr	s14, [r7]
 800199e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d502      	bpl.n	80019ae <CoefficientAndTimeCalculation+0x1ae>
	{
		traject -> Vmax = Veloinput;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	609a      	str	r2, [r3, #8]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 6a00 	vldr	s13, [r3]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edd3 6a00 	vldr	s13, [r3]
 8001a06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 6a00 	vldr	s13, [r3]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	edd3 6a00 	vldr	s13, [r3]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	edd3 6a00 	vldr	s13, [r3]
 8001a70:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fce3 	bl	80004a0 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7fe ff67 	bl	80009b4 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fccc 	bl	80004a0 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe ff50 	bl	80009b4 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef1 7a67 	vneg.f32	s15, s15
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc8a 	bl	80004a0 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff0e 	bl	80009b4 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc77 	bl	80004a0 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fc66 	bl	80004a0 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fb00 	bl	80001e0 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe fee4 	bl	80009b4 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	edd3 6a05 	vldr	s13, [r3, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ccc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cd8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001d36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dcc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001dd8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001de8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ecc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ed8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f48:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f9a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fb0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fb8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800200a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002020:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002028:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800202c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 6a05 	vldr	s13, [r3, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002064:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800206e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800207a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002090:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002094:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002098:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800209c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002100:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800210c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800212e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 6a06 	vldr	s13, [r3, #24]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002144:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800214e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002156:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800215a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002170:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002174:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002178:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800217c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002180:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002190:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002194:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800220e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	edd3 6a07 	vldr	s13, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800222e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800223a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002250:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002254:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002258:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800225c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002260:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002270:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002274:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	ed93 7a07 	vldr	s14, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80022ee:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	edd3 6a08 	vldr	s13, [r3, #32]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002304:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800230e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002316:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800231a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002330:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002334:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002338:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800233c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002340:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002350:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002354:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	ed93 7a08 	vldr	s14, [r3, #32]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800238a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80023ce:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002410:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800241c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002420:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002430:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002434:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	9abcaf48 	.word	0x9abcaf48
 8002454:	be8ad7f2 	.word	0xbe8ad7f2
 8002458:	d7c6fbd2 	.word	0xd7c6fbd2
 800245c:	3f12599e 	.word	0x3f12599e
 8002460:	18fc5048 	.word	0x18fc5048
 8002464:	3f82d773 	.word	0x3f82d773
 8002468:	44d013a9 	.word	0x44d013a9
 800246c:	3feaf0d8 	.word	0x3feaf0d8
 8002470:	af4f0d84 	.word	0xaf4f0d84
 8002474:	40136594 	.word	0x40136594

08002478 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800248a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248e:	ebb0 0802 	subs.w	r8, r0, r2
 8002492:	eb61 0903 	sbc.w	r9, r1, r3
 8002496:	4640      	mov	r0, r8
 8002498:	4649      	mov	r1, r9
 800249a:	f7fe f823 	bl	80004e4 <__aeabi_ul2d>
 800249e:	a3c6      	add	r3, pc, #792	; (adr r3, 80027b8 <TrajectoryEvaluation+0x340>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f97e 	bl	80007a4 <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fa80 	bl	80009b4 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4ac2      	ldr	r2, [pc, #776]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80024b8:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 80024ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c2:	1a84      	subs	r4, r0, r2
 80024c4:	eb61 0503 	sbc.w	r5, r1, r3
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fe f80a 	bl	80004e4 <__aeabi_ul2d>
 80024d0:	a3b9      	add	r3, pc, #740	; (adr r3, 80027b8 <TrajectoryEvaluation+0x340>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f965 	bl	80007a4 <__aeabi_ddiv>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fa67 	bl	80009b4 <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4ab6      	ldr	r2, [pc, #728]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80024ea:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80024ec:	4bb4      	ldr	r3, [pc, #720]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	f2c0 80a9 	blt.w	8002650 <TrajectoryEvaluation+0x1d8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002504:	4bae      	ldr	r3, [pc, #696]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	f340 809d 	ble.w	8002650 <TrajectoryEvaluation+0x1d8>
	{
		traject -> QJ = traject -> A[0];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	ed93 7a03 	vldr	s14, [r3, #12]
 8002526:	4ba6      	ldr	r3, [pc, #664]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ed93 7a03 	vldr	s14, [r3, #12]
 8002546:	4b9e      	ldr	r3, [pc, #632]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002548:	edd3 6a00 	vldr	s13, [r3]
 800254c:	4b9c      	ldr	r3, [pc, #624]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800255e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002568:	4b95      	ldr	r3, [pc, #596]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	ed93 7a03 	vldr	s14, [r3, #12]
 800258c:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 800258e:	edd3 6a00 	vldr	s13, [r3]
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80025ae:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025da:	ed93 6a00 	vldr	s12, [r3]
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025e8:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002608:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800260a:	ed93 6a00 	vldr	s12, [r3]
 800260e:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002618:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800261c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002620:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 800264c:	f000 bc62 	b.w	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	f200 80b0 	bhi.w	80027c8 <TrajectoryEvaluation+0x350>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	f340 80a4 	ble.w	80027c8 <TrajectoryEvaluation+0x350>
	{
		traject -> QJ = traject -> A[1];
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026b2:	edd3 6a00 	vldr	s13, [r3]
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80026f8:	edd3 6a00 	vldr	s13, [r3]
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002744:	ed93 6a00 	vldr	s12, [r3]
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee66 7a27 	vmul.f32	s15, s12, s15
 800275c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002760:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002764:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002774:	ed93 6a00 	vldr	s12, [r3]
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002782:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002786:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800278a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800278e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80027ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 80027b6:	e3ad      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 80027b8:	00000000 	.word	0x00000000
 80027bc:	412e8480 	.word	0x412e8480
 80027c0:	200003e4 	.word	0x200003e4
 80027c4:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80027ce:	4bb2      	ldr	r3, [pc, #712]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	f200 80a8 	bhi.w	8002930 <TrajectoryEvaluation+0x4b8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80027e6:	4bac      	ldr	r3, [pc, #688]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	f340 809c 	ble.w	8002930 <TrajectoryEvaluation+0x4b8>
	{
		traject -> QJ = traject -> A[2];
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	ed93 7a05 	vldr	s14, [r3, #20]
 8002808:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	ed93 7a05 	vldr	s14, [r3, #20]
 8002828:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800282a:	edd3 6a00 	vldr	s13, [r3]
 800282e:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800284a:	4b93      	ldr	r3, [pc, #588]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	ed93 7a05 	vldr	s14, [r3, #20]
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002890:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	edd3 6a05 	vldr	s13, [r3, #20]
 80028ba:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028bc:	ed93 6a00 	vldr	s12, [r3]
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028d8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80028dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80028ea:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028ec:	ed93 6a00 	vldr	s12, [r3]
 80028f0:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002902:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 800292e:	e2f1      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	f200 80ac 	bhi.w	8002aa0 <TrajectoryEvaluation+0x628>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800294e:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	f340 80a0 	ble.w	8002aa0 <TrajectoryEvaluation+0x628>
	{
		traject -> QJ = traject -> A[3];
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029d8:	edd3 6a00 	vldr	s13, [r3]
 80029dc:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a24:	ed93 6a00 	vldr	s12, [r3]
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a40:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a54:	ed93 6a00 	vldr	s12, [r3]
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a66:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002a96:	e23d      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 8002a98:	200003e4 	.word	0x200003e4
 8002a9c:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002aa6:	4bb2      	ldr	r3, [pc, #712]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab4:	f200 80a8 	bhi.w	8002c08 <TrajectoryEvaluation+0x790>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002abe:	4bac      	ldr	r3, [pc, #688]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	f340 809c 	ble.w	8002c08 <TrajectoryEvaluation+0x790>
	{
		traject -> QJ = traject -> A[4];
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ae0:	4ba3      	ldr	r3, [pc, #652]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b00:	4b9b      	ldr	r3, [pc, #620]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b02:	edd3 6a00 	vldr	s13, [r3]
 8002b06:	4b9a      	ldr	r3, [pc, #616]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b22:	4b93      	ldr	r3, [pc, #588]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b46:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b48:	edd3 6a00 	vldr	s13, [r3]
 8002b4c:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b68:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b92:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b94:	ed93 6a00 	vldr	s12, [r3]
 8002b98:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bb0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002bb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002bc2:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bc4:	ed93 6a00 	vldr	s12, [r3]
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002bda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002c06:	e185      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	f200 80ac 	bhi.w	8002d78 <TrajectoryEvaluation+0x900>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002c26:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	f340 80a0 	ble.w	8002d78 <TrajectoryEvaluation+0x900>
	{
		traject -> QJ = traject -> A[5];
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c48:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c68:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c6a:	edd3 6a00 	vldr	s13, [r3]
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	ed93 7a08 	vldr	s14, [r3, #32]
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cb0:	edd3 6a00 	vldr	s13, [r3]
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	edd3 6a08 	vldr	s13, [r3, #32]
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002cfc:	ed93 6a00 	vldr	s12, [r3]
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d18:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002d1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d2c:	ed93 6a00 	vldr	s12, [r3]
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002d42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002d6e:	e0d1      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 8002d70:	200003e4 	.word	0x200003e4
 8002d74:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	f200 80a8 	bhi.w	8002ee0 <TrajectoryEvaluation+0xa68>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002d96:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da4:	f340 809c 	ble.w	8002ee0 <TrajectoryEvaluation+0xa68>
	{
		traject -> QJ = traject -> A[6];
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dda:	edd3 6a00 	vldr	s13, [r3]
 8002dde:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002df0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e20:	edd3 6a00 	vldr	s13, [r3]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e6c:	ed93 6a00 	vldr	s12, [r3]
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e88:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002e8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e9c:	ed93 6a00 	vldr	s12, [r3]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eaa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002eb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002ede:	e019      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else
	{
		traject -> QJ = 0;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QVP = 0;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qfinal;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}

	return 1.0;
 8002f14:	bf00      	nop
}
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f1e:	bf00      	nop
 8002f20:	200003e4 	.word	0x200003e4
 8002f24:	200003e8 	.word	0x200003e8

08002f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8002f2e:	f002 fb5d 	bl	80055ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f32:	f000 f8af 	bl	8003094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f36:	f000 fae1 	bl	80034fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002f3a:	f000 fab7 	bl	80034ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f3e:	f000 fa89 	bl	8003454 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f42:	f000 f90f 	bl	8003164 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002f46:	f000 fa61 	bl	800340c <MX_TIM11_Init>
  MX_TIM1_Init();
 8002f4a:	f000 f939 	bl	80031c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f4e:	f000 f9bb 	bl	80032c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002f52:	f000 fa0d 	bl	8003370 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 8002f56:	f000 fe35 	bl	8003bc4 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8002f5a:	483f      	ldr	r0, [pc, #252]	; (8003058 <main+0x130>)
 8002f5c:	f7fd fefc 	bl	8000d58 <KalmanMatrixInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f60:	2100      	movs	r1, #0
 8002f62:	483e      	ldr	r0, [pc, #248]	; (800305c <main+0x134>)
 8002f64:	f005 fffa 	bl	8008f5c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002f68:	483d      	ldr	r0, [pc, #244]	; (8003060 <main+0x138>)
 8002f6a:	f005 ff17 	bl	8008d9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002f6e:	213c      	movs	r1, #60	; 0x3c
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <main+0x13c>)
 8002f72:	f006 f949 	bl	8009208 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <main+0x140>)
 8002f80:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <main+0x140>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a38      	ldr	r2, [pc, #224]	; (8003068 <main+0x140>)
 8002f88:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <main+0x140>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a37      	ldr	r2, [pc, #220]	; (800306c <main+0x144>)
 8002f90:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8002f92:	4837      	ldr	r0, [pc, #220]	; (8003070 <main+0x148>)
 8002f94:	f7fe f9ec 	bl	8001370 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8002f98:	4836      	ldr	r0, [pc, #216]	; (8003074 <main+0x14c>)
 8002f9a:	f7fe f9e9 	bl	8001370 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8002f9e:	4836      	ldr	r0, [pc, #216]	; (8003078 <main+0x150>)
 8002fa0:	f7fe fbd2 	bl	8001748 <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8002fa4:	f002 f81e 	bl	8004fe4 <Micros>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4933      	ldr	r1, [pc, #204]	; (800307c <main+0x154>)
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8002fb2:	f002 fb81 	bl	80056b8 <HAL_GetTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2200      	movs	r2, #0
 8002fba:	469a      	mov	sl, r3
 8002fbc:	4693      	mov	fp, r2
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <main+0x154>)
 8002fc0:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	  RobotstateManagement();
 8002fc4:	f001 fb04 	bl	80045d0 <RobotstateManagement>
	  EndEffstateManagement();
 8002fc8:	f001 fc52 	bl	8004870 <EndEffstateManagement>
	  if(Micros() - ControlLoopTime >= 10000)
 8002fcc:	f002 f80a 	bl	8004fe4 <Micros>
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <main+0x158>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	1a84      	subs	r4, r0, r2
 8002fd8:	eb61 0503 	sbc.w	r5, r1, r3
 8002fdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	f175 0300 	sbcs.w	r3, r5, #0
 8002fe6:	d3dd      	bcc.n	8002fa4 <main+0x7c>
	  {
		ControlLoopTime  = Micros();
 8002fe8:	f001 fffc 	bl	8004fe4 <Micros>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4923      	ldr	r1, [pc, #140]	; (8003080 <main+0x158>)
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002ff6:	f001 fff5 	bl	8004fe4 <Micros>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <main+0x15c>)
 8003000:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003004:	f000 fb40 	bl	8003688 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <main+0x160>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	eeb0 0a67 	vmov.f32	s0, s15
 8003012:	4811      	ldr	r0, [pc, #68]	; (8003058 <main+0x130>)
 8003014:	f7fe f87e 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <main+0x160>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <main+0x150>)
 800301e:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <main+0x130>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <main+0x150>)
 8003028:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 800302a:	f000 fca3 	bl	8003974 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 800302e:	f001 ffd9 	bl	8004fe4 <Micros>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4915      	ldr	r1, [pc, #84]	; (800308c <main+0x164>)
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <main+0x164>)
 800303e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <main+0x15c>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	ebb0 0802 	subs.w	r8, r0, r2
 800304c:	eb61 0903 	sbc.w	r9, r1, r3
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <main+0x168>)
 8003052:	e9c3 8900 	strd	r8, r9, [r3]
	  timeElapsed[0] = Micros();
 8003056:	e7a5      	b.n	8002fa4 <main+0x7c>
 8003058:	20000034 	.word	0x20000034
 800305c:	20000440 	.word	0x20000440
 8003060:	20000518 	.word	0x20000518
 8003064:	20000488 	.word	0x20000488
 8003068:	20000768 	.word	0x20000768
 800306c:	20000774 	.word	0x20000774
 8003070:	20000788 	.word	0x20000788
 8003074:	200007bc 	.word	0x200007bc
 8003078:	20000664 	.word	0x20000664
 800307c:	20000708 	.word	0x20000708
 8003080:	200008f8 	.word	0x200008f8
 8003084:	200008c8 	.word	0x200008c8
 8003088:	20000778 	.word	0x20000778
 800308c:	200008d0 	.word	0x200008d0
 8003090:	200008d8 	.word	0x200008d8

08003094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b094      	sub	sp, #80	; 0x50
 8003098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	2230      	movs	r2, #48	; 0x30
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f008 fcbe 	bl	800ba24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <SystemClock_Config+0xc8>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <SystemClock_Config+0xc8>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	; 0x40
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <SystemClock_Config+0xc8>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <SystemClock_Config+0xcc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <SystemClock_Config+0xcc>)
 80030de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <SystemClock_Config+0xcc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030f0:	2302      	movs	r3, #2
 80030f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030f4:	2301      	movs	r3, #1
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030f8:	2310      	movs	r3, #16
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030fc:	2302      	movs	r3, #2
 80030fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003100:	2300      	movs	r3, #0
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003104:	2308      	movs	r3, #8
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003108:	2364      	movs	r3, #100	; 0x64
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800310c:	2302      	movs	r3, #2
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003110:	2304      	movs	r3, #4
 8003112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003114:	f107 0320 	add.w	r3, r7, #32
 8003118:	4618      	mov	r0, r3
 800311a:	f005 f957 	bl	80083cc <HAL_RCC_OscConfig>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003124:	f001 ff76 	bl	8005014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003128:	230f      	movs	r3, #15
 800312a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800312c:	2302      	movs	r3, #2
 800312e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	2103      	movs	r1, #3
 8003144:	4618      	mov	r0, r3
 8003146:	f005 fbb9 	bl	80088bc <HAL_RCC_ClockConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003150:	f001 ff60 	bl	8005014 <Error_Handler>
  }
}
 8003154:	bf00      	nop
 8003156:	3750      	adds	r7, #80	; 0x50
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000

08003164 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <MX_I2C1_Init+0x50>)
 800316a:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <MX_I2C1_Init+0x54>)
 800316c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_I2C1_Init+0x50>)
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <MX_I2C1_Init+0x58>)
 8003172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <MX_I2C1_Init+0x50>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_I2C1_Init+0x50>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_I2C1_Init+0x50>)
 8003182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <MX_I2C1_Init+0x50>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_I2C1_Init+0x50>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <MX_I2C1_Init+0x50>)
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_I2C1_Init+0x50>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <MX_I2C1_Init+0x50>)
 80031a2:	f003 f99f 	bl	80064e4 <HAL_I2C_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031ac:	f001 ff32 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200003ec 	.word	0x200003ec
 80031b8:	40005400 	.word	0x40005400
 80031bc:	00061a80 	.word	0x00061a80

080031c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b092      	sub	sp, #72	; 0x48
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	2220      	movs	r2, #32
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f008 fc1a 	bl	800ba24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <MX_TIM1_Init+0x100>)
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <MX_TIM1_Init+0x104>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031f6:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <MX_TIM1_Init+0x100>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <MX_TIM1_Init+0x100>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <MX_TIM1_Init+0x100>)
 8003204:	f242 720f 	movw	r2, #9999	; 0x270f
 8003208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <MX_TIM1_Init+0x100>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <MX_TIM1_Init+0x100>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <MX_TIM1_Init+0x100>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800321c:	4828      	ldr	r0, [pc, #160]	; (80032c0 <MX_TIM1_Init+0x100>)
 800321e:	f005 fe4e 	bl	8008ebe <HAL_TIM_PWM_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003228:	f001 fef4 	bl	8005014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003238:	4619      	mov	r1, r3
 800323a:	4821      	ldr	r0, [pc, #132]	; (80032c0 <MX_TIM1_Init+0x100>)
 800323c:	f006 fdf8 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003246:	f001 fee5 	bl	8005014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800324a:	2360      	movs	r3, #96	; 0x60
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	2200      	movs	r2, #0
 800326c:	4619      	mov	r1, r3
 800326e:	4814      	ldr	r0, [pc, #80]	; (80032c0 <MX_TIM1_Init+0x100>)
 8003270:	f006 f960 	bl	8009534 <HAL_TIM_PWM_ConfigChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800327a:	f001 fecb 	bl	8005014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003296:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <MX_TIM1_Init+0x100>)
 80032a2:	f006 fe33 	bl	8009f0c <HAL_TIMEx_ConfigBreakDeadTime>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80032ac:	f001 feb2 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032b0:	4803      	ldr	r0, [pc, #12]	; (80032c0 <MX_TIM1_Init+0x100>)
 80032b2:	f001 ffe9 	bl	8005288 <HAL_TIM_MspPostInit>

}
 80032b6:	bf00      	nop
 80032b8:	3748      	adds	r7, #72	; 0x48
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000440 	.word	0x20000440
 80032c4:	40010000 	.word	0x40010000

080032c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f008 fba4 	bl	800ba24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <MX_TIM2_Init+0xa4>)
 80032e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <MX_TIM2_Init+0xa4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f2:	4b1e      	ldr	r3, [pc, #120]	; (800336c <MX_TIM2_Init+0xa4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <MX_TIM2_Init+0xa4>)
 80032fa:	f642 62df 	movw	r2, #11999	; 0x2edf
 80032fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_TIM2_Init+0xa4>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <MX_TIM2_Init+0xa4>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800330c:	2303      	movs	r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	4619      	mov	r1, r3
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <MX_TIM2_Init+0xa4>)
 8003338:	f005 fec0 	bl	80090bc <HAL_TIM_Encoder_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003342:	f001 fe67 	bl	8005014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <MX_TIM2_Init+0xa4>)
 8003354:	f006 fd6c 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800335e:	f001 fe59 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003362:	bf00      	nop
 8003364:	3730      	adds	r7, #48	; 0x30
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000488 	.word	0x20000488

08003370 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003376:	f107 0308 	add.w	r3, r7, #8
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003384:	463b      	mov	r3, r7
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <MX_TIM5_Init+0x90>)
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <MX_TIM5_Init+0x94>)
 8003390:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <MX_TIM5_Init+0x90>)
 8003394:	2263      	movs	r2, #99	; 0x63
 8003396:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <MX_TIM5_Init+0x90>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <MX_TIM5_Init+0x90>)
 80033a0:	4a19      	ldr	r2, [pc, #100]	; (8003408 <MX_TIM5_Init+0x98>)
 80033a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <MX_TIM5_Init+0x90>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <MX_TIM5_Init+0x90>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <MX_TIM5_Init+0x90>)
 80033b2:	f005 fca3 	bl	8008cfc <HAL_TIM_Base_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80033bc:	f001 fe2a 	bl	8005014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	4619      	mov	r1, r3
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <MX_TIM5_Init+0x90>)
 80033ce:	f006 f973 	bl	80096b8 <HAL_TIM_ConfigClockSource>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80033d8:	f001 fe1c 	bl	8005014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033dc:	2320      	movs	r3, #32
 80033de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033e4:	463b      	mov	r3, r7
 80033e6:	4619      	mov	r1, r3
 80033e8:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_TIM5_Init+0x90>)
 80033ea:	f006 fd21 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80033f4:	f001 fe0e 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200004d0 	.word	0x200004d0
 8003404:	40000c00 	.word	0x40000c00
 8003408:	0001869f 	.word	0x0001869f

0800340c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <MX_TIM11_Init+0x40>)
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <MX_TIM11_Init+0x44>)
 8003414:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <MX_TIM11_Init+0x40>)
 8003418:	2263      	movs	r2, #99	; 0x63
 800341a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <MX_TIM11_Init+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <MX_TIM11_Init+0x40>)
 8003424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003428:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <MX_TIM11_Init+0x40>)
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <MX_TIM11_Init+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003436:	4805      	ldr	r0, [pc, #20]	; (800344c <MX_TIM11_Init+0x40>)
 8003438:	f005 fc60 	bl	8008cfc <HAL_TIM_Base_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003442:	f001 fde7 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000518 	.word	0x20000518
 8003450:	40014800 	.word	0x40014800

08003454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <MX_USART2_UART_Init+0x54>)
 800345c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003460:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8003464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800347a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART2_UART_Init+0x50>)
 8003490:	f006 fda2 	bl	8009fd8 <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800349a:	f001 fdbb 	bl	8005014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000560 	.word	0x20000560
 80034a8:	40004400 	.word	0x40004400

080034ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <MX_DMA_Init+0x4c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <MX_DMA_Init+0x4c>)
 80034bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <MX_DMA_Init+0x4c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	2010      	movs	r0, #16
 80034d4:	f002 f9d7 	bl	8005886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80034d8:	2010      	movs	r0, #16
 80034da:	f002 f9f0 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2011      	movs	r0, #17
 80034e4:	f002 f9cf 	bl	8005886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80034e8:	2011      	movs	r0, #17
 80034ea:	f002 f9e8 	bl	80058be <HAL_NVIC_EnableIRQ>

}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b4e      	ldr	r3, [pc, #312]	; (8003650 <MX_GPIO_Init+0x154>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <MX_GPIO_Init+0x154>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <MX_GPIO_Init+0x154>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <MX_GPIO_Init+0x154>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <MX_GPIO_Init+0x154>)
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b44      	ldr	r3, [pc, #272]	; (8003650 <MX_GPIO_Init+0x154>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <MX_GPIO_Init+0x154>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <MX_GPIO_Init+0x154>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <MX_GPIO_Init+0x154>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <MX_GPIO_Init+0x154>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a38      	ldr	r2, [pc, #224]	; (8003650 <MX_GPIO_Init+0x154>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <MX_GPIO_Init+0x154>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8003582:	2200      	movs	r2, #0
 8003584:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003588:	4832      	ldr	r0, [pc, #200]	; (8003654 <MX_GPIO_Init+0x158>)
 800358a:	f002 ff5f 	bl	800644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8003594:	4830      	ldr	r0, [pc, #192]	; (8003658 <MX_GPIO_Init+0x15c>)
 8003596:	f002 ff59 	bl	800644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800359a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800359e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	482a      	ldr	r0, [pc, #168]	; (800365c <MX_GPIO_Init+0x160>)
 80035b2:	f002 fdaf 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 80035b6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80035ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035bc:	2301      	movs	r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4619      	mov	r1, r3
 80035ce:	4821      	ldr	r0, [pc, #132]	; (8003654 <MX_GPIO_Init+0x158>)
 80035d0:	f002 fda0 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 80035d4:	f44f 6383 	mov.w	r3, #1048	; 0x418
 80035d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	481a      	ldr	r0, [pc, #104]	; (8003658 <MX_GPIO_Init+0x15c>)
 80035ee:	f002 fd91 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 80035f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80035f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80035fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4812      	ldr	r0, [pc, #72]	; (8003654 <MX_GPIO_Init+0x158>)
 800360a:	f002 fd83 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 800360e:	2320      	movs	r3, #32
 8003610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003612:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <MX_GPIO_Init+0x15c>)
 8003624:	f002 fd76 	bl	8006114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2017      	movs	r0, #23
 800362e:	f002 f92a 	bl	8005886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003632:	2017      	movs	r0, #23
 8003634:	f002 f943 	bl	80058be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	2028      	movs	r0, #40	; 0x28
 800363e:	f002 f922 	bl	8005886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003642:	2028      	movs	r0, #40	; 0x28
 8003644:	f002 f93b 	bl	80058be <HAL_NVIC_EnableIRQ>

}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400
 800365c:	40020800 	.word	0x40020800

08003660 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	if(number<0){
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	da02      	bge.n	8003674 <Int32Abs+0x14>
		return number*-1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	425b      	negs	r3, r3
 8003672:	e000      	b.n	8003676 <Int32Abs+0x16>
	}else{
		return number;
 8003674:	687b      	ldr	r3, [r7, #4]
	}
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	0000      	movs	r0, r0
 8003684:	0000      	movs	r0, r0
	...

08003688 <EncoderRead>:

void EncoderRead()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800368c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	461a      	mov	r2, r3
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <EncoderRead+0xd8>)
 8003696:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <EncoderRead+0xd8>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <EncoderRead+0xd8>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <EncoderRead+0xdc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	425b      	negs	r3, r3
 80036a8:	429a      	cmp	r2, r3
 80036aa:	da07      	bge.n	80036bc <EncoderRead+0x34>
		WrappingStep+=12000;
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <EncoderRead+0xe0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80036b4:	3320      	adds	r3, #32
 80036b6:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <EncoderRead+0xe0>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00f      	b.n	80036dc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <EncoderRead+0xd8>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <EncoderRead+0xd8>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	1ad2      	subs	r2, r2, r3
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <EncoderRead+0xdc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	db06      	blt.n	80036dc <EncoderRead+0x54>
		WrappingStep-=12000;
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <EncoderRead+0xe0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80036d6:	3b20      	subs	r3, #32
 80036d8:	4a23      	ldr	r2, [pc, #140]	; (8003768 <EncoderRead+0xe0>)
 80036da:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <EncoderRead+0xd8>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <EncoderRead+0xe0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a21      	ldr	r2, [pc, #132]	; (800376c <EncoderRead+0xe4>)
 80036e8:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <EncoderRead+0xe4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc fec4 	bl	800047c <__aeabi_i2d>
 80036f4:	a318      	add	r3, pc, #96	; (adr r3, 8003758 <EncoderRead+0xd0>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fd f853 	bl	80007a4 <__aeabi_ddiv>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <EncoderRead+0xe8>)
 800370c:	f7fc ff20 	bl	8000550 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f7fd f94c 	bl	80009b4 <__aeabi_d2f>
 800371c:	4603      	mov	r3, r0
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <EncoderRead+0xec>)
 8003720:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <EncoderRead+0xec>)
 8003724:	ed93 7a00 	vldr	s14, [r3]
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <EncoderRead+0xec>)
 800372a:	edd3 7a01 	vldr	s15, [r3, #4]
 800372e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003732:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003778 <EncoderRead+0xf0>
 8003736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <EncoderRead+0xf4>)
 800373c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <EncoderRead+0xd8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <EncoderRead+0xd8>)
 8003746:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <EncoderRead+0xec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a09      	ldr	r2, [pc, #36]	; (8003774 <EncoderRead+0xec>)
 800374e:	6053      	str	r3, [r2, #4]
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	f3af 8000 	nop.w
 8003758:	00000000 	.word	0x00000000
 800375c:	40c77000 	.word	0x40c77000
 8003760:	20000768 	.word	0x20000768
 8003764:	200003b4 	.word	0x200003b4
 8003768:	20000770 	.word	0x20000770
 800376c:	20000774 	.word	0x20000774
 8003770:	40768000 	.word	0x40768000
 8003774:	20000778 	.word	0x20000778
 8003778:	3c23d70a 	.word	0x3c23d70a
 800377c:	20000780 	.word	0x20000780

08003780 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	dc11      	bgt.n	80037b2 <Drivemotor+0x32>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <Drivemotor+0xa8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	db0d      	blt.n	80037b2 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <Drivemotor+0xac>)
 8003798:	681c      	ldr	r4, [r3, #0]
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff60 	bl	8003660 <Int32Abs>
 80037a0:	4603      	mov	r3, r0
 80037a2:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037aa:	4821      	ldr	r0, [pc, #132]	; (8003830 <Drivemotor+0xb0>)
 80037ac:	f002 fe4e 	bl	800644c <HAL_GPIO_WritePin>
 80037b0:	e036      	b.n	8003820 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <Drivemotor+0xa8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	da0b      	bge.n	80037d2 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <Drivemotor+0xac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f242 7210 	movw	r2, #10000	; 0x2710
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ca:	4819      	ldr	r0, [pc, #100]	; (8003830 <Drivemotor+0xb0>)
 80037cc:	f002 fe3e 	bl	800644c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 80037d0:	e026      	b.n	8003820 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db12      	blt.n	80037fe <Drivemotor+0x7e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f242 7210 	movw	r2, #10000	; 0x2710
 80037de:	4293      	cmp	r3, r2
 80037e0:	dc0d      	bgt.n	80037fe <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <Drivemotor+0xac>)
 80037e4:	681c      	ldr	r4, [r3, #0]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff3a 	bl	8003660 <Int32Abs>
 80037ec:	4603      	mov	r3, r0
 80037ee:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80037f0:	2201      	movs	r2, #1
 80037f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f6:	480e      	ldr	r0, [pc, #56]	; (8003830 <Drivemotor+0xb0>)
 80037f8:	f002 fe28 	bl	800644c <HAL_GPIO_WritePin>
 80037fc:	e010      	b.n	8003820 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f242 7210 	movw	r2, #10000	; 0x2710
 8003804:	4293      	cmp	r3, r2
 8003806:	dd0b      	ble.n	8003820 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <Drivemotor+0xac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003812:	2201      	movs	r2, #1
 8003814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003818:	4805      	ldr	r0, [pc, #20]	; (8003830 <Drivemotor+0xb0>)
 800381a:	f002 fe17 	bl	800644c <HAL_GPIO_WritePin>
}
 800381e:	e7ff      	b.n	8003820 <Drivemotor+0xa0>
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	ffffd8f0 	.word	0xffffd8f0
 800382c:	20000440 	.word	0x20000440
 8003830:	40020000 	.word	0x40020000
 8003834:	00000000 	.word	0x00000000

08003838 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003842:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	f7fc fe2a 	bl	80004a0 <__aeabi_f2d>
 800384c:	4604      	mov	r4, r0
 800384e:	460d      	mov	r5, r1
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fc fe25 	bl	80004a0 <__aeabi_f2d>
 8003856:	a345      	add	r3, pc, #276	; (adr r3, 800396c <InverseTFofMotor+0x134>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc fe78 	bl	8000550 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fcba 	bl	80001e0 <__aeabi_dsub>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4614      	mov	r4, r2
 8003872:	461d      	mov	r5, r3
 8003874:	4b38      	ldr	r3, [pc, #224]	; (8003958 <InverseTFofMotor+0x120>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fe11 	bl	80004a0 <__aeabi_f2d>
 800387e:	a32e      	add	r3, pc, #184	; (adr r3, 8003938 <InverseTFofMotor+0x100>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fe64 	bl	8000550 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fc fca8 	bl	80001e4 <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4614      	mov	r4, r2
 800389a:	461d      	mov	r5, r3
 800389c:	4b2f      	ldr	r3, [pc, #188]	; (800395c <InverseTFofMotor+0x124>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fdfd 	bl	80004a0 <__aeabi_f2d>
 80038a6:	a326      	add	r3, pc, #152	; (adr r3, 8003940 <InverseTFofMotor+0x108>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fe50 	bl	8000550 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	f7fc fc92 	bl	80001e0 <__aeabi_dsub>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	a320      	add	r3, pc, #128	; (adr r3, 8003948 <InverseTFofMotor+0x110>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f7fc ff6b 	bl	80007a4 <__aeabi_ddiv>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7fd f86d 	bl	80009b4 <__aeabi_d2f>
 80038da:	4603      	mov	r3, r0
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <InverseTFofMotor+0x128>)
 80038de:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <InverseTFofMotor+0x128>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fddb 	bl	80004a0 <__aeabi_f2d>
 80038ea:	a319      	add	r3, pc, #100	; (adr r3, 8003950 <InverseTFofMotor+0x118>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fe2e 	bl	8000550 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <InverseTFofMotor+0x12c>)
 8003902:	f7fc ff4f 	bl	80007a4 <__aeabi_ddiv>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f851 	bl	80009b4 <__aeabi_d2f>
 8003912:	4603      	mov	r3, r0
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <InverseTFofMotor+0x130>)
 8003916:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <InverseTFofMotor+0x128>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <InverseTFofMotor+0x124>)
 800391e:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <InverseTFofMotor+0x120>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
	return Pwm;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <InverseTFofMotor+0x130>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	ee07 3a90 	vmov	s15, r3
}
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	dace185d 	.word	0xdace185d
 800393c:	3fda7c30 	.word	0x3fda7c30
 8003940:	a3b6ed62 	.word	0xa3b6ed62
 8003944:	3fdf7e74 	.word	0x3fdf7e74
 8003948:	3d6b5dd1 	.word	0x3d6b5dd1
 800394c:	3fe521bb 	.word	0x3fe521bb
 8003950:	00000000 	.word	0x00000000
 8003954:	40c38800 	.word	0x40c38800
 8003958:	2000090c 	.word	0x2000090c
 800395c:	20000910 	.word	0x20000910
 8003960:	20000914 	.word	0x20000914
 8003964:	40280000 	.word	0x40280000
 8003968:	20000918 	.word	0x20000918
 800396c:	98e30f85 	.word	0x98e30f85
 8003970:	3ff4c744 	.word	0x3ff4c744

08003974 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af04      	add	r7, sp, #16
//	}
//	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	invTFOutput = InverseTFofMotor(setpointLast,setpoint);
//	PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
//	Drivemotor(PWMCHECKER);
	if (Robot.flagStartTime == 1)
 800397c:	4b87      	ldr	r3, [pc, #540]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 800397e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10a      	bne.n	800399c <ControllLoopAndErrorHandler+0x28>
	{
		StartTime = Micros();
 8003986:	f001 fb2d 	bl	8004fe4 <Micros>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4984      	ldr	r1, [pc, #528]	; (8003ba0 <ControllLoopAndErrorHandler+0x22c>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
		Robot.flagStartTime = 0;
 8003994:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	CurrentTime = Micros();
 800399c:	f001 fb22 	bl	8004fe4 <Micros>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	497f      	ldr	r1, [pc, #508]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 80039a6:	e9c1 2300 	strd	r2, r3, [r1]
	PredictTime = CurrentTime + 10000;
 80039aa:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80039b4:	eb12 0801 	adds.w	r8, r2, r1
 80039b8:	f143 0900 	adc.w	r9, r3, #0
 80039bc:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <ControllLoopAndErrorHandler+0x234>)
 80039be:	e9c3 8900 	strd	r8, r9, [r3]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <ControllLoopAndErrorHandler+0x22c>)
 80039c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039c8:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	4976      	ldr	r1, [pc, #472]	; (8003ba8 <ControllLoopAndErrorHandler+0x234>)
 80039d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039d8:	e9cd 2300 	strd	r2, r3, [sp]
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	4872      	ldr	r0, [pc, #456]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 80039e2:	f7fe fd49 	bl	8002478 <TrajectoryEvaluation>
	if(Robot.MotorIsOn == 1)
 80039e6:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 80039e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 80c3 	bne.w	8003b78 <ControllLoopAndErrorHandler+0x204>
	{
		if (Robot.flagStartTime == 1)
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 80039f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10a      	bne.n	8003a12 <ControllLoopAndErrorHandler+0x9e>
		{
			StartTime = Micros();
 80039fc:	f001 faf2 	bl	8004fe4 <Micros>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4966      	ldr	r1, [pc, #408]	; (8003ba0 <ControllLoopAndErrorHandler+0x22c>)
 8003a06:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8003a0a:	4b64      	ldr	r3, [pc, #400]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		CurrentTime = Micros();
 8003a12:	f001 fae7 	bl	8004fe4 <Micros>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4962      	ldr	r1, [pc, #392]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 8003a1c:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8003a20:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a2a:	1854      	adds	r4, r2, r1
 8003a2c:	f143 0500 	adc.w	r5, r3, #0
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <ControllLoopAndErrorHandler+0x234>)
 8003a32:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8003a36:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <ControllLoopAndErrorHandler+0x22c>)
 8003a38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <ControllLoopAndErrorHandler+0x230>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	4959      	ldr	r1, [pc, #356]	; (8003ba8 <ControllLoopAndErrorHandler+0x234>)
 8003a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a50:	4622      	mov	r2, r4
 8003a52:	462b      	mov	r3, r5
 8003a54:	4855      	ldr	r0, [pc, #340]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 8003a56:	f7fe fd0f 	bl	8002478 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 8003a5a:	4b54      	ldr	r3, [pc, #336]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 8003a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a60:	4a4e      	ldr	r2, [pc, #312]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a62:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8003a64:	4b51      	ldr	r3, [pc, #324]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 8003a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a6a:	4a4c      	ldr	r2, [pc, #304]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a6c:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 8003a6e:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a74:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a82:	f7fd fe9a 	bl	80017ba <AbsVal>
 8003a86:	eef0 7a40 	vmov.f32	s15, s0
 8003a8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d52a      	bpl.n	8003aee <ControllLoopAndErrorHandler+0x17a>
 8003a98:	4b40      	ldr	r3, [pc, #256]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	f7fd fe8a 	bl	80017ba <AbsVal>
 8003aa6:	eef0 7a40 	vmov.f32	s15, s0
 8003aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	d51a      	bpl.n	8003aee <ControllLoopAndErrorHandler+0x17a>
		{
			PWMCHECKER = 0.0;
 8003ab8:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aca:	ee17 0a90 	vmov	r0, s15
 8003ace:	f7ff fe57 	bl	8003780 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	4837      	ldr	r0, [pc, #220]	; (8003bb4 <ControllLoopAndErrorHandler+0x240>)
 8003ad8:	f002 fcb8 	bl	800644c <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8003adc:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003aec:	e051      	b.n	8003b92 <ControllLoopAndErrorHandler+0x21e>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position);
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003af0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003af4:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003af6:	ed93 7a00 	vldr	s14, [r3]
 8003afa:	eef0 0a47 	vmov.f32	s1, s14
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	482d      	ldr	r0, [pc, #180]	; (8003bb8 <ControllLoopAndErrorHandler+0x244>)
 8003b04:	f7fd fd42 	bl	800158c <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut, Robot.Velocity);
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003b0a:	ed93 7a07 	vldr	s14, [r3, #28]
 8003b0e:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <ControllLoopAndErrorHandler+0x244>)
 8003b10:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <ControllLoopAndErrorHandler+0x228>)
 8003b1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b1e:	eef0 0a47 	vmov.f32	s1, s14
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	4825      	ldr	r0, [pc, #148]	; (8003bbc <ControllLoopAndErrorHandler+0x248>)
 8003b28:	f7fd fc52 	bl	80013d0 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 8003b2e:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <ControllLoopAndErrorHandler+0x238>)
 8003b34:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003b38:	eef0 0a47 	vmov.f32	s1, s14
 8003b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b40:	f7ff fe7a 	bl	8003838 <InverseTFofMotor>
 8003b44:	eef0 7a40 	vmov.f32	s15, s0
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <ControllLoopAndErrorHandler+0x24c>)
 8003b4a:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <ControllLoopAndErrorHandler+0x248>)
 8003b50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <ControllLoopAndErrorHandler+0x24c>)
 8003b56:	edd3 7a00 	vldr	s15, [r3]
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003b60:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b6e:	ee17 0a90 	vmov	r0, s15
 8003b72:	f7ff fe05 	bl	8003780 <Drivemotor>
}
 8003b76:	e00c      	b.n	8003b92 <ControllLoopAndErrorHandler+0x21e>
		PWMCHECKER = 0.0;
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <ControllLoopAndErrorHandler+0x23c>)
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b8a:	ee17 0a90 	vmov	r0, s15
 8003b8e:	f7ff fdf7 	bl	8003780 <Drivemotor>
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000664 	.word	0x20000664
 8003ba0:	200008b0 	.word	0x200008b0
 8003ba4:	200008b8 	.word	0x200008b8
 8003ba8:	200008c0 	.word	0x200008c0
 8003bac:	200007f4 	.word	0x200007f4
 8003bb0:	200007f0 	.word	0x200007f0
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	200007bc 	.word	0x200007bc
 8003bbc:	20000788 	.word	0x20000788
 8003bc0:	20000784 	.word	0x20000784

08003bc4 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003bc8:	2214      	movs	r2, #20
 8003bca:	2100      	movs	r1, #0
 8003bcc:	480e      	ldr	r0, [pc, #56]	; (8003c08 <Ringbuf_Init+0x44>)
 8003bce:	f007 ff29 	bl	800ba24 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003bd2:	2214      	movs	r2, #20
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	480d      	ldr	r0, [pc, #52]	; (8003c0c <Ringbuf_Init+0x48>)
 8003bd8:	f007 ff24 	bl	800ba24 <memset>

	oldPos = 0;
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <Ringbuf_Init+0x4c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <Ringbuf_Init+0x50>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003be8:	2214      	movs	r2, #20
 8003bea:	4907      	ldr	r1, [pc, #28]	; (8003c08 <Ringbuf_Init+0x44>)
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <Ringbuf_Init+0x54>)
 8003bee:	f006 fabf 	bl	800a170 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <Ringbuf_Init+0x58>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <Ringbuf_Init+0x58>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0208 	bic.w	r2, r2, #8
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000069c 	.word	0x2000069c
 8003c0c:	200006b0 	.word	0x200006b0
 8003c10:	200006ce 	.word	0x200006ce
 8003c14:	200006d0 	.word	0x200006d0
 8003c18:	20000560 	.word	0x20000560
 8003c1c:	200005a4 	.word	0x200005a4

08003c20 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003c30:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <checkSum+0x15c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d84f      	bhi.n	8003cde <checkSum+0xbe>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <checkSum+0x24>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003d35 	.word	0x08003d35
 8003c48:	08003c55 	.word	0x08003c55
 8003c4c:	08003d35 	.word	0x08003d35
 8003c50:	08003c7b 	.word	0x08003c7b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f897 	bl	8003d8c <checkAck>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d169      	bne.n	8003d38 <checkSum+0x118>
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <checkSum+0x160>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <checkSum+0x15c>)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	7013      	strb	r3, [r2, #0]
		break;
 8003c78:	e05e      	b.n	8003d38 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f884 	bl	8003d8c <checkAck>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <checkSum+0x80>
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <checkSum+0x160>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	3302      	adds	r3, #2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <checkSum+0x15c>)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003c9e:	e04c      	b.n	8003d3a <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003ca0:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <checkSum+0x160>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <checkSum+0x160>)
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <checkSum+0x160>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	440b      	add	r3, r1
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <checkSum+0x160>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <checkSum+0x15c>)
 8003cda:	701a      	strb	r2, [r3, #0]
		break;
 8003cdc:	e02d      	b.n	8003d3a <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <checkSum+0x160>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <checkSum+0x15c>)
 8003cec:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	e019      	b.n	8003d28 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <checkSum+0x160>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <checkSum+0x164>)
 8003cfe:	fb83 2301 	smull	r2, r3, r3, r1
 8003d02:	10da      	asrs	r2, r3, #3
 8003d04:	17cb      	asrs	r3, r1, #31
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	1aca      	subs	r2, r1, r3
 8003d12:	1883      	adds	r3, r0, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	4413      	add	r3, r2
 8003d20:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	dbe0      	blt.n	8003cf4 <checkSum+0xd4>
 8003d32:	e002      	b.n	8003d3a <checkSum+0x11a>
		break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <checkSum+0x11a>
		break;
 8003d38:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <checkSum+0x160>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	1e59      	subs	r1, r3, #1
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <checkSum+0x164>)
 8003d46:	fb83 2301 	smull	r2, r3, r3, r1
 8003d4a:	10da      	asrs	r2, r3, #3
 8003d4c:	17cb      	asrs	r3, r1, #31
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	1aca      	subs	r2, r1, r3
 8003d5a:	1883      	adds	r3, r0, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d102      	bne.n	8003d74 <checkSum+0x154>
 8003d6e:	4806      	ldr	r0, [pc, #24]	; (8003d88 <checkSum+0x168>)
 8003d70:	f000 f89a 	bl	8003ea8 <UARTstateManagement>
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	200006f9 	.word	0x200006f9
 8003d80:	200006ce 	.word	0x200006ce
 8003d84:	66666667 	.word	0x66666667
 8003d88:	200006b0 	.word	0x200006b0

08003d8c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <checkAck+0x40>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b58      	cmp	r3, #88	; 0x58
 8003da6:	d109      	bne.n	8003dbc <checkAck+0x30>
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <checkAck+0x40>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b75      	cmp	r3, #117	; 0x75
 8003db6:	d101      	bne.n	8003dbc <checkAck+0x30>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <checkAck+0x32>
	else return 0;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	200006ce 	.word	0x200006ce

08003dd0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d14a      	bne.n	8003e7c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003dec:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003dee:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	2b14      	cmp	r3, #20
 8003e02:	dd16      	ble.n	8003e32 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e12:	4413      	add	r3, r2
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e16:	8812      	ldrh	r2, [r2, #0]
 8003e18:	491f      	ldr	r1, [pc, #124]	; (8003e98 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f007 fdf4 	bl	800ba08 <memcpy>
                        newPos = dataSize+oldPos;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e012      	b.n	8003e58 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	4915      	ldr	r1, [pc, #84]	; (8003e98 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f007 fde0 	bl	800ba08 <memcpy>
                        newPos = dataSize+oldPos;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	4413      	add	r3, r2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e56:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e5e:	f7ff fedf 	bl	8003c20 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003e62:	2214      	movs	r2, #20
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e66:	480d      	ldr	r0, [pc, #52]	; (8003e9c <HAL_UARTEx_RxEventCallback+0xcc>)
 8003e68:	f006 f982 	bl	800a170 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0208 	bic.w	r2, r2, #8
 8003e7a:	601a      	str	r2, [r3, #0]
        }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40004400 	.word	0x40004400
 8003e88:	200006d0 	.word	0x200006d0
 8003e8c:	200006ce 	.word	0x200006ce
 8003e90:	200006d2 	.word	0x200006d2
 8003e94:	200006b0 	.word	0x200006b0
 8003e98:	2000069c 	.word	0x2000069c
 8003e9c:	20000560 	.word	0x20000560
 8003ea0:	200005a4 	.word	0x200005a4
 8003ea4:	00000000 	.word	0x00000000

08003ea8 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003eb0:	4bad      	ldr	r3, [pc, #692]	; (8004168 <UARTstateManagement+0x2c0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d01d      	beq.n	8003ef4 <UARTstateManagement+0x4c>
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f300 835a 	bgt.w	8004572 <UARTstateManagement+0x6ca>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8354 	beq.w	800456c <UARTstateManagement+0x6c4>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d000      	beq.n	8003eca <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003ec8:	e353      	b.n	8004572 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003eca:	4ba8      	ldr	r3, [pc, #672]	; (800416c <UARTstateManagement+0x2c4>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b92      	cmp	r3, #146	; 0x92
 8003ed8:	f040 834a 	bne.w	8004570 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8003edc:	4ba4      	ldr	r3, [pc, #656]	; (8004170 <UARTstateManagement+0x2c8>)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8003ee2:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <UARTstateManagement+0x2c0>)
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ee8:	2202      	movs	r2, #2
 8003eea:	49a2      	ldr	r1, [pc, #648]	; (8004174 <UARTstateManagement+0x2cc>)
 8003eec:	48a2      	ldr	r0, [pc, #648]	; (8004178 <UARTstateManagement+0x2d0>)
 8003eee:	f006 f8c1 	bl	800a074 <HAL_UART_Transmit_DMA>
			break;
 8003ef2:	e33d      	b.n	8004570 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8003ef4:	4ba1      	ldr	r3, [pc, #644]	; (800417c <UARTstateManagement+0x2d4>)
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	4ba1      	ldr	r3, [pc, #644]	; (8004180 <UARTstateManagement+0x2d8>)
 8003efa:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8003efc:	4ba0      	ldr	r3, [pc, #640]	; (8004180 <UARTstateManagement+0x2d8>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	3b91      	subs	r3, #145	; 0x91
 8003f02:	2b0d      	cmp	r3, #13
 8003f04:	f200 8335 	bhi.w	8004572 <UARTstateManagement+0x6ca>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UARTstateManagement+0x68>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f5b 	.word	0x08003f5b
 8003f18:	08003f73 	.word	0x08003f73
 8003f1c:	08003f8b 	.word	0x08003f8b
 8003f20:	08003feb 	.word	0x08003feb
 8003f24:	08004059 	.word	0x08004059
 8003f28:	08004091 	.word	0x08004091
 8003f2c:	080041a5 	.word	0x080041a5
 8003f30:	080041e9 	.word	0x080041e9
 8003f34:	0800428f 	.word	0x0800428f
 8003f38:	08004405 	.word	0x08004405
 8003f3c:	080044fb 	.word	0x080044fb
 8003f40:	0800452b 	.word	0x0800452b
 8003f44:	08004543 	.word	0x08004543
					modeNo = 1;
 8003f48:	4b89      	ldr	r3, [pc, #548]	; (8004170 <UARTstateManagement+0x2c8>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4988      	ldr	r1, [pc, #544]	; (8004174 <UARTstateManagement+0x2cc>)
 8003f52:	4889      	ldr	r0, [pc, #548]	; (8004178 <UARTstateManagement+0x2d0>)
 8003f54:	f006 f88e 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8003f58:	e30b      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 2;
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <UARTstateManagement+0x2c8>)
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8003f60:	4b81      	ldr	r3, [pc, #516]	; (8004168 <UARTstateManagement+0x2c0>)
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f66:	2202      	movs	r2, #2
 8003f68:	4982      	ldr	r1, [pc, #520]	; (8004174 <UARTstateManagement+0x2cc>)
 8003f6a:	4883      	ldr	r0, [pc, #524]	; (8004178 <UARTstateManagement+0x2d0>)
 8003f6c:	f006 f882 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8003f70:	e2ff      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8003f72:	4b7f      	ldr	r3, [pc, #508]	; (8004170 <UARTstateManagement+0x2c8>)
 8003f74:	2203      	movs	r2, #3
 8003f76:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8003f78:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <UARTstateManagement+0x2c0>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f7e:	2202      	movs	r2, #2
 8003f80:	497c      	ldr	r1, [pc, #496]	; (8004174 <UARTstateManagement+0x2cc>)
 8003f82:	487d      	ldr	r0, [pc, #500]	; (8004178 <UARTstateManagement+0x2d0>)
 8003f84:	f006 f876 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8003f88:	e2f3      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 4;
 8003f8a:	4b79      	ldr	r3, [pc, #484]	; (8004170 <UARTstateManagement+0x2c8>)
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003f90:	4b76      	ldr	r3, [pc, #472]	; (800416c <UARTstateManagement+0x2c4>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	3302      	adds	r3, #2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fa6d 	bl	800047c <__aeabi_i2d>
 8003fa2:	a36d      	add	r3, pc, #436	; (adr r3, 8004158 <UARTstateManagement+0x2b0>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fbfc 	bl	80007a4 <__aeabi_ddiv>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fcfe 	bl	80009b4 <__aeabi_d2f>
 8003fb8:	ee07 0a10 	vmov	s14, r0
 8003fbc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <UARTstateManagement+0x2dc>)
 8003fc6:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8003fca:	4b6e      	ldr	r3, [pc, #440]	; (8004184 <UARTstateManagement+0x2dc>)
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd8:	4b6b      	ldr	r3, [pc, #428]	; (8004188 <UARTstateManagement+0x2e0>)
 8003fda:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4964      	ldr	r1, [pc, #400]	; (8004174 <UARTstateManagement+0x2cc>)
 8003fe2:	4865      	ldr	r0, [pc, #404]	; (8004178 <UARTstateManagement+0x2d0>)
 8003fe4:	f006 f846 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8003fe8:	e2c3      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 5;
 8003fea:	4b61      	ldr	r3, [pc, #388]	; (8004170 <UARTstateManagement+0x2c8>)
 8003fec:	2205      	movs	r2, #5
 8003fee:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <UARTstateManagement+0x2e4>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8003ff6:	4b66      	ldr	r3, [pc, #408]	; (8004190 <UARTstateManagement+0x2e8>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	; (800416c <UARTstateManagement+0x2c4>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	4a58      	ldr	r2, [pc, #352]	; (800416c <UARTstateManagement+0x2c4>)
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	3202      	adds	r2, #2
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	440a      	add	r2, r1
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa2f 	bl	800047c <__aeabi_i2d>
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <UARTstateManagement+0x2ec>)
 8004024:	f7fc fa94 	bl	8000550 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	a34b      	add	r3, pc, #300	; (adr r3, 8004160 <UARTstateManagement+0x2b8>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc fbb5 	bl	80007a4 <__aeabi_ddiv>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fcb7 	bl	80009b4 <__aeabi_d2f>
 8004046:	4603      	mov	r3, r0
 8004048:	4a53      	ldr	r2, [pc, #332]	; (8004198 <UARTstateManagement+0x2f0>)
 800404a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800404c:	2202      	movs	r2, #2
 800404e:	4949      	ldr	r1, [pc, #292]	; (8004174 <UARTstateManagement+0x2cc>)
 8004050:	4849      	ldr	r0, [pc, #292]	; (8004178 <UARTstateManagement+0x2d0>)
 8004052:	f006 f80f 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8004056:	e28c      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004058:	4b45      	ldr	r3, [pc, #276]	; (8004170 <UARTstateManagement+0x2c8>)
 800405a:	2206      	movs	r2, #6
 800405c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 800405e:	4b4b      	ldr	r3, [pc, #300]	; (800418c <UARTstateManagement+0x2e4>)
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004064:	220f      	movs	r2, #15
 8004066:	2100      	movs	r1, #0
 8004068:	484c      	ldr	r0, [pc, #304]	; (800419c <UARTstateManagement+0x2f4>)
 800406a:	f007 fcdb 	bl	800ba24 <memset>
					goalAmount = 1;
 800406e:	4b48      	ldr	r3, [pc, #288]	; (8004190 <UARTstateManagement+0x2e8>)
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8004074:	4b3d      	ldr	r3, [pc, #244]	; (800416c <UARTstateManagement+0x2c4>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	3302      	adds	r3, #2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	4b46      	ldr	r3, [pc, #280]	; (800419c <UARTstateManagement+0x2f4>)
 8004082:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004084:	2202      	movs	r2, #2
 8004086:	493b      	ldr	r1, [pc, #236]	; (8004174 <UARTstateManagement+0x2cc>)
 8004088:	483b      	ldr	r0, [pc, #236]	; (8004178 <UARTstateManagement+0x2d0>)
 800408a:	f005 fff3 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 800408e:	e270      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 7;
 8004090:	4b37      	ldr	r3, [pc, #220]	; (8004170 <UARTstateManagement+0x2c8>)
 8004092:	2207      	movs	r2, #7
 8004094:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004096:	4b3d      	ldr	r3, [pc, #244]	; (800418c <UARTstateManagement+0x2e4>)
 8004098:	2202      	movs	r2, #2
 800409a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 800409c:	220f      	movs	r2, #15
 800409e:	2100      	movs	r1, #0
 80040a0:	483e      	ldr	r0, [pc, #248]	; (800419c <UARTstateManagement+0x2f4>)
 80040a2:	f007 fcbf 	bl	800ba24 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <UARTstateManagement+0x2c4>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <UARTstateManagement+0x2e8>)
 80040b4:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e03a      	b.n	8004132 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <UARTstateManagement+0x2c4>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1c99      	adds	r1, r3, #2
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <UARTstateManagement+0x2f8>)
 80040c8:	fb83 2301 	smull	r2, r3, r3, r1
 80040cc:	10da      	asrs	r2, r3, #3
 80040ce:	17cb      	asrs	r3, r1, #31
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	1aca      	subs	r2, r1, r3
 80040dc:	1883      	adds	r3, r0, r2
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	f002 020f 	and.w	r2, r2, #15
 80040ee:	b2d1      	uxtb	r1, r2
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <UARTstateManagement+0x2f4>)
 80040f2:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <UARTstateManagement+0x2c4>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1c99      	adds	r1, r3, #2
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <UARTstateManagement+0x2f8>)
 8004100:	fb83 2301 	smull	r2, r3, r3, r1
 8004104:	10da      	asrs	r2, r3, #3
 8004106:	17cb      	asrs	r3, r1, #31
 8004108:	1ad2      	subs	r2, r2, r3
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	1aca      	subs	r2, r1, r3
 8004114:	1883      	adds	r3, r0, r2
 8004116:	461a      	mov	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	3301      	adds	r3, #1
 8004124:	0912      	lsrs	r2, r2, #4
 8004126:	b2d1      	uxtb	r1, r2
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <UARTstateManagement+0x2f4>)
 800412a:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <UARTstateManagement+0x2e8>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	0fda      	lsrs	r2, r3, #31
 800413a:	4413      	add	r3, r2
 800413c:	105b      	asrs	r3, r3, #1
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4293      	cmp	r3, r2
 8004144:	dbba      	blt.n	80040bc <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004146:	2202      	movs	r2, #2
 8004148:	490a      	ldr	r1, [pc, #40]	; (8004174 <UARTstateManagement+0x2cc>)
 800414a:	480b      	ldr	r0, [pc, #44]	; (8004178 <UARTstateManagement+0x2d0>)
 800414c:	f005 ff92 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8004150:	e20f      	b.n	8004572 <UARTstateManagement+0x6ca>
 8004152:	bf00      	nop
 8004154:	f3af 8000 	nop.w
 8004158:	00000000 	.word	0x00000000
 800415c:	406fe000 	.word	0x406fe000
 8004160:	00000000 	.word	0x00000000
 8004164:	40eeaa00 	.word	0x40eeaa00
 8004168:	20000698 	.word	0x20000698
 800416c:	200006ce 	.word	0x200006ce
 8004170:	200006f8 	.word	0x200006f8
 8004174:	2000002c 	.word	0x2000002c
 8004178:	20000560 	.word	0x20000560
 800417c:	200006f9 	.word	0x200006f9
 8004180:	200006cc 	.word	0x200006cc
 8004184:	200006d8 	.word	0x200006d8
 8004188:	20000664 	.word	0x20000664
 800418c:	200006f1 	.word	0x200006f1
 8004190:	200006ef 	.word	0x200006ef
 8004194:	40768000 	.word	0x40768000
 8004198:	200006dc 	.word	0x200006dc
 800419c:	200006e0 	.word	0x200006e0
 80041a0:	66666667 	.word	0x66666667
					modeNo = 8;
 80041a4:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <UARTstateManagement+0x528>)
 80041a6:	2208      	movs	r2, #8
 80041a8:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 80041aa:	4b8a      	ldr	r3, [pc, #552]	; (80043d4 <UARTstateManagement+0x52c>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d114      	bne.n	80041dc <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 80041b2:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <UARTstateManagement+0x530>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 80041b8:	4b88      	ldr	r3, [pc, #544]	; (80043dc <UARTstateManagement+0x534>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 80041c0:	4b86      	ldr	r3, [pc, #536]	; (80043dc <UARTstateManagement+0x534>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 80041c8:	4b84      	ldr	r3, [pc, #528]	; (80043dc <UARTstateManagement+0x534>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 80041d0:	4b80      	ldr	r3, [pc, #512]	; (80043d4 <UARTstateManagement+0x52c>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 80041d6:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <UARTstateManagement+0x538>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80041dc:	2202      	movs	r2, #2
 80041de:	4981      	ldr	r1, [pc, #516]	; (80043e4 <UARTstateManagement+0x53c>)
 80041e0:	4881      	ldr	r0, [pc, #516]	; (80043e8 <UARTstateManagement+0x540>)
 80041e2:	f005 ff47 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 80041e6:	e1c4      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 9;
 80041e8:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <UARTstateManagement+0x528>)
 80041ea:	2209      	movs	r2, #9
 80041ec:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 80041ee:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <UARTstateManagement+0x534>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80041f4:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <UARTstateManagement+0x52c>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d004      	beq.n	8004206 <UARTstateManagement+0x35e>
 80041fc:	4b77      	ldr	r3, [pc, #476]	; (80043dc <UARTstateManagement+0x534>)
 80041fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004202:	2b01      	cmp	r3, #1
 8004204:	d11f      	bne.n	8004246 <UARTstateManagement+0x39e>
 8004206:	4b77      	ldr	r3, [pc, #476]	; (80043e4 <UARTstateManagement+0x53c>)
 8004208:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800420a:	4b78      	ldr	r3, [pc, #480]	; (80043ec <UARTstateManagement+0x544>)
 800420c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 800420e:	4b77      	ldr	r3, [pc, #476]	; (80043ec <UARTstateManagement+0x544>)
 8004210:	2299      	movs	r2, #153	; 0x99
 8004212:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004214:	4b71      	ldr	r3, [pc, #452]	; (80043dc <UARTstateManagement+0x534>)
 8004216:	891b      	ldrh	r3, [r3, #8]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b74      	ldr	r3, [pc, #464]	; (80043ec <UARTstateManagement+0x544>)
 800421c:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800421e:	4b73      	ldr	r3, [pc, #460]	; (80043ec <UARTstateManagement+0x544>)
 8004220:	789a      	ldrb	r2, [r3, #2]
 8004222:	4b72      	ldr	r3, [pc, #456]	; (80043ec <UARTstateManagement+0x544>)
 8004224:	78db      	ldrb	r3, [r3, #3]
 8004226:	4413      	add	r3, r2
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b70      	ldr	r3, [pc, #448]	; (80043ec <UARTstateManagement+0x544>)
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	4413      	add	r3, r2
 8004230:	b2db      	uxtb	r3, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <UARTstateManagement+0x544>)
 8004238:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 800423a:	2206      	movs	r2, #6
 800423c:	496b      	ldr	r1, [pc, #428]	; (80043ec <UARTstateManagement+0x544>)
 800423e:	486a      	ldr	r0, [pc, #424]	; (80043e8 <UARTstateManagement+0x540>)
 8004240:	f005 ff18 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8004244:	e195      	b.n	8004572 <UARTstateManagement+0x6ca>
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <UARTstateManagement+0x548>)
 8004248:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800424a:	4b68      	ldr	r3, [pc, #416]	; (80043ec <UARTstateManagement+0x544>)
 800424c:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800424e:	4a69      	ldr	r2, [pc, #420]	; (80043f4 <UARTstateManagement+0x54c>)
 8004250:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <UARTstateManagement+0x53c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <UARTstateManagement+0x544>)
 8004258:	2299      	movs	r2, #153	; 0x99
 800425a:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 800425c:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <UARTstateManagement+0x534>)
 800425e:	891b      	ldrh	r3, [r3, #8]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	4b62      	ldr	r3, [pc, #392]	; (80043ec <UARTstateManagement+0x544>)
 8004264:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004266:	4b61      	ldr	r3, [pc, #388]	; (80043ec <UARTstateManagement+0x544>)
 8004268:	791a      	ldrb	r2, [r3, #4]
 800426a:	4b60      	ldr	r3, [pc, #384]	; (80043ec <UARTstateManagement+0x544>)
 800426c:	795b      	ldrb	r3, [r3, #5]
 800426e:	4413      	add	r3, r2
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <UARTstateManagement+0x544>)
 8004274:	799b      	ldrb	r3, [r3, #6]
 8004276:	4413      	add	r3, r2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <UARTstateManagement+0x544>)
 8004280:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8004282:	2208      	movs	r2, #8
 8004284:	4959      	ldr	r1, [pc, #356]	; (80043ec <UARTstateManagement+0x544>)
 8004286:	4858      	ldr	r0, [pc, #352]	; (80043e8 <UARTstateManagement+0x540>)
 8004288:	f005 fef4 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 800428c:	e171      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 10;
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <UARTstateManagement+0x528>)
 8004290:	220a      	movs	r2, #10
 8004292:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8004294:	4b51      	ldr	r3, [pc, #324]	; (80043dc <UARTstateManagement+0x534>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f901 	bl	80004a0 <__aeabi_f2d>
 800429e:	a348      	add	r3, pc, #288	; (adr r3, 80043c0 <UARTstateManagement+0x518>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc f954 	bl	8000550 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	a345      	add	r3, pc, #276	; (adr r3, 80043c8 <UARTstateManagement+0x520>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f94b 	bl	8000550 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <UARTstateManagement+0x550>)
 80042c8:	f7fc fa6c 	bl	80007a4 <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7fc fb4e 	bl	8000974 <__aeabi_d2uiz>
 80042d8:	4603      	mov	r3, r0
 80042da:	b29a      	uxth	r2, r3
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <UARTstateManagement+0x554>)
 80042de:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80042e0:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <UARTstateManagement+0x52c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d004      	beq.n	80042f2 <UARTstateManagement+0x44a>
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <UARTstateManagement+0x534>)
 80042ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d126      	bne.n	8004340 <UARTstateManagement+0x498>
 80042f2:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <UARTstateManagement+0x53c>)
 80042f4:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <UARTstateManagement+0x544>)
 80042f8:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <UARTstateManagement+0x544>)
 80042fc:	229a      	movs	r2, #154	; 0x9a
 80042fe:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <UARTstateManagement+0x554>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	b29b      	uxth	r3, r3
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <UARTstateManagement+0x544>)
 800430c:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 800430e:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <UARTstateManagement+0x554>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	4b35      	ldr	r3, [pc, #212]	; (80043ec <UARTstateManagement+0x544>)
 8004316:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <UARTstateManagement+0x544>)
 800431a:	789a      	ldrb	r2, [r3, #2]
 800431c:	4b33      	ldr	r3, [pc, #204]	; (80043ec <UARTstateManagement+0x544>)
 800431e:	78db      	ldrb	r3, [r3, #3]
 8004320:	4413      	add	r3, r2
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <UARTstateManagement+0x544>)
 8004326:	791b      	ldrb	r3, [r3, #4]
 8004328:	4413      	add	r3, r2
 800432a:	b2db      	uxtb	r3, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <UARTstateManagement+0x544>)
 8004332:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004334:	2206      	movs	r2, #6
 8004336:	492d      	ldr	r1, [pc, #180]	; (80043ec <UARTstateManagement+0x544>)
 8004338:	482b      	ldr	r0, [pc, #172]	; (80043e8 <UARTstateManagement+0x540>)
 800433a:	f005 fe9b 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 800433e:	e118      	b.n	8004572 <UARTstateManagement+0x6ca>
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <UARTstateManagement+0x548>)
 8004342:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <UARTstateManagement+0x544>)
 8004346:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <UARTstateManagement+0x54c>)
 800434a:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <UARTstateManagement+0x53c>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <UARTstateManagement+0x544>)
 8004352:	229a      	movs	r2, #154	; 0x9a
 8004354:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <UARTstateManagement+0x558>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d110      	bne.n	8004380 <UARTstateManagement+0x4d8>
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <UARTstateManagement+0x534>)
 8004360:	edd3 7a00 	vldr	s15, [r3]
 8004364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004370:	d806      	bhi.n	8004380 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <UARTstateManagement+0x544>)
 8004374:	2200      	movs	r2, #0
 8004376:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <UARTstateManagement+0x544>)
 800437a:	2200      	movs	r2, #0
 800437c:	719a      	strb	r2, [r3, #6]
 800437e:	e00b      	b.n	8004398 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8004380:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <UARTstateManagement+0x554>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	b29b      	uxth	r3, r3
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <UARTstateManagement+0x544>)
 800438c:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <UARTstateManagement+0x554>)
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b15      	ldr	r3, [pc, #84]	; (80043ec <UARTstateManagement+0x544>)
 8004396:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <UARTstateManagement+0x544>)
 800439a:	791a      	ldrb	r2, [r3, #4]
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <UARTstateManagement+0x544>)
 800439e:	795b      	ldrb	r3, [r3, #5]
 80043a0:	4413      	add	r3, r2
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <UARTstateManagement+0x544>)
 80043a6:	799b      	ldrb	r3, [r3, #6]
 80043a8:	4413      	add	r3, r2
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <UARTstateManagement+0x544>)
 80043b2:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80043b4:	2208      	movs	r2, #8
 80043b6:	490d      	ldr	r1, [pc, #52]	; (80043ec <UARTstateManagement+0x544>)
 80043b8:	480b      	ldr	r0, [pc, #44]	; (80043e8 <UARTstateManagement+0x540>)
 80043ba:	f005 fe5b 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 80043be:	e0d8      	b.n	8004572 <UARTstateManagement+0x6ca>
 80043c0:	00000000 	.word	0x00000000
 80043c4:	40c38800 	.word	0x40c38800
 80043c8:	54442d18 	.word	0x54442d18
 80043cc:	400921fb 	.word	0x400921fb
 80043d0:	200006f8 	.word	0x200006f8
 80043d4:	200006f4 	.word	0x200006f4
 80043d8:	200006f5 	.word	0x200006f5
 80043dc:	20000664 	.word	0x20000664
 80043e0:	200006f0 	.word	0x200006f0
 80043e4:	2000002c 	.word	0x2000002c
 80043e8:	20000560 	.word	0x20000560
 80043ec:	200006c4 	.word	0x200006c4
 80043f0:	20000030 	.word	0x20000030
 80043f4:	200006c6 	.word	0x200006c6
 80043f8:	40668000 	.word	0x40668000
 80043fc:	200006d4 	.word	0x200006d4
 8004400:	200006f3 	.word	0x200006f3
					modeNo = 11;
 8004404:	4b60      	ldr	r3, [pc, #384]	; (8004588 <UARTstateManagement+0x6e0>)
 8004406:	220b      	movs	r2, #11
 8004408:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 800440a:	4b60      	ldr	r3, [pc, #384]	; (800458c <UARTstateManagement+0x6e4>)
 800440c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004410:	eeb0 0a67 	vmov.f32	s0, s15
 8004414:	f7fd f9d1 	bl	80017ba <AbsVal>
 8004418:	ee10 3a10 	vmov	r3, s0
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc f83f 	bl	80004a0 <__aeabi_f2d>
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	4b5a      	ldr	r3, [pc, #360]	; (8004590 <UARTstateManagement+0x6e8>)
 8004428:	f7fc f9bc 	bl	80007a4 <__aeabi_ddiv>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	a352      	add	r3, pc, #328	; (adr r3, 8004580 <UARTstateManagement+0x6d8>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f889 	bl	8000550 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	4b52      	ldr	r3, [pc, #328]	; (8004594 <UARTstateManagement+0x6ec>)
 800444c:	f7fc f9aa 	bl	80007a4 <__aeabi_ddiv>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	f7fc fa8c 	bl	8000974 <__aeabi_d2uiz>
 800445c:	4603      	mov	r3, r0
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <UARTstateManagement+0x6f0>)
 8004462:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004464:	4b4d      	ldr	r3, [pc, #308]	; (800459c <UARTstateManagement+0x6f4>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d004      	beq.n	8004476 <UARTstateManagement+0x5ce>
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <UARTstateManagement+0x6e4>)
 800446e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11e      	bne.n	80044b4 <UARTstateManagement+0x60c>
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <UARTstateManagement+0x6f8>)
 8004478:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800447a:	4b4a      	ldr	r3, [pc, #296]	; (80045a4 <UARTstateManagement+0x6fc>)
 800447c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 800447e:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <UARTstateManagement+0x6fc>)
 8004480:	229b      	movs	r2, #155	; 0x9b
 8004482:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8004484:	4b44      	ldr	r3, [pc, #272]	; (8004598 <UARTstateManagement+0x6f0>)
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <UARTstateManagement+0x6fc>)
 800448a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800448c:	4b45      	ldr	r3, [pc, #276]	; (80045a4 <UARTstateManagement+0x6fc>)
 800448e:	789a      	ldrb	r2, [r3, #2]
 8004490:	4b44      	ldr	r3, [pc, #272]	; (80045a4 <UARTstateManagement+0x6fc>)
 8004492:	78db      	ldrb	r3, [r3, #3]
 8004494:	4413      	add	r3, r2
 8004496:	b2da      	uxtb	r2, r3
 8004498:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <UARTstateManagement+0x6fc>)
 800449a:	791b      	ldrb	r3, [r3, #4]
 800449c:	4413      	add	r3, r2
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044a6:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80044a8:	2206      	movs	r2, #6
 80044aa:	493e      	ldr	r1, [pc, #248]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044ac:	483e      	ldr	r0, [pc, #248]	; (80045a8 <UARTstateManagement+0x700>)
 80044ae:	f005 fde1 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 80044b2:	e05e      	b.n	8004572 <UARTstateManagement+0x6ca>
 80044b4:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <UARTstateManagement+0x704>)
 80044b6:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044ba:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80044bc:	4a3c      	ldr	r2, [pc, #240]	; (80045b0 <UARTstateManagement+0x708>)
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <UARTstateManagement+0x6f8>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044c6:	229b      	movs	r2, #155	; 0x9b
 80044c8:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <UARTstateManagement+0x6f0>)
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044d0:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044d4:	791a      	ldrb	r2, [r3, #4]
 80044d6:	4b33      	ldr	r3, [pc, #204]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044d8:	795b      	ldrb	r3, [r3, #5]
 80044da:	4413      	add	r3, r2
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044e0:	799b      	ldrb	r3, [r3, #6]
 80044e2:	4413      	add	r3, r2
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044ec:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80044ee:	2208      	movs	r2, #8
 80044f0:	492c      	ldr	r1, [pc, #176]	; (80045a4 <UARTstateManagement+0x6fc>)
 80044f2:	482d      	ldr	r0, [pc, #180]	; (80045a8 <UARTstateManagement+0x700>)
 80044f4:	f005 fdbe 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 80044f8:	e03b      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 12;
 80044fa:	4b23      	ldr	r3, [pc, #140]	; (8004588 <UARTstateManagement+0x6e0>)
 80044fc:	220c      	movs	r2, #12
 80044fe:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <UARTstateManagement+0x70c>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004506:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <UARTstateManagement+0x710>)
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <UARTstateManagement+0x714>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8004512:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <UARTstateManagement+0x718>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <UARTstateManagement+0x71c>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800451e:	2202      	movs	r2, #2
 8004520:	491f      	ldr	r1, [pc, #124]	; (80045a0 <UARTstateManagement+0x6f8>)
 8004522:	4821      	ldr	r0, [pc, #132]	; (80045a8 <UARTstateManagement+0x700>)
 8004524:	f005 fda6 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8004528:	e023      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 13;
 800452a:	4b17      	ldr	r3, [pc, #92]	; (8004588 <UARTstateManagement+0x6e0>)
 800452c:	220d      	movs	r2, #13
 800452e:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004530:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <UARTstateManagement+0x71c>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004536:	2202      	movs	r2, #2
 8004538:	4919      	ldr	r1, [pc, #100]	; (80045a0 <UARTstateManagement+0x6f8>)
 800453a:	481b      	ldr	r0, [pc, #108]	; (80045a8 <UARTstateManagement+0x700>)
 800453c:	f005 fd9a 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 8004540:	e017      	b.n	8004572 <UARTstateManagement+0x6ca>
					modeNo = 14;
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <UARTstateManagement+0x6e0>)
 8004544:	220e      	movs	r2, #14
 8004546:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <UARTstateManagement+0x6e4>)
 800454a:	edd3 7a05 	vldr	s15, [r3, #20]
 800454e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80045c8 <UARTstateManagement+0x720>
 8004552:	eeb0 0a67 	vmov.f32	s0, s15
 8004556:	f000 fbe5 	bl	8004d24 <RobotRunToPositon>
					homingFlag = 1;
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <UARTstateManagement+0x724>)
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004560:	2202      	movs	r2, #2
 8004562:	490f      	ldr	r1, [pc, #60]	; (80045a0 <UARTstateManagement+0x6f8>)
 8004564:	4810      	ldr	r0, [pc, #64]	; (80045a8 <UARTstateManagement+0x700>)
 8004566:	f005 fd85 	bl	800a074 <HAL_UART_Transmit_DMA>
					break;
 800456a:	e002      	b.n	8004572 <UARTstateManagement+0x6ca>
			break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <UARTstateManagement+0x6ca>
			break;
 8004570:	bf00      	nop
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	f3af 8000 	nop.w
 8004580:	00000000 	.word	0x00000000
 8004584:	406fe000 	.word	0x406fe000
 8004588:	200006f8 	.word	0x200006f8
 800458c:	20000664 	.word	0x20000664
 8004590:	40180000 	.word	0x40180000
 8004594:	40240000 	.word	0x40240000
 8004598:	200006d6 	.word	0x200006d6
 800459c:	200006f4 	.word	0x200006f4
 80045a0:	2000002c 	.word	0x2000002c
 80045a4:	200006c4 	.word	0x200006c4
 80045a8:	20000560 	.word	0x20000560
 80045ac:	20000030 	.word	0x20000030
 80045b0:	200006c6 	.word	0x200006c6
 80045b4:	20000699 	.word	0x20000699
 80045b8:	20000901 	.word	0x20000901
 80045bc:	20000900 	.word	0x20000900
 80045c0:	20000000 	.word	0x20000000
 80045c4:	200006f2 	.word	0x200006f2
 80045c8:	424c0000 	.word	0x424c0000
 80045cc:	200006f3 	.word	0x200006f3

080045d0 <RobotstateManagement>:

void RobotstateManagement()
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	switch (RobotState)
 80045d4:	4b91      	ldr	r3, [pc, #580]	; (800481c <RobotstateManagement+0x24c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	f200 811d 	bhi.w	8004818 <RobotstateManagement+0x248>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <RobotstateManagement+0x14>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800466d 	.word	0x0800466d
 80045f0:	0800480f 	.word	0x0800480f
 80045f4:	080047f9 	.word	0x080047f9
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 80045f8:	4b89      	ldr	r3, [pc, #548]	; (8004820 <RobotstateManagement+0x250>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 8004600:	eddf 0a88 	vldr	s1, [pc, #544]	; 8004824 <RobotstateManagement+0x254>
 8004604:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8004828 <RobotstateManagement+0x258>
 8004608:	f000 fb8c 	bl	8004d24 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 800460c:	4b83      	ldr	r3, [pc, #524]	; (800481c <RobotstateManagement+0x24c>)
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
			break;
 8004612:	e101      	b.n	8004818 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8004614:	4b82      	ldr	r3, [pc, #520]	; (8004820 <RobotstateManagement+0x250>)
 8004616:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 80f9 	bne.w	8004812 <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 8004620:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <RobotstateManagement+0x250>)
 8004622:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004626:	2b02      	cmp	r3, #2
 8004628:	d111      	bne.n	800464e <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 800462a:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <RobotstateManagement+0x250>)
 800462c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004630:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8004824 <RobotstateManagement+0x254>
 8004634:	eeb0 0a67 	vmov.f32	s0, s15
 8004638:	f000 fb74 	bl	8004d24 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 800463c:	4b78      	ldr	r3, [pc, #480]	; (8004820 <RobotstateManagement+0x250>)
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 8004644:	4b76      	ldr	r3, [pc, #472]	; (8004820 <RobotstateManagement+0x250>)
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 800464c:	e0e1      	b.n	8004812 <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 800464e:	4b74      	ldr	r3, [pc, #464]	; (8004820 <RobotstateManagement+0x250>)
 8004650:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004654:	2b03      	cmp	r3, #3
 8004656:	f040 80dc 	bne.w	8004812 <RobotstateManagement+0x242>
					RobotResetAll();
 800465a:	f000 fb9d 	bl	8004d98 <RobotResetAll>
					UARTState = MCUConnect;
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <RobotstateManagement+0x25c>)
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004664:	4b6d      	ldr	r3, [pc, #436]	; (800481c <RobotstateManagement+0x24c>)
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
			break;
 800466a:	e0d2      	b.n	8004812 <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 800466c:	4b70      	ldr	r3, [pc, #448]	; (8004830 <RobotstateManagement+0x260>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10e      	bne.n	8004692 <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 8004674:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <RobotstateManagement+0x250>)
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <RobotstateManagement+0x250>)
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <RobotstateManagement+0x250>)
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 800468c:	4b68      	ldr	r3, [pc, #416]	; (8004830 <RobotstateManagement+0x260>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8004692:	4b68      	ldr	r3, [pc, #416]	; (8004834 <RobotstateManagement+0x264>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d159      	bne.n	800474e <RobotstateManagement+0x17e>
 800469a:	4b61      	ldr	r3, [pc, #388]	; (8004820 <RobotstateManagement+0x250>)
 800469c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d154      	bne.n	800474e <RobotstateManagement+0x17e>
 80046a4:	4b64      	ldr	r3, [pc, #400]	; (8004838 <RobotstateManagement+0x268>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d150      	bne.n	800474e <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80046ac:	2201      	movs	r2, #1
 80046ae:	2108      	movs	r1, #8
 80046b0:	4862      	ldr	r0, [pc, #392]	; (800483c <RobotstateManagement+0x26c>)
 80046b2:	f001 fecb 	bl	800644c <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 80046b6:	4b62      	ldr	r3, [pc, #392]	; (8004840 <RobotstateManagement+0x270>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d11d      	bne.n	80046fa <RobotstateManagement+0x12a>
 80046be:	4b61      	ldr	r3, [pc, #388]	; (8004844 <RobotstateManagement+0x274>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d119      	bne.n	80046fa <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 80046c6:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <RobotstateManagement+0x274>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 80046cc:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <RobotstateManagement+0x278>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a53      	ldr	r2, [pc, #332]	; (8004820 <RobotstateManagement+0x250>)
 80046d2:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80046d4:	4b52      	ldr	r3, [pc, #328]	; (8004820 <RobotstateManagement+0x250>)
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	4b51      	ldr	r3, [pc, #324]	; (8004820 <RobotstateManagement+0x250>)
 80046dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80046e0:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <RobotstateManagement+0x250>)
 80046e2:	edd3 6a08 	vldr	s13, [r3, #32]
 80046e6:	eeb0 1a66 	vmov.f32	s2, s13
 80046ea:	eef0 0a47 	vmov.f32	s1, s14
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	4856      	ldr	r0, [pc, #344]	; (800484c <RobotstateManagement+0x27c>)
 80046f4:	f7fd f884 	bl	8001800 <CoefficientAndTimeCalculation>
 80046f8:	e029      	b.n	800474e <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 80046fa:	4b51      	ldr	r3, [pc, #324]	; (8004840 <RobotstateManagement+0x270>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d125      	bne.n	800474e <RobotstateManagement+0x17e>
 8004702:	4b50      	ldr	r3, [pc, #320]	; (8004844 <RobotstateManagement+0x274>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d121      	bne.n	800474e <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 800470a:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <RobotstateManagement+0x274>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <RobotstateManagement+0x280>)
 8004712:	f993 3000 	ldrsb.w	r3, [r3]
 8004716:	461a      	mov	r2, r3
 8004718:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <RobotstateManagement+0x284>)
 800471a:	5c9b      	ldrb	r3, [r3, r2]
 800471c:	3b01      	subs	r3, #1
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <RobotstateManagement+0x288>)
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3e      	ldr	r2, [pc, #248]	; (8004820 <RobotstateManagement+0x250>)
 8004728:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <RobotstateManagement+0x250>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <RobotstateManagement+0x250>)
 8004732:	ed93 7a03 	vldr	s14, [r3, #12]
 8004736:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <RobotstateManagement+0x250>)
 8004738:	edd3 6a08 	vldr	s13, [r3, #32]
 800473c:	eeb0 1a66 	vmov.f32	s2, s13
 8004740:	eef0 0a47 	vmov.f32	s1, s14
 8004744:	eeb0 0a67 	vmov.f32	s0, s15
 8004748:	4840      	ldr	r0, [pc, #256]	; (800484c <RobotstateManagement+0x27c>)
 800474a:	f7fd f859 	bl	8001800 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 800474e:	4b3a      	ldr	r3, [pc, #232]	; (8004838 <RobotstateManagement+0x268>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d132      	bne.n	80047bc <RobotstateManagement+0x1ec>
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <RobotstateManagement+0x274>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d12e      	bne.n	80047bc <RobotstateManagement+0x1ec>
 800475e:	4b35      	ldr	r3, [pc, #212]	; (8004834 <RobotstateManagement+0x264>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d12a      	bne.n	80047bc <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <RobotstateManagement+0x250>)
 8004768:	ed93 7a03 	vldr	s14, [r3, #12]
 800476c:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <RobotstateManagement+0x250>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004776:	eeb0 0a67 	vmov.f32	s0, s15
 800477a:	f7fd f81e 	bl	80017ba <AbsVal>
 800477e:	eef0 7a40 	vmov.f32	s15, s0
 8004782:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	d515      	bpl.n	80047bc <RobotstateManagement+0x1ec>
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <RobotstateManagement+0x250>)
 8004792:	edd3 7a01 	vldr	s15, [r3, #4]
 8004796:	eeb0 0a67 	vmov.f32	s0, s15
 800479a:	f7fd f80e 	bl	80017ba <AbsVal>
 800479e:	eef0 7a40 	vmov.f32	s15, s0
 80047a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	d505      	bpl.n	80047bc <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <RobotstateManagement+0x268>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <RobotstateManagement+0x274>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <RobotstateManagement+0x274>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d128      	bne.n	8004816 <RobotstateManagement+0x246>
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <RobotstateManagement+0x264>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d124      	bne.n	8004816 <RobotstateManagement+0x246>
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <RobotstateManagement+0x250>)
 80047ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11f      	bne.n	8004816 <RobotstateManagement+0x246>
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <RobotstateManagement+0x268>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d11b      	bne.n	8004816 <RobotstateManagement+0x246>
				RobotState = EndEff;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <RobotstateManagement+0x24c>)
 80047e0:	2203      	movs	r2, #3
 80047e2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <RobotstateManagement+0x28c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <RobotstateManagement+0x290>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <RobotstateManagement+0x294>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80047f6:	e00e      	b.n	8004816 <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <RobotstateManagement+0x250>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8004800:	4819      	ldr	r0, [pc, #100]	; (8004868 <RobotstateManagement+0x298>)
 8004802:	f7fc fdb5 	bl	8001370 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8004806:	4819      	ldr	r0, [pc, #100]	; (800486c <RobotstateManagement+0x29c>)
 8004808:	f7fc fdb2 	bl	8001370 <PIDAController_Init>
			// Luv u pls pass
			break;
 800480c:	e004      	b.n	8004818 <RobotstateManagement+0x248>
			break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <RobotstateManagement+0x248>
			break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <RobotstateManagement+0x248>
			break;
 8004816:	bf00      	nop
	}
}
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000699 	.word	0x20000699
 8004820:	20000664 	.word	0x20000664
 8004824:	424c0000 	.word	0x424c0000
 8004828:	43b40000 	.word	0x43b40000
 800482c:	20000698 	.word	0x20000698
 8004830:	200006f7 	.word	0x200006f7
 8004834:	200006f4 	.word	0x200006f4
 8004838:	200006f2 	.word	0x200006f2
 800483c:	40020400 	.word	0x40020400
 8004840:	200006f1 	.word	0x200006f1
 8004844:	200006f5 	.word	0x200006f5
 8004848:	200006dc 	.word	0x200006dc
 800484c:	200007f4 	.word	0x200007f4
 8004850:	200006f0 	.word	0x200006f0
 8004854:	200006e0 	.word	0x200006e0
 8004858:	20000004 	.word	0x20000004
 800485c:	20000901 	.word	0x20000901
 8004860:	20000900 	.word	0x20000900
 8004864:	20000000 	.word	0x20000000
 8004868:	20000788 	.word	0x20000788
 800486c:	200007bc 	.word	0x200007bc

08004870 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8004878:	4ba6      	ldr	r3, [pc, #664]	; (8004b14 <EndEffstateManagement+0x2a4>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b04      	cmp	r3, #4
 800487e:	f200 8144 	bhi.w	8004b0a <EndEffstateManagement+0x29a>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <EndEffstateManagement+0x18>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	0800489d 	.word	0x0800489d
 800488c:	080048a5 	.word	0x080048a5
 8004890:	0800495f 	.word	0x0800495f
 8004894:	080049dd 	.word	0x080049dd
 8004898:	08004a05 	.word	0x08004a05
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 800489c:	4b9e      	ldr	r3, [pc, #632]	; (8004b18 <EndEffstateManagement+0x2a8>)
 800489e:	2203      	movs	r2, #3
 80048a0:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 80048a2:	e132      	b.n	8004b0a <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80048a4:	4b9d      	ldr	r3, [pc, #628]	; (8004b1c <EndEffstateManagement+0x2ac>)
 80048a6:	2223      	movs	r2, #35	; 0x23
 80048a8:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80048aa:	489c      	ldr	r0, [pc, #624]	; (8004b1c <EndEffstateManagement+0x2ac>)
 80048ac:	f000 f956 	bl	8004b5c <I2CWriteFcn>
			check[0]++;
 80048b0:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <EndEffstateManagement+0x2b0>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	1c51      	adds	r1, r2, #1
 80048b8:	6139      	str	r1, [r7, #16]
 80048ba:	f143 0300 	adc.w	r3, r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	4b97      	ldr	r3, [pc, #604]	; (8004b20 <EndEffstateManagement+0x2b0>)
 80048c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048c6:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80048ca:	4b96      	ldr	r3, [pc, #600]	; (8004b24 <EndEffstateManagement+0x2b4>)
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 8112 	bne.w	8004afc <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 80048d8:	4893      	ldr	r0, [pc, #588]	; (8004b28 <EndEffstateManagement+0x2b8>)
 80048da:	f000 f965 	bl	8004ba8 <I2CReadFcn>
				check[1]++;
 80048de:	4b90      	ldr	r3, [pc, #576]	; (8004b20 <EndEffstateManagement+0x2b0>)
 80048e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048e4:	1c51      	adds	r1, r2, #1
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	f143 0300 	adc.w	r3, r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <EndEffstateManagement+0x2b0>)
 80048f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048f4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80048f8:	4b8a      	ldr	r3, [pc, #552]	; (8004b24 <EndEffstateManagement+0x2b4>)
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80fb 	bne.w	8004afc <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8004906:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b78      	cmp	r3, #120	; 0x78
 800490c:	d119      	bne.n	8004942 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 800490e:	4b84      	ldr	r3, [pc, #528]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004910:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004914:	1c51      	adds	r1, r2, #1
 8004916:	6039      	str	r1, [r7, #0]
 8004918:	f143 0300 	adc.w	r3, r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	4b80      	ldr	r3, [pc, #512]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004920:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004924:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8004928:	4b7a      	ldr	r3, [pc, #488]	; (8004b14 <EndEffstateManagement+0x2a4>)
 800492a:	2202      	movs	r2, #2
 800492c:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 800492e:	4b7f      	ldr	r3, [pc, #508]	; (8004b2c <EndEffstateManagement+0x2bc>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <EndEffstateManagement+0x2c0>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 800493a:	4b7e      	ldr	r3, [pc, #504]	; (8004b34 <EndEffstateManagement+0x2c4>)
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004940:	e0dc      	b.n	8004afc <EndEffstateManagement+0x28c>
						check[3]++;
 8004942:	4b77      	ldr	r3, [pc, #476]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004944:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004948:	f112 0a01 	adds.w	sl, r2, #1
 800494c:	f143 0b00 	adc.w	fp, r3, #0
 8004950:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004952:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 8004956:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <EndEffstateManagement+0x2a4>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
		break;
 800495c:	e0ce      	b.n	8004afc <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 800495e:	4b73      	ldr	r3, [pc, #460]	; (8004b2c <EndEffstateManagement+0x2bc>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d11d      	bne.n	80049a2 <EndEffstateManagement+0x132>
				check[4]++;
 8004966:	4b6e      	ldr	r3, [pc, #440]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800496c:	1c50      	adds	r0, r2, #1
 800496e:	f143 0100 	adc.w	r1, r3, #0
 8004972:	4b6b      	ldr	r3, [pc, #428]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004974:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8004978:	4b68      	ldr	r3, [pc, #416]	; (8004b1c <EndEffstateManagement+0x2ac>)
 800497a:	2245      	movs	r2, #69	; 0x45
 800497c:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 800497e:	4867      	ldr	r0, [pc, #412]	; (8004b1c <EndEffstateManagement+0x2ac>)
 8004980:	f000 f8ec 	bl	8004b5c <I2CWriteFcn>
				openLaserWriteFlag = 0;
 8004984:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <EndEffstateManagement+0x2bc>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 800498a:	f000 fb2b 	bl	8004fe4 <Micros>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4969      	ldr	r1, [pc, #420]	; (8004b38 <EndEffstateManagement+0x2c8>)
 8004994:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004998:	2201      	movs	r2, #1
 800499a:	2110      	movs	r1, #16
 800499c:	4867      	ldr	r0, [pc, #412]	; (8004b3c <EndEffstateManagement+0x2cc>)
 800499e:	f001 fd55 	bl	800644c <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 80049a2:	4b60      	ldr	r3, [pc, #384]	; (8004b24 <EndEffstateManagement+0x2b4>)
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	f040 80a8 	bne.w	8004b00 <EndEffstateManagement+0x290>
 80049b0:	f000 fb18 	bl	8004fe4 <Micros>
 80049b4:	4b60      	ldr	r3, [pc, #384]	; (8004b38 <EndEffstateManagement+0x2c8>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	1a84      	subs	r4, r0, r2
 80049bc:	eb61 0503 	sbc.w	r5, r1, r3
 80049c0:	f24c 3351 	movw	r3, #50001	; 0xc351
 80049c4:	429c      	cmp	r4, r3
 80049c6:	f175 0300 	sbcs.w	r3, r5, #0
 80049ca:	f0c0 8099 	bcc.w	8004b00 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 80049ce:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <EndEffstateManagement+0x2a4>)
 80049d0:	2203      	movs	r2, #3
 80049d2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80049d4:	4b56      	ldr	r3, [pc, #344]	; (8004b30 <EndEffstateManagement+0x2c0>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80049da:	e091      	b.n	8004b00 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <EndEffstateManagement+0x2ac>)
 80049de:	2223      	movs	r2, #35	; 0x23
 80049e0:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80049e2:	484e      	ldr	r0, [pc, #312]	; (8004b1c <EndEffstateManagement+0x2ac>)
 80049e4:	f000 f8ba 	bl	8004b5c <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80049e8:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <EndEffstateManagement+0x2b4>)
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	f040 8087 	bne.w	8004b04 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <EndEffstateManagement+0x2a4>)
 80049f8:	2204      	movs	r2, #4
 80049fa:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <EndEffstateManagement+0x2c4>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a02:	e07f      	b.n	8004b04 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8004a04:	4848      	ldr	r0, [pc, #288]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004a06:	f000 f8cf 	bl	8004ba8 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a0a:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <EndEffstateManagement+0x2b4>)
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d178      	bne.n	8004b08 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 8004a16:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <EndEffstateManagement+0x2c4>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004a1c:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b78      	cmp	r3, #120	; 0x78
 8004a22:	d141      	bne.n	8004aa8 <EndEffstateManagement+0x238>
				{
					check[5]++;
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004a26:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a2a:	f112 0801 	adds.w	r8, r2, #1
 8004a2e:	f143 0900 	adc.w	r9, r3, #0
 8004a32:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <EndEffstateManagement+0x2b0>)
 8004a34:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	483f      	ldr	r0, [pc, #252]	; (8004b3c <EndEffstateManagement+0x2cc>)
 8004a3e:	f001 fd05 	bl	800644c <HAL_GPIO_WritePin>
					EndEffState = idle;
 8004a42:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <EndEffstateManagement+0x2a4>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004a48:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <EndEffstateManagement+0x2a8>)
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004a4e:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <EndEffstateManagement+0x2d0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <EndEffstateManagement+0x2d4>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d002      	beq.n	8004a62 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <EndEffstateManagement+0x2d4>)
 8004a5e:	2202      	movs	r2, #2
 8004a60:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 8004a62:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <EndEffstateManagement+0x2d8>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d14e      	bne.n	8004b08 <EndEffstateManagement+0x298>
						goalIDX++;
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <EndEffstateManagement+0x2dc>)
 8004a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	b25a      	sxtb	r2, r3
 8004a78:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <EndEffstateManagement+0x2dc>)
 8004a7a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <EndEffstateManagement+0x2e0>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <EndEffstateManagement+0x2dc>)
 8004a84:	f993 3000 	ldrsb.w	r3, [r3]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dc09      	bgt.n	8004aa0 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <EndEffstateManagement+0x2dc>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004a92:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <EndEffstateManagement+0x2e4>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <EndEffstateManagement+0x2d8>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004a9e:	e033      	b.n	8004b08 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8004aa0:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <EndEffstateManagement+0x2e8>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
			break;
 8004aa6:	e02f      	b.n	8004b08 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b12      	cmp	r3, #18
 8004aae:	d109      	bne.n	8004ac4 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <EndEffstateManagement+0x2a8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <EndEffstateManagement+0x2a4>)
 8004ab8:	2203      	movs	r2, #3
 8004aba:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <EndEffstateManagement+0x2c0>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
			break;
 8004ac2:	e021      	b.n	8004b08 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b34      	cmp	r3, #52	; 0x34
 8004aca:	d109      	bne.n	8004ae0 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <EndEffstateManagement+0x2a8>)
 8004ace:	2202      	movs	r2, #2
 8004ad0:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <EndEffstateManagement+0x2a4>)
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <EndEffstateManagement+0x2c0>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
			break;
 8004ade:	e013      	b.n	8004b08 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <EndEffstateManagement+0x2b8>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b56      	cmp	r3, #86	; 0x56
 8004ae6:	d10f      	bne.n	8004b08 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <EndEffstateManagement+0x2a8>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <EndEffstateManagement+0x2a4>)
 8004af0:	2203      	movs	r2, #3
 8004af2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <EndEffstateManagement+0x2c0>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
			break;
 8004afa:	e005      	b.n	8004b08 <EndEffstateManagement+0x298>
		break;
 8004afc:	bf00      	nop
 8004afe:	e004      	b.n	8004b0a <EndEffstateManagement+0x29a>
			break;
 8004b00:	bf00      	nop
 8004b02:	e002      	b.n	8004b0a <EndEffstateManagement+0x29a>
			break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <EndEffstateManagement+0x29a>
			break;
 8004b08:	bf00      	nop
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b14:	20000000 	.word	0x20000000
 8004b18:	20000001 	.word	0x20000001
 8004b1c:	20000908 	.word	0x20000908
 8004b20:	20000718 	.word	0x20000718
 8004b24:	200003ec 	.word	0x200003ec
 8004b28:	20000904 	.word	0x20000904
 8004b2c:	200006f6 	.word	0x200006f6
 8004b30:	20000901 	.word	0x20000901
 8004b34:	20000900 	.word	0x20000900
 8004b38:	200008f0 	.word	0x200008f0
 8004b3c:	40020400 	.word	0x40020400
 8004b40:	200006f2 	.word	0x200006f2
 8004b44:	20000699 	.word	0x20000699
 8004b48:	200006f4 	.word	0x200006f4
 8004b4c:	200006f0 	.word	0x200006f0
 8004b50:	200006ef 	.word	0x200006ef
 8004b54:	200006f1 	.word	0x200006f1
 8004b58:	200006f7 	.word	0x200006f7

08004b5c <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8004b64:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <I2CWriteFcn+0x40>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d112      	bne.n	8004b92 <I2CWriteFcn+0x36>
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <I2CWriteFcn+0x44>)
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d10c      	bne.n	8004b92 <I2CWriteFcn+0x36>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <I2CWriteFcn+0x48>)
 8004b7e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8004b80:	2301      	movs	r3, #1
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <I2CWriteFcn+0x48>)
 8004b84:	2146      	movs	r1, #70	; 0x46
 8004b86:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <I2CWriteFcn+0x44>)
 8004b88:	f001 fdf0 	bl	800676c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <I2CWriteFcn+0x40>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
	}
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000901 	.word	0x20000901
 8004ba0:	200003ec 	.word	0x200003ec
 8004ba4:	2000091c 	.word	0x2000091c

08004ba8 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <I2CReadFcn+0x38>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10e      	bne.n	8004bd6 <I2CReadFcn+0x2e>
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <I2CReadFcn+0x3c>)
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d108      	bne.n	8004bd6 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	2146      	movs	r1, #70	; 0x46
 8004bca:	4806      	ldr	r0, [pc, #24]	; (8004be4 <I2CReadFcn+0x3c>)
 8004bcc:	f001 fe74 	bl	80068b8 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <I2CReadFcn+0x38>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
	}
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000900 	.word	0x20000900
 8004be4:	200003ec 	.word	0x200003ec

08004be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfa:	d103      	bne.n	8004c04 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	483e      	ldr	r0, [pc, #248]	; (8004cf8 <HAL_GPIO_EXTI_Callback+0x110>)
 8004c00:	f001 fc3d 	bl	800647e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0a:	d13e      	bne.n	8004c8a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_GPIO_EXTI_Callback+0x114>)
 8004c0e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d139      	bne.n	8004c8a <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4939      	ldr	r1, [pc, #228]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c22:	0083      	lsls	r3, r0, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b33      	ldr	r3, [pc, #204]	; (8004d00 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c32:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004c34:	4b32      	ldr	r3, [pc, #200]	; (8004d00 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d126      	bne.n	8004c8a <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004c3c:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c44:	edd3 7a00 	vldr	s15, [r3]
 8004c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d0c <HAL_GPIO_EXTI_Callback+0x124>
 8004c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	dd04      	ble.n	8004c64 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8004c5a:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <HAL_GPIO_EXTI_Callback+0x114>)
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	615a      	str	r2, [r3, #20]
 8004c62:	e00e      	b.n	8004c82 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004c64:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c66:	ed93 7a00 	vldr	s14, [r3]
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <HAL_GPIO_EXTI_Callback+0x114>)
 8004c7e:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_GPIO_EXTI_Callback+0x114>)
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d12e      	bne.n	8004cee <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <HAL_GPIO_EXTI_Callback+0x128>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_GPIO_EXTI_Callback+0x128>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8004c9e:	f000 f9a1 	bl	8004fe4 <Micros>
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	1a84      	subs	r4, r0, r2
 8004caa:	eb61 0503 	sbc.w	r5, r1, r3
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_GPIO_EXTI_Callback+0x130>)
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	f175 0300 	sbcs.w	r3, r5, #0
 8004cb6:	d31a      	bcc.n	8004cee <HAL_GPIO_EXTI_Callback+0x106>
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <HAL_GPIO_EXTI_Callback+0x128>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d116      	bne.n	8004cee <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8004cc0:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_GPIO_EXTI_Callback+0x134>)
 8004cc2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004cc6:	f112 0801 	adds.w	r8, r2, #1
 8004cca:	f143 0900 	adc.w	r9, r3, #0
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <HAL_GPIO_EXTI_Callback+0x134>)
 8004cd0:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8004cd4:	f000 f986 	bl	8004fe4 <Micros>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	490d      	ldr	r1, [pc, #52]	; (8004d14 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004cde:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_GPIO_EXTI_Callback+0x128>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8004ce8:	480d      	ldr	r0, [pc, #52]	; (8004d20 <HAL_GPIO_EXTI_Callback+0x138>)
 8004cea:	f004 f857 	bl	8008d9c <HAL_TIM_Base_Start_IT>
		}
	}
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	20000664 	.word	0x20000664
 8004d00:	2000068c 	.word	0x2000068c
 8004d04:	20000778 	.word	0x20000778
 8004d08:	20000690 	.word	0x20000690
 8004d0c:	43340000 	.word	0x43340000
 8004d10:	200008e8 	.word	0x200008e8
 8004d14:	200008e0 	.word	0x200008e0
 8004d18:	000186a1 	.word	0x000186a1
 8004d1c:	20000718 	.word	0x20000718
 8004d20:	200004d0 	.word	0x200004d0

08004d24 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d2e:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8004d32:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004d3e:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d40:	edd3 7a00 	vldr	s15, [r3]
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d4c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004d50:	eeb0 1a66 	vmov.f32	s2, s13
 8004d54:	eef0 0a47 	vmov.f32	s1, s14
 8004d58:	eeb0 0a67 	vmov.f32	s0, s15
 8004d5c:	480c      	ldr	r0, [pc, #48]	; (8004d90 <RobotRunToPositon+0x6c>)
 8004d5e:	f7fc fd4f 	bl	8001800 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <RobotRunToPositon+0x68>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	4805      	ldr	r0, [pc, #20]	; (8004d94 <RobotRunToPositon+0x70>)
 8004d80:	f001 fb64 	bl	800644c <HAL_GPIO_WritePin>
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000664 	.word	0x20000664
 8004d90:	200007f4 	.word	0x200007f4
 8004d94:	40020400 	.word	0x40020400

08004d98 <RobotResetAll>:

void RobotResetAll()
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8004d9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004da0:	f000 f866 	bl	8004e70 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <RobotResetAll+0x9c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8004daa:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <RobotResetAll+0x9c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <RobotResetAll+0xa0>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8004db6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8004e3c <RobotResetAll+0xa4>
 8004dba:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004e40 <RobotResetAll+0xa8>
 8004dbe:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004e40 <RobotResetAll+0xa8>
 8004dc2:	4820      	ldr	r0, [pc, #128]	; (8004e44 <RobotResetAll+0xac>)
 8004dc4:	f7fc fd1c 	bl	8001800 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8004dc8:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <RobotResetAll+0xb0>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8004dd0:	491e      	ldr	r1, [pc, #120]	; (8004e4c <RobotResetAll+0xb4>)
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8004dde:	491c      	ldr	r1, [pc, #112]	; (8004e50 <RobotResetAll+0xb8>)
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <RobotResetAll+0xbc>)
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <RobotResetAll+0xbc>)
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8004dfc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004e58 <RobotResetAll+0xc0>
 8004e00:	4816      	ldr	r0, [pc, #88]	; (8004e5c <RobotResetAll+0xc4>)
 8004e02:	f7fc f90d 	bl	8001020 <KalmanMatrixReset>
	Robotinit(&Robot);
 8004e06:	4810      	ldr	r0, [pc, #64]	; (8004e48 <RobotResetAll+0xb0>)
 8004e08:	f7fc fc9e 	bl	8001748 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8004e0c:	4814      	ldr	r0, [pc, #80]	; (8004e60 <RobotResetAll+0xc8>)
 8004e0e:	f7fc faaf 	bl	8001370 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8004e12:	4814      	ldr	r0, [pc, #80]	; (8004e64 <RobotResetAll+0xcc>)
 8004e14:	f7fc faac 	bl	8001370 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <RobotResetAll+0xd0>)
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <RobotResetAll+0xd0>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <RobotResetAll+0xd4>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000768 	.word	0x20000768
 8004e38:	20000770 	.word	0x20000770
 8004e3c:	42700000 	.word	0x42700000
 8004e40:	00000000 	.word	0x00000000
 8004e44:	200007f4 	.word	0x200007f4
 8004e48:	20000664 	.word	0x20000664
 8004e4c:	200008b0 	.word	0x200008b0
 8004e50:	200008b8 	.word	0x200008b8
 8004e54:	20000778 	.word	0x20000778
 8004e58:	447a0000 	.word	0x447a0000
 8004e5c:	20000034 	.word	0x20000034
 8004e60:	20000788 	.word	0x20000788
 8004e64:	200007bc 	.word	0x200007bc
 8004e68:	20000690 	.word	0x20000690
 8004e6c:	2000068c 	.word	0x2000068c

08004e70 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a47      	ldr	r2, [pc, #284]	; (8004fb8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ea8:	eb12 0a01 	adds.w	sl, r2, r1
 8004eac:	f143 0b00 	adc.w	fp, r3, #0
 8004eb0:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004eb2:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a41      	ldr	r2, [pc, #260]	; (8004fc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d177      	bne.n	8004fae <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8004ebe:	2120      	movs	r1, #32
 8004ec0:	4840      	ldr	r0, [pc, #256]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004ec2:	f001 faab 	bl	800641c <HAL_GPIO_ReadPin>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d15b      	bne.n	8004f84 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8004ecc:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004ece:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004ed2:	f112 0801 	adds.w	r8, r2, #1
 8004ed6:	f143 0900 	adc.w	r9, r3, #0
 8004eda:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004edc:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8004ee0:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004eea:	2203      	movs	r2, #3
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8004ef0:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efc:	4831      	ldr	r0, [pc, #196]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004efe:	f001 faa5 	bl	800644c <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d103      	bne.n	8004f12 <HAL_TIM_PeriodElapsedCallback+0x86>
 8004f0a:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_PeriodElapsedCallback+0x8e>
 8004f12:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10b      	bne.n	8004f32 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f20:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f22:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f26:	eef0 0a47 	vmov.f32	s1, s14
 8004f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2e:	f7ff fef9 	bl	8004d24 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8004f3c:	f7ff ff2c 	bl	8004d98 <RobotResetAll>
				RobotState = init;
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e02f      	b.n	8004fa8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8004f48:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f54:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d125      	bne.n	8004fa8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f5e:	2203      	movs	r2, #3
 8004f60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f66:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f70:	eef0 0a47 	vmov.f32	s1, s14
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	f7ff fed4 	bl	8004d24 <RobotRunToPositon>
				RobotState = FindHome;
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e011      	b.n	8004fa8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8004f84:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f86:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004f8a:	1c54      	adds	r4, r2, #1
 8004f8c:	f143 0500 	adc.w	r5, r3, #0
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f92:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f98:	2204      	movs	r2, #4
 8004f9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fa2:	4808      	ldr	r0, [pc, #32]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004fa4:	f001 fa52 	bl	800644c <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8004fa8:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004faa:	f003 ff59 	bl	8008e60 <HAL_TIM_Base_Stop_IT>
	}
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb8:	20000518 	.word	0x20000518
 8004fbc:	20000700 	.word	0x20000700
 8004fc0:	200004d0 	.word	0x200004d0
 8004fc4:	40020400 	.word	0x40020400
 8004fc8:	20000718 	.word	0x20000718
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	20000699 	.word	0x20000699
 8004fd4:	200006f4 	.word	0x200006f4
 8004fd8:	200006f5 	.word	0x200006f5
 8004fdc:	200006f3 	.word	0x200006f3
 8004fe0:	20000664 	.word	0x20000664

08004fe4 <Micros>:

uint64_t Micros(){
 8004fe4:	b4b0      	push	{r4, r5, r7}
 8004fe6:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <Micros+0x28>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2200      	movs	r2, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <Micros+0x2c>)
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	1884      	adds	r4, r0, r2
 8004ffa:	eb41 0503 	adc.w	r5, r1, r3
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
}
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	bcb0      	pop	{r4, r5, r7}
 800500a:	4770      	bx	lr
 800500c:	40014800 	.word	0x40014800
 8005010:	20000700 	.word	0x20000700

08005014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005018:	b672      	cpsid	i
}
 800501a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800501c:	e7fe      	b.n	800501c <Error_Handler+0x8>
	...

08005020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_MspInit+0x4c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <HAL_MspInit+0x4c>)
 8005030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005034:	6453      	str	r3, [r2, #68]	; 0x44
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_MspInit+0x4c>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_MspInit+0x4c>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <HAL_MspInit+0x4c>)
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005050:	6413      	str	r3, [r2, #64]	; 0x40
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_MspInit+0x4c>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800505e:	2007      	movs	r0, #7
 8005060:	f000 fc06 	bl	8005870 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40023800 	.word	0x40023800

08005070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a21      	ldr	r2, [pc, #132]	; (8005114 <HAL_I2C_MspInit+0xa4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d13c      	bne.n	800510c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050b4:	2312      	movs	r3, #18
 80050b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050bc:	2303      	movs	r3, #3
 80050be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050c0:	2304      	movs	r3, #4
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4619      	mov	r1, r3
 80050ca:	4814      	ldr	r0, [pc, #80]	; (800511c <HAL_I2C_MspInit+0xac>)
 80050cc:	f001 f822 	bl	8006114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 80050da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050de:	6413      	str	r3, [r2, #64]	; 0x40
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_I2C_MspInit+0xa8>)
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80050ec:	2200      	movs	r2, #0
 80050ee:	2100      	movs	r1, #0
 80050f0:	201f      	movs	r0, #31
 80050f2:	f000 fbc8 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80050f6:	201f      	movs	r0, #31
 80050f8:	f000 fbe1 	bl	80058be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80050fc:	2200      	movs	r2, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	2020      	movs	r0, #32
 8005102:	f000 fbc0 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005106:	2020      	movs	r0, #32
 8005108:	f000 fbd9 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800510c:	bf00      	nop
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40005400 	.word	0x40005400
 8005118:	40023800 	.word	0x40023800
 800511c:	40020400 	.word	0x40020400

08005120 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0e      	ldr	r2, [pc, #56]	; (8005168 <HAL_TIM_PWM_MspInit+0x48>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d115      	bne.n	800515e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <HAL_TIM_PWM_MspInit+0x4c>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4a0c      	ldr	r2, [pc, #48]	; (800516c <HAL_TIM_PWM_MspInit+0x4c>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6453      	str	r3, [r2, #68]	; 0x44
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <HAL_TIM_PWM_MspInit+0x4c>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800514e:	2200      	movs	r2, #0
 8005150:	2100      	movs	r1, #0
 8005152:	201a      	movs	r0, #26
 8005154:	f000 fb97 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005158:	201a      	movs	r0, #26
 800515a:	f000 fbb0 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40023800 	.word	0x40023800

08005170 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005178:	f107 0314 	add.w	r3, r7, #20
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d12b      	bne.n	80051ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4a0f      	ldr	r2, [pc, #60]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6313      	str	r3, [r2, #48]	; 0x30
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_TIM_Encoder_MspInit+0x84>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051ca:	2303      	movs	r3, #3
 80051cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ce:	2302      	movs	r3, #2
 80051d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d6:	2300      	movs	r3, #0
 80051d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051da:	2301      	movs	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051de:	f107 0314 	add.w	r3, r7, #20
 80051e2:	4619      	mov	r1, r3
 80051e4:	4804      	ldr	r0, [pc, #16]	; (80051f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80051e6:	f000 ff95 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020000 	.word	0x40020000

080051fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_TIM_Base_MspInit+0x80>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d116      	bne.n	800523c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	6413      	str	r3, [r2, #64]	; 0x40
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800522a:	2200      	movs	r2, #0
 800522c:	2100      	movs	r1, #0
 800522e:	2032      	movs	r0, #50	; 0x32
 8005230:	f000 fb29 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005234:	2032      	movs	r0, #50	; 0x32
 8005236:	f000 fb42 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800523a:	e01a      	b.n	8005272 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a10      	ldr	r2, [pc, #64]	; (8005284 <HAL_TIM_Base_MspInit+0x88>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d115      	bne.n	8005272 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 8005250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005254:	6453      	str	r3, [r2, #68]	; 0x44
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <HAL_TIM_Base_MspInit+0x84>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005262:	2200      	movs	r2, #0
 8005264:	2100      	movs	r1, #0
 8005266:	201a      	movs	r0, #26
 8005268:	f000 fb0d 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800526c:	201a      	movs	r0, #26
 800526e:	f000 fb26 	bl	80058be <HAL_NVIC_EnableIRQ>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40023800 	.word	0x40023800
 8005284:	40014800 	.word	0x40014800

08005288 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005290:	f107 030c 	add.w	r3, r7, #12
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <HAL_TIM_MspPostInit+0x68>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d11e      	bne.n	80052e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_TIM_MspPostInit+0x6c>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HAL_TIM_MspPostInit+0x6c>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_TIM_MspPostInit+0x6c>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	2302      	movs	r3, #2
 80052ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052d8:	2301      	movs	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	4619      	mov	r1, r3
 80052e2:	4805      	ldr	r0, [pc, #20]	; (80052f8 <HAL_TIM_MspPostInit+0x70>)
 80052e4:	f000 ff16 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052e8:	bf00      	nop
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40020000 	.word	0x40020000

080052fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4b      	ldr	r2, [pc, #300]	; (8005448 <HAL_UART_MspInit+0x14c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	f040 8090 	bne.w	8005440 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	4b49      	ldr	r3, [pc, #292]	; (800544c <HAL_UART_MspInit+0x150>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4a48      	ldr	r2, [pc, #288]	; (800544c <HAL_UART_MspInit+0x150>)
 800532a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
 8005330:	4b46      	ldr	r3, [pc, #280]	; (800544c <HAL_UART_MspInit+0x150>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4b42      	ldr	r3, [pc, #264]	; (800544c <HAL_UART_MspInit+0x150>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4a41      	ldr	r2, [pc, #260]	; (800544c <HAL_UART_MspInit+0x150>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6313      	str	r3, [r2, #48]	; 0x30
 800534c:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_UART_MspInit+0x150>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005358:	230c      	movs	r3, #12
 800535a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005364:	2303      	movs	r3, #3
 8005366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005368:	2307      	movs	r3, #7
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	4619      	mov	r1, r3
 8005372:	4837      	ldr	r0, [pc, #220]	; (8005450 <HAL_UART_MspInit+0x154>)
 8005374:	f000 fece 	bl	8006114 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005378:	4b36      	ldr	r3, [pc, #216]	; (8005454 <HAL_UART_MspInit+0x158>)
 800537a:	4a37      	ldr	r2, [pc, #220]	; (8005458 <HAL_UART_MspInit+0x15c>)
 800537c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800537e:	4b35      	ldr	r3, [pc, #212]	; (8005454 <HAL_UART_MspInit+0x158>)
 8005380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005384:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005386:	4b33      	ldr	r3, [pc, #204]	; (8005454 <HAL_UART_MspInit+0x158>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800538c:	4b31      	ldr	r3, [pc, #196]	; (8005454 <HAL_UART_MspInit+0x158>)
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005392:	4b30      	ldr	r3, [pc, #192]	; (8005454 <HAL_UART_MspInit+0x158>)
 8005394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005398:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_UART_MspInit+0x158>)
 800539c:	2200      	movs	r2, #0
 800539e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053a0:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80053a6:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053ac:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053b2:	4b28      	ldr	r3, [pc, #160]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053b8:	4826      	ldr	r0, [pc, #152]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053ba:	f000 fa9b 	bl	80058f4 <HAL_DMA_Init>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80053c4:	f7ff fe26 	bl	8005014 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a22      	ldr	r2, [pc, #136]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_UART_MspInit+0x158>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80053d4:	4b21      	ldr	r3, [pc, #132]	; (800545c <HAL_UART_MspInit+0x160>)
 80053d6:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_UART_MspInit+0x164>)
 80053d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_UART_MspInit+0x160>)
 80053dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053e2:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_UART_MspInit+0x160>)
 80053e4:	2240      	movs	r2, #64	; 0x40
 80053e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_UART_MspInit+0x160>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ee:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_UART_MspInit+0x160>)
 80053f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053f6:	4b19      	ldr	r3, [pc, #100]	; (800545c <HAL_UART_MspInit+0x160>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_UART_MspInit+0x160>)
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_UART_MspInit+0x160>)
 8005404:	2200      	movs	r2, #0
 8005406:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_UART_MspInit+0x160>)
 800540a:	2200      	movs	r2, #0
 800540c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_UART_MspInit+0x160>)
 8005410:	2200      	movs	r2, #0
 8005412:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005414:	4811      	ldr	r0, [pc, #68]	; (800545c <HAL_UART_MspInit+0x160>)
 8005416:	f000 fa6d 	bl	80058f4 <HAL_DMA_Init>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005420:	f7ff fdf8 	bl	8005014 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0d      	ldr	r2, [pc, #52]	; (800545c <HAL_UART_MspInit+0x160>)
 8005428:	635a      	str	r2, [r3, #52]	; 0x34
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <HAL_UART_MspInit+0x160>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	2026      	movs	r0, #38	; 0x26
 8005436:	f000 fa26 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800543a:	2026      	movs	r0, #38	; 0x26
 800543c:	f000 fa3f 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005440:	bf00      	nop
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40004400 	.word	0x40004400
 800544c:	40023800 	.word	0x40023800
 8005450:	40020000 	.word	0x40020000
 8005454:	200005a4 	.word	0x200005a4
 8005458:	40026088 	.word	0x40026088
 800545c:	20000604 	.word	0x20000604
 8005460:	400260a0 	.word	0x400260a0

08005464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005468:	e7fe      	b.n	8005468 <NMI_Handler+0x4>

0800546a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800546e:	e7fe      	b.n	800546e <HardFault_Handler+0x4>

08005470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005474:	e7fe      	b.n	8005474 <MemManage_Handler+0x4>

08005476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800547a:	e7fe      	b.n	800547a <BusFault_Handler+0x4>

0800547c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005480:	e7fe      	b.n	8005480 <UsageFault_Handler+0x4>

08005482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054b0:	f000 f8ee 	bl	8005690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054b4:	bf00      	nop
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054bc:	4802      	ldr	r0, [pc, #8]	; (80054c8 <DMA1_Stream5_IRQHandler+0x10>)
 80054be:	f000 fbb1 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200005a4 	.word	0x200005a4

080054cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <DMA1_Stream6_IRQHandler+0x10>)
 80054d2:	f000 fba7 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000604 	.word	0x20000604

080054e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 80054e4:	2020      	movs	r0, #32
 80054e6:	f000 ffe5 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054f4:	4803      	ldr	r0, [pc, #12]	; (8005504 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80054f6:	f003 ff15 	bl	8009324 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80054fa:	4803      	ldr	r0, [pc, #12]	; (8005508 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80054fc:	f003 ff12 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000440 	.word	0x20000440
 8005508:	20000518 	.word	0x20000518

0800550c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005510:	4802      	ldr	r0, [pc, #8]	; (800551c <I2C1_EV_IRQHandler+0x10>)
 8005512:	f001 fa7f 	bl	8006a14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200003ec 	.word	0x200003ec

08005520 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005524:	4802      	ldr	r0, [pc, #8]	; (8005530 <I2C1_ER_IRQHandler+0x10>)
 8005526:	f001 fbe6 	bl	8006cf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200003ec 	.word	0x200003ec

08005534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005538:	4802      	ldr	r0, [pc, #8]	; (8005544 <USART2_IRQHandler+0x10>)
 800553a:	f004 fe7f 	bl	800a23c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000560 	.word	0x20000560

08005548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 800554c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005550:	f000 ffb0 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005558:	f000 ffac 	bl	80064b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800555c:	bf00      	nop
 800555e:	bd80      	pop	{r7, pc}

08005560 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005564:	4802      	ldr	r0, [pc, #8]	; (8005570 <TIM5_IRQHandler+0x10>)
 8005566:	f003 fedd 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	200004d0 	.word	0x200004d0

08005574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <SystemInit+0x20>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	4a05      	ldr	r2, [pc, #20]	; (8005594 <SystemInit+0x20>)
 8005580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800559c:	480d      	ldr	r0, [pc, #52]	; (80055d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800559e:	490e      	ldr	r1, [pc, #56]	; (80055d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055a4:	e002      	b.n	80055ac <LoopCopyDataInit>

080055a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055aa:	3304      	adds	r3, #4

080055ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b0:	d3f9      	bcc.n	80055a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055b2:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055b4:	4c0b      	ldr	r4, [pc, #44]	; (80055e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b8:	e001      	b.n	80055be <LoopFillZerobss>

080055ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055bc:	3204      	adds	r2, #4

080055be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c0:	d3fb      	bcc.n	80055ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055c2:	f7ff ffd7 	bl	8005574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055c6:	f006 f9fb 	bl	800b9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ca:	f7fd fcad 	bl	8002f28 <main>
  bx  lr    
 80055ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80055d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055d8:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 80055dc:	0800ba7c 	.word	0x0800ba7c
  ldr r2, =_sbss
 80055e0:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 80055e4:	20000924 	.word	0x20000924

080055e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055e8:	e7fe      	b.n	80055e8 <ADC_IRQHandler>
	...

080055ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055f0:	4b0e      	ldr	r3, [pc, #56]	; (800562c <HAL_Init+0x40>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <HAL_Init+0x40>)
 80055f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_Init+0x40>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <HAL_Init+0x40>)
 8005602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005608:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_Init+0x40>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a07      	ldr	r2, [pc, #28]	; (800562c <HAL_Init+0x40>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005614:	2003      	movs	r0, #3
 8005616:	f000 f92b 	bl	8005870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800561a:	2000      	movs	r0, #0
 800561c:	f000 f808 	bl	8005630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005620:	f7ff fcfe 	bl	8005020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023c00 	.word	0x40023c00

08005630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <HAL_InitTick+0x54>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_InitTick+0x58>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4619      	mov	r1, r3
 8005642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005646:	fbb3 f3f1 	udiv	r3, r3, r1
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f943 	bl	80058da <HAL_SYSTICK_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e00e      	b.n	800567c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b0f      	cmp	r3, #15
 8005662:	d80a      	bhi.n	800567a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005664:	2200      	movs	r2, #0
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	f000 f90b 	bl	8005886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005670:	4a06      	ldr	r2, [pc, #24]	; (800568c <HAL_InitTick+0x5c>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	e000      	b.n	800567c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200003b8 	.word	0x200003b8
 8005688:	200003c0 	.word	0x200003c0
 800568c:	200003bc 	.word	0x200003bc

08005690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_IncTick+0x20>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_IncTick+0x24>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4413      	add	r3, r2
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <HAL_IncTick+0x24>)
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	200003c0 	.word	0x200003c0
 80056b4:	20000920 	.word	0x20000920

080056b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  return uwTick;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <HAL_GetTick+0x14>)
 80056be:	681b      	ldr	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000920 	.word	0x20000920

080056d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <__NVIC_SetPriorityGrouping+0x44>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056ec:	4013      	ands	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <__NVIC_SetPriorityGrouping+0x44>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	60d3      	str	r3, [r2, #12]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <__NVIC_GetPriorityGrouping+0x18>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f003 0307 	and.w	r3, r3, #7
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000ed00 	.word	0xe000ed00

08005734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	db0b      	blt.n	800575e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	f003 021f 	and.w	r2, r3, #31
 800574c:	4907      	ldr	r1, [pc, #28]	; (800576c <__NVIC_EnableIRQ+0x38>)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2001      	movs	r0, #1
 8005756:	fa00 f202 	lsl.w	r2, r0, r2
 800575a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e100 	.word	0xe000e100

08005770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800577c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db0a      	blt.n	800579a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	490c      	ldr	r1, [pc, #48]	; (80057bc <__NVIC_SetPriority+0x4c>)
 800578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	440b      	add	r3, r1
 8005794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005798:	e00a      	b.n	80057b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	4908      	ldr	r1, [pc, #32]	; (80057c0 <__NVIC_SetPriority+0x50>)
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	3b04      	subs	r3, #4
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	440b      	add	r3, r1
 80057ae:	761a      	strb	r2, [r3, #24]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000e100 	.word	0xe000e100
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f1c3 0307 	rsb	r3, r3, #7
 80057de:	2b04      	cmp	r3, #4
 80057e0:	bf28      	it	cs
 80057e2:	2304      	movcs	r3, #4
 80057e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d902      	bls.n	80057f4 <NVIC_EncodePriority+0x30>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3b03      	subs	r3, #3
 80057f2:	e000      	b.n	80057f6 <NVIC_EncodePriority+0x32>
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	401a      	ands	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800580c:	f04f 31ff 	mov.w	r1, #4294967295
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	43d9      	mvns	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800581c:	4313      	orrs	r3, r2
         );
}
 800581e:	4618      	mov	r0, r3
 8005820:	3724      	adds	r7, #36	; 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800583c:	d301      	bcc.n	8005842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800583e:	2301      	movs	r3, #1
 8005840:	e00f      	b.n	8005862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <SysTick_Config+0x40>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3b01      	subs	r3, #1
 8005848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800584a:	210f      	movs	r1, #15
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	f7ff ff8e 	bl	8005770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <SysTick_Config+0x40>)
 8005856:	2200      	movs	r2, #0
 8005858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <SysTick_Config+0x40>)
 800585c:	2207      	movs	r2, #7
 800585e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	e000e010 	.word	0xe000e010

08005870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ff29 	bl	80056d0 <__NVIC_SetPriorityGrouping>
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	4603      	mov	r3, r0
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005898:	f7ff ff3e 	bl	8005718 <__NVIC_GetPriorityGrouping>
 800589c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f7ff ff8e 	bl	80057c4 <NVIC_EncodePriority>
 80058a8:	4602      	mov	r2, r0
 80058aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff5d 	bl	8005770 <__NVIC_SetPriority>
}
 80058b6:	bf00      	nop
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff31 	bl	8005734 <__NVIC_EnableIRQ>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ffa2 	bl	800582c <SysTick_Config>
 80058e8:	4603      	mov	r3, r0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005900:	f7ff feda 	bl	80056b8 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e099      	b.n	8005a44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005930:	e00f      	b.n	8005952 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005932:	f7ff fec1 	bl	80056b8 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b05      	cmp	r3, #5
 800593e:	d908      	bls.n	8005952 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2203      	movs	r2, #3
 800594a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e078      	b.n	8005a44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e8      	bne.n	8005932 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <HAL_DMA_Init+0x158>)
 800596c:	4013      	ands	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800597e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d107      	bne.n	80059bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	4313      	orrs	r3, r2
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0307 	bic.w	r3, r3, #7
 80059d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d117      	bne.n	8005a16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb0f 	bl	800601c <DMA_CheckFifoParam>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2240      	movs	r2, #64	; 0x40
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a12:	2301      	movs	r3, #1
 8005a14:	e016      	b.n	8005a44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fac6 	bl	8005fb0 <DMA_CalcBaseAndBitshift>
 8005a24:	4603      	mov	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2c:	223f      	movs	r2, #63	; 0x3f
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	f010803f 	.word	0xf010803f

08005a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_DMA_Start_IT+0x26>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e040      	b.n	8005af8 <HAL_DMA_Start_IT+0xa8>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d12f      	bne.n	8005aea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa58 	bl	8005f54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa8:	223f      	movs	r2, #63	; 0x3f
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0216 	orr.w	r2, r2, #22
 8005abe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e005      	b.n	8005af6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
 8005af4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b0e:	f7ff fdd3 	bl	80056b8 <HAL_GetTick>
 8005b12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d008      	beq.n	8005b32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e052      	b.n	8005bd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0216 	bic.w	r2, r2, #22
 8005b40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_DMA_Abort+0x62>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0208 	bic.w	r2, r2, #8
 8005b70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b82:	e013      	b.n	8005bac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b84:	f7ff fd98 	bl	80056b8 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d90c      	bls.n	8005bac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e015      	b.n	8005bd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e4      	bne.n	8005b84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbe:	223f      	movs	r2, #63	; 0x3f
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d004      	beq.n	8005bfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00c      	b.n	8005c18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2205      	movs	r2, #5
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c30:	4b8e      	ldr	r3, [pc, #568]	; (8005e6c <HAL_DMA_IRQHandler+0x248>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a8e      	ldr	r2, [pc, #568]	; (8005e70 <HAL_DMA_IRQHandler+0x24c>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2208      	movs	r2, #8
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f043 0202 	orr.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	2204      	movs	r2, #4
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	2204      	movs	r2, #4
 8005cea:	409a      	lsls	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f043 0204 	orr.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	2210      	movs	r2, #16
 8005d02:	409a      	lsls	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d043      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03c      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2210      	movs	r2, #16
 8005d20:	409a      	lsls	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d018      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d024      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
 8005d52:	e01f      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
 8005d64:	e016      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0208 	bic.w	r2, r2, #8
 8005d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	2220      	movs	r2, #32
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 808f 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8087 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	2220      	movs	r2, #32
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d136      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0216 	bic.w	r2, r2, #22
 8005ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <HAL_DMA_IRQHandler+0x1da>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0208 	bic.w	r2, r2, #8
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	223f      	movs	r2, #63	; 0x3f
 8005e14:	409a      	lsls	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07e      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
        }
        return;
 8005e3a:	e079      	b.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d031      	beq.n	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	e02c      	b.n	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
 8005e6a:	bf00      	nop
 8005e6c:	200003b8 	.word	0x200003b8
 8005e70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d023      	beq.n	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
 8005e84:	e01e      	b.n	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10f      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0210 	bic.w	r2, r2, #16
 8005ea2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d032      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d022      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2205      	movs	r2, #5
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d307      	bcc.n	8005f0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f2      	bne.n	8005ef0 <HAL_DMA_IRQHandler+0x2cc>
 8005f0a:	e000      	b.n	8005f0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
 8005f2e:	e000      	b.n	8005f32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f30:	bf00      	nop
    }
  }
}
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f46:	b2db      	uxtb	r3, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d108      	bne.n	8005f94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f92:	e007      	b.n	8005fa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	3b10      	subs	r3, #16
 8005fc0:	4a14      	ldr	r2, [pc, #80]	; (8006014 <DMA_CalcBaseAndBitshift+0x64>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	091b      	lsrs	r3, r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <DMA_CalcBaseAndBitshift+0x68>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d909      	bls.n	8005ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	659a      	str	r2, [r3, #88]	; 0x58
 8005ff0:	e007      	b.n	8006002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	aaaaaaab 	.word	0xaaaaaaab
 8006018:	0800ba64 	.word	0x0800ba64

0800601c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11f      	bne.n	8006076 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d856      	bhi.n	80060ea <DMA_CheckFifoParam+0xce>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <DMA_CheckFifoParam+0x28>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006055 	.word	0x08006055
 8006048:	08006067 	.word	0x08006067
 800604c:	08006055 	.word	0x08006055
 8006050:	080060eb 	.word	0x080060eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d046      	beq.n	80060ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006064:	e043      	b.n	80060ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800606e:	d140      	bne.n	80060f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006074:	e03d      	b.n	80060f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607e:	d121      	bne.n	80060c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b03      	cmp	r3, #3
 8006084:	d837      	bhi.n	80060f6 <DMA_CheckFifoParam+0xda>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <DMA_CheckFifoParam+0x70>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060a3 	.word	0x080060a3
 8006094:	0800609d 	.word	0x0800609d
 8006098:	080060b5 	.word	0x080060b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e030      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d025      	beq.n	80060fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b2:	e022      	b.n	80060fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060bc:	d11f      	bne.n	80060fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060c2:	e01c      	b.n	80060fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d903      	bls.n	80060d2 <DMA_CheckFifoParam+0xb6>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d003      	beq.n	80060d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060d0:	e018      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
      break;
 80060d6:	e015      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	e00b      	b.n	8006102 <DMA_CheckFifoParam+0xe6>
      break;
 80060ea:	bf00      	nop
 80060ec:	e00a      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;
 80060ee:	bf00      	nop
 80060f0:	e008      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;
 80060f2:	bf00      	nop
 80060f4:	e006      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;
 80060f6:	bf00      	nop
 80060f8:	e004      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;
 80060fa:	bf00      	nop
 80060fc:	e002      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;   
 80060fe:	bf00      	nop
 8006100:	e000      	b.n	8006104 <DMA_CheckFifoParam+0xe8>
      break;
 8006102:	bf00      	nop
    }
  } 
  
  return status; 
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop

08006114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	; 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e159      	b.n	80063e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006130:	2201      	movs	r2, #1
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4013      	ands	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	429a      	cmp	r2, r3
 800614a:	f040 8148 	bne.w	80063de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d005      	beq.n	8006166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006162:	2b02      	cmp	r3, #2
 8006164:	d130      	bne.n	80061c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	2203      	movs	r2, #3
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800619c:	2201      	movs	r2, #1
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 0201 	and.w	r2, r3, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d017      	beq.n	8006204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	2203      	movs	r2, #3
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d123      	bne.n	8006258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	08da      	lsrs	r2, r3, #3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3208      	adds	r2, #8
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	220f      	movs	r2, #15
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	08da      	lsrs	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3208      	adds	r2, #8
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	2203      	movs	r2, #3
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0203 	and.w	r2, r3, #3
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a2 	beq.w	80063de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b57      	ldr	r3, [pc, #348]	; (80063fc <HAL_GPIO_Init+0x2e8>)
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	4a56      	ldr	r2, [pc, #344]	; (80063fc <HAL_GPIO_Init+0x2e8>)
 80062a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062a8:	6453      	str	r3, [r2, #68]	; 0x44
 80062aa:	4b54      	ldr	r3, [pc, #336]	; (80063fc <HAL_GPIO_Init+0x2e8>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062b6:	4a52      	ldr	r2, [pc, #328]	; (8006400 <HAL_GPIO_Init+0x2ec>)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	3302      	adds	r3, #2
 80062be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	220f      	movs	r2, #15
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a49      	ldr	r2, [pc, #292]	; (8006404 <HAL_GPIO_Init+0x2f0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d019      	beq.n	8006316 <HAL_GPIO_Init+0x202>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a48      	ldr	r2, [pc, #288]	; (8006408 <HAL_GPIO_Init+0x2f4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_GPIO_Init+0x1fe>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a47      	ldr	r2, [pc, #284]	; (800640c <HAL_GPIO_Init+0x2f8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00d      	beq.n	800630e <HAL_GPIO_Init+0x1fa>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a46      	ldr	r2, [pc, #280]	; (8006410 <HAL_GPIO_Init+0x2fc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <HAL_GPIO_Init+0x1f6>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a45      	ldr	r2, [pc, #276]	; (8006414 <HAL_GPIO_Init+0x300>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d101      	bne.n	8006306 <HAL_GPIO_Init+0x1f2>
 8006302:	2304      	movs	r3, #4
 8006304:	e008      	b.n	8006318 <HAL_GPIO_Init+0x204>
 8006306:	2307      	movs	r3, #7
 8006308:	e006      	b.n	8006318 <HAL_GPIO_Init+0x204>
 800630a:	2303      	movs	r3, #3
 800630c:	e004      	b.n	8006318 <HAL_GPIO_Init+0x204>
 800630e:	2302      	movs	r3, #2
 8006310:	e002      	b.n	8006318 <HAL_GPIO_Init+0x204>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_GPIO_Init+0x204>
 8006316:	2300      	movs	r3, #0
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	f002 0203 	and.w	r2, r2, #3
 800631e:	0092      	lsls	r2, r2, #2
 8006320:	4093      	lsls	r3, r2
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006328:	4935      	ldr	r1, [pc, #212]	; (8006400 <HAL_GPIO_Init+0x2ec>)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	3302      	adds	r3, #2
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006336:	4b38      	ldr	r3, [pc, #224]	; (8006418 <HAL_GPIO_Init+0x304>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800635a:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <HAL_GPIO_Init+0x304>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006360:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <HAL_GPIO_Init+0x304>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006384:	4a24      	ldr	r2, [pc, #144]	; (8006418 <HAL_GPIO_Init+0x304>)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <HAL_GPIO_Init+0x304>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063ae:	4a1a      	ldr	r2, [pc, #104]	; (8006418 <HAL_GPIO_Init+0x304>)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_GPIO_Init+0x304>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d8:	4a0f      	ldr	r2, [pc, #60]	; (8006418 <HAL_GPIO_Init+0x304>)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	f67f aea2 	bls.w	8006130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800
 8006400:	40013800 	.word	0x40013800
 8006404:	40020000 	.word	0x40020000
 8006408:	40020400 	.word	0x40020400
 800640c:	40020800 	.word	0x40020800
 8006410:	40020c00 	.word	0x40020c00
 8006414:	40021000 	.word	0x40021000
 8006418:	40013c00 	.word	0x40013c00

0800641c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
 8006438:	e001      	b.n	800643e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
 8006458:	4613      	mov	r3, r2
 800645a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800645c:	787b      	ldrb	r3, [r7, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006468:	e003      	b.n	8006472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800646a:	887b      	ldrh	r3, [r7, #2]
 800646c:	041a      	lsls	r2, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	619a      	str	r2, [r3, #24]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006490:	887a      	ldrh	r2, [r7, #2]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4013      	ands	r3, r2
 8006496:	041a      	lsls	r2, r3, #16
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	43d9      	mvns	r1, r3
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	400b      	ands	r3, r1
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	619a      	str	r2, [r3, #24]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064ca:	4a05      	ldr	r2, [pc, #20]	; (80064e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fb88 	bl	8004be8 <HAL_GPIO_EXTI_Callback>
  }
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40013c00 	.word	0x40013c00

080064e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e12b      	b.n	800674e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fe fdb0 	bl	8005070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	; 0x24
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006548:	f002 fbb0 	bl	8008cac <HAL_RCC_GetPCLK1Freq>
 800654c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4a81      	ldr	r2, [pc, #516]	; (8006758 <HAL_I2C_Init+0x274>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d807      	bhi.n	8006568 <HAL_I2C_Init+0x84>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a80      	ldr	r2, [pc, #512]	; (800675c <HAL_I2C_Init+0x278>)
 800655c:	4293      	cmp	r3, r2
 800655e:	bf94      	ite	ls
 8006560:	2301      	movls	r3, #1
 8006562:	2300      	movhi	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e006      	b.n	8006576 <HAL_I2C_Init+0x92>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a7d      	ldr	r2, [pc, #500]	; (8006760 <HAL_I2C_Init+0x27c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	bf94      	ite	ls
 8006570:	2301      	movls	r3, #1
 8006572:	2300      	movhi	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e0e7      	b.n	800674e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a78      	ldr	r2, [pc, #480]	; (8006764 <HAL_I2C_Init+0x280>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0c9b      	lsrs	r3, r3, #18
 8006588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	4a6a      	ldr	r2, [pc, #424]	; (8006758 <HAL_I2C_Init+0x274>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d802      	bhi.n	80065b8 <HAL_I2C_Init+0xd4>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	3301      	adds	r3, #1
 80065b6:	e009      	b.n	80065cc <HAL_I2C_Init+0xe8>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	4a69      	ldr	r2, [pc, #420]	; (8006768 <HAL_I2C_Init+0x284>)
 80065c4:	fba2 2303 	umull	r2, r3, r2, r3
 80065c8:	099b      	lsrs	r3, r3, #6
 80065ca:	3301      	adds	r3, #1
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	495c      	ldr	r1, [pc, #368]	; (8006758 <HAL_I2C_Init+0x274>)
 80065e8:	428b      	cmp	r3, r1
 80065ea:	d819      	bhi.n	8006620 <HAL_I2C_Init+0x13c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	1e59      	subs	r1, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006600:	400b      	ands	r3, r1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_I2C_Init+0x138>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1e59      	subs	r1, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	fbb1 f3f3 	udiv	r3, r1, r3
 8006614:	3301      	adds	r3, #1
 8006616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661a:	e051      	b.n	80066c0 <HAL_I2C_Init+0x1dc>
 800661c:	2304      	movs	r3, #4
 800661e:	e04f      	b.n	80066c0 <HAL_I2C_Init+0x1dc>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d111      	bne.n	800664c <HAL_I2C_Init+0x168>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e58      	subs	r0, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	440b      	add	r3, r1
 8006636:	fbb0 f3f3 	udiv	r3, r0, r3
 800663a:	3301      	adds	r3, #1
 800663c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e012      	b.n	8006672 <HAL_I2C_Init+0x18e>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1e58      	subs	r0, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	0099      	lsls	r1, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006662:	3301      	adds	r3, #1
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_I2C_Init+0x196>
 8006676:	2301      	movs	r3, #1
 8006678:	e022      	b.n	80066c0 <HAL_I2C_Init+0x1dc>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10e      	bne.n	80066a0 <HAL_I2C_Init+0x1bc>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1e58      	subs	r0, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6859      	ldr	r1, [r3, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	440b      	add	r3, r1
 8006690:	fbb0 f3f3 	udiv	r3, r0, r3
 8006694:	3301      	adds	r3, #1
 8006696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	e00f      	b.n	80066c0 <HAL_I2C_Init+0x1dc>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	1e58      	subs	r0, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6859      	ldr	r1, [r3, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	0099      	lsls	r1, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b6:	3301      	adds	r3, #1
 80066b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	6809      	ldr	r1, [r1, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6911      	ldr	r1, [r2, #16]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68d2      	ldr	r2, [r2, #12]
 80066fa:	4311      	orrs	r1, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	430b      	orrs	r3, r1
 8006702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	000186a0 	.word	0x000186a0
 800675c:	001e847f 	.word	0x001e847f
 8006760:	003d08ff 	.word	0x003d08ff
 8006764:	431bde83 	.word	0x431bde83
 8006768:	10624dd3 	.word	0x10624dd3

0800676c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	461a      	mov	r2, r3
 8006778:	460b      	mov	r3, r1
 800677a:	817b      	strh	r3, [r7, #10]
 800677c:	4613      	mov	r3, r2
 800677e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b20      	cmp	r3, #32
 800678e:	f040 8085 	bne.w	800689c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006792:	4b46      	ldr	r3, [pc, #280]	; (80068ac <HAL_I2C_Master_Transmit_IT+0x140>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	4a45      	ldr	r2, [pc, #276]	; (80068b0 <HAL_I2C_Master_Transmit_IT+0x144>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	0a1a      	lsrs	r2, r3, #8
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009a      	lsls	r2, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d116      	bne.n	80067e6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e05b      	b.n	800689e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d0db      	beq.n	80067ac <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_I2C_Master_Transmit_IT+0x96>
 80067fe:	2302      	movs	r3, #2
 8006800:	e04d      	b.n	800689e <HAL_I2C_Master_Transmit_IT+0x132>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d007      	beq.n	8006828 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2221      	movs	r2, #33	; 0x21
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2210      	movs	r2, #16
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	893a      	ldrh	r2, [r7, #8]
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800686a:	897a      	ldrh	r2, [r7, #10]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006886:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006896:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	200003b8 	.word	0x200003b8
 80068b0:	14f8b589 	.word	0x14f8b589
 80068b4:	ffff0000 	.word	0xffff0000

080068b8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	461a      	mov	r2, r3
 80068c4:	460b      	mov	r3, r1
 80068c6:	817b      	strh	r3, [r7, #10]
 80068c8:	4613      	mov	r3, r2
 80068ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f040 808d 	bne.w	80069f8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80068de:	4b4a      	ldr	r3, [pc, #296]	; (8006a08 <HAL_I2C_Master_Receive_IT+0x150>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	08db      	lsrs	r3, r3, #3
 80068e4:	4a49      	ldr	r2, [pc, #292]	; (8006a0c <HAL_I2C_Master_Receive_IT+0x154>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	0a1a      	lsrs	r2, r3, #8
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009a      	lsls	r2, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d116      	bne.n	8006932 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e063      	b.n	80069fa <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b02      	cmp	r3, #2
 800693e:	d0db      	beq.n	80068f8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_I2C_Master_Receive_IT+0x96>
 800694a:	2302      	movs	r3, #2
 800694c:	e055      	b.n	80069fa <HAL_I2C_Master_Receive_IT+0x142>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d007      	beq.n	8006974 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2222      	movs	r2, #34	; 0x22
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2210      	movs	r2, #16
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	893a      	ldrh	r2, [r7, #8]
 80069a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <HAL_I2C_Master_Receive_IT+0x158>)
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80069b6:	897a      	ldrh	r2, [r7, #10]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80069d2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	200003b8 	.word	0x200003b8
 8006a0c:	14f8b589 	.word	0x14f8b589
 8006a10:	ffff0000 	.word	0xffff0000

08006a14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d003      	beq.n	8006a4c <HAL_I2C_EV_IRQHandler+0x38>
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	f040 80c1 	bne.w	8006bce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10d      	bne.n	8006a82 <HAL_I2C_EV_IRQHandler+0x6e>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a6c:	d003      	beq.n	8006a76 <HAL_I2C_EV_IRQHandler+0x62>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_EV_IRQHandler+0x66>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_I2C_EV_IRQHandler+0x68>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f000 8132 	beq.w	8006ce6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x92>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	0a5b      	lsrs	r3, r3, #9
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fc7b 	bl	8008394 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd83 	bl	80075aa <I2C_Master_SB>
 8006aa4:	e092      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	0a5b      	lsrs	r3, r3, #9
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fdf9 	bl	80076b6 <I2C_Master_ADD10>
 8006ac4:	e082      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fe13 	bl	800770a <I2C_Master_ADDR>
 8006ae4:	e072      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	089b      	lsrs	r3, r3, #2
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d03b      	beq.n	8006b6a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b00:	f000 80f3 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	0a9b      	lsrs	r3, r3, #10
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f9f3 	bl	8006f14 <I2C_MasterTransmit_TXE>
 8006b2e:	e04d      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80d6 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80cf 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b21      	cmp	r3, #33	; 0x21
 8006b50:	d103      	bne.n	8006b5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa7a 	bl	800704c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b58:	e0c7      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	f040 80c4 	bne.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fae8 	bl	8007138 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b68:	e0bf      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	f000 80b7 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	0a9b      	lsrs	r3, r3, #10
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb5d 	bl	8007260 <I2C_MasterReceive_RXNE>
 8006ba6:	e011      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 809a 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8093 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc06 	bl	80073d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bca:	e08e      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bcc:	e08d      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	e007      	b.n	8006bf0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x20e>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	0a5b      	lsrs	r3, r3, #9
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006c18:	69b9      	ldr	r1, [r7, #24]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 ffc4 	bl	8007ba8 <I2C_Slave_ADDR>
 8006c20:	e066      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x22e>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	0a5b      	lsrs	r3, r3, #9
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fffe 	bl	8007c3c <I2C_Slave_STOPF>
 8006c40:	e056      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b21      	cmp	r3, #33	; 0x21
 8006c46:	d002      	beq.n	8006c4e <HAL_I2C_EV_IRQHandler+0x23a>
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b29      	cmp	r3, #41	; 0x29
 8006c4c:	d125      	bne.n	8006c9a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	09db      	lsrs	r3, r3, #7
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00f      	beq.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	0a9b      	lsrs	r3, r3, #10
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	089b      	lsrs	r3, r3, #2
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 feda 	bl	8007a2c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c78:	e039      	b.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	089b      	lsrs	r3, r3, #2
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d033      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	0a5b      	lsrs	r3, r3, #9
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02d      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 ff07 	bl	8007aa6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c98:	e029      	b.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	099b      	lsrs	r3, r3, #6
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a9b      	lsrs	r3, r3, #10
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 ff12 	bl	8007ae8 <I2C_SlaveReceive_RXNE>
 8006cc4:	e014      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff40 	bl	8007b64 <I2C_SlaveReceive_BTF>
 8006ce4:	e004      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b08a      	sub	sp, #40	; 0x28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00e      	beq.n	8006d44 <HAL_I2C_ER_IRQHandler+0x4e>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	0a5b      	lsrs	r3, r3, #9
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_I2C_ER_IRQHandler+0x78>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	0a9b      	lsrs	r3, r3, #10
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03f      	beq.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d039      	beq.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006d86:	7efb      	ldrb	r3, [r7, #27]
 8006d88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006da0:	7ebb      	ldrb	r3, [r7, #26]
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d112      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	2b21      	cmp	r3, #33	; 0x21
 8006db0:	d008      	beq.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	2b29      	cmp	r3, #41	; 0x29
 8006db6:	d005      	beq.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xce>
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b28      	cmp	r3, #40	; 0x28
 8006dbc:	d106      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b21      	cmp	r3, #33	; 0x21
 8006dc2:	d103      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f869 	bl	8007e9c <I2C_Slave_AF>
 8006dca:	e016      	b.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f043 0304 	orr.w	r3, r3, #4
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dde:	7efb      	ldrb	r3, [r7, #27]
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d002      	beq.n	8006dea <HAL_I2C_ER_IRQHandler+0xf4>
 8006de4:	7efb      	ldrb	r3, [r7, #27]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d107      	bne.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	0adb      	lsrs	r3, r3, #11
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <HAL_I2C_ER_IRQHandler+0x12e>
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f043 0308 	orr.w	r3, r3, #8
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 f8a0 	bl	8007f7c <I2C_ITError>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3728      	adds	r7, #40	; 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d150      	bne.n	8006fdc <I2C_MasterTransmit_TXE+0xc8>
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b21      	cmp	r3, #33	; 0x21
 8006f3e:	d14d      	bne.n	8006fdc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d01d      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d01a      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f52:	d016      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2211      	movs	r2, #17
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff ff62 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f80:	e060      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d107      	bne.n	8006fcc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff7d 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fca:	e03b      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff35 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fda:	e033      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b21      	cmp	r3, #33	; 0x21
 8006fe0:	d005      	beq.n	8006fee <I2C_MasterTransmit_TXE+0xda>
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d12d      	bne.n	8007044 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b22      	cmp	r3, #34	; 0x22
 8006fec:	d12a      	bne.n	8007044 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007008:	e01c      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d103      	bne.n	800701e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f88e 	bl	8007138 <I2C_MemoryTransmit_TXE_BTF>
}
 800701c:	e012      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007042:	e7ff      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b21      	cmp	r3, #33	; 0x21
 8007064:	d164      	bne.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007094:	e04c      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d01d      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d01a      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070a8:	d016      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2211      	movs	r2, #17
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff feb7 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
}
 80070d6:	e02b      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d107      	bne.n	8007122 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fed2 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
}
 8007120:	e006      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fe8a 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007146:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11d      	bne.n	800718c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10b      	bne.n	8007170 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800716e:	e073      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007174:	b29b      	uxth	r3, r3
 8007176:	121b      	asrs	r3, r3, #8
 8007178:	b2da      	uxtb	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	651a      	str	r2, [r3, #80]	; 0x50
}
 800718a:	e065      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10b      	bne.n	80071ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071aa:	e055      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d151      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b22      	cmp	r3, #34	; 0x22
 80071b8:	d10d      	bne.n	80071d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071d4:	e040      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d015      	beq.n	800720c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2b21      	cmp	r3, #33	; 0x21
 80071e4:	d112      	bne.n	800720c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800720a:	e025      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d120      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b21      	cmp	r3, #33	; 0x21
 800721a:	d11d      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800722a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fe36 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b22      	cmp	r3, #34	; 0x22
 8007272:	f040 80ac 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d921      	bls.n	80072c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	f040 808c 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072c6:	e082      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d075      	beq.n	80073bc <I2C_MasterReceive_RXNE+0x15c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d002      	beq.n	80072dc <I2C_MasterReceive_RXNE+0x7c>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d16f      	bne.n	80073bc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f827 	bl	8008330 <I2C_WaitOnSTOPRequestThroughIT>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d142      	bne.n	800736e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007306:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d10a      	bne.n	8007358 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fdc1 	bl	8006ed8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007356:	e03a      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2212      	movs	r2, #18
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fd76 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800736c:	e02f      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800737c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff fd99 	bl	8006eec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073ba:	e008      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ca:	605a      	str	r2, [r3, #4]
}
 80073cc:	e7ff      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d11b      	bne.n	8007426 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007424:	e0bd      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b03      	cmp	r3, #3
 800742e:	d129      	bne.n	8007484 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d00a      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d007      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007482:	e08e      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d176      	bne.n	800757c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d002      	beq.n	800749a <I2C_MasterReceive_BTF+0xc4>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b10      	cmp	r3, #16
 8007498:	d108      	bne.n	80074ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e019      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d002      	beq.n	80074b8 <I2C_MasterReceive_BTF+0xe2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d108      	bne.n	80074ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e00a      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d007      	beq.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800753a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d10a      	bne.n	8007566 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fcba 	bl	8006ed8 <HAL_I2C_MemRxCpltCallback>
}
 8007564:	e01d      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2212      	movs	r2, #18
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fc6f 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
}
 800757a:	e012      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d117      	bne.n	80075ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075d8:	e067      	b.n	80076aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	611a      	str	r2, [r3, #16]
}
 80075ec:	e05d      	b.n	80076aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075f6:	d133      	bne.n	8007660 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b21      	cmp	r3, #33	; 0x21
 8007602:	d109      	bne.n	8007618 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	b2db      	uxtb	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007614:	611a      	str	r2, [r3, #16]
 8007616:	e008      	b.n	800762a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <I2C_Master_SB+0x92>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d032      	beq.n	80076aa <I2C_Master_SB+0x100>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d02d      	beq.n	80076aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765c:	605a      	str	r2, [r3, #4]
}
 800765e:	e024      	b.n	80076aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10e      	bne.n	8007686 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	b29b      	uxth	r3, r3
 800766e:	11db      	asrs	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f063 030f 	orn	r3, r3, #15
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	611a      	str	r2, [r3, #16]
}
 8007684:	e011      	b.n	80076aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10d      	bne.n	80076aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	b29b      	uxth	r3, r3
 8007694:	11db      	asrs	r3, r3, #7
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 030e 	orn	r3, r3, #14
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	611a      	str	r2, [r3, #16]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <I2C_Master_ADD10+0x26>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <I2C_Master_ADD10+0x48>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fc:	605a      	str	r2, [r3, #4]
  }
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800770a:	b480      	push	{r7}
 800770c:	b091      	sub	sp, #68	; 0x44
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b22      	cmp	r3, #34	; 0x22
 8007732:	f040 8169 	bne.w	8007a08 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <I2C_Master_ADDR+0x54>
 800773e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d10b      	bne.n	800775e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007746:	2300      	movs	r3, #0
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	e160      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11d      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800776e:	d118      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007794:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	651a      	str	r2, [r3, #80]	; 0x50
 80077a0:	e13e      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d113      	bne.n	80077d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ac:	2300      	movs	r3, #0
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e115      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	f040 808a 	bne.w	80078f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077e6:	d137      	bne.n	8007858 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007806:	d113      	bne.n	8007830 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	e0e7      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e0d3      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2b08      	cmp	r3, #8
 800785c:	d02e      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b20      	cmp	r3, #32
 8007862:	d02b      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	2b12      	cmp	r3, #18
 8007868:	d102      	bne.n	8007870 <I2C_Master_ADDR+0x166>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	2b01      	cmp	r3, #1
 800786e:	d125      	bne.n	80078bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00e      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	2b02      	cmp	r3, #2
 800787a:	d00b      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	2b10      	cmp	r3, #16
 8007880:	d008      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e007      	b.n	80078a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	e0a1      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e085      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d14d      	bne.n	800799a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2b04      	cmp	r3, #4
 8007902:	d016      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	2b02      	cmp	r3, #2
 8007908:	d013      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2b10      	cmp	r3, #16
 800790e:	d010      	beq.n	8007932 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e007      	b.n	8007942 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007950:	d117      	bne.n	8007982 <I2C_Master_ADDR+0x278>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007958:	d00b      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2b01      	cmp	r3, #1
 800795e:	d008      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	2b08      	cmp	r3, #8
 8007964:	d005      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b10      	cmp	r3, #16
 800796a:	d002      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	2b20      	cmp	r3, #32
 8007970:	d107      	bne.n	8007982 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007980:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e032      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	d117      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079c0:	d00b      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d008      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d005      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d002      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d107      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a06:	e00b      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
}
 8007a1e:	e7ff      	b.n	8007a20 <I2C_Master_ADDR+0x316>
 8007a20:	bf00      	nop
 8007a22:	3744      	adds	r7, #68	; 0x44
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02b      	beq.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b29      	cmp	r3, #41	; 0x29
 8007a78:	d111      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a88:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2221      	movs	r2, #33	; 0x21
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2228      	movs	r2, #40	; 0x28
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff f9e7 	bl	8006e6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02c      	beq.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d114      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b2a      	cmp	r3, #42	; 0x2a
 8007b36:	d111      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2222      	movs	r2, #34	; 0x22
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2228      	movs	r2, #40	; 0x28
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff f992 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d127      	bne.n	8007c16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	09db      	lsrs	r3, r3, #7
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	81bb      	strh	r3, [r7, #12]
 8007bf8:	e002      	b.n	8007c00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c08:	89ba      	ldrh	r2, [r7, #12]
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f940 	bl	8006e94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c14:	e00e      	b.n	8007c34 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c98:	d172      	bne.n	8007d80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b22      	cmp	r3, #34	; 0x22
 8007c9e:	d002      	beq.n	8007ca6 <I2C_Slave_STOPF+0x6a>
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d135      	bne.n	8007d12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f043 0204 	orr.w	r2, r3, #4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe f92a 	bl	8005f38 <HAL_DMA_GetState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d049      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	4a69      	ldr	r2, [pc, #420]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd ff72 	bl	8005be0 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03d      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d10:	e035      	b.n	8007d7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f043 0204 	orr.w	r2, r3, #4
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe f8f4 	bl	8005f38 <HAL_DMA_GetState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d014      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	4a4e      	ldr	r2, [pc, #312]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007d5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd ff3c 	bl	8005be0 <HAL_DMA_Abort_IT>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	e000      	b.n	8007d80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d03e      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d112      	bne.n	8007dbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d112      	bne.n	8007df2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	f043 0204 	orr.w	r2, r3, #4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8b3 	bl	8007f7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e16:	e039      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d109      	bne.n	8007e32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2228      	movs	r2, #40	; 0x28
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff f827 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b28      	cmp	r3, #40	; 0x28
 8007e3c:	d111      	bne.n	8007e62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <I2C_Slave_STOPF+0x25c>)
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff f828 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
}
 8007e60:	e014      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	2b22      	cmp	r3, #34	; 0x22
 8007e68:	d002      	beq.n	8007e70 <I2C_Slave_STOPF+0x234>
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b22      	cmp	r3, #34	; 0x22
 8007e6e:	d10d      	bne.n	8007e8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fffa 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	080081e1 	.word	0x080081e1
 8007e98:	ffff0000 	.word	0xffff0000

08007e9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d002      	beq.n	8007ebe <I2C_Slave_AF+0x22>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d129      	bne.n	8007f12 <I2C_Slave_AF+0x76>
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	2b28      	cmp	r3, #40	; 0x28
 8007ec2:	d126      	bne.n	8007f12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a2c      	ldr	r2, [pc, #176]	; (8007f78 <I2C_Slave_AF+0xdc>)
 8007ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ed8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ee2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fe ffd0 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007f10:	e02e      	b.n	8007f70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b21      	cmp	r3, #33	; 0x21
 8007f16:	d126      	bne.n	8007f66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <I2C_Slave_AF+0xdc>)
 8007f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2221      	movs	r2, #33	; 0x21
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fe ff84 	bl	8006e6c <HAL_I2C_SlaveTxCpltCallback>
}
 8007f64:	e004      	b.n	8007f70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f6e:	615a      	str	r2, [r3, #20]
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	ffff0000 	.word	0xffff0000

08007f7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d002      	beq.n	8007fa0 <I2C_ITError+0x24>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b40      	cmp	r3, #64	; 0x40
 8007f9e:	d10a      	bne.n	8007fb6 <I2C_ITError+0x3a>
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b22      	cmp	r3, #34	; 0x22
 8007fa4:	d107      	bne.n	8007fb6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fb4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fbc:	2b28      	cmp	r3, #40	; 0x28
 8007fbe:	d107      	bne.n	8007fd0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2228      	movs	r2, #40	; 0x28
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fce:	e015      	b.n	8007ffc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fde:	d00a      	beq.n	8007ff6 <I2C_ITError+0x7a>
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b60      	cmp	r3, #96	; 0x60
 8007fe4:	d007      	beq.n	8007ff6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800a:	d162      	bne.n	80080d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d020      	beq.n	800806c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	4a6a      	ldr	r2, [pc, #424]	; (80081d8 <I2C_ITError+0x25c>)
 8008030:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd fdd2 	bl	8005be0 <HAL_DMA_Abort_IT>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8089 	beq.w	8008156 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008066:	4610      	mov	r0, r2
 8008068:	4798      	blx	r3
 800806a:	e074      	b.n	8008156 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	4a59      	ldr	r2, [pc, #356]	; (80081d8 <I2C_ITError+0x25c>)
 8008072:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	4618      	mov	r0, r3
 800807a:	f7fd fdb1 	bl	8005be0 <HAL_DMA_Abort_IT>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d068      	beq.n	8008156 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d10b      	bne.n	80080aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	e041      	b.n	8008156 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b60      	cmp	r3, #96	; 0x60
 80080dc:	d125      	bne.n	800812a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d10b      	bne.n	8008112 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fe feec 	bl	8006f00 <HAL_I2C_AbortCpltCallback>
 8008128:	e015      	b.n	8008156 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008134:	2b40      	cmp	r3, #64	; 0x40
 8008136:	d10b      	bne.n	8008150 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe fecb 	bl	8006eec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10e      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008192:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d113      	bne.n	80081d0 <I2C_ITError+0x254>
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	2b28      	cmp	r3, #40	; 0x28
 80081ac:	d110      	bne.n	80081d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <I2C_ITError+0x260>)
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fe fe70 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	080081e1 	.word	0x080081e1
 80081dc:	ffff0000 	.word	0xffff0000

080081e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081fa:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <I2C_DMAAbort+0x148>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	4a4a      	ldr	r2, [pc, #296]	; (800832c <I2C_DMAAbort+0x14c>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	0a1a      	lsrs	r2, r3, #8
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	00da      	lsls	r2, r3, #3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008226:	e00a      	b.n	800823e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b01      	subs	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d0ea      	beq.n	8008214 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824a:	2200      	movs	r2, #0
 800824c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	2200      	movs	r2, #0
 800825c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800826c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	2200      	movs	r2, #0
 8008282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	2200      	movs	r2, #0
 8008292:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0201 	bic.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b60      	cmp	r3, #96	; 0x60
 80082ae:	d10e      	bne.n	80082ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	f7fe fe1a 	bl	8006f00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082cc:	e027      	b.n	800831e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082ce:	7cfb      	ldrb	r3, [r7, #19]
 80082d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082d4:	2b28      	cmp	r3, #40	; 0x28
 80082d6:	d117      	bne.n	8008308 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2200      	movs	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2228      	movs	r2, #40	; 0x28
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008306:	e007      	b.n	8008318 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008318:	6978      	ldr	r0, [r7, #20]
 800831a:	f7fe fde7 	bl	8006eec <HAL_I2C_ErrorCallback>
}
 800831e:	bf00      	nop
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200003b8 	.word	0x200003b8
 800832c:	14f8b589 	.word	0x14f8b589

08008330 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	08db      	lsrs	r3, r3, #3
 8008342:	4a13      	ldr	r2, [pc, #76]	; (8008390 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	0a1a      	lsrs	r2, r3, #8
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b01      	subs	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e008      	b.n	8008380 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d0e9      	beq.n	8008352 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	200003b8 	.word	0x200003b8
 8008390:	14f8b589 	.word	0x14f8b589

08008394 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083a4:	d103      	bne.n	80083ae <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083ac:	e007      	b.n	80083be <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083b6:	d102      	bne.n	80083be <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2208      	movs	r2, #8
 80083bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
	...

080083cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e267      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d075      	beq.n	80084d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083ea:	4b88      	ldr	r3, [pc, #544]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 030c 	and.w	r3, r3, #12
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d00c      	beq.n	8008410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083f6:	4b85      	ldr	r3, [pc, #532]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d112      	bne.n	8008428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008402:	4b82      	ldr	r3, [pc, #520]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800840a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800840e:	d10b      	bne.n	8008428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008410:	4b7e      	ldr	r3, [pc, #504]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05b      	beq.n	80084d4 <HAL_RCC_OscConfig+0x108>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d157      	bne.n	80084d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e242      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008430:	d106      	bne.n	8008440 <HAL_RCC_OscConfig+0x74>
 8008432:	4b76      	ldr	r3, [pc, #472]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a75      	ldr	r2, [pc, #468]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	e01d      	b.n	800847c <HAL_RCC_OscConfig+0xb0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008448:	d10c      	bne.n	8008464 <HAL_RCC_OscConfig+0x98>
 800844a:	4b70      	ldr	r3, [pc, #448]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a6f      	ldr	r2, [pc, #444]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	4b6d      	ldr	r3, [pc, #436]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6c      	ldr	r2, [pc, #432]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800845c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e00b      	b.n	800847c <HAL_RCC_OscConfig+0xb0>
 8008464:	4b69      	ldr	r3, [pc, #420]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a68      	ldr	r2, [pc, #416]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800846a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b66      	ldr	r3, [pc, #408]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a65      	ldr	r2, [pc, #404]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800847a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d013      	beq.n	80084ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fd f918 	bl	80056b8 <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800848c:	f7fd f914 	bl	80056b8 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b64      	cmp	r3, #100	; 0x64
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e207      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	4b5b      	ldr	r3, [pc, #364]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0xc0>
 80084aa:	e014      	b.n	80084d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ac:	f7fd f904 	bl	80056b8 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084b4:	f7fd f900 	bl	80056b8 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	; 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e1f3      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084c6:	4b51      	ldr	r3, [pc, #324]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f0      	bne.n	80084b4 <HAL_RCC_OscConfig+0xe8>
 80084d2:	e000      	b.n	80084d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d063      	beq.n	80085aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084e2:	4b4a      	ldr	r3, [pc, #296]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ee:	4b47      	ldr	r3, [pc, #284]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d11c      	bne.n	8008534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084fa:	4b44      	ldr	r3, [pc, #272]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d116      	bne.n	8008534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008506:	4b41      	ldr	r3, [pc, #260]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <HAL_RCC_OscConfig+0x152>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d001      	beq.n	800851e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e1c7      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851e:	4b3b      	ldr	r3, [pc, #236]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	4937      	ldr	r1, [pc, #220]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008532:	e03a      	b.n	80085aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d020      	beq.n	800857e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800853c:	4b34      	ldr	r3, [pc, #208]	; (8008610 <HAL_RCC_OscConfig+0x244>)
 800853e:	2201      	movs	r2, #1
 8008540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008542:	f7fd f8b9 	bl	80056b8 <HAL_GetTick>
 8008546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008548:	e008      	b.n	800855c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800854a:	f7fd f8b5 	bl	80056b8 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e1a8      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855c:	4b2b      	ldr	r3, [pc, #172]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0f0      	beq.n	800854a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008568:	4b28      	ldr	r3, [pc, #160]	; (800860c <HAL_RCC_OscConfig+0x240>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	4925      	ldr	r1, [pc, #148]	; (800860c <HAL_RCC_OscConfig+0x240>)
 8008578:	4313      	orrs	r3, r2
 800857a:	600b      	str	r3, [r1, #0]
 800857c:	e015      	b.n	80085aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <HAL_RCC_OscConfig+0x244>)
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7fd f898 	bl	80056b8 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800858c:	f7fd f894 	bl	80056b8 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e187      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800859e:	4b1b      	ldr	r3, [pc, #108]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d036      	beq.n	8008624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d016      	beq.n	80085ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085be:	4b15      	ldr	r3, [pc, #84]	; (8008614 <HAL_RCC_OscConfig+0x248>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c4:	f7fd f878 	bl	80056b8 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085cc:	f7fd f874 	bl	80056b8 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e167      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085de:	4b0b      	ldr	r3, [pc, #44]	; (800860c <HAL_RCC_OscConfig+0x240>)
 80085e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f0      	beq.n	80085cc <HAL_RCC_OscConfig+0x200>
 80085ea:	e01b      	b.n	8008624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <HAL_RCC_OscConfig+0x248>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f2:	f7fd f861 	bl	80056b8 <HAL_GetTick>
 80085f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f8:	e00e      	b.n	8008618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085fa:	f7fd f85d 	bl	80056b8 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d907      	bls.n	8008618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e150      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
 800860c:	40023800 	.word	0x40023800
 8008610:	42470000 	.word	0x42470000
 8008614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008618:	4b88      	ldr	r3, [pc, #544]	; (800883c <HAL_RCC_OscConfig+0x470>)
 800861a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1ea      	bne.n	80085fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 8097 	beq.w	8008760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008636:	4b81      	ldr	r3, [pc, #516]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10f      	bne.n	8008662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
 8008646:	4b7d      	ldr	r3, [pc, #500]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	4a7c      	ldr	r2, [pc, #496]	; (800883c <HAL_RCC_OscConfig+0x470>)
 800864c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008650:	6413      	str	r3, [r2, #64]	; 0x40
 8008652:	4b7a      	ldr	r3, [pc, #488]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800865e:	2301      	movs	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008662:	4b77      	ldr	r3, [pc, #476]	; (8008840 <HAL_RCC_OscConfig+0x474>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d118      	bne.n	80086a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <HAL_RCC_OscConfig+0x474>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a73      	ldr	r2, [pc, #460]	; (8008840 <HAL_RCC_OscConfig+0x474>)
 8008674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800867a:	f7fd f81d 	bl	80056b8 <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008682:	f7fd f819 	bl	80056b8 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e10c      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008694:	4b6a      	ldr	r3, [pc, #424]	; (8008840 <HAL_RCC_OscConfig+0x474>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d106      	bne.n	80086b6 <HAL_RCC_OscConfig+0x2ea>
 80086a8:	4b64      	ldr	r3, [pc, #400]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	4a63      	ldr	r2, [pc, #396]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086ae:	f043 0301 	orr.w	r3, r3, #1
 80086b2:	6713      	str	r3, [r2, #112]	; 0x70
 80086b4:	e01c      	b.n	80086f0 <HAL_RCC_OscConfig+0x324>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d10c      	bne.n	80086d8 <HAL_RCC_OscConfig+0x30c>
 80086be:	4b5f      	ldr	r3, [pc, #380]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	4a5e      	ldr	r2, [pc, #376]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086c4:	f043 0304 	orr.w	r3, r3, #4
 80086c8:	6713      	str	r3, [r2, #112]	; 0x70
 80086ca:	4b5c      	ldr	r3, [pc, #368]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	4a5b      	ldr	r2, [pc, #364]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6713      	str	r3, [r2, #112]	; 0x70
 80086d6:	e00b      	b.n	80086f0 <HAL_RCC_OscConfig+0x324>
 80086d8:	4b58      	ldr	r3, [pc, #352]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086dc:	4a57      	ldr	r2, [pc, #348]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	6713      	str	r3, [r2, #112]	; 0x70
 80086e4:	4b55      	ldr	r3, [pc, #340]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	4a54      	ldr	r2, [pc, #336]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80086ea:	f023 0304 	bic.w	r3, r3, #4
 80086ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d015      	beq.n	8008724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f8:	f7fc ffde 	bl	80056b8 <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086fe:	e00a      	b.n	8008716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008700:	f7fc ffda 	bl	80056b8 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	f241 3288 	movw	r2, #5000	; 0x1388
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e0cb      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008716:	4b49      	ldr	r3, [pc, #292]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0ee      	beq.n	8008700 <HAL_RCC_OscConfig+0x334>
 8008722:	e014      	b.n	800874e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008724:	f7fc ffc8 	bl	80056b8 <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800872a:	e00a      	b.n	8008742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fc ffc4 	bl	80056b8 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f241 3288 	movw	r2, #5000	; 0x1388
 800873a:	4293      	cmp	r3, r2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e0b5      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008742:	4b3e      	ldr	r3, [pc, #248]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1ee      	bne.n	800872c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008754:	4b39      	ldr	r3, [pc, #228]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	4a38      	ldr	r2, [pc, #224]	; (800883c <HAL_RCC_OscConfig+0x470>)
 800875a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800875e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80a1 	beq.w	80088ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800876a:	4b34      	ldr	r3, [pc, #208]	; (800883c <HAL_RCC_OscConfig+0x470>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 030c 	and.w	r3, r3, #12
 8008772:	2b08      	cmp	r3, #8
 8008774:	d05c      	beq.n	8008830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d141      	bne.n	8008802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800877e:	4b31      	ldr	r3, [pc, #196]	; (8008844 <HAL_RCC_OscConfig+0x478>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008784:	f7fc ff98 	bl	80056b8 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800878c:	f7fc ff94 	bl	80056b8 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e087      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800879e:	4b27      	ldr	r3, [pc, #156]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69da      	ldr	r2, [r3, #28]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	019b      	lsls	r3, r3, #6
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	3b01      	subs	r3, #1
 80087c4:	041b      	lsls	r3, r3, #16
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	491b      	ldr	r1, [pc, #108]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087d4:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <HAL_RCC_OscConfig+0x478>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087da:	f7fc ff6d 	bl	80056b8 <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e2:	f7fc ff69 	bl	80056b8 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e05c      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087f4:	4b11      	ldr	r3, [pc, #68]	; (800883c <HAL_RCC_OscConfig+0x470>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <HAL_RCC_OscConfig+0x416>
 8008800:	e054      	b.n	80088ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <HAL_RCC_OscConfig+0x478>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008808:	f7fc ff56 	bl	80056b8 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008810:	f7fc ff52 	bl	80056b8 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e045      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008822:	4b06      	ldr	r3, [pc, #24]	; (800883c <HAL_RCC_OscConfig+0x470>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x444>
 800882e:	e03d      	b.n	80088ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d107      	bne.n	8008848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e038      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
 800883c:	40023800 	.word	0x40023800
 8008840:	40007000 	.word	0x40007000
 8008844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008848:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <HAL_RCC_OscConfig+0x4ec>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d028      	beq.n	80088a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008860:	429a      	cmp	r2, r3
 8008862:	d121      	bne.n	80088a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886e:	429a      	cmp	r2, r3
 8008870:	d11a      	bne.n	80088a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008878:	4013      	ands	r3, r2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800887e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008880:	4293      	cmp	r3, r2
 8008882:	d111      	bne.n	80088a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	3b01      	subs	r3, #1
 8008892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008894:	429a      	cmp	r2, r3
 8008896:	d107      	bne.n	80088a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d001      	beq.n	80088ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800

080088bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0cc      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088d0:	4b68      	ldr	r3, [pc, #416]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d90c      	bls.n	80088f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088de:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b63      	ldr	r3, [pc, #396]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0b8      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d020      	beq.n	8008946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008910:	4b59      	ldr	r3, [pc, #356]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4a58      	ldr	r2, [pc, #352]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800891a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008928:	4b53      	ldr	r3, [pc, #332]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	4a52      	ldr	r2, [pc, #328]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008934:	4b50      	ldr	r3, [pc, #320]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	494d      	ldr	r1, [pc, #308]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	4313      	orrs	r3, r2
 8008944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d044      	beq.n	80089dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d107      	bne.n	800896a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800895a:	4b47      	ldr	r3, [pc, #284]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d119      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e07f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d003      	beq.n	800897a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008976:	2b03      	cmp	r3, #3
 8008978:	d107      	bne.n	800898a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897a:	4b3f      	ldr	r3, [pc, #252]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e06f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898a:	4b3b      	ldr	r3, [pc, #236]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e067      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899a:	4b37      	ldr	r3, [pc, #220]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f023 0203 	bic.w	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4934      	ldr	r1, [pc, #208]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089ac:	f7fc fe84 	bl	80056b8 <HAL_GetTick>
 80089b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b2:	e00a      	b.n	80089ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b4:	f7fc fe80 	bl	80056b8 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e04f      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ca:	4b2b      	ldr	r3, [pc, #172]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 020c 	and.w	r2, r3, #12
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	429a      	cmp	r2, r3
 80089da:	d1eb      	bne.n	80089b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d20c      	bcs.n	8008a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ea:	4b22      	ldr	r3, [pc, #136]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f2:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <HAL_RCC_ClockConfig+0x1b8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e032      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a10:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	4916      	ldr	r1, [pc, #88]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	490e      	ldr	r1, [pc, #56]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a42:	f000 f821 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	091b      	lsrs	r3, r3, #4
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	490a      	ldr	r1, [pc, #40]	; (8008a7c <HAL_RCC_ClockConfig+0x1c0>)
 8008a54:	5ccb      	ldrb	r3, [r1, r3]
 8008a56:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5a:	4a09      	ldr	r2, [pc, #36]	; (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 8008a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fc fde4 	bl	8005630 <HAL_InitTick>

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40023c00 	.word	0x40023c00
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	0800ba4c 	.word	0x0800ba4c
 8008a80:	200003b8 	.word	0x200003b8
 8008a84:	200003bc 	.word	0x200003bc

08008a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a8c:	b094      	sub	sp, #80	; 0x50
 8008a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
 8008a94:	2300      	movs	r3, #0
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a98:	2300      	movs	r3, #0
 8008a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aa0:	4b79      	ldr	r3, [pc, #484]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 030c 	and.w	r3, r3, #12
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	d00d      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	f200 80e1 	bhi.w	8008c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <HAL_RCC_GetSysClockFreq+0x34>
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aba:	e0db      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008abc:	4b73      	ldr	r3, [pc, #460]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ac0:	e0db      	b.n	8008c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ac2:	4b73      	ldr	r3, [pc, #460]	; (8008c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ac6:	e0d8      	b.n	8008c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ac8:	4b6f      	ldr	r3, [pc, #444]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ad2:	4b6d      	ldr	r3, [pc, #436]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d063      	beq.n	8008ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ade:	4b6a      	ldr	r3, [pc, #424]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	099b      	lsrs	r3, r3, #6
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af0:	633b      	str	r3, [r7, #48]	; 0x30
 8008af2:	2300      	movs	r3, #0
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
 8008af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	f04f 0000 	mov.w	r0, #0
 8008b02:	f04f 0100 	mov.w	r1, #0
 8008b06:	0159      	lsls	r1, r3, #5
 8008b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b0c:	0150      	lsls	r0, r2, #5
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4621      	mov	r1, r4
 8008b14:	1a51      	subs	r1, r2, r1
 8008b16:	6139      	str	r1, [r7, #16]
 8008b18:	4629      	mov	r1, r5
 8008b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	f04f 0200 	mov.w	r2, #0
 8008b24:	f04f 0300 	mov.w	r3, #0
 8008b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	018b      	lsls	r3, r1, #6
 8008b30:	4651      	mov	r1, sl
 8008b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b36:	4651      	mov	r1, sl
 8008b38:	018a      	lsls	r2, r1, #6
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8008b40:	4659      	mov	r1, fp
 8008b42:	eb63 0901 	sbc.w	r9, r3, r1
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b5a:	4690      	mov	r8, r2
 8008b5c:	4699      	mov	r9, r3
 8008b5e:	4623      	mov	r3, r4
 8008b60:	eb18 0303 	adds.w	r3, r8, r3
 8008b64:	60bb      	str	r3, [r7, #8]
 8008b66:	462b      	mov	r3, r5
 8008b68:	eb49 0303 	adc.w	r3, r9, r3
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	024b      	lsls	r3, r1, #9
 8008b7e:	4621      	mov	r1, r4
 8008b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b84:	4621      	mov	r1, r4
 8008b86:	024a      	lsls	r2, r1, #9
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8e:	2200      	movs	r2, #0
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b98:	f7f7 ff5c 	bl	8000a54 <__aeabi_uldivmod>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba4:	e058      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ba6:	4b38      	ldr	r3, [pc, #224]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	099b      	lsrs	r3, r3, #6
 8008bac:	2200      	movs	r2, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bb6:	623b      	str	r3, [r7, #32]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f04f 0100 	mov.w	r1, #0
 8008bcc:	0159      	lsls	r1, r3, #5
 8008bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bd2:	0150      	lsls	r0, r2, #5
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4641      	mov	r1, r8
 8008bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bde:	4649      	mov	r1, r9
 8008be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8008bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	00eb      	lsls	r3, r5, #3
 8008c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c0e:	00e2      	lsls	r2, r4, #3
 8008c10:	4614      	mov	r4, r2
 8008c12:	461d      	mov	r5, r3
 8008c14:	4643      	mov	r3, r8
 8008c16:	18e3      	adds	r3, r4, r3
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	eb45 0303 	adc.w	r3, r5, r3
 8008c20:	607b      	str	r3, [r7, #4]
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c2e:	4629      	mov	r1, r5
 8008c30:	028b      	lsls	r3, r1, #10
 8008c32:	4621      	mov	r1, r4
 8008c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c38:	4621      	mov	r1, r4
 8008c3a:	028a      	lsls	r2, r1, #10
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c42:	2200      	movs	r2, #0
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	61fa      	str	r2, [r7, #28]
 8008c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c4c:	f7f7 ff02 	bl	8000a54 <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4613      	mov	r3, r2
 8008c56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c58:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	3301      	adds	r3, #1
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c72:	e002      	b.n	8008c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3750      	adds	r7, #80	; 0x50
 8008c80:	46bd      	mov	sp, r7
 8008c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c86:	bf00      	nop
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	00f42400 	.word	0x00f42400
 8008c90:	007a1200 	.word	0x007a1200

08008c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c98:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	200003b8 	.word	0x200003b8

08008cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cb0:	f7ff fff0 	bl	8008c94 <HAL_RCC_GetHCLKFreq>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	0a9b      	lsrs	r3, r3, #10
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	4903      	ldr	r1, [pc, #12]	; (8008cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cc2:	5ccb      	ldrb	r3, [r1, r3]
 8008cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	0800ba5c 	.word	0x0800ba5c

08008cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cd8:	f7ff ffdc 	bl	8008c94 <HAL_RCC_GetHCLKFreq>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	0b5b      	lsrs	r3, r3, #13
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	4903      	ldr	r1, [pc, #12]	; (8008cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40023800 	.word	0x40023800
 8008cf8:	0800ba5c 	.word	0x0800ba5c

08008cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e041      	b.n	8008d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fc fa6a 	bl	80051fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f000 fdac 	bl	8009898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d001      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e044      	b.n	8008e3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a1e      	ldr	r2, [pc, #120]	; (8008e4c <HAL_TIM_Base_Start_IT+0xb0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d018      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x6c>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dde:	d013      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x6c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1a      	ldr	r2, [pc, #104]	; (8008e50 <HAL_TIM_Base_Start_IT+0xb4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00e      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x6c>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <HAL_TIM_Base_Start_IT+0xb8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d009      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x6c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <HAL_TIM_Base_Start_IT+0xbc>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d004      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x6c>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a16      	ldr	r2, [pc, #88]	; (8008e5c <HAL_TIM_Base_Start_IT+0xc0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d111      	bne.n	8008e2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b06      	cmp	r3, #6
 8008e18:	d010      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2a:	e007      	b.n	8008e3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	40000c00 	.word	0x40000c00
 8008e5c:	40014000 	.word	0x40014000

08008e60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0201 	bic.w	r2, r2, #1
 8008e76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6a1a      	ldr	r2, [r3, #32]
 8008e7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10f      	bne.n	8008ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a1a      	ldr	r2, [r3, #32]
 8008e8e:	f240 4344 	movw	r3, #1092	; 0x444
 8008e92:	4013      	ands	r3, r2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d107      	bne.n	8008ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e041      	b.n	8008f54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fc f91b 	bl	8005120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2202      	movs	r2, #2
 8008eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f000 fccb 	bl	8009898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <HAL_TIM_PWM_Start+0x24>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	e022      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x6a>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d109      	bne.n	8008f9a <HAL_TIM_PWM_Start+0x3e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	bf14      	ite	ne
 8008f92:	2301      	movne	r3, #1
 8008f94:	2300      	moveq	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	e015      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x6a>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d109      	bne.n	8008fb4 <HAL_TIM_PWM_Start+0x58>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	bf14      	ite	ne
 8008fac:	2301      	movne	r3, #1
 8008fae:	2300      	moveq	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	e008      	b.n	8008fc6 <HAL_TIM_PWM_Start+0x6a>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	bf14      	ite	ne
 8008fc0:	2301      	movne	r3, #1
 8008fc2:	2300      	moveq	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e068      	b.n	80090a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <HAL_TIM_PWM_Start+0x82>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fdc:	e013      	b.n	8009006 <HAL_TIM_PWM_Start+0xaa>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d104      	bne.n	8008fee <HAL_TIM_PWM_Start+0x92>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fec:	e00b      	b.n	8009006 <HAL_TIM_PWM_Start+0xaa>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d104      	bne.n	8008ffe <HAL_TIM_PWM_Start+0xa2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ffc:	e003      	b.n	8009006 <HAL_TIM_PWM_Start+0xaa>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2201      	movs	r2, #1
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fee8 	bl	8009de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a23      	ldr	r2, [pc, #140]	; (80090a8 <HAL_TIM_PWM_Start+0x14c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d107      	bne.n	800902e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800902c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <HAL_TIM_PWM_Start+0x14c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d018      	beq.n	800906a <HAL_TIM_PWM_Start+0x10e>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009040:	d013      	beq.n	800906a <HAL_TIM_PWM_Start+0x10e>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a19      	ldr	r2, [pc, #100]	; (80090ac <HAL_TIM_PWM_Start+0x150>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00e      	beq.n	800906a <HAL_TIM_PWM_Start+0x10e>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a17      	ldr	r2, [pc, #92]	; (80090b0 <HAL_TIM_PWM_Start+0x154>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_TIM_PWM_Start+0x10e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a16      	ldr	r2, [pc, #88]	; (80090b4 <HAL_TIM_PWM_Start+0x158>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_TIM_PWM_Start+0x10e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a14      	ldr	r2, [pc, #80]	; (80090b8 <HAL_TIM_PWM_Start+0x15c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d111      	bne.n	800908e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b06      	cmp	r3, #6
 800907a:	d010      	beq.n	800909e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908c:	e007      	b.n	800909e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40000400 	.word	0x40000400
 80090b0:	40000800 	.word	0x40000800
 80090b4:	40000c00 	.word	0x40000c00
 80090b8:	40014000 	.word	0x40014000

080090bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e097      	b.n	8009200 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7fc f843 	bl	8005170 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2202      	movs	r2, #2
 80090ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6812      	ldr	r2, [r2, #0]
 80090fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009100:	f023 0307 	bic.w	r3, r3, #7
 8009104:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f000 fbc1 	bl	8009898 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913e:	f023 0303 	bic.w	r3, r3, #3
 8009142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4313      	orrs	r3, r2
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800915c:	f023 030c 	bic.w	r3, r3, #12
 8009160:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800916c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	4313      	orrs	r3, r2
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	011a      	lsls	r2, r3, #4
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	031b      	lsls	r3, r3, #12
 800918c:	4313      	orrs	r3, r2
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800919a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	4313      	orrs	r3, r2
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009218:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009220:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009228:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009230:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d110      	bne.n	800925a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d102      	bne.n	8009244 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800923e:	7b7b      	ldrb	r3, [r7, #13]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d001      	beq.n	8009248 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e069      	b.n	800931c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009258:	e031      	b.n	80092be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b04      	cmp	r3, #4
 800925e:	d110      	bne.n	8009282 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d102      	bne.n	800926c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009266:	7b3b      	ldrb	r3, [r7, #12]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d001      	beq.n	8009270 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e055      	b.n	800931c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009280:	e01d      	b.n	80092be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d108      	bne.n	800929a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d105      	bne.n	800929a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800928e:	7b7b      	ldrb	r3, [r7, #13]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d102      	bne.n	800929a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009294:	7b3b      	ldrb	r3, [r7, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d001      	beq.n	800929e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e03e      	b.n	800931c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_TIM_Encoder_Start+0xc4>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d008      	beq.n	80092dc <HAL_TIM_Encoder_Start+0xd4>
 80092ca:	e00f      	b.n	80092ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2201      	movs	r2, #1
 80092d2:	2100      	movs	r1, #0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fd85 	bl	8009de4 <TIM_CCxChannelCmd>
      break;
 80092da:	e016      	b.n	800930a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	2104      	movs	r1, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fd7d 	bl	8009de4 <TIM_CCxChannelCmd>
      break;
 80092ea:	e00e      	b.n	800930a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2201      	movs	r2, #1
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fd75 	bl	8009de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2201      	movs	r2, #1
 8009300:	2104      	movs	r1, #4
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fd6e 	bl	8009de4 <TIM_CCxChannelCmd>
      break;
 8009308:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0201 	orr.w	r2, r2, #1
 8009318:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b02      	cmp	r3, #2
 8009338:	d122      	bne.n	8009380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b02      	cmp	r3, #2
 8009346:	d11b      	bne.n	8009380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0202 	mvn.w	r2, #2
 8009350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa77 	bl	800985a <HAL_TIM_IC_CaptureCallback>
 800936c:	e005      	b.n	800937a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fa69 	bl	8009846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa7a 	bl	800986e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b04      	cmp	r3, #4
 800938c:	d122      	bne.n	80093d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d11b      	bne.n	80093d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0204 	mvn.w	r2, #4
 80093a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa4d 	bl	800985a <HAL_TIM_IC_CaptureCallback>
 80093c0:	e005      	b.n	80093ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa3f 	bl	8009846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa50 	bl	800986e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d122      	bne.n	8009428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0308 	and.w	r3, r3, #8
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d11b      	bne.n	8009428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0208 	mvn.w	r2, #8
 80093f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2204      	movs	r2, #4
 80093fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa23 	bl	800985a <HAL_TIM_IC_CaptureCallback>
 8009414:	e005      	b.n	8009422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa15 	bl	8009846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa26 	bl	800986e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b10      	cmp	r3, #16
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b10      	cmp	r3, #16
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0210 	mvn.w	r2, #16
 800944c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2208      	movs	r2, #8
 8009452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f9f9 	bl	800985a <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9eb 	bl	8009846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f9fc 	bl	800986e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b01      	cmp	r3, #1
 8009488:	d10e      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b01      	cmp	r3, #1
 8009496:	d107      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0201 	mvn.w	r2, #1
 80094a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7fb fcf2 	bl	8004e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d10e      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b80      	cmp	r3, #128	; 0x80
 80094c2:	d107      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fd78 	bl	8009fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b40      	cmp	r3, #64	; 0x40
 80094e0:	d10e      	bne.n	8009500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d107      	bne.n	8009500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f9c1 	bl	8009882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b20      	cmp	r3, #32
 800950c:	d10e      	bne.n	800952c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b20      	cmp	r3, #32
 800951a:	d107      	bne.n	800952c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0220 	mvn.w	r2, #32
 8009524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fd42 	bl	8009fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800954e:	2302      	movs	r3, #2
 8009550:	e0ae      	b.n	80096b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b0c      	cmp	r3, #12
 800955e:	f200 809f 	bhi.w	80096a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	0800959d 	.word	0x0800959d
 800956c:	080096a1 	.word	0x080096a1
 8009570:	080096a1 	.word	0x080096a1
 8009574:	080096a1 	.word	0x080096a1
 8009578:	080095dd 	.word	0x080095dd
 800957c:	080096a1 	.word	0x080096a1
 8009580:	080096a1 	.word	0x080096a1
 8009584:	080096a1 	.word	0x080096a1
 8009588:	0800961f 	.word	0x0800961f
 800958c:	080096a1 	.word	0x080096a1
 8009590:	080096a1 	.word	0x080096a1
 8009594:	080096a1 	.word	0x080096a1
 8009598:	0800965f 	.word	0x0800965f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f9f8 	bl	8009998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699a      	ldr	r2, [r3, #24]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0208 	orr.w	r2, r2, #8
 80095b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0204 	bic.w	r2, r2, #4
 80095c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6999      	ldr	r1, [r3, #24]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	619a      	str	r2, [r3, #24]
      break;
 80095da:	e064      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fa3e 	bl	8009a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6999      	ldr	r1, [r3, #24]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	021a      	lsls	r2, r3, #8
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	619a      	str	r2, [r3, #24]
      break;
 800961c:	e043      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fa89 	bl	8009b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69da      	ldr	r2, [r3, #28]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0208 	orr.w	r2, r2, #8
 8009638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0204 	bic.w	r2, r2, #4
 8009648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69d9      	ldr	r1, [r3, #28]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	61da      	str	r2, [r3, #28]
      break;
 800965c:	e023      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fad3 	bl	8009c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69d9      	ldr	r1, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	021a      	lsls	r2, r3, #8
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	61da      	str	r2, [r3, #28]
      break;
 800969e:	e002      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	75fb      	strb	r3, [r7, #23]
      break;
 80096a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e0b4      	b.n	800983e <HAL_TIM_ConfigClockSource+0x186>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970c:	d03e      	beq.n	800978c <HAL_TIM_ConfigClockSource+0xd4>
 800970e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009712:	f200 8087 	bhi.w	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 8009716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971a:	f000 8086 	beq.w	800982a <HAL_TIM_ConfigClockSource+0x172>
 800971e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009722:	d87f      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 8009724:	2b70      	cmp	r3, #112	; 0x70
 8009726:	d01a      	beq.n	800975e <HAL_TIM_ConfigClockSource+0xa6>
 8009728:	2b70      	cmp	r3, #112	; 0x70
 800972a:	d87b      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 800972c:	2b60      	cmp	r3, #96	; 0x60
 800972e:	d050      	beq.n	80097d2 <HAL_TIM_ConfigClockSource+0x11a>
 8009730:	2b60      	cmp	r3, #96	; 0x60
 8009732:	d877      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 8009734:	2b50      	cmp	r3, #80	; 0x50
 8009736:	d03c      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0xfa>
 8009738:	2b50      	cmp	r3, #80	; 0x50
 800973a:	d873      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d058      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x13a>
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d86f      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 8009744:	2b30      	cmp	r3, #48	; 0x30
 8009746:	d064      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15a>
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d86b      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 800974c:	2b20      	cmp	r3, #32
 800974e:	d060      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15a>
 8009750:	2b20      	cmp	r3, #32
 8009752:	d867      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d05c      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15a>
 8009758:	2b10      	cmp	r3, #16
 800975a:	d05a      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x15a>
 800975c:	e062      	b.n	8009824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6899      	ldr	r1, [r3, #8]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f000 fb19 	bl	8009da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	609a      	str	r2, [r3, #8]
      break;
 800978a:	e04f      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6899      	ldr	r1, [r3, #8]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f000 fb02 	bl	8009da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097ae:	609a      	str	r2, [r3, #8]
      break;
 80097b0:	e03c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6859      	ldr	r1, [r3, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	461a      	mov	r2, r3
 80097c0:	f000 fa76 	bl	8009cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2150      	movs	r1, #80	; 0x50
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 facf 	bl	8009d6e <TIM_ITRx_SetConfig>
      break;
 80097d0:	e02c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6859      	ldr	r1, [r3, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	461a      	mov	r2, r3
 80097e0:	f000 fa95 	bl	8009d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2160      	movs	r1, #96	; 0x60
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fabf 	bl	8009d6e <TIM_ITRx_SetConfig>
      break;
 80097f0:	e01c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6859      	ldr	r1, [r3, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	461a      	mov	r2, r3
 8009800:	f000 fa56 	bl	8009cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2140      	movs	r1, #64	; 0x40
 800980a:	4618      	mov	r0, r3
 800980c:	f000 faaf 	bl	8009d6e <TIM_ITRx_SetConfig>
      break;
 8009810:	e00c      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f000 faa6 	bl	8009d6e <TIM_ITRx_SetConfig>
      break;
 8009822:	e003      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	e000      	b.n	800982c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800982a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a34      	ldr	r2, [pc, #208]	; (800997c <TIM_Base_SetConfig+0xe4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00f      	beq.n	80098d0 <TIM_Base_SetConfig+0x38>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b6:	d00b      	beq.n	80098d0 <TIM_Base_SetConfig+0x38>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a31      	ldr	r2, [pc, #196]	; (8009980 <TIM_Base_SetConfig+0xe8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d007      	beq.n	80098d0 <TIM_Base_SetConfig+0x38>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a30      	ldr	r2, [pc, #192]	; (8009984 <TIM_Base_SetConfig+0xec>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_Base_SetConfig+0x38>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a2f      	ldr	r2, [pc, #188]	; (8009988 <TIM_Base_SetConfig+0xf0>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d108      	bne.n	80098e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a25      	ldr	r2, [pc, #148]	; (800997c <TIM_Base_SetConfig+0xe4>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d01b      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d017      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a22      	ldr	r2, [pc, #136]	; (8009980 <TIM_Base_SetConfig+0xe8>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d013      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a21      	ldr	r2, [pc, #132]	; (8009984 <TIM_Base_SetConfig+0xec>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00f      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a20      	ldr	r2, [pc, #128]	; (8009988 <TIM_Base_SetConfig+0xf0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a1f      	ldr	r2, [pc, #124]	; (800998c <TIM_Base_SetConfig+0xf4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a1e      	ldr	r2, [pc, #120]	; (8009990 <TIM_Base_SetConfig+0xf8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_Base_SetConfig+0x8a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <TIM_Base_SetConfig+0xfc>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d108      	bne.n	8009934 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	4313      	orrs	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a08      	ldr	r2, [pc, #32]	; (800997c <TIM_Base_SetConfig+0xe4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d103      	bne.n	8009968 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	615a      	str	r2, [r3, #20]
}
 800996e:	bf00      	nop
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40010000 	.word	0x40010000
 8009980:	40000400 	.word	0x40000400
 8009984:	40000800 	.word	0x40000800
 8009988:	40000c00 	.word	0x40000c00
 800998c:	40014000 	.word	0x40014000
 8009990:	40014400 	.word	0x40014400
 8009994:	40014800 	.word	0x40014800

08009998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f023 0201 	bic.w	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0303 	bic.w	r3, r3, #3
 80099ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0302 	bic.w	r3, r3, #2
 80099e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a1c      	ldr	r2, [pc, #112]	; (8009a60 <TIM_OC1_SetConfig+0xc8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d10c      	bne.n	8009a0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f023 0308 	bic.w	r3, r3, #8
 80099fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f023 0304 	bic.w	r3, r3, #4
 8009a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a13      	ldr	r2, [pc, #76]	; (8009a60 <TIM_OC1_SetConfig+0xc8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d111      	bne.n	8009a3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	621a      	str	r2, [r3, #32]
}
 8009a54:	bf00      	nop
 8009a56:	371c      	adds	r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	40010000 	.word	0x40010000

08009a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0210 	bic.w	r2, r3, #16
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f023 0320 	bic.w	r3, r3, #32
 8009aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <TIM_OC2_SetConfig+0xd4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d10d      	bne.n	8009ae0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	; (8009b38 <TIM_OC2_SetConfig+0xd4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d113      	bne.n	8009b10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	40010000 	.word	0x40010000

08009b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	021b      	lsls	r3, r3, #8
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a1d      	ldr	r2, [pc, #116]	; (8009c0c <TIM_OC3_SetConfig+0xd0>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d10d      	bne.n	8009bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	021b      	lsls	r3, r3, #8
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a14      	ldr	r2, [pc, #80]	; (8009c0c <TIM_OC3_SetConfig+0xd0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d113      	bne.n	8009be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40010000 	.word	0x40010000

08009c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	031b      	lsls	r3, r3, #12
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a10      	ldr	r2, [pc, #64]	; (8009cac <TIM_OC4_SetConfig+0x9c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d109      	bne.n	8009c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	019b      	lsls	r3, r3, #6
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	621a      	str	r2, [r3, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40010000 	.word	0x40010000

08009cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f023 0201 	bic.w	r2, r3, #1
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f023 030a 	bic.w	r3, r3, #10
 8009cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b087      	sub	sp, #28
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f023 0210 	bic.w	r2, r3, #16
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	031b      	lsls	r3, r3, #12
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	621a      	str	r2, [r3, #32]
}
 8009d62:	bf00      	nop
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f043 0307 	orr.w	r3, r3, #7
 8009d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	609a      	str	r2, [r3, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	021a      	lsls	r2, r3, #8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	609a      	str	r2, [r3, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	371c      	adds	r7, #28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	2201      	movs	r2, #1
 8009df8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1a      	ldr	r2, [r3, #32]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	43db      	mvns	r3, r3
 8009e06:	401a      	ands	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1a      	ldr	r2, [r3, #32]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f003 031f 	and.w	r3, r3, #31
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	621a      	str	r2, [r3, #32]
}
 8009e22:	bf00      	nop
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
	...

08009e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e050      	b.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a1c      	ldr	r2, [pc, #112]	; (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d018      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e94:	d013      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a18      	ldr	r2, [pc, #96]	; (8009efc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00e      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a16      	ldr	r2, [pc, #88]	; (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d009      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a15      	ldr	r2, [pc, #84]	; (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d004      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a13      	ldr	r2, [pc, #76]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d10c      	bne.n	8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	40010000 	.word	0x40010000
 8009efc:	40000400 	.word	0x40000400
 8009f00:	40000800 	.word	0x40000800
 8009f04:	40000c00 	.word	0x40000c00
 8009f08:	40014000 	.word	0x40014000

08009f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d101      	bne.n	8009f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e03d      	b.n	8009fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e03f      	b.n	800a06a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fb f97c 	bl	80052fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2224      	movs	r2, #36	; 0x24
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a01a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 ff81 	bl	800af24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695a      	ldr	r2, [r3, #20]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08c      	sub	sp, #48	; 0x30
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	4613      	mov	r3, r2
 800a080:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	d165      	bne.n	800a15a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <HAL_UART_Transmit_DMA+0x26>
 800a094:	88fb      	ldrh	r3, [r7, #6]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e05e      	b.n	800a15c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d101      	bne.n	800a0ac <HAL_UART_Transmit_DMA+0x38>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e057      	b.n	800a15c <HAL_UART_Transmit_DMA+0xe8>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	88fa      	ldrh	r2, [r7, #6]
 800a0be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2221      	movs	r2, #33	; 0x21
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d8:	4a22      	ldr	r2, [pc, #136]	; (800a164 <HAL_UART_Transmit_DMA+0xf0>)
 800a0da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e0:	4a21      	ldr	r2, [pc, #132]	; (800a168 <HAL_UART_Transmit_DMA+0xf4>)
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	4a20      	ldr	r2, [pc, #128]	; (800a16c <HAL_UART_Transmit_DMA+0xf8>)
 800a0ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a0f4:	f107 0308 	add.w	r3, r7, #8
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	6819      	ldr	r1, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3304      	adds	r3, #4
 800a108:	461a      	mov	r2, r3
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	f7fb fca0 	bl	8005a50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a118:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3314      	adds	r3, #20
 800a128:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3314      	adds	r3, #20
 800a140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a142:	627a      	str	r2, [r7, #36]	; 0x24
 800a144:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6a39      	ldr	r1, [r7, #32]
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e5      	bne.n	800a122 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e000      	b.n	800a15c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a15a:	2302      	movs	r3, #2
  }
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3730      	adds	r7, #48	; 0x30
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	0800a7bd 	.word	0x0800a7bd
 800a168:	0800a857 	.word	0x0800a857
 800a16c:	0800a9cf 	.word	0x0800a9cf

0800a170 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08c      	sub	sp, #48	; 0x30
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b20      	cmp	r3, #32
 800a188:	d152      	bne.n	800a230 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e04b      	b.n	800a232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e044      	b.n	800a232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fc51 	bl	800aa64 <UART_Start_Receive_DMA>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d12c      	bne.n	800a22a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d125      	bne.n	800a224 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f043 0310 	orr.w	r3, r3, #16
 800a204:	62bb      	str	r3, [r7, #40]	; 0x28
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a20e:	627a      	str	r2, [r7, #36]	; 0x24
 800a210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	6a39      	ldr	r1, [r7, #32]
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e5      	bne.n	800a1ee <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a222:	e002      	b.n	800a22a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a22a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a22e:	e000      	b.n	800a232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a230:	2302      	movs	r3, #2
  }
}
 800a232:	4618      	mov	r0, r3
 800a234:	3730      	adds	r7, #48	; 0x30
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b0ba      	sub	sp, #232	; 0xe8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a262:	2300      	movs	r3, #0
 800a264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a268:	2300      	movs	r3, #0
 800a26a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a27a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10f      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a286:	f003 0320 	and.w	r3, r3, #32
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d009      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x66>
 800a28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a292:	f003 0320 	and.w	r3, r3, #32
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fd87 	bl	800adae <UART_Receive_IT>
      return;
 800a2a0:	e256      	b.n	800a750 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80de 	beq.w	800a468 <HAL_UART_IRQHandler+0x22c>
 800a2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80d1 	beq.w	800a468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <HAL_UART_IRQHandler+0xae>
 800a2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f043 0201 	orr.w	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00b      	beq.n	800a30e <HAL_UART_IRQHandler+0xd2>
 800a2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	f043 0202 	orr.w	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <HAL_UART_IRQHandler+0xf6>
 800a31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f043 0204 	orr.w	r2, r3, #4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a336:	f003 0308 	and.w	r3, r3, #8
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d011      	beq.n	800a362 <HAL_UART_IRQHandler+0x126>
 800a33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f043 0208 	orr.w	r2, r3, #8
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 81ed 	beq.w	800a746 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a370:	f003 0320 	and.w	r3, r3, #32
 800a374:	2b00      	cmp	r3, #0
 800a376:	d008      	beq.n	800a38a <HAL_UART_IRQHandler+0x14e>
 800a378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fd12 	bl	800adae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a394:	2b40      	cmp	r3, #64	; 0x40
 800a396:	bf0c      	ite	eq
 800a398:	2301      	moveq	r3, #1
 800a39a:	2300      	movne	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x17a>
 800a3ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d04f      	beq.n	800a456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fc1a 	bl	800abf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c6:	2b40      	cmp	r3, #64	; 0x40
 800a3c8:	d141      	bne.n	800a44e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a40e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1d9      	bne.n	800a3ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d013      	beq.n	800a446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	4a7d      	ldr	r2, [pc, #500]	; (800a618 <HAL_UART_IRQHandler+0x3dc>)
 800a424:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fb fbd8 	bl	8005be0 <HAL_DMA_Abort_IT>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d016      	beq.n	800a464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a444:	e00e      	b.n	800a464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f9ae 	bl	800a7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44c:	e00a      	b.n	800a464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9aa 	bl	800a7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a454:	e006      	b.n	800a464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f9a6 	bl	800a7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a462:	e170      	b.n	800a746 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a464:	bf00      	nop
    return;
 800a466:	e16e      	b.n	800a746 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	f040 814a 	bne.w	800a706 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a476:	f003 0310 	and.w	r3, r3, #16
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 8143 	beq.w	800a706 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 813c 	beq.w	800a706 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a48e:	2300      	movs	r3, #0
 800a490:	60bb      	str	r3, [r7, #8]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60bb      	str	r3, [r7, #8]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	60bb      	str	r3, [r7, #8]
 800a4a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ae:	2b40      	cmp	r3, #64	; 0x40
 800a4b0:	f040 80b4 	bne.w	800a61c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 8140 	beq.w	800a74a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	f080 8139 	bcs.w	800a74a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ea:	f000 8088 	beq.w	800a5fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a50c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	330c      	adds	r3, #12
 800a516:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a51a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a51e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1d9      	bne.n	800a4ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3314      	adds	r3, #20
 800a540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a54a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a54c:	f023 0301 	bic.w	r3, r3, #1
 800a550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a55e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a562:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e1      	bne.n	800a53a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3314      	adds	r3, #20
 800a57c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a58c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3314      	adds	r3, #20
 800a596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a59a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a59c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e3      	bne.n	800a576 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	330c      	adds	r3, #12
 800a5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ce:	f023 0310 	bic.w	r3, r3, #16
 800a5d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	330c      	adds	r3, #12
 800a5dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e3      	bne.n	800a5bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fb fa81 	bl	8005b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a606:	b29b      	uxth	r3, r3
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7f9 fbde 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a614:	e099      	b.n	800a74a <HAL_UART_IRQHandler+0x50e>
 800a616:	bf00      	nop
 800a618:	0800acb7 	.word	0x0800acb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a624:	b29b      	uxth	r3, r3
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 808b 	beq.w	800a74e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 8086 	beq.w	800a74e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	330c      	adds	r3, #12
 800a648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a658:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	330c      	adds	r3, #12
 800a662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a666:	647a      	str	r2, [r7, #68]	; 0x44
 800a668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a66c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e3      	bne.n	800a642 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3314      	adds	r3, #20
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	e853 3f00 	ldrex	r3, [r3]
 800a688:	623b      	str	r3, [r7, #32]
   return(result);
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	f023 0301 	bic.w	r3, r3, #1
 800a690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3314      	adds	r3, #20
 800a69a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a69e:	633a      	str	r2, [r7, #48]	; 0x30
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e3      	bne.n	800a67a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f023 0310 	bic.w	r3, r3, #16
 800a6d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	330c      	adds	r3, #12
 800a6e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6e4:	61fa      	str	r2, [r7, #28]
 800a6e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	69b9      	ldr	r1, [r7, #24]
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e3      	bne.n	800a6c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f9 fb66 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a704:	e023      	b.n	800a74e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <HAL_UART_IRQHandler+0x4ea>
 800a712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fadd 	bl	800acde <UART_Transmit_IT>
    return;
 800a724:	e014      	b.n	800a750 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00e      	beq.n	800a750 <HAL_UART_IRQHandler+0x514>
 800a732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d008      	beq.n	800a750 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fb1d 	bl	800ad7e <UART_EndTransmit_IT>
    return;
 800a744:	e004      	b.n	800a750 <HAL_UART_IRQHandler+0x514>
    return;
 800a746:	bf00      	nop
 800a748:	e002      	b.n	800a750 <HAL_UART_IRQHandler+0x514>
      return;
 800a74a:	bf00      	nop
 800a74c:	e000      	b.n	800a750 <HAL_UART_IRQHandler+0x514>
      return;
 800a74e:	bf00      	nop
  }
}
 800a750:	37e8      	adds	r7, #232	; 0xe8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop

0800a758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b090      	sub	sp, #64	; 0x40
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d137      	bne.n	800a848 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7da:	2200      	movs	r2, #0
 800a7dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3314      	adds	r3, #20
 800a7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e5      	bne.n	800a7de <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	330c      	adds	r3, #12
 800a818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	60fb      	str	r3, [r7, #12]
   return(result);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	330c      	adds	r3, #12
 800a830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a832:	61fa      	str	r2, [r7, #28]
 800a834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	69b9      	ldr	r1, [r7, #24]
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	617b      	str	r3, [r7, #20]
   return(result);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e5      	bne.n	800a812 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a846:	e002      	b.n	800a84e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a84a:	f7ff ff85 	bl	800a758 <HAL_UART_TxCpltCallback>
}
 800a84e:	bf00      	nop
 800a850:	3740      	adds	r7, #64	; 0x40
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff ff81 	bl	800a76c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b09c      	sub	sp, #112	; 0x70
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d172      	bne.n	800a974 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a890:	2200      	movs	r2, #0
 800a892:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a89e:	e853 3f00 	ldrex	r3, [r3]
 800a8a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	330c      	adds	r3, #12
 800a8b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8bc:	e841 2300 	strex	r3, r2, [r1]
 800a8c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1e5      	bne.n	800a894 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3314      	adds	r3, #20
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8da:	f023 0301 	bic.w	r3, r3, #1
 800a8de:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3314      	adds	r3, #20
 800a8e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8e8:	647a      	str	r2, [r7, #68]	; 0x44
 800a8ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e5      	bne.n	800a8c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3314      	adds	r3, #20
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	623b      	str	r3, [r7, #32]
   return(result);
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a912:	663b      	str	r3, [r7, #96]	; 0x60
 800a914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3314      	adds	r3, #20
 800a91a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a91c:	633a      	str	r2, [r7, #48]	; 0x30
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e5      	bne.n	800a8fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a932:	2220      	movs	r2, #32
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d119      	bne.n	800a974 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	330c      	adds	r3, #12
 800a946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 0310 	bic.w	r3, r3, #16
 800a956:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	330c      	adds	r3, #12
 800a95e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a960:	61fa      	str	r2, [r7, #28]
 800a962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	617b      	str	r3, [r7, #20]
   return(result);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e5      	bne.n	800a940 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d106      	bne.n	800a98a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a980:	4619      	mov	r1, r3
 800a982:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a984:	f7f9 fa24 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a988:	e002      	b.n	800a990 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a98a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a98c:	f7ff fef8 	bl	800a780 <HAL_UART_RxCpltCallback>
}
 800a990:	bf00      	nop
 800a992:	3770      	adds	r7, #112	; 0x70
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d108      	bne.n	800a9c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7f9 fa09 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9be:	e002      	b.n	800a9c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f7ff fee7 	bl	800a794 <HAL_UART_RxHalfCpltCallback>
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ea:	2b80      	cmp	r3, #128	; 0x80
 800a9ec:	bf0c      	ite	eq
 800a9ee:	2301      	moveq	r3, #1
 800a9f0:	2300      	movne	r3, #0
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b21      	cmp	r3, #33	; 0x21
 800aa00:	d108      	bne.n	800aa14 <UART_DMAError+0x46>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	f000 f8c6 	bl	800aba0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	bf0c      	ite	eq
 800aa22:	2301      	moveq	r3, #1
 800aa24:	2300      	movne	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b22      	cmp	r3, #34	; 0x22
 800aa34:	d108      	bne.n	800aa48 <UART_DMAError+0x7a>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aa42:	68b8      	ldr	r0, [r7, #8]
 800aa44:	f000 f8d4 	bl	800abf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	f043 0210 	orr.w	r2, r3, #16
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa54:	68b8      	ldr	r0, [r7, #8]
 800aa56:	f7ff fea7 	bl	800a7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5a:	bf00      	nop
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b098      	sub	sp, #96	; 0x60
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	88fa      	ldrh	r2, [r7, #6]
 800aa7c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2222      	movs	r2, #34	; 0x22
 800aa88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa90:	4a40      	ldr	r2, [pc, #256]	; (800ab94 <UART_Start_Receive_DMA+0x130>)
 800aa92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	4a3f      	ldr	r2, [pc, #252]	; (800ab98 <UART_Start_Receive_DMA+0x134>)
 800aa9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	4a3e      	ldr	r2, [pc, #248]	; (800ab9c <UART_Start_Receive_DMA+0x138>)
 800aaa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aaac:	f107 0308 	add.w	r3, r7, #8
 800aab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3304      	adds	r3, #4
 800aabc:	4619      	mov	r1, r3
 800aabe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	88fb      	ldrh	r3, [r7, #6]
 800aac4:	f7fa ffc4 	bl	8005a50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aac8:	2300      	movs	r3, #0
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d019      	beq.n	800ab22 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ab10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e5      	bne.n	800aaee <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3314      	adds	r3, #20
 800ab28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f043 0301 	orr.w	r3, r3, #1
 800ab38:	657b      	str	r3, [r7, #84]	; 0x54
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3314      	adds	r3, #20
 800ab40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab42:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e5      	bne.n	800ab22 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3314      	adds	r3, #20
 800ab5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	617b      	str	r3, [r7, #20]
   return(result);
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab6c:	653b      	str	r3, [r7, #80]	; 0x50
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3314      	adds	r3, #20
 800ab74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab76:	627a      	str	r2, [r7, #36]	; 0x24
 800ab78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6a39      	ldr	r1, [r7, #32]
 800ab7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e5      	bne.n	800ab56 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3760      	adds	r7, #96	; 0x60
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	0800a873 	.word	0x0800a873
 800ab98:	0800a999 	.word	0x0800a999
 800ab9c:	0800a9cf 	.word	0x0800a9cf

0800aba0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b089      	sub	sp, #36	; 0x24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	330c      	adds	r3, #12
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	61ba      	str	r2, [r7, #24]
 800abca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6979      	ldr	r1, [r7, #20]
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	613b      	str	r3, [r7, #16]
   return(result);
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e5      	bne.n	800aba8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2220      	movs	r2, #32
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800abe4:	bf00      	nop
 800abe6:	3724      	adds	r7, #36	; 0x24
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b095      	sub	sp, #84	; 0x54
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	330c      	adds	r3, #12
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac18:	643a      	str	r2, [r7, #64]	; 0x40
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e5      	bne.n	800abf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3314      	adds	r3, #20
 800ac32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f023 0301 	bic.w	r3, r3, #1
 800ac42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3314      	adds	r3, #20
 800ac4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e5      	bne.n	800ac2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d119      	bne.n	800ac9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f023 0310 	bic.w	r3, r3, #16
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	330c      	adds	r3, #12
 800ac86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac88:	61ba      	str	r2, [r7, #24]
 800ac8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6979      	ldr	r1, [r7, #20]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	613b      	str	r3, [r7, #16]
   return(result);
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e5      	bne.n	800ac68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acaa:	bf00      	nop
 800acac:	3754      	adds	r7, #84	; 0x54
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7ff fd69 	bl	800a7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b21      	cmp	r3, #33	; 0x21
 800acf0:	d13e      	bne.n	800ad70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acfa:	d114      	bne.n	800ad26 <UART_Transmit_IT+0x48>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d110      	bne.n	800ad26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	1c9a      	adds	r2, r3, #2
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	621a      	str	r2, [r3, #32]
 800ad24:	e008      	b.n	800ad38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	1c59      	adds	r1, r3, #1
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6211      	str	r1, [r2, #32]
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	4619      	mov	r1, r3
 800ad46:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10f      	bne.n	800ad6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e000      	b.n	800ad72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad70:	2302      	movs	r3, #2
  }
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fcda 	bl	800a758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b08c      	sub	sp, #48	; 0x30
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b22      	cmp	r3, #34	; 0x22
 800adc0:	f040 80ab 	bne.w	800af1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adcc:	d117      	bne.n	800adfe <UART_Receive_IT+0x50>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d113      	bne.n	800adfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800add6:	2300      	movs	r3, #0
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adec:	b29a      	uxth	r2, r3
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	1c9a      	adds	r2, r3, #2
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	629a      	str	r2, [r3, #40]	; 0x28
 800adfc:	e026      	b.n	800ae4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae10:	d007      	beq.n	800ae22 <UART_Receive_IT+0x74>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <UART_Receive_IT+0x82>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	701a      	strb	r2, [r3, #0]
 800ae2e:	e008      	b.n	800ae42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d15a      	bne.n	800af16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f022 0220 	bic.w	r2, r2, #32
 800ae6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	695a      	ldr	r2, [r3, #20]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 0201 	bic.w	r2, r2, #1
 800ae8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d135      	bne.n	800af0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	330c      	adds	r3, #12
 800aeac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f023 0310 	bic.w	r3, r3, #16
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	330c      	adds	r3, #12
 800aec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec6:	623a      	str	r2, [r7, #32]
 800aec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	69f9      	ldr	r1, [r7, #28]
 800aecc:	6a3a      	ldr	r2, [r7, #32]
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e5      	bne.n	800aea6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0310 	and.w	r3, r3, #16
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	d10a      	bne.n	800aefe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7f8 ff63 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
 800af0a:	e002      	b.n	800af12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fc37 	bl	800a780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	e002      	b.n	800af1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e000      	b.n	800af1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af1a:	2302      	movs	r3, #2
  }
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3730      	adds	r7, #48	; 0x30
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af28:	b0c0      	sub	sp, #256	; 0x100
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af40:	68d9      	ldr	r1, [r3, #12]
 800af42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	ea40 0301 	orr.w	r3, r0, r1
 800af4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	431a      	orrs	r2, r3
 800af64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af7c:	f021 010c 	bic.w	r1, r1, #12
 800af80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af8a:	430b      	orrs	r3, r1
 800af8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9e:	6999      	ldr	r1, [r3, #24]
 800afa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	ea40 0301 	orr.w	r3, r0, r1
 800afaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	4b8f      	ldr	r3, [pc, #572]	; (800b1f0 <UART_SetConfig+0x2cc>)
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d005      	beq.n	800afc4 <UART_SetConfig+0xa0>
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b8d      	ldr	r3, [pc, #564]	; (800b1f4 <UART_SetConfig+0x2d0>)
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d104      	bne.n	800afce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afc4:	f7fd fe86 	bl	8008cd4 <HAL_RCC_GetPCLK2Freq>
 800afc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800afcc:	e003      	b.n	800afd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afce:	f7fd fe6d 	bl	8008cac <HAL_RCC_GetPCLK1Freq>
 800afd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afe0:	f040 810c 	bne.w	800b1fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aff6:	4622      	mov	r2, r4
 800aff8:	462b      	mov	r3, r5
 800affa:	1891      	adds	r1, r2, r2
 800affc:	65b9      	str	r1, [r7, #88]	; 0x58
 800affe:	415b      	adcs	r3, r3
 800b000:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b006:	4621      	mov	r1, r4
 800b008:	eb12 0801 	adds.w	r8, r2, r1
 800b00c:	4629      	mov	r1, r5
 800b00e:	eb43 0901 	adc.w	r9, r3, r1
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	f04f 0300 	mov.w	r3, #0
 800b01a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b01e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b026:	4690      	mov	r8, r2
 800b028:	4699      	mov	r9, r3
 800b02a:	4623      	mov	r3, r4
 800b02c:	eb18 0303 	adds.w	r3, r8, r3
 800b030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b034:	462b      	mov	r3, r5
 800b036:	eb49 0303 	adc.w	r3, r9, r3
 800b03a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b04a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b04e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b052:	460b      	mov	r3, r1
 800b054:	18db      	adds	r3, r3, r3
 800b056:	653b      	str	r3, [r7, #80]	; 0x50
 800b058:	4613      	mov	r3, r2
 800b05a:	eb42 0303 	adc.w	r3, r2, r3
 800b05e:	657b      	str	r3, [r7, #84]	; 0x54
 800b060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b068:	f7f5 fcf4 	bl	8000a54 <__aeabi_uldivmod>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4b61      	ldr	r3, [pc, #388]	; (800b1f8 <UART_SetConfig+0x2d4>)
 800b072:	fba3 2302 	umull	r2, r3, r3, r2
 800b076:	095b      	lsrs	r3, r3, #5
 800b078:	011c      	lsls	r4, r3, #4
 800b07a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b07e:	2200      	movs	r2, #0
 800b080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b084:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b08c:	4642      	mov	r2, r8
 800b08e:	464b      	mov	r3, r9
 800b090:	1891      	adds	r1, r2, r2
 800b092:	64b9      	str	r1, [r7, #72]	; 0x48
 800b094:	415b      	adcs	r3, r3
 800b096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b09c:	4641      	mov	r1, r8
 800b09e:	eb12 0a01 	adds.w	sl, r2, r1
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	eb43 0b01 	adc.w	fp, r3, r1
 800b0a8:	f04f 0200 	mov.w	r2, #0
 800b0ac:	f04f 0300 	mov.w	r3, #0
 800b0b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0bc:	4692      	mov	sl, r2
 800b0be:	469b      	mov	fp, r3
 800b0c0:	4643      	mov	r3, r8
 800b0c2:	eb1a 0303 	adds.w	r3, sl, r3
 800b0c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	eb4b 0303 	adc.w	r3, fp, r3
 800b0d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	18db      	adds	r3, r3, r3
 800b0ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	eb42 0303 	adc.w	r3, r2, r3
 800b0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0fe:	f7f5 fca9 	bl	8000a54 <__aeabi_uldivmod>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4611      	mov	r1, r2
 800b108:	4b3b      	ldr	r3, [pc, #236]	; (800b1f8 <UART_SetConfig+0x2d4>)
 800b10a:	fba3 2301 	umull	r2, r3, r3, r1
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	2264      	movs	r2, #100	; 0x64
 800b112:	fb02 f303 	mul.w	r3, r2, r3
 800b116:	1acb      	subs	r3, r1, r3
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b11e:	4b36      	ldr	r3, [pc, #216]	; (800b1f8 <UART_SetConfig+0x2d4>)
 800b120:	fba3 2302 	umull	r2, r3, r3, r2
 800b124:	095b      	lsrs	r3, r3, #5
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b12c:	441c      	add	r4, r3
 800b12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b132:	2200      	movs	r2, #0
 800b134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b13c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b140:	4642      	mov	r2, r8
 800b142:	464b      	mov	r3, r9
 800b144:	1891      	adds	r1, r2, r2
 800b146:	63b9      	str	r1, [r7, #56]	; 0x38
 800b148:	415b      	adcs	r3, r3
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b150:	4641      	mov	r1, r8
 800b152:	1851      	adds	r1, r2, r1
 800b154:	6339      	str	r1, [r7, #48]	; 0x30
 800b156:	4649      	mov	r1, r9
 800b158:	414b      	adcs	r3, r1
 800b15a:	637b      	str	r3, [r7, #52]	; 0x34
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b168:	4659      	mov	r1, fp
 800b16a:	00cb      	lsls	r3, r1, #3
 800b16c:	4651      	mov	r1, sl
 800b16e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b172:	4651      	mov	r1, sl
 800b174:	00ca      	lsls	r2, r1, #3
 800b176:	4610      	mov	r0, r2
 800b178:	4619      	mov	r1, r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	4642      	mov	r2, r8
 800b17e:	189b      	adds	r3, r3, r2
 800b180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b184:	464b      	mov	r3, r9
 800b186:	460a      	mov	r2, r1
 800b188:	eb42 0303 	adc.w	r3, r2, r3
 800b18c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b19c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	18db      	adds	r3, r3, r3
 800b1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	eb42 0303 	adc.w	r3, r2, r3
 800b1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1ba:	f7f5 fc4b 	bl	8000a54 <__aeabi_uldivmod>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <UART_SetConfig+0x2d4>)
 800b1c4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1c8:	095b      	lsrs	r3, r3, #5
 800b1ca:	2164      	movs	r1, #100	; 0x64
 800b1cc:	fb01 f303 	mul.w	r3, r1, r3
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	3332      	adds	r3, #50	; 0x32
 800b1d6:	4a08      	ldr	r2, [pc, #32]	; (800b1f8 <UART_SetConfig+0x2d4>)
 800b1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1dc:	095b      	lsrs	r3, r3, #5
 800b1de:	f003 0207 	and.w	r2, r3, #7
 800b1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4422      	add	r2, r4
 800b1ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1ec:	e105      	b.n	800b3fa <UART_SetConfig+0x4d6>
 800b1ee:	bf00      	nop
 800b1f0:	40011000 	.word	0x40011000
 800b1f4:	40011400 	.word	0x40011400
 800b1f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b200:	2200      	movs	r2, #0
 800b202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b206:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b20a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b20e:	4642      	mov	r2, r8
 800b210:	464b      	mov	r3, r9
 800b212:	1891      	adds	r1, r2, r2
 800b214:	6239      	str	r1, [r7, #32]
 800b216:	415b      	adcs	r3, r3
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
 800b21a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b21e:	4641      	mov	r1, r8
 800b220:	1854      	adds	r4, r2, r1
 800b222:	4649      	mov	r1, r9
 800b224:	eb43 0501 	adc.w	r5, r3, r1
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	f04f 0300 	mov.w	r3, #0
 800b230:	00eb      	lsls	r3, r5, #3
 800b232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b236:	00e2      	lsls	r2, r4, #3
 800b238:	4614      	mov	r4, r2
 800b23a:	461d      	mov	r5, r3
 800b23c:	4643      	mov	r3, r8
 800b23e:	18e3      	adds	r3, r4, r3
 800b240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b244:	464b      	mov	r3, r9
 800b246:	eb45 0303 	adc.w	r3, r5, r3
 800b24a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b25a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b25e:	f04f 0200 	mov.w	r2, #0
 800b262:	f04f 0300 	mov.w	r3, #0
 800b266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b26a:	4629      	mov	r1, r5
 800b26c:	008b      	lsls	r3, r1, #2
 800b26e:	4621      	mov	r1, r4
 800b270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b274:	4621      	mov	r1, r4
 800b276:	008a      	lsls	r2, r1, #2
 800b278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b27c:	f7f5 fbea 	bl	8000a54 <__aeabi_uldivmod>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4b60      	ldr	r3, [pc, #384]	; (800b408 <UART_SetConfig+0x4e4>)
 800b286:	fba3 2302 	umull	r2, r3, r3, r2
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	011c      	lsls	r4, r3, #4
 800b28e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b292:	2200      	movs	r2, #0
 800b294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b29c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	464b      	mov	r3, r9
 800b2a4:	1891      	adds	r1, r2, r2
 800b2a6:	61b9      	str	r1, [r7, #24]
 800b2a8:	415b      	adcs	r3, r3
 800b2aa:	61fb      	str	r3, [r7, #28]
 800b2ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	1851      	adds	r1, r2, r1
 800b2b4:	6139      	str	r1, [r7, #16]
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	414b      	adcs	r3, r1
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2c8:	4659      	mov	r1, fp
 800b2ca:	00cb      	lsls	r3, r1, #3
 800b2cc:	4651      	mov	r1, sl
 800b2ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2d2:	4651      	mov	r1, sl
 800b2d4:	00ca      	lsls	r2, r1, #3
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4642      	mov	r2, r8
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2e4:	464b      	mov	r3, r9
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	eb42 0303 	adc.w	r3, r2, r3
 800b2ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2fc:	f04f 0200 	mov.w	r2, #0
 800b300:	f04f 0300 	mov.w	r3, #0
 800b304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b308:	4649      	mov	r1, r9
 800b30a:	008b      	lsls	r3, r1, #2
 800b30c:	4641      	mov	r1, r8
 800b30e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b312:	4641      	mov	r1, r8
 800b314:	008a      	lsls	r2, r1, #2
 800b316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b31a:	f7f5 fb9b 	bl	8000a54 <__aeabi_uldivmod>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4b39      	ldr	r3, [pc, #228]	; (800b408 <UART_SetConfig+0x4e4>)
 800b324:	fba3 1302 	umull	r1, r3, r3, r2
 800b328:	095b      	lsrs	r3, r3, #5
 800b32a:	2164      	movs	r1, #100	; 0x64
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	011b      	lsls	r3, r3, #4
 800b334:	3332      	adds	r3, #50	; 0x32
 800b336:	4a34      	ldr	r2, [pc, #208]	; (800b408 <UART_SetConfig+0x4e4>)
 800b338:	fba2 2303 	umull	r2, r3, r2, r3
 800b33c:	095b      	lsrs	r3, r3, #5
 800b33e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b342:	441c      	add	r4, r3
 800b344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b348:	2200      	movs	r2, #0
 800b34a:	673b      	str	r3, [r7, #112]	; 0x70
 800b34c:	677a      	str	r2, [r7, #116]	; 0x74
 800b34e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b352:	4642      	mov	r2, r8
 800b354:	464b      	mov	r3, r9
 800b356:	1891      	adds	r1, r2, r2
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	415b      	adcs	r3, r3
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b362:	4641      	mov	r1, r8
 800b364:	1851      	adds	r1, r2, r1
 800b366:	6039      	str	r1, [r7, #0]
 800b368:	4649      	mov	r1, r9
 800b36a:	414b      	adcs	r3, r1
 800b36c:	607b      	str	r3, [r7, #4]
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b37a:	4659      	mov	r1, fp
 800b37c:	00cb      	lsls	r3, r1, #3
 800b37e:	4651      	mov	r1, sl
 800b380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b384:	4651      	mov	r1, sl
 800b386:	00ca      	lsls	r2, r1, #3
 800b388:	4610      	mov	r0, r2
 800b38a:	4619      	mov	r1, r3
 800b38c:	4603      	mov	r3, r0
 800b38e:	4642      	mov	r2, r8
 800b390:	189b      	adds	r3, r3, r2
 800b392:	66bb      	str	r3, [r7, #104]	; 0x68
 800b394:	464b      	mov	r3, r9
 800b396:	460a      	mov	r2, r1
 800b398:	eb42 0303 	adc.w	r3, r2, r3
 800b39c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b3a8:	667a      	str	r2, [r7, #100]	; 0x64
 800b3aa:	f04f 0200 	mov.w	r2, #0
 800b3ae:	f04f 0300 	mov.w	r3, #0
 800b3b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	008b      	lsls	r3, r1, #2
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	008a      	lsls	r2, r1, #2
 800b3c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b3c8:	f7f5 fb44 	bl	8000a54 <__aeabi_uldivmod>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <UART_SetConfig+0x4e4>)
 800b3d2:	fba3 1302 	umull	r1, r3, r3, r2
 800b3d6:	095b      	lsrs	r3, r3, #5
 800b3d8:	2164      	movs	r1, #100	; 0x64
 800b3da:	fb01 f303 	mul.w	r3, r1, r3
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	011b      	lsls	r3, r3, #4
 800b3e2:	3332      	adds	r3, #50	; 0x32
 800b3e4:	4a08      	ldr	r2, [pc, #32]	; (800b408 <UART_SetConfig+0x4e4>)
 800b3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ea:	095b      	lsrs	r3, r3, #5
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4422      	add	r2, r4
 800b3f8:	609a      	str	r2, [r3, #8]
}
 800b3fa:	bf00      	nop
 800b3fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b400:	46bd      	mov	sp, r7
 800b402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b406:	bf00      	nop
 800b408:	51eb851f 	.word	0x51eb851f

0800b40c <arm_mat_trans_f32>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	8802      	ldrh	r2, [r0, #0]
 800b412:	884b      	ldrh	r3, [r1, #2]
 800b414:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b418:	684f      	ldr	r7, [r1, #4]
 800b41a:	8840      	ldrh	r0, [r0, #2]
 800b41c:	4293      	cmp	r3, r2
 800b41e:	b083      	sub	sp, #12
 800b420:	d14c      	bne.n	800b4bc <arm_mat_trans_f32+0xb0>
 800b422:	f8b1 e000 	ldrh.w	lr, [r1]
 800b426:	4586      	cmp	lr, r0
 800b428:	d148      	bne.n	800b4bc <arm_mat_trans_f32+0xb0>
 800b42a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b42e:	009c      	lsls	r4, r3, #2
 800b430:	f00e 0e03 	and.w	lr, lr, #3
 800b434:	fb08 f904 	mul.w	r9, r8, r4
 800b438:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b43c:	011d      	lsls	r5, r3, #4
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b444:	eb07 0a04 	add.w	sl, r7, r4
 800b448:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b44c:	9201      	str	r2, [sp, #4]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	463b      	mov	r3, r7
 800b452:	f1b8 0f00 	cmp.w	r8, #0
 800b456:	d01d      	beq.n	800b494 <arm_mat_trans_f32+0x88>
 800b458:	9900      	ldr	r1, [sp, #0]
 800b45a:	f10c 0210 	add.w	r2, ip, #16
 800b45e:	4439      	add	r1, r7
 800b460:	4640      	mov	r0, r8
 800b462:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b466:	601e      	str	r6, [r3, #0]
 800b468:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b46c:	191e      	adds	r6, r3, r4
 800b46e:	edc6 7a00 	vstr	s15, [r6]
 800b472:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b476:	600e      	str	r6, [r1, #0]
 800b478:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b47c:	190e      	adds	r6, r1, r4
 800b47e:	3801      	subs	r0, #1
 800b480:	442b      	add	r3, r5
 800b482:	f102 0210 	add.w	r2, r2, #16
 800b486:	edc6 7a00 	vstr	s15, [r6]
 800b48a:	4429      	add	r1, r5
 800b48c:	d1e9      	bne.n	800b462 <arm_mat_trans_f32+0x56>
 800b48e:	44dc      	add	ip, fp
 800b490:	eb09 0307 	add.w	r3, r9, r7
 800b494:	f1be 0f00 	cmp.w	lr, #0
 800b498:	d009      	beq.n	800b4ae <arm_mat_trans_f32+0xa2>
 800b49a:	4672      	mov	r2, lr
 800b49c:	4661      	mov	r1, ip
 800b49e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b4a2:	6018      	str	r0, [r3, #0]
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	4423      	add	r3, r4
 800b4a8:	d1f9      	bne.n	800b49e <arm_mat_trans_f32+0x92>
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	449c      	add	ip, r3
 800b4ae:	3704      	adds	r7, #4
 800b4b0:	4557      	cmp	r7, sl
 800b4b2:	d1cd      	bne.n	800b450 <arm_mat_trans_f32+0x44>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	b003      	add	sp, #12
 800b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4bc:	f06f 0002 	mvn.w	r0, #2
 800b4c0:	e7f9      	b.n	800b4b6 <arm_mat_trans_f32+0xaa>
 800b4c2:	bf00      	nop

0800b4c4 <arm_mat_sub_f32>:
 800b4c4:	b4f0      	push	{r4, r5, r6, r7}
 800b4c6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b4ca:	6803      	ldr	r3, [r0, #0]
 800b4cc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b4d0:	6856      	ldr	r6, [r2, #4]
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	d15d      	bne.n	800b592 <arm_mat_sub_f32+0xce>
 800b4d6:	6812      	ldr	r2, [r2, #0]
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d15a      	bne.n	800b592 <arm_mat_sub_f32+0xce>
 800b4dc:	8803      	ldrh	r3, [r0, #0]
 800b4de:	8844      	ldrh	r4, [r0, #2]
 800b4e0:	fb04 f403 	mul.w	r4, r4, r3
 800b4e4:	08a5      	lsrs	r5, r4, #2
 800b4e6:	d032      	beq.n	800b54e <arm_mat_sub_f32+0x8a>
 800b4e8:	f10c 0110 	add.w	r1, ip, #16
 800b4ec:	f107 0210 	add.w	r2, r7, #16
 800b4f0:	f106 0310 	add.w	r3, r6, #16
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b4fa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b4fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b502:	3801      	subs	r0, #1
 800b504:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b508:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b50c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b514:	f101 0110 	add.w	r1, r1, #16
 800b518:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b51c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b520:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b528:	f102 0210 	add.w	r2, r2, #16
 800b52c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b530:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b534:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b53c:	f103 0310 	add.w	r3, r3, #16
 800b540:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b544:	d1d7      	bne.n	800b4f6 <arm_mat_sub_f32+0x32>
 800b546:	012b      	lsls	r3, r5, #4
 800b548:	449c      	add	ip, r3
 800b54a:	441f      	add	r7, r3
 800b54c:	441e      	add	r6, r3
 800b54e:	f014 0403 	ands.w	r4, r4, #3
 800b552:	d01b      	beq.n	800b58c <arm_mat_sub_f32+0xc8>
 800b554:	eddc 7a00 	vldr	s15, [ip]
 800b558:	ed97 7a00 	vldr	s14, [r7]
 800b55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b560:	3c01      	subs	r4, #1
 800b562:	edc6 7a00 	vstr	s15, [r6]
 800b566:	d011      	beq.n	800b58c <arm_mat_sub_f32+0xc8>
 800b568:	eddc 7a01 	vldr	s15, [ip, #4]
 800b56c:	ed97 7a01 	vldr	s14, [r7, #4]
 800b570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b574:	2c01      	cmp	r4, #1
 800b576:	edc6 7a01 	vstr	s15, [r6, #4]
 800b57a:	d007      	beq.n	800b58c <arm_mat_sub_f32+0xc8>
 800b57c:	eddc 7a02 	vldr	s15, [ip, #8]
 800b580:	ed97 7a02 	vldr	s14, [r7, #8]
 800b584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b588:	edc6 7a02 	vstr	s15, [r6, #8]
 800b58c:	2000      	movs	r0, #0
 800b58e:	bcf0      	pop	{r4, r5, r6, r7}
 800b590:	4770      	bx	lr
 800b592:	f06f 0002 	mvn.w	r0, #2
 800b596:	e7fa      	b.n	800b58e <arm_mat_sub_f32+0xca>

0800b598 <arm_mat_mult_f32>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	8845      	ldrh	r5, [r0, #2]
 800b59e:	880b      	ldrh	r3, [r1, #0]
 800b5a0:	8806      	ldrh	r6, [r0, #0]
 800b5a2:	6847      	ldr	r7, [r0, #4]
 800b5a4:	6854      	ldr	r4, [r2, #4]
 800b5a6:	6848      	ldr	r0, [r1, #4]
 800b5a8:	b08b      	sub	sp, #44	; 0x2c
 800b5aa:	42ab      	cmp	r3, r5
 800b5ac:	9109      	str	r1, [sp, #36]	; 0x24
 800b5ae:	9604      	str	r6, [sp, #16]
 800b5b0:	8849      	ldrh	r1, [r1, #2]
 800b5b2:	f040 808a 	bne.w	800b6ca <arm_mat_mult_f32+0x132>
 800b5b6:	8815      	ldrh	r5, [r2, #0]
 800b5b8:	42b5      	cmp	r5, r6
 800b5ba:	f040 8086 	bne.w	800b6ca <arm_mat_mult_f32+0x132>
 800b5be:	8852      	ldrh	r2, [r2, #2]
 800b5c0:	428a      	cmp	r2, r1
 800b5c2:	f040 8082 	bne.w	800b6ca <arm_mat_mult_f32+0x132>
 800b5c6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b5ca:	1d01      	adds	r1, r0, #4
 800b5cc:	0116      	lsls	r6, r2, #4
 800b5ce:	9108      	str	r1, [sp, #32]
 800b5d0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800b5d4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800b5d8:	9101      	str	r1, [sp, #4]
 800b5da:	fb06 f108 	mul.w	r1, r6, r8
 800b5de:	0095      	lsls	r5, r2, #2
 800b5e0:	9103      	str	r1, [sp, #12]
 800b5e2:	00d2      	lsls	r2, r2, #3
 800b5e4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800b5e8:	f003 0903 	and.w	r9, r3, #3
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	f107 0b10 	add.w	fp, r7, #16
 800b5f2:	eb04 0a05 	add.w	sl, r4, r5
 800b5f6:	9107      	str	r1, [sp, #28]
 800b5f8:	9202      	str	r2, [sp, #8]
 800b5fa:	9306      	str	r3, [sp, #24]
 800b5fc:	f1ab 0310 	sub.w	r3, fp, #16
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	9b07      	ldr	r3, [sp, #28]
 800b604:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b608:	eb03 0c0a 	add.w	ip, r3, sl
 800b60c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b6d4 <arm_mat_mult_f32+0x13c>
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	d053      	beq.n	800b6be <arm_mat_mult_f32+0x126>
 800b616:	9b02      	ldr	r3, [sp, #8]
 800b618:	4644      	mov	r4, r8
 800b61a:	18c1      	adds	r1, r0, r3
 800b61c:	4602      	mov	r2, r0
 800b61e:	465b      	mov	r3, fp
 800b620:	ed92 6a00 	vldr	s12, [r2]
 800b624:	ed13 7a04 	vldr	s14, [r3, #-16]
 800b628:	ed53 4a03 	vldr	s9, [r3, #-12]
 800b62c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b630:	ed91 5a00 	vldr	s10, [r1]
 800b634:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b638:	1957      	adds	r7, r2, r5
 800b63a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b63e:	ed97 6a00 	vldr	s12, [r7]
 800b642:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b646:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b64a:	194f      	adds	r7, r1, r5
 800b64c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b650:	ee26 7a85 	vmul.f32	s14, s13, s10
 800b654:	edd7 7a00 	vldr	s15, [r7]
 800b658:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b65c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b660:	3c01      	subs	r4, #1
 800b662:	4432      	add	r2, r6
 800b664:	4431      	add	r1, r6
 800b666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b66a:	f103 0310 	add.w	r3, r3, #16
 800b66e:	d1d7      	bne.n	800b620 <arm_mat_mult_f32+0x88>
 800b670:	9b03      	ldr	r3, [sp, #12]
 800b672:	9a01      	ldr	r2, [sp, #4]
 800b674:	4418      	add	r0, r3
 800b676:	f1b9 0f00 	cmp.w	r9, #0
 800b67a:	d00b      	beq.n	800b694 <arm_mat_mult_f32+0xfc>
 800b67c:	464b      	mov	r3, r9
 800b67e:	edd0 6a00 	vldr	s13, [r0]
 800b682:	ecb2 7a01 	vldmia	r2!, {s14}
 800b686:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b68a:	3b01      	subs	r3, #1
 800b68c:	4428      	add	r0, r5
 800b68e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b692:	d1f4      	bne.n	800b67e <arm_mat_mult_f32+0xe6>
 800b694:	ecec 7a01 	vstmia	ip!, {s15}
 800b698:	45d4      	cmp	ip, sl
 800b69a:	4670      	mov	r0, lr
 800b69c:	f10e 0e04 	add.w	lr, lr, #4
 800b6a0:	d1b4      	bne.n	800b60c <arm_mat_mult_f32+0x74>
 800b6a2:	9a01      	ldr	r2, [sp, #4]
 800b6a4:	9b06      	ldr	r3, [sp, #24]
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	4419      	add	r1, r3
 800b6aa:	449b      	add	fp, r3
 800b6ac:	9b04      	ldr	r3, [sp, #16]
 800b6ae:	9101      	str	r1, [sp, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	44aa      	add	sl, r5
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	d004      	beq.n	800b6c2 <arm_mat_mult_f32+0x12a>
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	6858      	ldr	r0, [r3, #4]
 800b6bc:	e79e      	b.n	800b5fc <arm_mat_mult_f32+0x64>
 800b6be:	9a05      	ldr	r2, [sp, #20]
 800b6c0:	e7d9      	b.n	800b676 <arm_mat_mult_f32+0xde>
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	b00b      	add	sp, #44	; 0x2c
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	f06f 0002 	mvn.w	r0, #2
 800b6ce:	b00b      	add	sp, #44	; 0x2c
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	00000000 	.word	0x00000000

0800b6d8 <arm_mat_inverse_f32>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	8843      	ldrh	r3, [r0, #2]
 800b6de:	8804      	ldrh	r4, [r0, #0]
 800b6e0:	684e      	ldr	r6, [r1, #4]
 800b6e2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	9603      	str	r6, [sp, #12]
 800b6ee:	f040 80ea 	bne.w	800b8c6 <arm_mat_inverse_f32+0x1ee>
 800b6f2:	880a      	ldrh	r2, [r1, #0]
 800b6f4:	884b      	ldrh	r3, [r1, #2]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f040 80e5 	bne.w	800b8c6 <arm_mat_inverse_f32+0x1ee>
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	f040 80e2 	bne.w	800b8c6 <arm_mat_inverse_f32+0x1ee>
 800b702:	9005      	str	r0, [sp, #20]
 800b704:	b30c      	cbz	r4, 800b74a <arm_mat_inverse_f32+0x72>
 800b706:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800b70a:	1e67      	subs	r7, r4, #1
 800b70c:	f846 bb04 	str.w	fp, [r6], #4
 800b710:	d01b      	beq.n	800b74a <arm_mat_inverse_f32+0x72>
 800b712:	f04f 0801 	mov.w	r8, #1
 800b716:	00ba      	lsls	r2, r7, #2
 800b718:	eb06 0a02 	add.w	sl, r6, r2
 800b71c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800b720:	4630      	mov	r0, r6
 800b722:	2100      	movs	r1, #0
 800b724:	f000 f97e 	bl	800ba24 <memset>
 800b728:	eb0a 0605 	add.w	r6, sl, r5
 800b72c:	462a      	mov	r2, r5
 800b72e:	2100      	movs	r1, #0
 800b730:	4650      	mov	r0, sl
 800b732:	f1b8 0f00 	cmp.w	r8, #0
 800b736:	f000 80cb 	beq.w	800b8d0 <arm_mat_inverse_f32+0x1f8>
 800b73a:	f000 f973 	bl	800ba24 <memset>
 800b73e:	3f01      	subs	r7, #1
 800b740:	f108 0801 	add.w	r8, r8, #1
 800b744:	f846 bb04 	str.w	fp, [r6], #4
 800b748:	d1e5      	bne.n	800b716 <arm_mat_inverse_f32+0x3e>
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 80b5 	beq.w	800b8bc <arm_mat_inverse_f32+0x1e4>
 800b752:	009d      	lsls	r5, r3, #2
 800b754:	eb09 0205 	add.w	r2, r9, r5
 800b758:	46cc      	mov	ip, r9
 800b75a:	9202      	str	r2, [sp, #8]
 800b75c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b760:	1d2a      	adds	r2, r5, #4
 800b762:	9204      	str	r2, [sp, #16]
 800b764:	462f      	mov	r7, r5
 800b766:	469e      	mov	lr, r3
 800b768:	2600      	movs	r6, #0
 800b76a:	9b02      	ldr	r3, [sp, #8]
 800b76c:	eddc 6a00 	vldr	s13, [ip]
 800b770:	42b4      	cmp	r4, r6
 800b772:	eba3 0b07 	sub.w	fp, r3, r7
 800b776:	f000 80a1 	beq.w	800b8bc <arm_mat_inverse_f32+0x1e4>
 800b77a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b8e0 <arm_mat_inverse_f32+0x208>
 800b77e:	4632      	mov	r2, r6
 800b780:	4663      	mov	r3, ip
 800b782:	e00b      	b.n	800b79c <arm_mat_inverse_f32+0xc4>
 800b784:	eef4 7a47 	vcmp.f32	s15, s14
 800b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78c:	f102 0201 	add.w	r2, r2, #1
 800b790:	bfc8      	it	gt
 800b792:	eeb0 7a67 	vmovgt.f32	s14, s15
 800b796:	42a2      	cmp	r2, r4
 800b798:	442b      	add	r3, r5
 800b79a:	d014      	beq.n	800b7c6 <arm_mat_inverse_f32+0xee>
 800b79c:	edd3 7a00 	vldr	s15, [r3]
 800b7a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a8:	eeb1 6a67 	vneg.f32	s12, s15
 800b7ac:	dcea      	bgt.n	800b784 <arm_mat_inverse_f32+0xac>
 800b7ae:	eeb4 6a47 	vcmp.f32	s12, s14
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	f102 0201 	add.w	r2, r2, #1
 800b7ba:	bfc8      	it	gt
 800b7bc:	eeb0 7a46 	vmovgt.f32	s14, s12
 800b7c0:	42a2      	cmp	r2, r4
 800b7c2:	442b      	add	r3, r5
 800b7c4:	d1ea      	bne.n	800b79c <arm_mat_inverse_f32+0xc4>
 800b7c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ce:	d075      	beq.n	800b8bc <arm_mat_inverse_f32+0x1e4>
 800b7d0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	d070      	beq.n	800b8bc <arm_mat_inverse_f32+0x1e4>
 800b7da:	4672      	mov	r2, lr
 800b7dc:	4663      	mov	r3, ip
 800b7de:	ed93 7a00 	vldr	s14, [r3]
 800b7e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7e6:	3a01      	subs	r2, #1
 800b7e8:	ece3 7a01 	vstmia	r3!, {s15}
 800b7ec:	d1f7      	bne.n	800b7de <arm_mat_inverse_f32+0x106>
 800b7ee:	9901      	ldr	r1, [sp, #4]
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	ed93 7a00 	vldr	s14, [r3]
 800b7f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7fa:	3901      	subs	r1, #1
 800b7fc:	ece3 7a01 	vstmia	r3!, {s15}
 800b800:	d1f7      	bne.n	800b7f2 <arm_mat_inverse_f32+0x11a>
 800b802:	9803      	ldr	r0, [sp, #12]
 800b804:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b808:	42b1      	cmp	r1, r6
 800b80a:	d039      	beq.n	800b880 <arm_mat_inverse_f32+0x1a8>
 800b80c:	eddb 6a00 	vldr	s13, [fp]
 800b810:	465a      	mov	r2, fp
 800b812:	4673      	mov	r3, lr
 800b814:	46e2      	mov	sl, ip
 800b816:	ecba 7a01 	vldmia	sl!, {s14}
 800b81a:	edd2 7a00 	vldr	s15, [r2]
 800b81e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b822:	3b01      	subs	r3, #1
 800b824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b828:	ece2 7a01 	vstmia	r2!, {s15}
 800b82c:	d1f3      	bne.n	800b816 <arm_mat_inverse_f32+0x13e>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	44bb      	add	fp, r7
 800b832:	4602      	mov	r2, r0
 800b834:	46ca      	mov	sl, r9
 800b836:	ecba 7a01 	vldmia	sl!, {s14}
 800b83a:	edd2 7a00 	vldr	s15, [r2]
 800b83e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b842:	3b01      	subs	r3, #1
 800b844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b848:	ece2 7a01 	vstmia	r2!, {s15}
 800b84c:	d1f3      	bne.n	800b836 <arm_mat_inverse_f32+0x15e>
 800b84e:	4428      	add	r0, r5
 800b850:	3101      	adds	r1, #1
 800b852:	428c      	cmp	r4, r1
 800b854:	44c3      	add	fp, r8
 800b856:	d1d7      	bne.n	800b808 <arm_mat_inverse_f32+0x130>
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	f1be 0e01 	subs.w	lr, lr, #1
 800b85e:	f106 0601 	add.w	r6, r6, #1
 800b862:	449c      	add	ip, r3
 800b864:	f1a7 0704 	sub.w	r7, r7, #4
 800b868:	44a9      	add	r9, r5
 800b86a:	f47f af7e 	bne.w	800b76a <arm_mat_inverse_f32+0x92>
 800b86e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b876:	d006      	beq.n	800b886 <arm_mat_inverse_f32+0x1ae>
 800b878:	2000      	movs	r0, #0
 800b87a:	b007      	add	sp, #28
 800b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b880:	44bb      	add	fp, r7
 800b882:	4428      	add	r0, r5
 800b884:	e7e4      	b.n	800b850 <arm_mat_inverse_f32+0x178>
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	edd3 7a00 	vldr	s15, [r3]
 800b890:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b894:	fb02 f204 	mul.w	r2, r2, r4
 800b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89c:	4614      	mov	r4, r2
 800b89e:	bf08      	it	eq
 800b8a0:	3304      	addeq	r3, #4
 800b8a2:	d007      	beq.n	800b8b4 <arm_mat_inverse_f32+0x1dc>
 800b8a4:	e7e8      	b.n	800b878 <arm_mat_inverse_f32+0x1a0>
 800b8a6:	ecf3 7a01 	vldmia	r3!, {s15}
 800b8aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	d1e1      	bne.n	800b878 <arm_mat_inverse_f32+0x1a0>
 800b8b4:	f10e 0e01 	add.w	lr, lr, #1
 800b8b8:	4574      	cmp	r4, lr
 800b8ba:	d1f4      	bne.n	800b8a6 <arm_mat_inverse_f32+0x1ce>
 800b8bc:	f06f 0004 	mvn.w	r0, #4
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	f06f 0002 	mvn.w	r0, #2
 800b8ca:	b007      	add	sp, #28
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	4656      	mov	r6, sl
 800b8d2:	3f01      	subs	r7, #1
 800b8d4:	f846 bb04 	str.w	fp, [r6], #4
 800b8d8:	f47f af1b 	bne.w	800b712 <arm_mat_inverse_f32+0x3a>
 800b8dc:	e735      	b.n	800b74a <arm_mat_inverse_f32+0x72>
 800b8de:	bf00      	nop
 800b8e0:	00000000 	.word	0x00000000

0800b8e4 <arm_mat_init_f32>:
 800b8e4:	8001      	strh	r1, [r0, #0]
 800b8e6:	8042      	strh	r2, [r0, #2]
 800b8e8:	6043      	str	r3, [r0, #4]
 800b8ea:	4770      	bx	lr

0800b8ec <arm_mat_add_f32>:
 800b8ec:	b4f0      	push	{r4, r5, r6, r7}
 800b8ee:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b8f2:	6803      	ldr	r3, [r0, #0]
 800b8f4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b8f8:	6856      	ldr	r6, [r2, #4]
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	d15d      	bne.n	800b9ba <arm_mat_add_f32+0xce>
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	4293      	cmp	r3, r2
 800b902:	d15a      	bne.n	800b9ba <arm_mat_add_f32+0xce>
 800b904:	8803      	ldrh	r3, [r0, #0]
 800b906:	8844      	ldrh	r4, [r0, #2]
 800b908:	fb04 f403 	mul.w	r4, r4, r3
 800b90c:	08a5      	lsrs	r5, r4, #2
 800b90e:	d032      	beq.n	800b976 <arm_mat_add_f32+0x8a>
 800b910:	f10c 0110 	add.w	r1, ip, #16
 800b914:	f107 0210 	add.w	r2, r7, #16
 800b918:	f106 0310 	add.w	r3, r6, #16
 800b91c:	4628      	mov	r0, r5
 800b91e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b922:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b92a:	3801      	subs	r0, #1
 800b92c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b930:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b934:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b93c:	f101 0110 	add.w	r1, r1, #16
 800b940:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b944:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b948:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b950:	f102 0210 	add.w	r2, r2, #16
 800b954:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b958:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b95c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b960:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b964:	f103 0310 	add.w	r3, r3, #16
 800b968:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b96c:	d1d7      	bne.n	800b91e <arm_mat_add_f32+0x32>
 800b96e:	012b      	lsls	r3, r5, #4
 800b970:	449c      	add	ip, r3
 800b972:	441f      	add	r7, r3
 800b974:	441e      	add	r6, r3
 800b976:	f014 0403 	ands.w	r4, r4, #3
 800b97a:	d01b      	beq.n	800b9b4 <arm_mat_add_f32+0xc8>
 800b97c:	edd7 7a00 	vldr	s15, [r7]
 800b980:	ed9c 7a00 	vldr	s14, [ip]
 800b984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b988:	3c01      	subs	r4, #1
 800b98a:	edc6 7a00 	vstr	s15, [r6]
 800b98e:	d011      	beq.n	800b9b4 <arm_mat_add_f32+0xc8>
 800b990:	eddc 7a01 	vldr	s15, [ip, #4]
 800b994:	ed97 7a01 	vldr	s14, [r7, #4]
 800b998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b99c:	2c01      	cmp	r4, #1
 800b99e:	edc6 7a01 	vstr	s15, [r6, #4]
 800b9a2:	d007      	beq.n	800b9b4 <arm_mat_add_f32+0xc8>
 800b9a4:	eddc 7a02 	vldr	s15, [ip, #8]
 800b9a8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b9ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9b0:	edc6 7a02 	vstr	s15, [r6, #8]
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	bcf0      	pop	{r4, r5, r6, r7}
 800b9b8:	4770      	bx	lr
 800b9ba:	f06f 0002 	mvn.w	r0, #2
 800b9be:	e7fa      	b.n	800b9b6 <arm_mat_add_f32+0xca>

0800b9c0 <__libc_init_array>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	4d0d      	ldr	r5, [pc, #52]	; (800b9f8 <__libc_init_array+0x38>)
 800b9c4:	4c0d      	ldr	r4, [pc, #52]	; (800b9fc <__libc_init_array+0x3c>)
 800b9c6:	1b64      	subs	r4, r4, r5
 800b9c8:	10a4      	asrs	r4, r4, #2
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	42a6      	cmp	r6, r4
 800b9ce:	d109      	bne.n	800b9e4 <__libc_init_array+0x24>
 800b9d0:	4d0b      	ldr	r5, [pc, #44]	; (800ba00 <__libc_init_array+0x40>)
 800b9d2:	4c0c      	ldr	r4, [pc, #48]	; (800ba04 <__libc_init_array+0x44>)
 800b9d4:	f000 f82e 	bl	800ba34 <_init>
 800b9d8:	1b64      	subs	r4, r4, r5
 800b9da:	10a4      	asrs	r4, r4, #2
 800b9dc:	2600      	movs	r6, #0
 800b9de:	42a6      	cmp	r6, r4
 800b9e0:	d105      	bne.n	800b9ee <__libc_init_array+0x2e>
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e8:	4798      	blx	r3
 800b9ea:	3601      	adds	r6, #1
 800b9ec:	e7ee      	b.n	800b9cc <__libc_init_array+0xc>
 800b9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f2:	4798      	blx	r3
 800b9f4:	3601      	adds	r6, #1
 800b9f6:	e7f2      	b.n	800b9de <__libc_init_array+0x1e>
 800b9f8:	0800ba74 	.word	0x0800ba74
 800b9fc:	0800ba74 	.word	0x0800ba74
 800ba00:	0800ba74 	.word	0x0800ba74
 800ba04:	0800ba78 	.word	0x0800ba78

0800ba08 <memcpy>:
 800ba08:	440a      	add	r2, r1
 800ba0a:	4291      	cmp	r1, r2
 800ba0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba10:	d100      	bne.n	800ba14 <memcpy+0xc>
 800ba12:	4770      	bx	lr
 800ba14:	b510      	push	{r4, lr}
 800ba16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba1e:	4291      	cmp	r1, r2
 800ba20:	d1f9      	bne.n	800ba16 <memcpy+0xe>
 800ba22:	bd10      	pop	{r4, pc}

0800ba24 <memset>:
 800ba24:	4402      	add	r2, r0
 800ba26:	4603      	mov	r3, r0
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d100      	bne.n	800ba2e <memset+0xa>
 800ba2c:	4770      	bx	lr
 800ba2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba32:	e7f9      	b.n	800ba28 <memset+0x4>

0800ba34 <_init>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	bf00      	nop
 800ba38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3a:	bc08      	pop	{r3}
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	4770      	bx	lr

0800ba40 <_fini>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	bf00      	nop
 800ba44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba46:	bc08      	pop	{r3}
 800ba48:	469e      	mov	lr, r3
 800ba4a:	4770      	bx	lr
