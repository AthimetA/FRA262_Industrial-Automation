
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800ba7c  0800ba7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba9c  0800ba9c  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa4  0800baa4  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa4  0800baa4  0001baa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800baac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200003c8  0800be70  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800be70  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173ce  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa1  00000000  00000000  000377c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a8  00000000  00000000  0003c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b22  00000000  00000000  00053f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f95  00000000  00000000  00069a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fca17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000fcadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00101418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ba64 	.word	0x0800ba64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800ba64 	.word	0x0800ba64

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a fdd2 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a fdc9 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a fdc0 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a fdb7 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a fdae 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a fda5 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a fd9c 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a fd93 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a fd8a 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a fd81 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a fd78 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a fd6f 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a fd66 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a fd5d 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a fd54 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a fd4a 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a fd40 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f00a fd36 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f00a fd2c 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f00a fd22 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f00a fd18 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f00a fd0e 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f00a fd04 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f00a fcfa 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f00a fcf0 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f00a fce6 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f00a fcdc 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f00a fcd2 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f00a fcc8 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f00a fcbe 	bl	800b914 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f00a fcb4 	bl	800b914 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f00a fa3e 	bl	800b43c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f00a fa34 	bl	800b43c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f00a fa2a 	bl	800b43c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f00a fae4 	bl	800b5c8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f00a fad8 	bl	800b5c8 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f00a fa48 	bl	800b5c8 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f00a fa37 	bl	800b5c8 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f00a fa26 	bl	800b5c8 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f00a fbbf 	bl	800b91c <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f00a fa00 	bl	800b5c8 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f00a f985 	bl	800b4f4 <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f00a f9de 	bl	800b5c8 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f00a f9cd 	bl	800b5c8 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f00a fb66 	bl	800b91c <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f00a fa4d 	bl	800b708 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f00a f99c 	bl	800b5c8 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f00a f98b 	bl	800b5c8 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f00a f97a 	bl	800b5c8 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f00a fb13 	bl	800b91c <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f00a f958 	bl	800b5c8 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f00a f8dd 	bl	800b4f4 <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f00a f936 	bl	800b5c8 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <PIDAController_Init>:
#define PIDVELO_KD  2.5f
#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <PIDAController_Init+0x58>)
 80013b4:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <PIDAController_Init+0x5c>)
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	461c4000 	.word	0x461c4000
 80013cc:	c61c4000 	.word	0xc61c4000

080013d0 <PIDAVelocityController_Update>:

float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0a02 	vstr	s0, [r7, #8]
 80013de:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	61bb      	str	r3, [r7, #24]
    float deadzone = 2.5;
 80013f6:	4b61      	ldr	r3, [pc, #388]	; (800157c <PIDAVelocityController_Update+0x1ac>)
 80013f8:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	pid->KpUse = pid->Kp;
//    }

    if(AbsVal(setpoint) <= 10.0) // 10 deg/s
 80013fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fe:	f000 f9e0 	bl	80017c2 <AbsVal>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d809      	bhi.n	8001428 <PIDAVelocityController_Update+0x58>
    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 6.0;
//    	pid->Kd  = 0.0;
    	pid->Kp  = PIDVELO_KP;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <PIDAVelocityController_Update+0x1b0>)
 8001418:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a59      	ldr	r2, [pc, #356]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 800141e:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4a56      	ldr	r2, [pc, #344]	; (800157c <PIDAVelocityController_Update+0x1ac>)
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	e008      	b.n	800143a <PIDAVelocityController_Update+0x6a>
    }
    else
    {
    	pid->Kp  = PIDVELO_KP;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a55      	ldr	r2, [pc, #340]	; (8001580 <PIDAVelocityController_Update+0x1b0>)
 800142c:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 8001432:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <PIDAVelocityController_Update+0x1ac>)
 8001438:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	edd7 7a06 	vldr	s15, [r7, #24]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	edd3 6a00 	vldr	s13, [r3]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	edd3 7a08 	vldr	s15, [r3, #32]
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	ed93 7a01 	vldr	s14, [r3, #4]
 8001468:	edd7 7a06 	vldr	s15, [r7, #24]
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f810 	bl	80004a0 <__aeabi_f2d>
 8001480:	4604      	mov	r4, r0
 8001482:	460d      	mov	r5, r1
 8001484:	69b8      	ldr	r0, [r7, #24]
 8001486:	f7ff f80b 	bl	80004a0 <__aeabi_f2d>
 800148a:	4680      	mov	r8, r0
 800148c:	4689      	mov	r9, r1
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f804 	bl	80004a0 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	f7fe fea2 	bl	80001e4 <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4640      	mov	r0, r8
 80014a6:	4649      	mov	r1, r9
 80014a8:	f7fe fe9a 	bl	80001e0 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4690      	mov	r8, r2
 80014b2:	4699      	mov	r9, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fff1 	bl	80004a0 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4640      	mov	r0, r8
 80014c4:	4649      	mov	r1, r9
 80014c6:	f7fe fe8d 	bl	80001e4 <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4620      	mov	r0, r4
 80014d0:	4629      	mov	r1, r5
 80014d2:	f7ff f83d 	bl	8000550 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fa69 	bl	80009b4 <__aeabi_d2f>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fe:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	edd3 7a04 	vldr	s15, [r3, #16]
 800151e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	dd04      	ble.n	8001532 <PIDAVelocityController_Update+0x162>

    	pid->ControllerOut = pid->OutputMax;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
 8001530:	e00e      	b.n	8001550 <PIDAVelocityController_Update+0x180>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	edd3 7a03 	vldr	s15, [r3, #12]
 800153e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d503      	bpl.n	8001550 <PIDAVelocityController_Update+0x180>

    	pid->ControllerOut = pid->OutputMin;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	ee07 3a90 	vmov	s15, r3
}
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800157a:	bf00      	nop
 800157c:	40200000 	.word	0x40200000
 8001580:	41a00000 	.word	0x41a00000
 8001584:	3fcccccd 	.word	0x3fcccccd

08001588 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement)
{
 8001588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	ed87 0a02 	vstr	s0, [r7, #8]
 8001596:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 800159a:	ed97 7a02 	vldr	s14, [r7, #8]
 800159e:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a6:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	61bb      	str	r3, [r7, #24]
    float deadzone = 0.4;
 80015ae:	4b61      	ldr	r3, [pc, #388]	; (8001734 <PIDAPositonController_Update+0x1ac>)
 80015b0:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	errorDZ = error + deadzone;
//    }

    if(AbsVal(setpoint) < 51.0) // 10 deg/s
 80015b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80015b6:	f000 f904 	bl	80017c2 <AbsVal>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001738 <PIDAPositonController_Update+0x1b0>
 80015c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d509      	bpl.n	80015e0 <PIDAPositonController_Update+0x58>
    {
    	pid->Kp  = 20.0;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a5b      	ldr	r2, [pc, #364]	; (800173c <PIDAPositonController_Update+0x1b4>)
 80015d0:	601a      	str	r2, [r3, #0]
    	pid->Ki  = 1.6;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <PIDAPositonController_Update+0x1b8>)
 80015d6:	605a      	str	r2, [r3, #4]
    	pid->Kd  = 2.5;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <PIDAPositonController_Update+0x1bc>)
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	e009      	b.n	80015f4 <PIDAPositonController_Update+0x6c>
    }
    else
    {
    	pid->Kp  = 0.2;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a59      	ldr	r2, [pc, #356]	; (8001748 <PIDAPositonController_Update+0x1c0>)
 80015e4:	601a      	str	r2, [r3, #0]
    	pid->Ki  = 0.1;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <PIDAPositonController_Update+0x1c4>)
 80015ea:	605a      	str	r2, [r3, #4]
    	pid->Kd  = 0;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80015fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edd3 6a00 	vldr	s13, [r3]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 7a08 	vldr	s15, [r3, #32]
 800160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001622:	edd7 7a06 	vldr	s15, [r7, #24]
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff33 	bl	80004a0 <__aeabi_f2d>
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
 800163e:	69b8      	ldr	r0, [r7, #24]
 8001640:	f7fe ff2e 	bl	80004a0 <__aeabi_f2d>
 8001644:	4680      	mov	r8, r0
 8001646:	4689      	mov	r9, r1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff27 	bl	80004a0 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	f7fe fdc5 	bl	80001e4 <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4640      	mov	r0, r8
 8001660:	4649      	mov	r1, r9
 8001662:	f7fe fdbd 	bl	80001e0 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4690      	mov	r8, r2
 800166c:	4699      	mov	r9, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff14 	bl	80004a0 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4640      	mov	r0, r8
 800167e:	4649      	mov	r1, r9
 8001680:	f7fe fdb0 	bl	80001e4 <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe ff60 	bl	8000550 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f98c 	bl	80009b4 <__aeabi_d2f>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80016d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	dd04      	ble.n	80016ec <PIDAPositonController_Update+0x164>

    	pid->ControllerOut = pid->OutputMax;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ea:	e00e      	b.n	800170a <PIDAPositonController_Update+0x182>

    } else if (pid->ControllerOut < pid->OutputMin) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d503      	bpl.n	800170a <PIDAPositonController_Update+0x182>

    	pid->ControllerOut = pid->OutputMin;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a1a      	ldr	r2, [r3, #32]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	ee07 3a90 	vmov	s15, r3
}
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001734:	3ecccccd 	.word	0x3ecccccd
 8001738:	424c0000 	.word	0x424c0000
 800173c:	41a00000 	.word	0x41a00000
 8001740:	3fcccccd 	.word	0x3fcccccd
 8001744:	40200000 	.word	0x40200000
 8001748:	3e4ccccd 	.word	0x3e4ccccd
 800174c:	3dcccccd 	.word	0x3dcccccd

08001750 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80017cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d50e      	bpl.n	80017f8 <AbsVal+0x36>
  {
    return number*-1.0;
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fe60 	bl	80004a0 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f8e4 	bl	80009b4 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef1 7a67 	vneg.f32	s15, s15
 80017f6:	e001      	b.n	80017fc <AbsVal+0x3a>
  }
  else
  {
    return number;
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	ed87 0a02 	vstr	s0, [r7, #8]
 8001816:	edc7 0a01 	vstr	s1, [r7, #4]
 800181a:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
//	traject -> Amax = 28.64789;
//	traject -> Jmax = 572.957795 ;
	traject -> Amax = 21.77;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <CoefficientAndTimeCalculation+0xa0>)
 8001850:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 114.59 ;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a15      	ldr	r2, [pc, #84]	; (80018ac <CoefficientAndTimeCalculation+0xa4>)
 8001856:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d502      	bpl.n	8001874 <CoefficientAndTimeCalculation+0x6c>
	{
		gain = -1.0;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <CoefficientAndTimeCalculation+0xa8>)
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e002      	b.n	800187a <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 8001874:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001878:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	f7ff ff9d 	bl	80017c2 <AbsVal>
 8001888:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 800188c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001890:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018b4 <CoefficientAndTimeCalculation+0xac>
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	db0e      	blt.n	80018bc <CoefficientAndTimeCalculation+0xb4>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <CoefficientAndTimeCalculation+0xb0>)
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e07a      	b.n	800199c <CoefficientAndTimeCalculation+0x194>
 80018a6:	bf00      	nop
 80018a8:	41ae28f6 	.word	0x41ae28f6
 80018ac:	42e52e14 	.word	0x42e52e14
 80018b0:	bf800000 	.word	0xbf800000
 80018b4:	43020000 	.word	0x43020000
 80018b8:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 80018bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fde2 	bl	80004a0 <__aeabi_f2d>
 80018dc:	f60f 3378 	addw	r3, pc, #2936	; 0xb78
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe34 	bl	8000550 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4690      	mov	r8, r2
 80018ee:	4699      	mov	r9, r3
 80018f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f7fe fdcc 	bl	80004a0 <__aeabi_f2d>
 8001908:	f60f 3354 	addw	r3, pc, #2900	; 0xb54
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4640      	mov	r0, r8
 800191a:	4649      	mov	r1, r9
 800191c:	f7fe fc62 	bl	80001e4 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4690      	mov	r8, r2
 8001926:	4699      	mov	r9, r3
 8001928:	edd7 7a04 	vldr	s15, [r7, #16]
 800192c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001930:	ee17 0a90 	vmov	r0, s15
 8001934:	f7fe fdb4 	bl	80004a0 <__aeabi_f2d>
 8001938:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fe06 	bl	8000550 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4640      	mov	r0, r8
 800194a:	4649      	mov	r1, r9
 800194c:	f7fe fc48 	bl	80001e0 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4690      	mov	r8, r2
 8001956:	4699      	mov	r9, r3
 8001958:	6938      	ldr	r0, [r7, #16]
 800195a:	f7fe fda1 	bl	80004a0 <__aeabi_f2d>
 800195e:	f60f 3310 	addw	r3, pc, #2832	; 0xb10
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fdf3 	bl	8000550 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4640      	mov	r0, r8
 8001970:	4649      	mov	r1, r9
 8001972:	f7fe fc37 	bl	80001e4 <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f60f 23f8 	addw	r3, pc, #2808	; 0xaf8
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fc2d 	bl	80001e4 <__adddf3>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f80f 	bl	80009b4 <__aeabi_d2f>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	609a      	str	r2, [r3, #8]
	}

	if(traject -> Vmax > Veloinput)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a2:	ed97 7a00 	vldr	s14, [r7]
 80019a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	d502      	bpl.n	80019b6 <CoefficientAndTimeCalculation+0x1ae>
	{
		traject -> Vmax = Veloinput;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	edd3 6a00 	vldr	s13, [r3]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	edd3 6a00 	vldr	s13, [r3]
 8001a0e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 6a00 	vldr	s13, [r3]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edd3 6a00 	vldr	s13, [r3]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	edd3 6a00 	vldr	s13, [r3]
 8001a78:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fcdf 	bl	80004a0 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7fe ff63 	bl	80009b4 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef1 7a67 	vneg.f32	s15, s15
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcc8 	bl	80004a0 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ff4c 	bl	80009b4 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef1 7a67 	vneg.f32	s15, s15
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc86 	bl	80004a0 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff0a 	bl	80009b4 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef1 7a67 	vneg.f32	s15, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc73 	bl	80004a0 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fc62 	bl	80004a0 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	f7fe fafc 	bl	80001e0 <__aeabi_dsub>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fee0 	bl	80009b4 <__aeabi_d2f>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c60:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ca0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cdc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ce0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d60:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001da0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001de0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001df0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e60:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e78:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ea0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ed4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001edc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ee0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ef0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f50:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f76:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fa2:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fb8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fc0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002012:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800202c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002030:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002034:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002056:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800206c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002076:	ee66 7a27 	vmul.f32	s15, s12, s15
 800207a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002082:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002098:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800209c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80020a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020c0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002108:	ee66 7a27 	vmul.f32	s15, s12, s15
 800210c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002110:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002136:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800214c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002156:	ee66 7a27 	vmul.f32	s15, s12, s15
 800215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002162:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002178:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800217c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002180:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002188:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002198:	ee66 7a27 	vmul.f32	s15, s12, s15
 800219c:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80021a0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002216:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800222c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002236:	ee66 7a27 	vmul.f32	s15, s12, s15
 800223a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002242:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002258:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800225c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002260:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002268:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002278:	ee66 7a27 	vmul.f32	s15, s12, s15
 800227c:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800229c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022d0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80022f6:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	edd3 6a08 	vldr	s13, [r3, #32]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800230c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002316:	ee66 7a27 	vmul.f32	s15, s12, s15
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002322:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002338:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800233c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002340:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002348:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002358:	ee66 7a27 	vmul.f32	s15, s12, s15
 800235c:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800237c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002392:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80023d6:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002402:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002418:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800241c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002420:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002428:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002438:	ee66 7a27 	vmul.f32	s15, s12, s15
 800243c:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002440:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002454:	f3af 8000 	nop.w
 8002458:	9abcaf48 	.word	0x9abcaf48
 800245c:	be8ad7f2 	.word	0xbe8ad7f2
 8002460:	d7c6fbd2 	.word	0xd7c6fbd2
 8002464:	3f12599e 	.word	0x3f12599e
 8002468:	18fc5048 	.word	0x18fc5048
 800246c:	3f82d773 	.word	0x3f82d773
 8002470:	44d013a9 	.word	0x44d013a9
 8002474:	3feaf0d8 	.word	0x3feaf0d8
 8002478:	af4f0d84 	.word	0xaf4f0d84
 800247c:	40136594 	.word	0x40136594

08002480 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 800248e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002496:	ebb0 0802 	subs.w	r8, r0, r2
 800249a:	eb61 0903 	sbc.w	r9, r1, r3
 800249e:	4640      	mov	r0, r8
 80024a0:	4649      	mov	r1, r9
 80024a2:	f7fe f81f 	bl	80004e4 <__aeabi_ul2d>
 80024a6:	a3c6      	add	r3, pc, #792	; (adr r3, 80027c0 <TrajectoryEvaluation+0x340>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f97a 	bl	80007a4 <__aeabi_ddiv>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fa7c 	bl	80009b4 <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	4ac2      	ldr	r2, [pc, #776]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80024c0:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 80024c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ca:	1a84      	subs	r4, r0, r2
 80024cc:	eb61 0503 	sbc.w	r5, r1, r3
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fe f806 	bl	80004e4 <__aeabi_ul2d>
 80024d8:	a3b9      	add	r3, pc, #740	; (adr r3, 80027c0 <TrajectoryEvaluation+0x340>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f961 	bl	80007a4 <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fa63 	bl	80009b4 <__aeabi_d2f>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4ab6      	ldr	r2, [pc, #728]	; (80027cc <TrajectoryEvaluation+0x34c>)
 80024f2:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80024f4:	4bb4      	ldr	r3, [pc, #720]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	f2c0 80a9 	blt.w	8002658 <TrajectoryEvaluation+0x1d8>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800250c:	4bae      	ldr	r3, [pc, #696]	; (80027c8 <TrajectoryEvaluation+0x348>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	f340 809d 	ble.w	8002658 <TrajectoryEvaluation+0x1d8>
	{
		traject -> QJ = traject -> A[0];
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	ed93 7a03 	vldr	s14, [r3, #12]
 800252e:	4ba6      	ldr	r3, [pc, #664]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	ed93 7a03 	vldr	s14, [r3, #12]
 800254e:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002550:	edd3 6a00 	vldr	s13, [r3]
 8002554:	4b9c      	ldr	r3, [pc, #624]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002566:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002570:	4b95      	ldr	r3, [pc, #596]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	ed93 7a03 	vldr	s14, [r3, #12]
 8002594:	4b8d      	ldr	r3, [pc, #564]	; (80027cc <TrajectoryEvaluation+0x34c>)
 8002596:	edd3 6a00 	vldr	s13, [r3]
 800259a:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <TrajectoryEvaluation+0x34c>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <TrajectoryEvaluation+0x34c>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80025e0:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80025e2:	ed93 6a00 	vldr	s12, [r3]
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025fe:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002602:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002610:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002612:	ed93 6a00 	vldr	s12, [r3]
 8002616:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002620:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002624:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002628:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800262c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002636:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002654:	f000 bc62 	b.w	8002f1c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	f200 80b0 	bhi.w	80027d0 <TrajectoryEvaluation+0x350>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	f340 80a4 	ble.w	80027d0 <TrajectoryEvaluation+0x350>
	{
		traject -> QJ = traject -> A[1];
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	ed93 7a04 	vldr	s14, [r3, #16]
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <TrajectoryEvaluation+0x348>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80026ba:	edd3 6a00 	vldr	s13, [r3]
 80026be:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <TrajectoryEvaluation+0x34c>)
 8002700:	edd3 6a00 	vldr	s13, [r3]
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <TrajectoryEvaluation+0x34c>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <TrajectoryEvaluation+0x34c>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	edd3 6a04 	vldr	s13, [r3, #16]
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <TrajectoryEvaluation+0x348>)
 800274c:	ed93 6a00 	vldr	s12, [r3]
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee26 6a27 	vmul.f32	s12, s12, s15
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <TrajectoryEvaluation+0x348>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002768:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800276c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <TrajectoryEvaluation+0x348>)
 800277c:	ed93 6a00 	vldr	s12, [r3]
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <TrajectoryEvaluation+0x348>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee66 7a27 	vmul.f32	s15, s12, s15
 800278a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800278e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002792:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <TrajectoryEvaluation+0x348>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 80027be:	e3ad      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
 80027c0:	00000000 	.word	0x00000000
 80027c4:	412e8480 	.word	0x412e8480
 80027c8:	200003e4 	.word	0x200003e4
 80027cc:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80027d6:	4bb2      	ldr	r3, [pc, #712]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	f200 80a8 	bhi.w	8002938 <TrajectoryEvaluation+0x4b8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80027ee:	4bac      	ldr	r3, [pc, #688]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fc:	f340 809c 	ble.w	8002938 <TrajectoryEvaluation+0x4b8>
	{
		traject -> QJ = traject -> A[2];
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002810:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002830:	4b9b      	ldr	r3, [pc, #620]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002832:	edd3 6a00 	vldr	s13, [r3]
 8002836:	4b9a      	ldr	r3, [pc, #616]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002844:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002848:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002852:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	ed93 7a05 	vldr	s14, [r3, #20]
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 8002878:	edd3 6a00 	vldr	s13, [r3]
 800287c:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800288e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002898:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	edd3 6a05 	vldr	s13, [r3, #20]
 80028c2:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80028c4:	ed93 6a00 	vldr	s12, [r3]
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028e0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80028e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80028f2:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80028f4:	ed93 6a00 	vldr	s12, [r3]
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002902:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002906:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800290a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800290e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002918:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002936:	e2f1      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800293e:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	f200 80ac 	bhi.w	8002aa8 <TrajectoryEvaluation+0x628>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	f340 80a0 	ble.w	8002aa8 <TrajectoryEvaluation+0x628>
	{
		traject -> QJ = traject -> A[3];
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	ed93 7a06 	vldr	s14, [r3, #24]
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	ed93 7a06 	vldr	s14, [r3, #24]
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 800299a:	edd3 6a00 	vldr	s13, [r3]
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	ed93 7a06 	vldr	s14, [r3, #24]
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 80029e0:	edd3 6a00 	vldr	s13, [r3]
 80029e4:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <TrajectoryEvaluation+0x624>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a2c:	ed93 6a00 	vldr	s12, [r3]
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a48:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a5c:	ed93 6a00 	vldr	s12, [r3]
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a6e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a72:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <TrajectoryEvaluation+0x620>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002a9e:	e23d      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
 8002aa0:	200003e4 	.word	0x200003e4
 8002aa4:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002aae:	4bb2      	ldr	r3, [pc, #712]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	f200 80a8 	bhi.w	8002c10 <TrajectoryEvaluation+0x790>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002ac6:	4bac      	ldr	r3, [pc, #688]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	f340 809c 	ble.w	8002c10 <TrajectoryEvaluation+0x790>
	{
		traject -> QJ = traject -> A[4];
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ae8:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b08:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002b0a:	edd3 6a00 	vldr	s13, [r3]
 8002b0e:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b2a:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002b50:	edd3 6a00 	vldr	s13, [r3]
 8002b54:	4b89      	ldr	r3, [pc, #548]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b70:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b9a:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002b9c:	ed93 6a00 	vldr	s12, [r3]
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bb8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002bca:	4b6b      	ldr	r3, [pc, #428]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002bcc:	ed93 6a00 	vldr	s12, [r3]
 8002bd0:	4b69      	ldr	r3, [pc, #420]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bde:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002be2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002c0e:	e185      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002c16:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	f200 80ac 	bhi.w	8002d80 <TrajectoryEvaluation+0x900>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002c2e:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	f340 80a0 	ble.w	8002d80 <TrajectoryEvaluation+0x900>
	{
		traject -> QJ = traject -> A[5];
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c50:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c72:	edd3 6a00 	vldr	s13, [r3]
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002cb8:	edd3 6a00 	vldr	s13, [r3]
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <TrajectoryEvaluation+0x8fc>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d04:	ed93 6a00 	vldr	s12, [r3]
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d20:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002d24:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d34:	ed93 6a00 	vldr	s12, [r3]
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d46:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002d4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <TrajectoryEvaluation+0x8f8>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002d76:	e0d1      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
 8002d78:	200003e4 	.word	0x200003e4
 8002d7c:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002d86:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	f200 80a8 	bhi.w	8002ee8 <TrajectoryEvaluation+0xa68>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	f340 809c 	ble.w	8002ee8 <TrajectoryEvaluation+0xa68>
	{
		traject -> QJ = traject -> A[6];
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002de0:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002de2:	edd3 6a00 	vldr	s13, [r3]
 8002de6:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002df8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <TrajectoryEvaluation+0xaac>)
 8002e28:	edd3 6a00 	vldr	s13, [r3]
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <TrajectoryEvaluation+0xaac>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e48:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <TrajectoryEvaluation+0xaac>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002e74:	ed93 6a00 	vldr	s12, [r3]
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e90:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002e94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002ea4:	ed93 6a00 	vldr	s12, [r3]
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eb6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002eba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <TrajectoryEvaluation+0xaa8>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002ee6:	e019      	b.n	8002f1c <TrajectoryEvaluation+0xa9c>
	}
	else
	{
		traject -> QJ = 0;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QVP = 0;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qfinal;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}

	return 1.0;
 8002f1c:	bf00      	nop
}
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f26:	bf00      	nop
 8002f28:	200003e4 	.word	0x200003e4
 8002f2c:	200003e8 	.word	0x200003e8

08002f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8002f38:	f002 fb70 	bl	800561c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f3c:	f000 f8ca 	bl	80030d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f40:	f000 fafc 	bl	800353c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f44:	f000 fad2 	bl	80034ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f48:	f000 faa4 	bl	8003494 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f4c:	f000 f92a 	bl	80031a4 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002f50:	f000 fa7c 	bl	800344c <MX_TIM11_Init>
  MX_TIM1_Init();
 8002f54:	f000 f954 	bl	8003200 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f58:	f000 f9d6 	bl	8003308 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002f5c:	f000 fa28 	bl	80033b0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 8002f60:	f000 fe4a 	bl	8003bf8 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8002f64:	484a      	ldr	r0, [pc, #296]	; (8003090 <main+0x160>)
 8002f66:	f7fd fef7 	bl	8000d58 <KalmanMatrixInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4849      	ldr	r0, [pc, #292]	; (8003094 <main+0x164>)
 8002f6e:	f006 f80d 	bl	8008f8c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002f72:	4849      	ldr	r0, [pc, #292]	; (8003098 <main+0x168>)
 8002f74:	f005 ff2a 	bl	8008dcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002f78:	213c      	movs	r1, #60	; 0x3c
 8002f7a:	4848      	ldr	r0, [pc, #288]	; (800309c <main+0x16c>)
 8002f7c:	f006 f95c 	bl	8009238 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <main+0x170>)
 8002f8a:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002f8c:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <main+0x170>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <main+0x170>)
 8002f92:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <main+0x170>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a42      	ldr	r2, [pc, #264]	; (80030a4 <main+0x174>)
 8002f9a:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8002f9c:	4842      	ldr	r0, [pc, #264]	; (80030a8 <main+0x178>)
 8002f9e:	f7fe f9e7 	bl	8001370 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8002fa2:	4842      	ldr	r0, [pc, #264]	; (80030ac <main+0x17c>)
 8002fa4:	f7fe f9e4 	bl	8001370 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8002fa8:	4841      	ldr	r0, [pc, #260]	; (80030b0 <main+0x180>)
 8002faa:	f7fe fbd1 	bl	8001750 <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8002fae:	f002 f831 	bl	8005014 <Micros>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	493f      	ldr	r1, [pc, #252]	; (80030b4 <main+0x184>)
 8002fb8:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8002fbc:	f002 fb94 	bl	80056e8 <HAL_GetTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <main+0x184>)
 8002fca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fce:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8002fd2:	f001 fb15 	bl	8004600 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8002fd6:	f002 f81d 	bl	8005014 <Micros>
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <main+0x188>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	1a84      	subs	r4, r0, r2
 8002fe2:	eb61 0503 	sbc.w	r5, r1, r3
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <main+0x18c>)
 8002fe8:	429c      	cmp	r4, r3
 8002fea:	f175 0300 	sbcs.w	r3, r5, #0
 8002fee:	d308      	bcc.n	8003002 <main+0xd2>
	  {
		  EndEffLoopTime = Micros();
 8002ff0:	f002 f810 	bl	8005014 <Micros>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	492f      	ldr	r1, [pc, #188]	; (80030b8 <main+0x188>)
 8002ffa:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8002ffe:	f001 fc4f 	bl	80048a0 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8003002:	f002 f807 	bl	8005014 <Micros>
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <main+0x190>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	ebb0 0802 	subs.w	r8, r0, r2
 8003010:	eb61 0903 	sbc.w	r9, r1, r3
 8003014:	f242 7310 	movw	r3, #10000	; 0x2710
 8003018:	4598      	cmp	r8, r3
 800301a:	f179 0300 	sbcs.w	r3, r9, #0
 800301e:	d3c6      	bcc.n	8002fae <main+0x7e>
	  {
		ControlLoopTime  = Micros();
 8003020:	f001 fff8 	bl	8005014 <Micros>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4925      	ldr	r1, [pc, #148]	; (80030c0 <main+0x190>)
 800302a:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 800302e:	f001 fff1 	bl	8005014 <Micros>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4923      	ldr	r1, [pc, #140]	; (80030c4 <main+0x194>)
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 800303c:	f000 fb44 	bl	80036c8 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <main+0x198>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	eeb0 0a67 	vmov.f32	s0, s15
 800304a:	4811      	ldr	r0, [pc, #68]	; (8003090 <main+0x160>)
 800304c:	f7fe f862 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <main+0x198>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <main+0x180>)
 8003056:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <main+0x160>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <main+0x180>)
 8003060:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8003062:	f000 fca7 	bl	80039b4 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003066:	f001 ffd5 	bl	8005014 <Micros>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4917      	ldr	r1, [pc, #92]	; (80030cc <main+0x19c>)
 8003070:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <main+0x19c>)
 8003076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <main+0x194>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	ebb0 0a02 	subs.w	sl, r0, r2
 8003084:	eb61 0b03 	sbc.w	fp, r1, r3
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <main+0x1a0>)
 800308a:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 800308e:	e78e      	b.n	8002fae <main+0x7e>
 8003090:	20000034 	.word	0x20000034
 8003094:	20000440 	.word	0x20000440
 8003098:	20000518 	.word	0x20000518
 800309c:	20000488 	.word	0x20000488
 80030a0:	20000770 	.word	0x20000770
 80030a4:	2000077c 	.word	0x2000077c
 80030a8:	20000790 	.word	0x20000790
 80030ac:	200007c4 	.word	0x200007c4
 80030b0:	20000664 	.word	0x20000664
 80030b4:	20000708 	.word	0x20000708
 80030b8:	20000718 	.word	0x20000718
 80030bc:	000186a1 	.word	0x000186a1
 80030c0:	20000900 	.word	0x20000900
 80030c4:	200008d0 	.word	0x200008d0
 80030c8:	20000780 	.word	0x20000780
 80030cc:	200008d8 	.word	0x200008d8
 80030d0:	200008e0 	.word	0x200008e0

080030d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b094      	sub	sp, #80	; 0x50
 80030d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030da:	f107 0320 	add.w	r3, r7, #32
 80030de:	2230      	movs	r2, #48	; 0x30
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f008 fcb6 	bl	800ba54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <SystemClock_Config+0xc8>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <SystemClock_Config+0xc8>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6413      	str	r3, [r2, #64]	; 0x40
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <SystemClock_Config+0xc8>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <SystemClock_Config+0xcc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <SystemClock_Config+0xcc>)
 800311e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <SystemClock_Config+0xcc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003130:	2302      	movs	r3, #2
 8003132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003134:	2301      	movs	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003138:	2310      	movs	r3, #16
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800313c:	2302      	movs	r3, #2
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003144:	2308      	movs	r3, #8
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003148:	2364      	movs	r3, #100	; 0x64
 800314a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800314c:	2302      	movs	r3, #2
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003150:	2304      	movs	r3, #4
 8003152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003154:	f107 0320 	add.w	r3, r7, #32
 8003158:	4618      	mov	r0, r3
 800315a:	f005 f94f 	bl	80083fc <HAL_RCC_OscConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003164:	f001 ff6e 	bl	8005044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003168:	230f      	movs	r3, #15
 800316a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800316c:	2302      	movs	r3, #2
 800316e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	2103      	movs	r1, #3
 8003184:	4618      	mov	r0, r3
 8003186:	f005 fbb1 	bl	80088ec <HAL_RCC_ClockConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003190:	f001 ff58 	bl	8005044 <Error_Handler>
  }
}
 8003194:	bf00      	nop
 8003196:	3750      	adds	r7, #80	; 0x50
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000

080031a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <MX_I2C1_Init+0x54>)
 80031ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <MX_I2C1_Init+0x58>)
 80031b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031bc:	2200      	movs	r2, #0
 80031be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <MX_I2C1_Init+0x50>)
 80031e2:	f003 f997 	bl	8006514 <HAL_I2C_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031ec:	f001 ff2a 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200003ec 	.word	0x200003ec
 80031f8:	40005400 	.word	0x40005400
 80031fc:	00061a80 	.word	0x00061a80

08003200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b092      	sub	sp, #72	; 0x48
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2220      	movs	r2, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f008 fc12 	bl	800ba54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <MX_TIM1_Init+0x100>)
 8003232:	4a34      	ldr	r2, [pc, #208]	; (8003304 <MX_TIM1_Init+0x104>)
 8003234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <MX_TIM1_Init+0x100>)
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <MX_TIM1_Init+0x100>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <MX_TIM1_Init+0x100>)
 8003244:	f242 720f 	movw	r2, #9999	; 0x270f
 8003248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <MX_TIM1_Init+0x100>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <MX_TIM1_Init+0x100>)
 8003252:	2200      	movs	r2, #0
 8003254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <MX_TIM1_Init+0x100>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800325c:	4828      	ldr	r0, [pc, #160]	; (8003300 <MX_TIM1_Init+0x100>)
 800325e:	f005 fe46 	bl	8008eee <HAL_TIM_PWM_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003268:	f001 feec 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003278:	4619      	mov	r1, r3
 800327a:	4821      	ldr	r0, [pc, #132]	; (8003300 <MX_TIM1_Init+0x100>)
 800327c:	f006 fdf0 	bl	8009e60 <HAL_TIMEx_MasterConfigSynchronization>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003286:	f001 fedd 	bl	8005044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800328a:	2360      	movs	r3, #96	; 0x60
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003296:	2300      	movs	r3, #0
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	2200      	movs	r2, #0
 80032ac:	4619      	mov	r1, r3
 80032ae:	4814      	ldr	r0, [pc, #80]	; (8003300 <MX_TIM1_Init+0x100>)
 80032b0:	f006 f958 	bl	8009564 <HAL_TIM_PWM_ConfigChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80032ba:	f001 fec3 	bl	8005044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4807      	ldr	r0, [pc, #28]	; (8003300 <MX_TIM1_Init+0x100>)
 80032e2:	f006 fe2b 	bl	8009f3c <HAL_TIMEx_ConfigBreakDeadTime>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80032ec:	f001 feaa 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032f0:	4803      	ldr	r0, [pc, #12]	; (8003300 <MX_TIM1_Init+0x100>)
 80032f2:	f001 ffe1 	bl	80052b8 <HAL_TIM_MspPostInit>

}
 80032f6:	bf00      	nop
 80032f8:	3748      	adds	r7, #72	; 0x48
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000440 	.word	0x20000440
 8003304:	40010000 	.word	0x40010000

08003308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f008 fb9c 	bl	800ba54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <MX_TIM2_Init+0xa4>)
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <MX_TIM2_Init+0xa4>)
 800333a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800333e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800334c:	2303      	movs	r3, #3
 800334e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003360:	2300      	movs	r3, #0
 8003362:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003364:	2301      	movs	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	4619      	mov	r1, r3
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003378:	f005 feb8 	bl	80090ec <HAL_TIM_Encoder_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003382:	f001 fe5f 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4806      	ldr	r0, [pc, #24]	; (80033ac <MX_TIM2_Init+0xa4>)
 8003394:	f006 fd64 	bl	8009e60 <HAL_TIMEx_MasterConfigSynchronization>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800339e:	f001 fe51 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000488 	.word	0x20000488

080033b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c4:	463b      	mov	r3, r7
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <MX_TIM5_Init+0x90>)
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <MX_TIM5_Init+0x94>)
 80033d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80033d2:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <MX_TIM5_Init+0x90>)
 80033d4:	2263      	movs	r2, #99	; 0x63
 80033d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <MX_TIM5_Init+0x90>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <MX_TIM5_Init+0x90>)
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <MX_TIM5_Init+0x98>)
 80033e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <MX_TIM5_Init+0x90>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <MX_TIM5_Init+0x90>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80033f0:	4813      	ldr	r0, [pc, #76]	; (8003440 <MX_TIM5_Init+0x90>)
 80033f2:	f005 fc9b 	bl	8008d2c <HAL_TIM_Base_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80033fc:	f001 fe22 	bl	8005044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4619      	mov	r1, r3
 800340c:	480c      	ldr	r0, [pc, #48]	; (8003440 <MX_TIM5_Init+0x90>)
 800340e:	f006 f96b 	bl	80096e8 <HAL_TIM_ConfigClockSource>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003418:	f001 fe14 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800341c:	2320      	movs	r3, #32
 800341e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003424:	463b      	mov	r3, r7
 8003426:	4619      	mov	r1, r3
 8003428:	4805      	ldr	r0, [pc, #20]	; (8003440 <MX_TIM5_Init+0x90>)
 800342a:	f006 fd19 	bl	8009e60 <HAL_TIMEx_MasterConfigSynchronization>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003434:	f001 fe06 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200004d0 	.word	0x200004d0
 8003444:	40000c00 	.word	0x40000c00
 8003448:	0001869f 	.word	0x0001869f

0800344c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_TIM11_Init+0x40>)
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <MX_TIM11_Init+0x44>)
 8003454:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <MX_TIM11_Init+0x40>)
 8003458:	2263      	movs	r2, #99	; 0x63
 800345a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_TIM11_Init+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <MX_TIM11_Init+0x40>)
 8003464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003468:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <MX_TIM11_Init+0x40>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <MX_TIM11_Init+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_TIM11_Init+0x40>)
 8003478:	f005 fc58 	bl	8008d2c <HAL_TIM_Base_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003482:	f001 fddf 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000518 	.word	0x20000518
 8003490:	40014800 	.word	0x40014800

08003494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <MX_USART2_UART_Init+0x54>)
 800349c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034a0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80034a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034be:	220c      	movs	r2, #12
 80034c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034ce:	4805      	ldr	r0, [pc, #20]	; (80034e4 <MX_USART2_UART_Init+0x50>)
 80034d0:	f006 fd9a 	bl	800a008 <HAL_UART_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80034da:	f001 fdb3 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000560 	.word	0x20000560
 80034e8:	40004400 	.word	0x40004400

080034ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <MX_DMA_Init+0x4c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <MX_DMA_Init+0x4c>)
 80034fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <MX_DMA_Init+0x4c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2010      	movs	r0, #16
 8003514:	f002 f9cf 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003518:	2010      	movs	r0, #16
 800351a:	f002 f9e8 	bl	80058ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	2011      	movs	r0, #17
 8003524:	f002 f9c7 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003528:	2011      	movs	r0, #17
 800352a:	f002 f9e0 	bl	80058ee <HAL_NVIC_EnableIRQ>

}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800

0800353c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <MX_GPIO_Init+0x154>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <MX_GPIO_Init+0x154>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <MX_GPIO_Init+0x154>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <MX_GPIO_Init+0x154>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <MX_GPIO_Init+0x154>)
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <MX_GPIO_Init+0x154>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b40      	ldr	r3, [pc, #256]	; (8003690 <MX_GPIO_Init+0x154>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <MX_GPIO_Init+0x154>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <MX_GPIO_Init+0x154>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <MX_GPIO_Init+0x154>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a38      	ldr	r2, [pc, #224]	; (8003690 <MX_GPIO_Init+0x154>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b36      	ldr	r3, [pc, #216]	; (8003690 <MX_GPIO_Init+0x154>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80035c8:	4832      	ldr	r0, [pc, #200]	; (8003694 <MX_GPIO_Init+0x158>)
 80035ca:	f002 ff57 	bl	800647c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80035d4:	4830      	ldr	r0, [pc, #192]	; (8003698 <MX_GPIO_Init+0x15c>)
 80035d6:	f002 ff51 	bl	800647c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	482a      	ldr	r0, [pc, #168]	; (800369c <MX_GPIO_Init+0x160>)
 80035f2:	f002 fda7 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 80035f6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80035fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	4821      	ldr	r0, [pc, #132]	; (8003694 <MX_GPIO_Init+0x158>)
 8003610:	f002 fd98 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 8003614:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8003618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361a:	2301      	movs	r3, #1
 800361c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	481a      	ldr	r0, [pc, #104]	; (8003698 <MX_GPIO_Init+0x15c>)
 800362e:	f002 fd89 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8003632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003638:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800363c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4812      	ldr	r0, [pc, #72]	; (8003694 <MX_GPIO_Init+0x158>)
 800364a:	f002 fd7b 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 800364e:	2320      	movs	r3, #32
 8003650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003652:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	480d      	ldr	r0, [pc, #52]	; (8003698 <MX_GPIO_Init+0x15c>)
 8003664:	f002 fd6e 	bl	8006144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	2017      	movs	r0, #23
 800366e:	f002 f922 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003672:	2017      	movs	r0, #23
 8003674:	f002 f93b 	bl	80058ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	2028      	movs	r0, #40	; 0x28
 800367e:	f002 f91a 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003682:	2028      	movs	r0, #40	; 0x28
 8003684:	f002 f933 	bl	80058ee <HAL_NVIC_EnableIRQ>

}
 8003688:	bf00      	nop
 800368a:	3728      	adds	r7, #40	; 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800

080036a0 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	if(number<0){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da02      	bge.n	80036b4 <Int32Abs+0x14>
		return number*-1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	425b      	negs	r3, r3
 80036b2:	e000      	b.n	80036b6 <Int32Abs+0x16>
	}else{
		return number;
 80036b4:	687b      	ldr	r3, [r7, #4]
	}
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	0000      	movs	r0, r0
 80036c4:	0000      	movs	r0, r0
	...

080036c8 <EncoderRead>:

void EncoderRead()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80036cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <EncoderRead+0xd8>)
 80036d6:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <EncoderRead+0xd8>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <EncoderRead+0xd8>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	1ad2      	subs	r2, r2, r3
 80036e2:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <EncoderRead+0xdc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	425b      	negs	r3, r3
 80036e8:	429a      	cmp	r2, r3
 80036ea:	da07      	bge.n	80036fc <EncoderRead+0x34>
		WrappingStep+=12000;
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <EncoderRead+0xe0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80036f4:	3320      	adds	r3, #32
 80036f6:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <EncoderRead+0xe0>)
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00f      	b.n	800371c <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <EncoderRead+0xd8>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <EncoderRead+0xd8>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	1ad2      	subs	r2, r2, r3
 8003706:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <EncoderRead+0xdc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	db06      	blt.n	800371c <EncoderRead+0x54>
		WrappingStep-=12000;
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <EncoderRead+0xe0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8003716:	3b20      	subs	r3, #32
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <EncoderRead+0xe0>)
 800371a:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 800371c:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <EncoderRead+0xd8>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <EncoderRead+0xe0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4413      	add	r3, r2
 8003726:	4a21      	ldr	r2, [pc, #132]	; (80037ac <EncoderRead+0xe4>)
 8003728:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <EncoderRead+0xe4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fea4 	bl	800047c <__aeabi_i2d>
 8003734:	a318      	add	r3, pc, #96	; (adr r3, 8003798 <EncoderRead+0xd0>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fd f833 	bl	80007a4 <__aeabi_ddiv>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <EncoderRead+0xe8>)
 800374c:	f7fc ff00 	bl	8000550 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f7fd f92c 	bl	80009b4 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <EncoderRead+0xec>)
 8003760:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <EncoderRead+0xec>)
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <EncoderRead+0xec>)
 800376a:	edd3 7a01 	vldr	s15, [r3, #4]
 800376e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003772:	eddf 6a11 	vldr	s13, [pc, #68]	; 80037b8 <EncoderRead+0xf0>
 8003776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <EncoderRead+0xf4>)
 800377c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <EncoderRead+0xd8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <EncoderRead+0xd8>)
 8003786:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <EncoderRead+0xec>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <EncoderRead+0xec>)
 800378e:	6053      	str	r3, [r2, #4]
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	f3af 8000 	nop.w
 8003798:	00000000 	.word	0x00000000
 800379c:	40c77000 	.word	0x40c77000
 80037a0:	20000770 	.word	0x20000770
 80037a4:	200003b4 	.word	0x200003b4
 80037a8:	20000778 	.word	0x20000778
 80037ac:	2000077c 	.word	0x2000077c
 80037b0:	40768000 	.word	0x40768000
 80037b4:	20000780 	.word	0x20000780
 80037b8:	3c23d70a 	.word	0x3c23d70a
 80037bc:	20000788 	.word	0x20000788

080037c0 <Drivemotor>:

void Drivemotor(int32_t PWM){
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	dc11      	bgt.n	80037f2 <Drivemotor+0x32>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a25      	ldr	r2, [pc, #148]	; (8003868 <Drivemotor+0xa8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	db0d      	blt.n	80037f2 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <Drivemotor+0xac>)
 80037d8:	681c      	ldr	r4, [r3, #0]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff60 	bl	80036a0 <Int32Abs>
 80037e0:	4603      	mov	r3, r0
 80037e2:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ea:	4821      	ldr	r0, [pc, #132]	; (8003870 <Drivemotor+0xb0>)
 80037ec:	f002 fe46 	bl	800647c <HAL_GPIO_WritePin>
 80037f0:	e036      	b.n	8003860 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <Drivemotor+0xa8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	da0b      	bge.n	8003812 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <Drivemotor+0xac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800380a:	4819      	ldr	r0, [pc, #100]	; (8003870 <Drivemotor+0xb0>)
 800380c:	f002 fe36 	bl	800647c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003810:	e026      	b.n	8003860 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db12      	blt.n	800383e <Drivemotor+0x7e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f242 7210 	movw	r2, #10000	; 0x2710
 800381e:	4293      	cmp	r3, r2
 8003820:	dc0d      	bgt.n	800383e <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <Drivemotor+0xac>)
 8003824:	681c      	ldr	r4, [r3, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff3a 	bl	80036a0 <Int32Abs>
 800382c:	4603      	mov	r3, r0
 800382e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003830:	2201      	movs	r2, #1
 8003832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003836:	480e      	ldr	r0, [pc, #56]	; (8003870 <Drivemotor+0xb0>)
 8003838:	f002 fe20 	bl	800647c <HAL_GPIO_WritePin>
 800383c:	e010      	b.n	8003860 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f242 7210 	movw	r2, #10000	; 0x2710
 8003844:	4293      	cmp	r3, r2
 8003846:	dd0b      	ble.n	8003860 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <Drivemotor+0xac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003852:	2201      	movs	r2, #1
 8003854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003858:	4805      	ldr	r0, [pc, #20]	; (8003870 <Drivemotor+0xb0>)
 800385a:	f002 fe0f 	bl	800647c <HAL_GPIO_WritePin>
}
 800385e:	e7ff      	b.n	8003860 <Drivemotor+0xa0>
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	ffffd8f0 	.word	0xffffd8f0
 800386c:	20000440 	.word	0x20000440
 8003870:	40020000 	.word	0x40020000
 8003874:	00000000 	.word	0x00000000

08003878 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003882:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f7fc fe0a 	bl	80004a0 <__aeabi_f2d>
 800388c:	4604      	mov	r4, r0
 800388e:	460d      	mov	r5, r1
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7fc fe05 	bl	80004a0 <__aeabi_f2d>
 8003896:	a345      	add	r3, pc, #276	; (adr r3, 80039ac <InverseTFofMotor+0x134>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fc fe58 	bl	8000550 <__aeabi_dmul>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4620      	mov	r0, r4
 80038a6:	4629      	mov	r1, r5
 80038a8:	f7fc fc9a 	bl	80001e0 <__aeabi_dsub>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <InverseTFofMotor+0x120>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fdf1 	bl	80004a0 <__aeabi_f2d>
 80038be:	a32e      	add	r3, pc, #184	; (adr r3, 8003978 <InverseTFofMotor+0x100>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f7fc fe44 	bl	8000550 <__aeabi_dmul>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4620      	mov	r0, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	f7fc fc88 	bl	80001e4 <__adddf3>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <InverseTFofMotor+0x124>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fddd 	bl	80004a0 <__aeabi_f2d>
 80038e6:	a326      	add	r3, pc, #152	; (adr r3, 8003980 <InverseTFofMotor+0x108>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fe30 	bl	8000550 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fc fc72 	bl	80001e0 <__aeabi_dsub>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	a320      	add	r3, pc, #128	; (adr r3, 8003988 <InverseTFofMotor+0x110>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc ff4b 	bl	80007a4 <__aeabi_ddiv>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f84d 	bl	80009b4 <__aeabi_d2f>
 800391a:	4603      	mov	r3, r0
 800391c:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <InverseTFofMotor+0x128>)
 800391e:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <InverseTFofMotor+0x128>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fdbb 	bl	80004a0 <__aeabi_f2d>
 800392a:	a319      	add	r3, pc, #100	; (adr r3, 8003990 <InverseTFofMotor+0x118>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc fe0e 	bl	8000550 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <InverseTFofMotor+0x12c>)
 8003942:	f7fc ff2f 	bl	80007a4 <__aeabi_ddiv>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f7fd f831 	bl	80009b4 <__aeabi_d2f>
 8003952:	4603      	mov	r3, r0
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <InverseTFofMotor+0x130>)
 8003956:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <InverseTFofMotor+0x128>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <InverseTFofMotor+0x124>)
 800395e:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <InverseTFofMotor+0x120>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
	return Pwm;
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <InverseTFofMotor+0x130>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	ee07 3a90 	vmov	s15, r3
}
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bdb0      	pop	{r4, r5, r7, pc}
 8003978:	dace185d 	.word	0xdace185d
 800397c:	3fda7c30 	.word	0x3fda7c30
 8003980:	a3b6ed62 	.word	0xa3b6ed62
 8003984:	3fdf7e74 	.word	0x3fdf7e74
 8003988:	3d6b5dd1 	.word	0x3d6b5dd1
 800398c:	3fe521bb 	.word	0x3fe521bb
 8003990:	00000000 	.word	0x00000000
 8003994:	40c38800 	.word	0x40c38800
 8003998:	20000914 	.word	0x20000914
 800399c:	20000918 	.word	0x20000918
 80039a0:	2000091c 	.word	0x2000091c
 80039a4:	40280000 	.word	0x40280000
 80039a8:	20000920 	.word	0x20000920
 80039ac:	98e30f85 	.word	0x98e30f85
 80039b0:	3ff4c744 	.word	0x3ff4c744

080039b4 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 80039b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af04      	add	r7, sp, #16
//	setpoint = 40.0;
//	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	invTFOutput = InverseTFofMotor(setpoint,setpoint);
//	PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
//	Drivemotor(PWMCHECKER);
	if (Robot.flagStartTime == 1)
 80039bc:	4b84      	ldr	r3, [pc, #528]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 80039be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10a      	bne.n	80039dc <ControllLoopAndErrorHandler+0x28>
	{
		StartTime = Micros();
 80039c6:	f001 fb25 	bl	8005014 <Micros>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4981      	ldr	r1, [pc, #516]	; (8003bd4 <ControllLoopAndErrorHandler+0x220>)
 80039d0:	e9c1 2300 	strd	r2, r3, [r1]
		Robot.flagStartTime = 0;
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	CurrentTime = Micros();
 80039dc:	f001 fb1a 	bl	8005014 <Micros>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	497c      	ldr	r1, [pc, #496]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 80039e6:	e9c1 2300 	strd	r2, r3, [r1]
	PredictTime = CurrentTime + 10000;
 80039ea:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80039f4:	eb12 0801 	adds.w	r8, r2, r1
 80039f8:	f143 0900 	adc.w	r9, r3, #0
 80039fc:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <ControllLoopAndErrorHandler+0x228>)
 80039fe:	e9c3 8900 	strd	r8, r9, [r3]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <ControllLoopAndErrorHandler+0x220>)
 8003a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a08:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	4973      	ldr	r1, [pc, #460]	; (8003bdc <ControllLoopAndErrorHandler+0x228>)
 8003a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a18:	e9cd 2300 	strd	r2, r3, [sp]
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	486f      	ldr	r0, [pc, #444]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003a22:	f7fe fd2d 	bl	8002480 <TrajectoryEvaluation>
	if(Robot.MotorIsOn == 1)
 8003a26:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 80be 	bne.w	8003bae <ControllLoopAndErrorHandler+0x1fa>
	{
		if (Robot.flagStartTime == 1)
 8003a32:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10a      	bne.n	8003a52 <ControllLoopAndErrorHandler+0x9e>
		{
			StartTime = Micros();
 8003a3c:	f001 faea 	bl	8005014 <Micros>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4963      	ldr	r1, [pc, #396]	; (8003bd4 <ControllLoopAndErrorHandler+0x220>)
 8003a46:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8003a4a:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		CurrentTime = Micros();
 8003a52:	f001 fadf 	bl	8005014 <Micros>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	495f      	ldr	r1, [pc, #380]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 8003a5c:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8003a60:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a6a:	1854      	adds	r4, r2, r1
 8003a6c:	f143 0500 	adc.w	r5, r3, #0
 8003a70:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <ControllLoopAndErrorHandler+0x228>)
 8003a72:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8003a76:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <ControllLoopAndErrorHandler+0x220>)
 8003a78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a7c:	4b56      	ldr	r3, [pc, #344]	; (8003bd8 <ControllLoopAndErrorHandler+0x224>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	4956      	ldr	r1, [pc, #344]	; (8003bdc <ControllLoopAndErrorHandler+0x228>)
 8003a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a90:	4622      	mov	r2, r4
 8003a92:	462b      	mov	r3, r5
 8003a94:	4852      	ldr	r0, [pc, #328]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003a96:	f7fe fcf3 	bl	8002480 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003aa2:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8003aa4:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aaa:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003aac:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 8003aae:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003ab0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ab4:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	f7fd fe7e 	bl	80017c2 <AbsVal>
 8003ac6:	eef0 7a40 	vmov.f32	s15, s0
 8003aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	d52a      	bpl.n	8003b2e <ControllLoopAndErrorHandler+0x17a>
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ade:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae2:	f7fd fe6e 	bl	80017c2 <AbsVal>
 8003ae6:	eef0 7a40 	vmov.f32	s15, s0
 8003aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	d51a      	bpl.n	8003b2e <ControllLoopAndErrorHandler+0x17a>
		{
			PWMCHECKER = 0.0;
 8003af8:	4b3a      	ldr	r3, [pc, #232]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003b00:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b0a:	ee17 0a90 	vmov	r0, s15
 8003b0e:	f7ff fe57 	bl	80037c0 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2108      	movs	r1, #8
 8003b16:	4834      	ldr	r0, [pc, #208]	; (8003be8 <ControllLoopAndErrorHandler+0x234>)
 8003b18:	f002 fcb0 	bl	800647c <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003b2c:	e04c      	b.n	8003bc8 <ControllLoopAndErrorHandler+0x214>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position);
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b30:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	eef0 0a47 	vmov.f32	s1, s14
 8003b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b42:	482a      	ldr	r0, [pc, #168]	; (8003bec <ControllLoopAndErrorHandler+0x238>)
 8003b44:	f7fd fd20 	bl	8001588 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV, Robot.Velocity);
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <ControllLoopAndErrorHandler+0x21c>)
 8003b50:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b54:	eef0 0a47 	vmov.f32	s1, s14
 8003b58:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5c:	4824      	ldr	r0, [pc, #144]	; (8003bf0 <ControllLoopAndErrorHandler+0x23c>)
 8003b5e:	f7fd fc37 	bl	80013d0 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003b64:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <ControllLoopAndErrorHandler+0x22c>)
 8003b6a:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003b6e:	eef0 0a47 	vmov.f32	s1, s14
 8003b72:	eeb0 0a67 	vmov.f32	s0, s15
 8003b76:	f7ff fe7f 	bl	8003878 <InverseTFofMotor>
 8003b7a:	eef0 7a40 	vmov.f32	s15, s0
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <ControllLoopAndErrorHandler+0x240>)
 8003b80:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <ControllLoopAndErrorHandler+0x23c>)
 8003b86:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <ControllLoopAndErrorHandler+0x240>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003b96:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	ee17 0a90 	vmov	r0, s15
 8003ba8:	f7ff fe0a 	bl	80037c0 <Drivemotor>
}
 8003bac:	e00c      	b.n	8003bc8 <ControllLoopAndErrorHandler+0x214>
		PWMCHECKER = 0.0;
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <ControllLoopAndErrorHandler+0x230>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 0a90 	vmov	r0, s15
 8003bc4:	f7ff fdfc 	bl	80037c0 <Drivemotor>
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bd0:	20000664 	.word	0x20000664
 8003bd4:	200008b8 	.word	0x200008b8
 8003bd8:	200008c0 	.word	0x200008c0
 8003bdc:	200008c8 	.word	0x200008c8
 8003be0:	200007fc 	.word	0x200007fc
 8003be4:	200007f8 	.word	0x200007f8
 8003be8:	40020400 	.word	0x40020400
 8003bec:	200007c4 	.word	0x200007c4
 8003bf0:	20000790 	.word	0x20000790
 8003bf4:	2000078c 	.word	0x2000078c

08003bf8 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003bfc:	2214      	movs	r2, #20
 8003bfe:	2100      	movs	r1, #0
 8003c00:	480e      	ldr	r0, [pc, #56]	; (8003c3c <Ringbuf_Init+0x44>)
 8003c02:	f007 ff27 	bl	800ba54 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003c06:	2214      	movs	r2, #20
 8003c08:	2100      	movs	r1, #0
 8003c0a:	480d      	ldr	r0, [pc, #52]	; (8003c40 <Ringbuf_Init+0x48>)
 8003c0c:	f007 ff22 	bl	800ba54 <memset>

	oldPos = 0;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <Ringbuf_Init+0x4c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <Ringbuf_Init+0x50>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003c1c:	2214      	movs	r2, #20
 8003c1e:	4907      	ldr	r1, [pc, #28]	; (8003c3c <Ringbuf_Init+0x44>)
 8003c20:	480a      	ldr	r0, [pc, #40]	; (8003c4c <Ringbuf_Init+0x54>)
 8003c22:	f006 fabd 	bl	800a1a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <Ringbuf_Init+0x58>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <Ringbuf_Init+0x58>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000069c 	.word	0x2000069c
 8003c40:	200006b0 	.word	0x200006b0
 8003c44:	200006ce 	.word	0x200006ce
 8003c48:	200006d0 	.word	0x200006d0
 8003c4c:	20000560 	.word	0x20000560
 8003c50:	200005a4 	.word	0x200005a4

08003c54 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <checkSum+0x15c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d84f      	bhi.n	8003d12 <checkSum+0xbe>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <checkSum+0x24>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003d69 	.word	0x08003d69
 8003c7c:	08003c89 	.word	0x08003c89
 8003c80:	08003d69 	.word	0x08003d69
 8003c84:	08003caf 	.word	0x08003caf
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f897 	bl	8003dc0 <checkAck>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d169      	bne.n	8003d6c <checkSum+0x118>
 8003c98:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <checkSum+0x160>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <checkSum+0x15c>)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	7013      	strb	r3, [r2, #0]
		break;
 8003cac:	e05e      	b.n	8003d6c <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f884 	bl	8003dc0 <checkAck>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <checkSum+0x80>
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <checkSum+0x160>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	4a38      	ldr	r2, [pc, #224]	; (8003db0 <checkSum+0x15c>)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003cd2:	e04c      	b.n	8003d6e <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003cd4:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <checkSum+0x160>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <checkSum+0x160>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	440b      	add	r3, r1
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <checkSum+0x160>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	440b      	add	r3, r1
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <checkSum+0x160>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <checkSum+0x15c>)
 8003d0e:	701a      	strb	r2, [r3, #0]
		break;
 8003d10:	e02d      	b.n	8003d6e <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003d12:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <checkSum+0x160>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <checkSum+0x15c>)
 8003d20:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	e019      	b.n	8003d5c <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <checkSum+0x160>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <checkSum+0x164>)
 8003d32:	fb83 2301 	smull	r2, r3, r3, r1
 8003d36:	10da      	asrs	r2, r3, #3
 8003d38:	17cb      	asrs	r3, r1, #31
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	1aca      	subs	r2, r1, r3
 8003d46:	1883      	adds	r3, r0, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	4413      	add	r3, r2
 8003d54:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	dbe0      	blt.n	8003d28 <checkSum+0xd4>
 8003d66:	e002      	b.n	8003d6e <checkSum+0x11a>
		break;
 8003d68:	bf00      	nop
 8003d6a:	e000      	b.n	8003d6e <checkSum+0x11a>
		break;
 8003d6c:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <checkSum+0x160>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	1e59      	subs	r1, r3, #1
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <checkSum+0x164>)
 8003d7a:	fb83 2301 	smull	r2, r3, r3, r1
 8003d7e:	10da      	asrs	r2, r3, #3
 8003d80:	17cb      	asrs	r3, r1, #31
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	1aca      	subs	r2, r1, r3
 8003d8e:	1883      	adds	r3, r0, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d102      	bne.n	8003da8 <checkSum+0x154>
 8003da2:	4806      	ldr	r0, [pc, #24]	; (8003dbc <checkSum+0x168>)
 8003da4:	f000 f898 	bl	8003ed8 <UARTstateManagement>
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200006f9 	.word	0x200006f9
 8003db4:	200006ce 	.word	0x200006ce
 8003db8:	66666667 	.word	0x66666667
 8003dbc:	200006b0 	.word	0x200006b0

08003dc0 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <checkAck+0x40>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b58      	cmp	r3, #88	; 0x58
 8003dda:	d109      	bne.n	8003df0 <checkAck+0x30>
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <checkAck+0x40>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b75      	cmp	r3, #117	; 0x75
 8003dea:	d101      	bne.n	8003df0 <checkAck+0x30>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <checkAck+0x32>
	else return 0;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200006ce 	.word	0x200006ce

08003e04 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a28      	ldr	r2, [pc, #160]	; (8003eb8 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d14a      	bne.n	8003eb0 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e20:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003e22:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	2b14      	cmp	r3, #20
 8003e36:	dd16      	ble.n	8003e66 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e46:	4413      	add	r3, r2
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	491f      	ldr	r1, [pc, #124]	; (8003ecc <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f007 fdf2 	bl	800ba38 <memcpy>
                        newPos = dataSize+oldPos;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e62:	801a      	strh	r2, [r3, #0]
 8003e64:	e012      	b.n	8003e8c <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	4915      	ldr	r1, [pc, #84]	; (8003ecc <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f007 fdde 	bl	800ba38 <memcpy>
                        newPos = dataSize+oldPos;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e8a:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480d      	ldr	r0, [pc, #52]	; (8003ec8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e92:	f7ff fedf 	bl	8003c54 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003e96:	2214      	movs	r2, #20
 8003e98:	490c      	ldr	r1, [pc, #48]	; (8003ecc <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e9a:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003e9c:	f006 f980 	bl	800a1a0 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0208 	bic.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
        }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	200006d0 	.word	0x200006d0
 8003ec0:	200006ce 	.word	0x200006ce
 8003ec4:	200006d2 	.word	0x200006d2
 8003ec8:	200006b0 	.word	0x200006b0
 8003ecc:	2000069c 	.word	0x2000069c
 8003ed0:	20000560 	.word	0x20000560
 8003ed4:	200005a4 	.word	0x200005a4

08003ed8 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003ee0:	4bad      	ldr	r3, [pc, #692]	; (8004198 <UARTstateManagement+0x2c0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d01d      	beq.n	8003f24 <UARTstateManagement+0x4c>
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	f300 835a 	bgt.w	80045a2 <UARTstateManagement+0x6ca>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8354 	beq.w	800459c <UARTstateManagement+0x6c4>
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d000      	beq.n	8003efa <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003ef8:	e353      	b.n	80045a2 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003efa:	4ba8      	ldr	r3, [pc, #672]	; (800419c <UARTstateManagement+0x2c4>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b92      	cmp	r3, #146	; 0x92
 8003f08:	f040 834a 	bne.w	80045a0 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8003f0c:	4ba4      	ldr	r3, [pc, #656]	; (80041a0 <UARTstateManagement+0x2c8>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8003f12:	4ba1      	ldr	r3, [pc, #644]	; (8004198 <UARTstateManagement+0x2c0>)
 8003f14:	2202      	movs	r2, #2
 8003f16:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f18:	2202      	movs	r2, #2
 8003f1a:	49a2      	ldr	r1, [pc, #648]	; (80041a4 <UARTstateManagement+0x2cc>)
 8003f1c:	48a2      	ldr	r0, [pc, #648]	; (80041a8 <UARTstateManagement+0x2d0>)
 8003f1e:	f006 f8c1 	bl	800a0a4 <HAL_UART_Transmit_DMA>
			break;
 8003f22:	e33d      	b.n	80045a0 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8003f24:	4ba1      	ldr	r3, [pc, #644]	; (80041ac <UARTstateManagement+0x2d4>)
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	4ba1      	ldr	r3, [pc, #644]	; (80041b0 <UARTstateManagement+0x2d8>)
 8003f2a:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8003f2c:	4ba0      	ldr	r3, [pc, #640]	; (80041b0 <UARTstateManagement+0x2d8>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3b91      	subs	r3, #145	; 0x91
 8003f32:	2b0d      	cmp	r3, #13
 8003f34:	f200 8335 	bhi.w	80045a2 <UARTstateManagement+0x6ca>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UARTstateManagement+0x68>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f79 	.word	0x08003f79
 8003f44:	08003f8b 	.word	0x08003f8b
 8003f48:	08003fa3 	.word	0x08003fa3
 8003f4c:	08003fbb 	.word	0x08003fbb
 8003f50:	0800401b 	.word	0x0800401b
 8003f54:	08004089 	.word	0x08004089
 8003f58:	080040c1 	.word	0x080040c1
 8003f5c:	080041d5 	.word	0x080041d5
 8003f60:	08004219 	.word	0x08004219
 8003f64:	080042bf 	.word	0x080042bf
 8003f68:	08004435 	.word	0x08004435
 8003f6c:	0800452b 	.word	0x0800452b
 8003f70:	0800455b 	.word	0x0800455b
 8003f74:	08004573 	.word	0x08004573
					modeNo = 1;
 8003f78:	4b89      	ldr	r3, [pc, #548]	; (80041a0 <UARTstateManagement+0x2c8>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f7e:	2202      	movs	r2, #2
 8003f80:	4988      	ldr	r1, [pc, #544]	; (80041a4 <UARTstateManagement+0x2cc>)
 8003f82:	4889      	ldr	r0, [pc, #548]	; (80041a8 <UARTstateManagement+0x2d0>)
 8003f84:	f006 f88e 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8003f88:	e30b      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 2;
 8003f8a:	4b85      	ldr	r3, [pc, #532]	; (80041a0 <UARTstateManagement+0x2c8>)
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8003f90:	4b81      	ldr	r3, [pc, #516]	; (8004198 <UARTstateManagement+0x2c0>)
 8003f92:	2202      	movs	r2, #2
 8003f94:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f96:	2202      	movs	r2, #2
 8003f98:	4982      	ldr	r1, [pc, #520]	; (80041a4 <UARTstateManagement+0x2cc>)
 8003f9a:	4883      	ldr	r0, [pc, #524]	; (80041a8 <UARTstateManagement+0x2d0>)
 8003f9c:	f006 f882 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8003fa0:	e2ff      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <UARTstateManagement+0x2c8>)
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8003fa8:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <UARTstateManagement+0x2c0>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fae:	2202      	movs	r2, #2
 8003fb0:	497c      	ldr	r1, [pc, #496]	; (80041a4 <UARTstateManagement+0x2cc>)
 8003fb2:	487d      	ldr	r0, [pc, #500]	; (80041a8 <UARTstateManagement+0x2d0>)
 8003fb4:	f006 f876 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8003fb8:	e2f3      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 4;
 8003fba:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <UARTstateManagement+0x2c8>)
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003fc0:	4b76      	ldr	r3, [pc, #472]	; (800419c <UARTstateManagement+0x2c4>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fa55 	bl	800047c <__aeabi_i2d>
 8003fd2:	a36d      	add	r3, pc, #436	; (adr r3, 8004188 <UARTstateManagement+0x2b0>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc fbe4 	bl	80007a4 <__aeabi_ddiv>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fce6 	bl	80009b4 <__aeabi_d2f>
 8003fe8:	ee07 0a10 	vmov	s14, r0
 8003fec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <UARTstateManagement+0x2dc>)
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8003ffa:	4b6e      	ldr	r3, [pc, #440]	; (80041b4 <UARTstateManagement+0x2dc>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004008:	4b6b      	ldr	r3, [pc, #428]	; (80041b8 <UARTstateManagement+0x2e0>)
 800400a:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800400e:	2202      	movs	r2, #2
 8004010:	4964      	ldr	r1, [pc, #400]	; (80041a4 <UARTstateManagement+0x2cc>)
 8004012:	4865      	ldr	r0, [pc, #404]	; (80041a8 <UARTstateManagement+0x2d0>)
 8004014:	f006 f846 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004018:	e2c3      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 5;
 800401a:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <UARTstateManagement+0x2c8>)
 800401c:	2205      	movs	r2, #5
 800401e:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8004020:	4b66      	ldr	r3, [pc, #408]	; (80041bc <UARTstateManagement+0x2e4>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8004026:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <UARTstateManagement+0x2e8>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 800402c:	4b5b      	ldr	r3, [pc, #364]	; (800419c <UARTstateManagement+0x2c4>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <UARTstateManagement+0x2c4>)
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	3202      	adds	r2, #2
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	440a      	add	r2, r1
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa17 	bl	800047c <__aeabi_i2d>
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4b5c      	ldr	r3, [pc, #368]	; (80041c4 <UARTstateManagement+0x2ec>)
 8004054:	f7fc fa7c 	bl	8000550 <__aeabi_dmul>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	a34b      	add	r3, pc, #300	; (adr r3, 8004190 <UARTstateManagement+0x2b8>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc fb9d 	bl	80007a4 <__aeabi_ddiv>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f7fc fc9f 	bl	80009b4 <__aeabi_d2f>
 8004076:	4603      	mov	r3, r0
 8004078:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <UARTstateManagement+0x2f0>)
 800407a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800407c:	2202      	movs	r2, #2
 800407e:	4949      	ldr	r1, [pc, #292]	; (80041a4 <UARTstateManagement+0x2cc>)
 8004080:	4849      	ldr	r0, [pc, #292]	; (80041a8 <UARTstateManagement+0x2d0>)
 8004082:	f006 f80f 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004086:	e28c      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004088:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <UARTstateManagement+0x2c8>)
 800408a:	2206      	movs	r2, #6
 800408c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 800408e:	4b4b      	ldr	r3, [pc, #300]	; (80041bc <UARTstateManagement+0x2e4>)
 8004090:	2202      	movs	r2, #2
 8004092:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004094:	220f      	movs	r2, #15
 8004096:	2100      	movs	r1, #0
 8004098:	484c      	ldr	r0, [pc, #304]	; (80041cc <UARTstateManagement+0x2f4>)
 800409a:	f007 fcdb 	bl	800ba54 <memset>
					goalAmount = 1;
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <UARTstateManagement+0x2e8>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <UARTstateManagement+0x2c4>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	3302      	adds	r3, #2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	4b46      	ldr	r3, [pc, #280]	; (80041cc <UARTstateManagement+0x2f4>)
 80040b2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80040b4:	2202      	movs	r2, #2
 80040b6:	493b      	ldr	r1, [pc, #236]	; (80041a4 <UARTstateManagement+0x2cc>)
 80040b8:	483b      	ldr	r0, [pc, #236]	; (80041a8 <UARTstateManagement+0x2d0>)
 80040ba:	f005 fff3 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 80040be:	e270      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 7;
 80040c0:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <UARTstateManagement+0x2c8>)
 80040c2:	2207      	movs	r2, #7
 80040c4:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <UARTstateManagement+0x2e4>)
 80040c8:	2202      	movs	r2, #2
 80040ca:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 80040cc:	220f      	movs	r2, #15
 80040ce:	2100      	movs	r1, #0
 80040d0:	483e      	ldr	r0, [pc, #248]	; (80041cc <UARTstateManagement+0x2f4>)
 80040d2:	f007 fcbf 	bl	800ba54 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 80040d6:	4b31      	ldr	r3, [pc, #196]	; (800419c <UARTstateManagement+0x2c4>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <UARTstateManagement+0x2e8>)
 80040e4:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e03a      	b.n	8004162 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <UARTstateManagement+0x2c4>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1c99      	adds	r1, r3, #2
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <UARTstateManagement+0x2f8>)
 80040f8:	fb83 2301 	smull	r2, r3, r3, r1
 80040fc:	10da      	asrs	r2, r3, #3
 80040fe:	17cb      	asrs	r3, r1, #31
 8004100:	1ad2      	subs	r2, r2, r3
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	1aca      	subs	r2, r1, r3
 800410c:	1883      	adds	r3, r0, r2
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	f002 020f 	and.w	r2, r2, #15
 800411e:	b2d1      	uxtb	r1, r2
 8004120:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <UARTstateManagement+0x2f4>)
 8004122:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <UARTstateManagement+0x2c4>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1c99      	adds	r1, r3, #2
 800412e:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <UARTstateManagement+0x2f8>)
 8004130:	fb83 2301 	smull	r2, r3, r3, r1
 8004134:	10da      	asrs	r2, r3, #3
 8004136:	17cb      	asrs	r3, r1, #31
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	1aca      	subs	r2, r1, r3
 8004144:	1883      	adds	r3, r0, r2
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	3301      	adds	r3, #1
 8004154:	0912      	lsrs	r2, r2, #4
 8004156:	b2d1      	uxtb	r1, r2
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <UARTstateManagement+0x2f4>)
 800415a:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <UARTstateManagement+0x2e8>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	0fda      	lsrs	r2, r3, #31
 800416a:	4413      	add	r3, r2
 800416c:	105b      	asrs	r3, r3, #1
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4293      	cmp	r3, r2
 8004174:	dbba      	blt.n	80040ec <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004176:	2202      	movs	r2, #2
 8004178:	490a      	ldr	r1, [pc, #40]	; (80041a4 <UARTstateManagement+0x2cc>)
 800417a:	480b      	ldr	r0, [pc, #44]	; (80041a8 <UARTstateManagement+0x2d0>)
 800417c:	f005 ff92 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004180:	e20f      	b.n	80045a2 <UARTstateManagement+0x6ca>
 8004182:	bf00      	nop
 8004184:	f3af 8000 	nop.w
 8004188:	00000000 	.word	0x00000000
 800418c:	406fe000 	.word	0x406fe000
 8004190:	00000000 	.word	0x00000000
 8004194:	40eeaa00 	.word	0x40eeaa00
 8004198:	20000698 	.word	0x20000698
 800419c:	200006ce 	.word	0x200006ce
 80041a0:	200006f8 	.word	0x200006f8
 80041a4:	2000002c 	.word	0x2000002c
 80041a8:	20000560 	.word	0x20000560
 80041ac:	200006f9 	.word	0x200006f9
 80041b0:	200006cc 	.word	0x200006cc
 80041b4:	200006d8 	.word	0x200006d8
 80041b8:	20000664 	.word	0x20000664
 80041bc:	200006f1 	.word	0x200006f1
 80041c0:	200006ef 	.word	0x200006ef
 80041c4:	40768000 	.word	0x40768000
 80041c8:	200006dc 	.word	0x200006dc
 80041cc:	200006e0 	.word	0x200006e0
 80041d0:	66666667 	.word	0x66666667
					modeNo = 8;
 80041d4:	4b8a      	ldr	r3, [pc, #552]	; (8004400 <UARTstateManagement+0x528>)
 80041d6:	2208      	movs	r2, #8
 80041d8:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 80041da:	4b8a      	ldr	r3, [pc, #552]	; (8004404 <UARTstateManagement+0x52c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d114      	bne.n	800420c <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <UARTstateManagement+0x530>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 80041e8:	4b88      	ldr	r3, [pc, #544]	; (800440c <UARTstateManagement+0x534>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 80041f0:	4b86      	ldr	r3, [pc, #536]	; (800440c <UARTstateManagement+0x534>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 80041f8:	4b84      	ldr	r3, [pc, #528]	; (800440c <UARTstateManagement+0x534>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 8004200:	4b80      	ldr	r3, [pc, #512]	; (8004404 <UARTstateManagement+0x52c>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8004206:	4b82      	ldr	r3, [pc, #520]	; (8004410 <UARTstateManagement+0x538>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800420c:	2202      	movs	r2, #2
 800420e:	4981      	ldr	r1, [pc, #516]	; (8004414 <UARTstateManagement+0x53c>)
 8004210:	4881      	ldr	r0, [pc, #516]	; (8004418 <UARTstateManagement+0x540>)
 8004212:	f005 ff47 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004216:	e1c4      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 9;
 8004218:	4b79      	ldr	r3, [pc, #484]	; (8004400 <UARTstateManagement+0x528>)
 800421a:	2209      	movs	r2, #9
 800421c:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 800421e:	4b7b      	ldr	r3, [pc, #492]	; (800440c <UARTstateManagement+0x534>)
 8004220:	2200      	movs	r2, #0
 8004222:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004224:	4b77      	ldr	r3, [pc, #476]	; (8004404 <UARTstateManagement+0x52c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d004      	beq.n	8004236 <UARTstateManagement+0x35e>
 800422c:	4b77      	ldr	r3, [pc, #476]	; (800440c <UARTstateManagement+0x534>)
 800422e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004232:	2b01      	cmp	r3, #1
 8004234:	d11f      	bne.n	8004276 <UARTstateManagement+0x39e>
 8004236:	4b77      	ldr	r3, [pc, #476]	; (8004414 <UARTstateManagement+0x53c>)
 8004238:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800423a:	4b78      	ldr	r3, [pc, #480]	; (800441c <UARTstateManagement+0x544>)
 800423c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 800423e:	4b77      	ldr	r3, [pc, #476]	; (800441c <UARTstateManagement+0x544>)
 8004240:	2299      	movs	r2, #153	; 0x99
 8004242:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <UARTstateManagement+0x534>)
 8004246:	891b      	ldrh	r3, [r3, #8]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4b74      	ldr	r3, [pc, #464]	; (800441c <UARTstateManagement+0x544>)
 800424c:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800424e:	4b73      	ldr	r3, [pc, #460]	; (800441c <UARTstateManagement+0x544>)
 8004250:	789a      	ldrb	r2, [r3, #2]
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <UARTstateManagement+0x544>)
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	4413      	add	r3, r2
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b70      	ldr	r3, [pc, #448]	; (800441c <UARTstateManagement+0x544>)
 800425c:	791b      	ldrb	r3, [r3, #4]
 800425e:	4413      	add	r3, r2
 8004260:	b2db      	uxtb	r3, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b6d      	ldr	r3, [pc, #436]	; (800441c <UARTstateManagement+0x544>)
 8004268:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 800426a:	2206      	movs	r2, #6
 800426c:	496b      	ldr	r1, [pc, #428]	; (800441c <UARTstateManagement+0x544>)
 800426e:	486a      	ldr	r0, [pc, #424]	; (8004418 <UARTstateManagement+0x540>)
 8004270:	f005 ff18 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004274:	e195      	b.n	80045a2 <UARTstateManagement+0x6ca>
 8004276:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <UARTstateManagement+0x548>)
 8004278:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800427a:	4b68      	ldr	r3, [pc, #416]	; (800441c <UARTstateManagement+0x544>)
 800427c:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <UARTstateManagement+0x54c>)
 8004280:	4b64      	ldr	r3, [pc, #400]	; (8004414 <UARTstateManagement+0x53c>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8004286:	4b65      	ldr	r3, [pc, #404]	; (800441c <UARTstateManagement+0x544>)
 8004288:	2299      	movs	r2, #153	; 0x99
 800428a:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 800428c:	4b5f      	ldr	r3, [pc, #380]	; (800440c <UARTstateManagement+0x534>)
 800428e:	891b      	ldrh	r3, [r3, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b62      	ldr	r3, [pc, #392]	; (800441c <UARTstateManagement+0x544>)
 8004294:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <UARTstateManagement+0x544>)
 8004298:	791a      	ldrb	r2, [r3, #4]
 800429a:	4b60      	ldr	r3, [pc, #384]	; (800441c <UARTstateManagement+0x544>)
 800429c:	795b      	ldrb	r3, [r3, #5]
 800429e:	4413      	add	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b5e      	ldr	r3, [pc, #376]	; (800441c <UARTstateManagement+0x544>)
 80042a4:	799b      	ldrb	r3, [r3, #6]
 80042a6:	4413      	add	r3, r2
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b5b      	ldr	r3, [pc, #364]	; (800441c <UARTstateManagement+0x544>)
 80042b0:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80042b2:	2208      	movs	r2, #8
 80042b4:	4959      	ldr	r1, [pc, #356]	; (800441c <UARTstateManagement+0x544>)
 80042b6:	4858      	ldr	r0, [pc, #352]	; (8004418 <UARTstateManagement+0x540>)
 80042b8:	f005 fef4 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 80042bc:	e171      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 10;
 80042be:	4b50      	ldr	r3, [pc, #320]	; (8004400 <UARTstateManagement+0x528>)
 80042c0:	220a      	movs	r2, #10
 80042c2:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 80042c4:	4b51      	ldr	r3, [pc, #324]	; (800440c <UARTstateManagement+0x534>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc f8e9 	bl	80004a0 <__aeabi_f2d>
 80042ce:	a348      	add	r3, pc, #288	; (adr r3, 80043f0 <UARTstateManagement+0x518>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fc f93c 	bl	8000550 <__aeabi_dmul>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	a345      	add	r3, pc, #276	; (adr r3, 80043f8 <UARTstateManagement+0x520>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fc f933 	bl	8000550 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <UARTstateManagement+0x550>)
 80042f8:	f7fc fa54 	bl	80007a4 <__aeabi_ddiv>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fc fb36 	bl	8000974 <__aeabi_d2uiz>
 8004308:	4603      	mov	r3, r0
 800430a:	b29a      	uxth	r2, r3
 800430c:	4b47      	ldr	r3, [pc, #284]	; (800442c <UARTstateManagement+0x554>)
 800430e:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004310:	4b3c      	ldr	r3, [pc, #240]	; (8004404 <UARTstateManagement+0x52c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d004      	beq.n	8004322 <UARTstateManagement+0x44a>
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <UARTstateManagement+0x534>)
 800431a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800431e:	2b01      	cmp	r3, #1
 8004320:	d126      	bne.n	8004370 <UARTstateManagement+0x498>
 8004322:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <UARTstateManagement+0x53c>)
 8004324:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <UARTstateManagement+0x544>)
 8004328:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 800432a:	4b3c      	ldr	r3, [pc, #240]	; (800441c <UARTstateManagement+0x544>)
 800432c:	229a      	movs	r2, #154	; 0x9a
 800432e:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8004330:	4b3e      	ldr	r3, [pc, #248]	; (800442c <UARTstateManagement+0x554>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	b29b      	uxth	r3, r3
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b38      	ldr	r3, [pc, #224]	; (800441c <UARTstateManagement+0x544>)
 800433c:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <UARTstateManagement+0x554>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b35      	ldr	r3, [pc, #212]	; (800441c <UARTstateManagement+0x544>)
 8004346:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004348:	4b34      	ldr	r3, [pc, #208]	; (800441c <UARTstateManagement+0x544>)
 800434a:	789a      	ldrb	r2, [r3, #2]
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <UARTstateManagement+0x544>)
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	4413      	add	r3, r2
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <UARTstateManagement+0x544>)
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	4413      	add	r3, r2
 800435a:	b2db      	uxtb	r3, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <UARTstateManagement+0x544>)
 8004362:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004364:	2206      	movs	r2, #6
 8004366:	492d      	ldr	r1, [pc, #180]	; (800441c <UARTstateManagement+0x544>)
 8004368:	482b      	ldr	r0, [pc, #172]	; (8004418 <UARTstateManagement+0x540>)
 800436a:	f005 fe9b 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 800436e:	e118      	b.n	80045a2 <UARTstateManagement+0x6ca>
 8004370:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <UARTstateManagement+0x548>)
 8004372:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <UARTstateManagement+0x544>)
 8004376:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004378:	4a2a      	ldr	r2, [pc, #168]	; (8004424 <UARTstateManagement+0x54c>)
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <UARTstateManagement+0x53c>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8004380:	4b26      	ldr	r3, [pc, #152]	; (800441c <UARTstateManagement+0x544>)
 8004382:	229a      	movs	r2, #154	; 0x9a
 8004384:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <UARTstateManagement+0x558>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d110      	bne.n	80043b0 <UARTstateManagement+0x4d8>
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <UARTstateManagement+0x534>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d806      	bhi.n	80043b0 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <UARTstateManagement+0x544>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <UARTstateManagement+0x544>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	719a      	strb	r2, [r3, #6]
 80043ae:	e00b      	b.n	80043c8 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 80043b0:	4b1e      	ldr	r3, [pc, #120]	; (800442c <UARTstateManagement+0x554>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <UARTstateManagement+0x544>)
 80043bc:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <UARTstateManagement+0x554>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b15      	ldr	r3, [pc, #84]	; (800441c <UARTstateManagement+0x544>)
 80043c6:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <UARTstateManagement+0x544>)
 80043ca:	791a      	ldrb	r2, [r3, #4]
 80043cc:	4b13      	ldr	r3, [pc, #76]	; (800441c <UARTstateManagement+0x544>)
 80043ce:	795b      	ldrb	r3, [r3, #5]
 80043d0:	4413      	add	r3, r2
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <UARTstateManagement+0x544>)
 80043d6:	799b      	ldrb	r3, [r3, #6]
 80043d8:	4413      	add	r3, r2
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <UARTstateManagement+0x544>)
 80043e2:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80043e4:	2208      	movs	r2, #8
 80043e6:	490d      	ldr	r1, [pc, #52]	; (800441c <UARTstateManagement+0x544>)
 80043e8:	480b      	ldr	r0, [pc, #44]	; (8004418 <UARTstateManagement+0x540>)
 80043ea:	f005 fe5b 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 80043ee:	e0d8      	b.n	80045a2 <UARTstateManagement+0x6ca>
 80043f0:	00000000 	.word	0x00000000
 80043f4:	40c38800 	.word	0x40c38800
 80043f8:	54442d18 	.word	0x54442d18
 80043fc:	400921fb 	.word	0x400921fb
 8004400:	200006f8 	.word	0x200006f8
 8004404:	200006f4 	.word	0x200006f4
 8004408:	200006f5 	.word	0x200006f5
 800440c:	20000664 	.word	0x20000664
 8004410:	200006f0 	.word	0x200006f0
 8004414:	2000002c 	.word	0x2000002c
 8004418:	20000560 	.word	0x20000560
 800441c:	200006c4 	.word	0x200006c4
 8004420:	20000030 	.word	0x20000030
 8004424:	200006c6 	.word	0x200006c6
 8004428:	40668000 	.word	0x40668000
 800442c:	200006d4 	.word	0x200006d4
 8004430:	200006f3 	.word	0x200006f3
					modeNo = 11;
 8004434:	4b60      	ldr	r3, [pc, #384]	; (80045b8 <UARTstateManagement+0x6e0>)
 8004436:	220b      	movs	r2, #11
 8004438:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 800443a:	4b60      	ldr	r3, [pc, #384]	; (80045bc <UARTstateManagement+0x6e4>)
 800443c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004440:	eeb0 0a67 	vmov.f32	s0, s15
 8004444:	f7fd f9bd 	bl	80017c2 <AbsVal>
 8004448:	ee10 3a10 	vmov	r3, s0
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc f827 	bl	80004a0 <__aeabi_f2d>
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	4b5a      	ldr	r3, [pc, #360]	; (80045c0 <UARTstateManagement+0x6e8>)
 8004458:	f7fc f9a4 	bl	80007a4 <__aeabi_ddiv>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	a352      	add	r3, pc, #328	; (adr r3, 80045b0 <UARTstateManagement+0x6d8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f871 	bl	8000550 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <UARTstateManagement+0x6ec>)
 800447c:	f7fc f992 	bl	80007a4 <__aeabi_ddiv>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f7fc fa74 	bl	8000974 <__aeabi_d2uiz>
 800448c:	4603      	mov	r3, r0
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <UARTstateManagement+0x6f0>)
 8004492:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <UARTstateManagement+0x6f4>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d004      	beq.n	80044a6 <UARTstateManagement+0x5ce>
 800449c:	4b47      	ldr	r3, [pc, #284]	; (80045bc <UARTstateManagement+0x6e4>)
 800449e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d11e      	bne.n	80044e4 <UARTstateManagement+0x60c>
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <UARTstateManagement+0x6f8>)
 80044a8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044ac:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 80044ae:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044b0:	229b      	movs	r2, #155	; 0x9b
 80044b2:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 80044b4:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <UARTstateManagement+0x6f0>)
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044ba:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80044bc:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044be:	789a      	ldrb	r2, [r3, #2]
 80044c0:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044c2:	78db      	ldrb	r3, [r3, #3]
 80044c4:	4413      	add	r3, r2
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044ca:	791b      	ldrb	r3, [r3, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044d6:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80044d8:	2206      	movs	r2, #6
 80044da:	493e      	ldr	r1, [pc, #248]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044dc:	483e      	ldr	r0, [pc, #248]	; (80045d8 <UARTstateManagement+0x700>)
 80044de:	f005 fde1 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 80044e2:	e05e      	b.n	80045a2 <UARTstateManagement+0x6ca>
 80044e4:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <UARTstateManagement+0x704>)
 80044e6:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044ea:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80044ec:	4a3c      	ldr	r2, [pc, #240]	; (80045e0 <UARTstateManagement+0x708>)
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <UARTstateManagement+0x6f8>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <UARTstateManagement+0x6fc>)
 80044f6:	229b      	movs	r2, #155	; 0x9b
 80044f8:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 80044fa:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <UARTstateManagement+0x6f0>)
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <UARTstateManagement+0x6fc>)
 8004500:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <UARTstateManagement+0x6fc>)
 8004504:	791a      	ldrb	r2, [r3, #4]
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <UARTstateManagement+0x6fc>)
 8004508:	795b      	ldrb	r3, [r3, #5]
 800450a:	4413      	add	r3, r2
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <UARTstateManagement+0x6fc>)
 8004510:	799b      	ldrb	r3, [r3, #6]
 8004512:	4413      	add	r3, r2
 8004514:	b2db      	uxtb	r3, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <UARTstateManagement+0x6fc>)
 800451c:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800451e:	2208      	movs	r2, #8
 8004520:	492c      	ldr	r1, [pc, #176]	; (80045d4 <UARTstateManagement+0x6fc>)
 8004522:	482d      	ldr	r0, [pc, #180]	; (80045d8 <UARTstateManagement+0x700>)
 8004524:	f005 fdbe 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004528:	e03b      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 12;
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <UARTstateManagement+0x6e0>)
 800452c:	220c      	movs	r2, #12
 800452e:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <UARTstateManagement+0x70c>)
 8004532:	2203      	movs	r2, #3
 8004534:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <UARTstateManagement+0x710>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 800453c:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <UARTstateManagement+0x714>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <UARTstateManagement+0x718>)
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <UARTstateManagement+0x71c>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800454e:	2202      	movs	r2, #2
 8004550:	491f      	ldr	r1, [pc, #124]	; (80045d0 <UARTstateManagement+0x6f8>)
 8004552:	4821      	ldr	r0, [pc, #132]	; (80045d8 <UARTstateManagement+0x700>)
 8004554:	f005 fda6 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004558:	e023      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 13;
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <UARTstateManagement+0x6e0>)
 800455c:	220d      	movs	r2, #13
 800455e:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <UARTstateManagement+0x71c>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004566:	2202      	movs	r2, #2
 8004568:	4919      	ldr	r1, [pc, #100]	; (80045d0 <UARTstateManagement+0x6f8>)
 800456a:	481b      	ldr	r0, [pc, #108]	; (80045d8 <UARTstateManagement+0x700>)
 800456c:	f005 fd9a 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 8004570:	e017      	b.n	80045a2 <UARTstateManagement+0x6ca>
					modeNo = 14;
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <UARTstateManagement+0x6e0>)
 8004574:	220e      	movs	r2, #14
 8004576:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <UARTstateManagement+0x6e4>)
 800457a:	edd3 7a05 	vldr	s15, [r3, #20]
 800457e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80045f8 <UARTstateManagement+0x720>
 8004582:	eeb0 0a67 	vmov.f32	s0, s15
 8004586:	f000 fbe5 	bl	8004d54 <RobotRunToPositon>
					homingFlag = 1;
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <UARTstateManagement+0x724>)
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004590:	2202      	movs	r2, #2
 8004592:	490f      	ldr	r1, [pc, #60]	; (80045d0 <UARTstateManagement+0x6f8>)
 8004594:	4810      	ldr	r0, [pc, #64]	; (80045d8 <UARTstateManagement+0x700>)
 8004596:	f005 fd85 	bl	800a0a4 <HAL_UART_Transmit_DMA>
					break;
 800459a:	e002      	b.n	80045a2 <UARTstateManagement+0x6ca>
			break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <UARTstateManagement+0x6ca>
			break;
 80045a0:	bf00      	nop
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w
 80045b0:	00000000 	.word	0x00000000
 80045b4:	406fe000 	.word	0x406fe000
 80045b8:	200006f8 	.word	0x200006f8
 80045bc:	20000664 	.word	0x20000664
 80045c0:	40180000 	.word	0x40180000
 80045c4:	40240000 	.word	0x40240000
 80045c8:	200006d6 	.word	0x200006d6
 80045cc:	200006f4 	.word	0x200006f4
 80045d0:	2000002c 	.word	0x2000002c
 80045d4:	200006c4 	.word	0x200006c4
 80045d8:	20000560 	.word	0x20000560
 80045dc:	20000030 	.word	0x20000030
 80045e0:	200006c6 	.word	0x200006c6
 80045e4:	20000699 	.word	0x20000699
 80045e8:	20000909 	.word	0x20000909
 80045ec:	20000908 	.word	0x20000908
 80045f0:	20000000 	.word	0x20000000
 80045f4:	200006f2 	.word	0x200006f2
 80045f8:	424c0000 	.word	0x424c0000
 80045fc:	200006f3 	.word	0x200006f3

08004600 <RobotstateManagement>:

void RobotstateManagement()
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	switch (RobotState)
 8004604:	4b91      	ldr	r3, [pc, #580]	; (800484c <RobotstateManagement+0x24c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	f200 811d 	bhi.w	8004848 <RobotstateManagement+0x248>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <RobotstateManagement+0x14>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004629 	.word	0x08004629
 8004618:	08004645 	.word	0x08004645
 800461c:	0800469d 	.word	0x0800469d
 8004620:	0800483f 	.word	0x0800483f
 8004624:	08004829 	.word	0x08004829
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 8004628:	4b89      	ldr	r3, [pc, #548]	; (8004850 <RobotstateManagement+0x250>)
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 8004630:	eddf 0a88 	vldr	s1, [pc, #544]	; 8004854 <RobotstateManagement+0x254>
 8004634:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8004858 <RobotstateManagement+0x258>
 8004638:	f000 fb8c 	bl	8004d54 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 800463c:	4b83      	ldr	r3, [pc, #524]	; (800484c <RobotstateManagement+0x24c>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
			break;
 8004642:	e101      	b.n	8004848 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8004644:	4b82      	ldr	r3, [pc, #520]	; (8004850 <RobotstateManagement+0x250>)
 8004646:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 80f9 	bne.w	8004842 <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 8004650:	4b7f      	ldr	r3, [pc, #508]	; (8004850 <RobotstateManagement+0x250>)
 8004652:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004656:	2b02      	cmp	r3, #2
 8004658:	d111      	bne.n	800467e <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 800465a:	4b7d      	ldr	r3, [pc, #500]	; (8004850 <RobotstateManagement+0x250>)
 800465c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004660:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8004854 <RobotstateManagement+0x254>
 8004664:	eeb0 0a67 	vmov.f32	s0, s15
 8004668:	f000 fb74 	bl	8004d54 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 800466c:	4b78      	ldr	r3, [pc, #480]	; (8004850 <RobotstateManagement+0x250>)
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 8004674:	4b76      	ldr	r3, [pc, #472]	; (8004850 <RobotstateManagement+0x250>)
 8004676:	2203      	movs	r2, #3
 8004678:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 800467c:	e0e1      	b.n	8004842 <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 800467e:	4b74      	ldr	r3, [pc, #464]	; (8004850 <RobotstateManagement+0x250>)
 8004680:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004684:	2b03      	cmp	r3, #3
 8004686:	f040 80dc 	bne.w	8004842 <RobotstateManagement+0x242>
					RobotResetAll();
 800468a:	f000 fb9d 	bl	8004dc8 <RobotResetAll>
					UARTState = MCUConnect;
 800468e:	4b73      	ldr	r3, [pc, #460]	; (800485c <RobotstateManagement+0x25c>)
 8004690:	2202      	movs	r2, #2
 8004692:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004694:	4b6d      	ldr	r3, [pc, #436]	; (800484c <RobotstateManagement+0x24c>)
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
			break;
 800469a:	e0d2      	b.n	8004842 <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 800469c:	4b70      	ldr	r3, [pc, #448]	; (8004860 <RobotstateManagement+0x260>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10e      	bne.n	80046c2 <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <RobotstateManagement+0x250>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 80046ac:	4b68      	ldr	r3, [pc, #416]	; (8004850 <RobotstateManagement+0x250>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <RobotstateManagement+0x250>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 80046bc:	4b68      	ldr	r3, [pc, #416]	; (8004860 <RobotstateManagement+0x260>)
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 80046c2:	4b68      	ldr	r3, [pc, #416]	; (8004864 <RobotstateManagement+0x264>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d159      	bne.n	800477e <RobotstateManagement+0x17e>
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <RobotstateManagement+0x250>)
 80046cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d154      	bne.n	800477e <RobotstateManagement+0x17e>
 80046d4:	4b64      	ldr	r3, [pc, #400]	; (8004868 <RobotstateManagement+0x268>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d150      	bne.n	800477e <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	2108      	movs	r1, #8
 80046e0:	4862      	ldr	r0, [pc, #392]	; (800486c <RobotstateManagement+0x26c>)
 80046e2:	f001 fecb 	bl	800647c <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 80046e6:	4b62      	ldr	r3, [pc, #392]	; (8004870 <RobotstateManagement+0x270>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d11d      	bne.n	800472a <RobotstateManagement+0x12a>
 80046ee:	4b61      	ldr	r3, [pc, #388]	; (8004874 <RobotstateManagement+0x274>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d119      	bne.n	800472a <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 80046f6:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <RobotstateManagement+0x274>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 80046fc:	4b5e      	ldr	r3, [pc, #376]	; (8004878 <RobotstateManagement+0x278>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a53      	ldr	r2, [pc, #332]	; (8004850 <RobotstateManagement+0x250>)
 8004702:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004704:	4b52      	ldr	r3, [pc, #328]	; (8004850 <RobotstateManagement+0x250>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <RobotstateManagement+0x250>)
 800470c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <RobotstateManagement+0x250>)
 8004712:	edd3 6a08 	vldr	s13, [r3, #32]
 8004716:	eeb0 1a66 	vmov.f32	s2, s13
 800471a:	eef0 0a47 	vmov.f32	s1, s14
 800471e:	eeb0 0a67 	vmov.f32	s0, s15
 8004722:	4856      	ldr	r0, [pc, #344]	; (800487c <RobotstateManagement+0x27c>)
 8004724:	f7fd f870 	bl	8001808 <CoefficientAndTimeCalculation>
 8004728:	e029      	b.n	800477e <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <RobotstateManagement+0x270>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d125      	bne.n	800477e <RobotstateManagement+0x17e>
 8004732:	4b50      	ldr	r3, [pc, #320]	; (8004874 <RobotstateManagement+0x274>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d121      	bne.n	800477e <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 800473a:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <RobotstateManagement+0x274>)
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <RobotstateManagement+0x280>)
 8004742:	f993 3000 	ldrsb.w	r3, [r3]
 8004746:	461a      	mov	r2, r3
 8004748:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <RobotstateManagement+0x284>)
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <RobotstateManagement+0x288>)
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3e      	ldr	r2, [pc, #248]	; (8004850 <RobotstateManagement+0x250>)
 8004758:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <RobotstateManagement+0x250>)
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <RobotstateManagement+0x250>)
 8004762:	ed93 7a03 	vldr	s14, [r3, #12]
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <RobotstateManagement+0x250>)
 8004768:	edd3 6a08 	vldr	s13, [r3, #32]
 800476c:	eeb0 1a66 	vmov.f32	s2, s13
 8004770:	eef0 0a47 	vmov.f32	s1, s14
 8004774:	eeb0 0a67 	vmov.f32	s0, s15
 8004778:	4840      	ldr	r0, [pc, #256]	; (800487c <RobotstateManagement+0x27c>)
 800477a:	f7fd f845 	bl	8001808 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 800477e:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <RobotstateManagement+0x268>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d132      	bne.n	80047ec <RobotstateManagement+0x1ec>
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <RobotstateManagement+0x274>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d12e      	bne.n	80047ec <RobotstateManagement+0x1ec>
 800478e:	4b35      	ldr	r3, [pc, #212]	; (8004864 <RobotstateManagement+0x264>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d12a      	bne.n	80047ec <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8004796:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <RobotstateManagement+0x250>)
 8004798:	ed93 7a03 	vldr	s14, [r3, #12]
 800479c:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <RobotstateManagement+0x250>)
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	f7fd f80a 	bl	80017c2 <AbsVal>
 80047ae:	eef0 7a40 	vmov.f32	s15, s0
 80047b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	d515      	bpl.n	80047ec <RobotstateManagement+0x1ec>
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <RobotstateManagement+0x250>)
 80047c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80047c6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ca:	f7fc fffa 	bl	80017c2 <AbsVal>
 80047ce:	eef0 7a40 	vmov.f32	s15, s0
 80047d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047de:	d505      	bpl.n	80047ec <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <RobotstateManagement+0x268>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 80047e6:	4b23      	ldr	r3, [pc, #140]	; (8004874 <RobotstateManagement+0x274>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <RobotstateManagement+0x274>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d128      	bne.n	8004846 <RobotstateManagement+0x246>
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <RobotstateManagement+0x264>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d124      	bne.n	8004846 <RobotstateManagement+0x246>
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <RobotstateManagement+0x250>)
 80047fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11f      	bne.n	8004846 <RobotstateManagement+0x246>
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <RobotstateManagement+0x268>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d11b      	bne.n	8004846 <RobotstateManagement+0x246>
				RobotState = EndEff;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <RobotstateManagement+0x24c>)
 8004810:	2203      	movs	r2, #3
 8004812:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <RobotstateManagement+0x28c>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <RobotstateManagement+0x290>)
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <RobotstateManagement+0x294>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004826:	e00e      	b.n	8004846 <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <RobotstateManagement+0x250>)
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8004830:	4819      	ldr	r0, [pc, #100]	; (8004898 <RobotstateManagement+0x298>)
 8004832:	f7fc fd9d 	bl	8001370 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8004836:	4819      	ldr	r0, [pc, #100]	; (800489c <RobotstateManagement+0x29c>)
 8004838:	f7fc fd9a 	bl	8001370 <PIDAController_Init>
			// Luv u pls pass
			break;
 800483c:	e004      	b.n	8004848 <RobotstateManagement+0x248>
			break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <RobotstateManagement+0x248>
			break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <RobotstateManagement+0x248>
			break;
 8004846:	bf00      	nop
	}
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000699 	.word	0x20000699
 8004850:	20000664 	.word	0x20000664
 8004854:	424c0000 	.word	0x424c0000
 8004858:	43b40000 	.word	0x43b40000
 800485c:	20000698 	.word	0x20000698
 8004860:	200006f7 	.word	0x200006f7
 8004864:	200006f4 	.word	0x200006f4
 8004868:	200006f2 	.word	0x200006f2
 800486c:	40020400 	.word	0x40020400
 8004870:	200006f1 	.word	0x200006f1
 8004874:	200006f5 	.word	0x200006f5
 8004878:	200006dc 	.word	0x200006dc
 800487c:	200007fc 	.word	0x200007fc
 8004880:	200006f0 	.word	0x200006f0
 8004884:	200006e0 	.word	0x200006e0
 8004888:	20000004 	.word	0x20000004
 800488c:	20000909 	.word	0x20000909
 8004890:	20000908 	.word	0x20000908
 8004894:	20000000 	.word	0x20000000
 8004898:	20000790 	.word	0x20000790
 800489c:	200007c4 	.word	0x200007c4

080048a0 <EndEffstateManagement>:

void EndEffstateManagement()
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
	switch (EndEffState)
 80048a8:	4ba6      	ldr	r3, [pc, #664]	; (8004b44 <EndEffstateManagement+0x2a4>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	f200 8144 	bhi.w	8004b3a <EndEffstateManagement+0x29a>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <EndEffstateManagement+0x18>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048d5 	.word	0x080048d5
 80048c0:	0800498f 	.word	0x0800498f
 80048c4:	08004a0d 	.word	0x08004a0d
 80048c8:	08004a35 	.word	0x08004a35
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 80048cc:	4b9e      	ldr	r3, [pc, #632]	; (8004b48 <EndEffstateManagement+0x2a8>)
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 80048d2:	e132      	b.n	8004b3a <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80048d4:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <EndEffstateManagement+0x2ac>)
 80048d6:	2223      	movs	r2, #35	; 0x23
 80048d8:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80048da:	489c      	ldr	r0, [pc, #624]	; (8004b4c <EndEffstateManagement+0x2ac>)
 80048dc:	f000 f956 	bl	8004b8c <I2CWriteFcn>
			check[0]++;
 80048e0:	4b9b      	ldr	r3, [pc, #620]	; (8004b50 <EndEffstateManagement+0x2b0>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	1c51      	adds	r1, r2, #1
 80048e8:	6139      	str	r1, [r7, #16]
 80048ea:	f143 0300 	adc.w	r3, r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	4b97      	ldr	r3, [pc, #604]	; (8004b50 <EndEffstateManagement+0x2b0>)
 80048f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048f6:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80048fa:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <EndEffstateManagement+0x2b4>)
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 8112 	bne.w	8004b2c <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8004908:	4893      	ldr	r0, [pc, #588]	; (8004b58 <EndEffstateManagement+0x2b8>)
 800490a:	f000 f965 	bl	8004bd8 <I2CReadFcn>
				check[1]++;
 800490e:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004910:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004914:	1c51      	adds	r1, r2, #1
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	f143 0300 	adc.w	r3, r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	4b8c      	ldr	r3, [pc, #560]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004920:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004924:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8004928:	4b8a      	ldr	r3, [pc, #552]	; (8004b54 <EndEffstateManagement+0x2b4>)
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b20      	cmp	r3, #32
 8004932:	f040 80fb 	bne.w	8004b2c <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b78      	cmp	r3, #120	; 0x78
 800493c:	d119      	bne.n	8004972 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 800493e:	4b84      	ldr	r3, [pc, #528]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004940:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004944:	1c51      	adds	r1, r2, #1
 8004946:	6039      	str	r1, [r7, #0]
 8004948:	f143 0300 	adc.w	r3, r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	4b80      	ldr	r3, [pc, #512]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004950:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004954:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8004958:	4b7a      	ldr	r3, [pc, #488]	; (8004b44 <EndEffstateManagement+0x2a4>)
 800495a:	2202      	movs	r2, #2
 800495c:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 800495e:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <EndEffstateManagement+0x2bc>)
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 8004964:	4b7e      	ldr	r3, [pc, #504]	; (8004b60 <EndEffstateManagement+0x2c0>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 800496a:	4b7e      	ldr	r3, [pc, #504]	; (8004b64 <EndEffstateManagement+0x2c4>)
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004970:	e0dc      	b.n	8004b2c <EndEffstateManagement+0x28c>
						check[3]++;
 8004972:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004974:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004978:	f112 0a01 	adds.w	sl, r2, #1
 800497c:	f143 0b00 	adc.w	fp, r3, #0
 8004980:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004982:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 8004986:	4b6f      	ldr	r3, [pc, #444]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
		break;
 800498c:	e0ce      	b.n	8004b2c <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 800498e:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <EndEffstateManagement+0x2bc>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d11d      	bne.n	80049d2 <EndEffstateManagement+0x132>
				check[4]++;
 8004996:	4b6e      	ldr	r3, [pc, #440]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800499c:	1c50      	adds	r0, r2, #1
 800499e:	f143 0100 	adc.w	r1, r3, #0
 80049a2:	4b6b      	ldr	r3, [pc, #428]	; (8004b50 <EndEffstateManagement+0x2b0>)
 80049a4:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <EndEffstateManagement+0x2ac>)
 80049aa:	2245      	movs	r2, #69	; 0x45
 80049ac:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 80049ae:	4867      	ldr	r0, [pc, #412]	; (8004b4c <EndEffstateManagement+0x2ac>)
 80049b0:	f000 f8ec 	bl	8004b8c <I2CWriteFcn>
				openLaserWriteFlag = 0;
 80049b4:	4b69      	ldr	r3, [pc, #420]	; (8004b5c <EndEffstateManagement+0x2bc>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 80049ba:	f000 fb2b 	bl	8005014 <Micros>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4969      	ldr	r1, [pc, #420]	; (8004b68 <EndEffstateManagement+0x2c8>)
 80049c4:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80049c8:	2201      	movs	r2, #1
 80049ca:	2110      	movs	r1, #16
 80049cc:	4867      	ldr	r0, [pc, #412]	; (8004b6c <EndEffstateManagement+0x2cc>)
 80049ce:	f001 fd55 	bl	800647c <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <EndEffstateManagement+0x2b4>)
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	f040 80a8 	bne.w	8004b30 <EndEffstateManagement+0x290>
 80049e0:	f000 fb18 	bl	8005014 <Micros>
 80049e4:	4b60      	ldr	r3, [pc, #384]	; (8004b68 <EndEffstateManagement+0x2c8>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	1a84      	subs	r4, r0, r2
 80049ec:	eb61 0503 	sbc.w	r5, r1, r3
 80049f0:	f24c 3351 	movw	r3, #50001	; 0xc351
 80049f4:	429c      	cmp	r4, r3
 80049f6:	f175 0300 	sbcs.w	r3, r5, #0
 80049fa:	f0c0 8099 	bcc.w	8004b30 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 80049fe:	4b51      	ldr	r3, [pc, #324]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004a00:	2203      	movs	r2, #3
 8004a02:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <EndEffstateManagement+0x2c0>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a0a:	e091      	b.n	8004b30 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004a0c:	4b4f      	ldr	r3, [pc, #316]	; (8004b4c <EndEffstateManagement+0x2ac>)
 8004a0e:	2223      	movs	r2, #35	; 0x23
 8004a10:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004a12:	484e      	ldr	r0, [pc, #312]	; (8004b4c <EndEffstateManagement+0x2ac>)
 8004a14:	f000 f8ba 	bl	8004b8c <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a18:	4b4e      	ldr	r3, [pc, #312]	; (8004b54 <EndEffstateManagement+0x2b4>)
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f040 8087 	bne.w	8004b34 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004a28:	2204      	movs	r2, #4
 8004a2a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004a2c:	4b4d      	ldr	r3, [pc, #308]	; (8004b64 <EndEffstateManagement+0x2c4>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a32:	e07f      	b.n	8004b34 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8004a34:	4848      	ldr	r0, [pc, #288]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004a36:	f000 f8cf 	bl	8004bd8 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a3a:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <EndEffstateManagement+0x2b4>)
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d178      	bne.n	8004b38 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <EndEffstateManagement+0x2c4>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b78      	cmp	r3, #120	; 0x78
 8004a52:	d141      	bne.n	8004ad8 <EndEffstateManagement+0x238>
				{
					check[5]++;
 8004a54:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004a56:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a5a:	f112 0801 	adds.w	r8, r2, #1
 8004a5e:	f143 0900 	adc.w	r9, r3, #0
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <EndEffstateManagement+0x2b0>)
 8004a64:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	483f      	ldr	r0, [pc, #252]	; (8004b6c <EndEffstateManagement+0x2cc>)
 8004a6e:	f001 fd05 	bl	800647c <HAL_GPIO_WritePin>
					EndEffState = idle;
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <EndEffstateManagement+0x2a8>)
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004a7e:	4b3c      	ldr	r3, [pc, #240]	; (8004b70 <EndEffstateManagement+0x2d0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <EndEffstateManagement+0x2d4>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d002      	beq.n	8004a92 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 8004a8c:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <EndEffstateManagement+0x2d4>)
 8004a8e:	2202      	movs	r2, #2
 8004a90:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <EndEffstateManagement+0x2d8>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d14e      	bne.n	8004b38 <EndEffstateManagement+0x298>
						goalIDX++;
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <EndEffstateManagement+0x2dc>)
 8004a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	b25a      	sxtb	r2, r3
 8004aa8:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <EndEffstateManagement+0x2dc>)
 8004aaa:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8004aac:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <EndEffstateManagement+0x2e0>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <EndEffstateManagement+0x2dc>)
 8004ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	dc09      	bgt.n	8004ad0 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8004abc:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <EndEffstateManagement+0x2dc>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <EndEffstateManagement+0x2e4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <EndEffstateManagement+0x2d8>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004ace:	e033      	b.n	8004b38 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8004ad0:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <EndEffstateManagement+0x2e8>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
			break;
 8004ad6:	e02f      	b.n	8004b38 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b12      	cmp	r3, #18
 8004ade:	d109      	bne.n	8004af4 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <EndEffstateManagement+0x2a8>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004ae8:	2203      	movs	r2, #3
 8004aea:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <EndEffstateManagement+0x2c0>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
			break;
 8004af2:	e021      	b.n	8004b38 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004af4:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b34      	cmp	r3, #52	; 0x34
 8004afa:	d109      	bne.n	8004b10 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <EndEffstateManagement+0x2a8>)
 8004afe:	2202      	movs	r2, #2
 8004b00:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004b04:	2203      	movs	r2, #3
 8004b06:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <EndEffstateManagement+0x2c0>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
			break;
 8004b0e:	e013      	b.n	8004b38 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <EndEffstateManagement+0x2b8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b56      	cmp	r3, #86	; 0x56
 8004b16:	d10f      	bne.n	8004b38 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <EndEffstateManagement+0x2a8>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <EndEffstateManagement+0x2a4>)
 8004b20:	2203      	movs	r2, #3
 8004b22:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <EndEffstateManagement+0x2c0>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
			break;
 8004b2a:	e005      	b.n	8004b38 <EndEffstateManagement+0x298>
		break;
 8004b2c:	bf00      	nop
 8004b2e:	e004      	b.n	8004b3a <EndEffstateManagement+0x29a>
			break;
 8004b30:	bf00      	nop
 8004b32:	e002      	b.n	8004b3a <EndEffstateManagement+0x29a>
			break;
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <EndEffstateManagement+0x29a>
			break;
 8004b38:	bf00      	nop
	}
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000001 	.word	0x20000001
 8004b4c:	20000910 	.word	0x20000910
 8004b50:	20000720 	.word	0x20000720
 8004b54:	200003ec 	.word	0x200003ec
 8004b58:	2000090c 	.word	0x2000090c
 8004b5c:	200006f6 	.word	0x200006f6
 8004b60:	20000909 	.word	0x20000909
 8004b64:	20000908 	.word	0x20000908
 8004b68:	200008f8 	.word	0x200008f8
 8004b6c:	40020400 	.word	0x40020400
 8004b70:	200006f2 	.word	0x200006f2
 8004b74:	20000699 	.word	0x20000699
 8004b78:	200006f4 	.word	0x200006f4
 8004b7c:	200006f0 	.word	0x200006f0
 8004b80:	200006ef 	.word	0x200006ef
 8004b84:	200006f1 	.word	0x200006f1
 8004b88:	200006f7 	.word	0x200006f7

08004b8c <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <I2CWriteFcn+0x40>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d112      	bne.n	8004bc2 <I2CWriteFcn+0x36>
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <I2CWriteFcn+0x44>)
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d10c      	bne.n	8004bc2 <I2CWriteFcn+0x36>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <I2CWriteFcn+0x48>)
 8004bae:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <I2CWriteFcn+0x48>)
 8004bb4:	2146      	movs	r1, #70	; 0x46
 8004bb6:	4806      	ldr	r0, [pc, #24]	; (8004bd0 <I2CWriteFcn+0x44>)
 8004bb8:	f001 fdf0 	bl	800679c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <I2CWriteFcn+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
	}
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000909 	.word	0x20000909
 8004bd0:	200003ec 	.word	0x200003ec
 8004bd4:	20000924 	.word	0x20000924

08004bd8 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <I2CReadFcn+0x38>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d10e      	bne.n	8004c06 <I2CReadFcn+0x2e>
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <I2CReadFcn+0x3c>)
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d108      	bne.n	8004c06 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	2146      	movs	r1, #70	; 0x46
 8004bfa:	4806      	ldr	r0, [pc, #24]	; (8004c14 <I2CReadFcn+0x3c>)
 8004bfc:	f001 fe74 	bl	80068e8 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <I2CReadFcn+0x38>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
	}
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000908 	.word	0x20000908
 8004c14:	200003ec 	.word	0x200003ec

08004c18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2a:	d103      	bne.n	8004c34 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	483e      	ldr	r0, [pc, #248]	; (8004d28 <HAL_GPIO_EXTI_Callback+0x110>)
 8004c30:	f001 fc3d 	bl	80064ae <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d13e      	bne.n	8004cba <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_GPIO_EXTI_Callback+0x114>)
 8004c3e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d139      	bne.n	8004cba <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004c46:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4939      	ldr	r1, [pc, #228]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c52:	0083      	lsls	r3, r0, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c62:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004c64:	4b32      	ldr	r3, [pc, #200]	; (8004d30 <HAL_GPIO_EXTI_Callback+0x118>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d126      	bne.n	8004cba <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004c6c:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d3c <HAL_GPIO_EXTI_Callback+0x124>
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	dd04      	ble.n	8004c94 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <HAL_GPIO_EXTI_Callback+0x114>)
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	615a      	str	r2, [r3, #20]
 8004c92:	e00e      	b.n	8004cb2 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_GPIO_EXTI_Callback+0x120>)
 8004c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_GPIO_EXTI_Callback+0x114>)
 8004cae:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_GPIO_EXTI_Callback+0x114>)
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d12e      	bne.n	8004d1e <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x128>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x128>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8004cce:	f000 f9a1 	bl	8005014 <Micros>
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	1a84      	subs	r4, r0, r2
 8004cda:	eb61 0503 	sbc.w	r5, r1, r3
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x130>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	f175 0300 	sbcs.w	r3, r5, #0
 8004ce6:	d31a      	bcc.n	8004d1e <HAL_GPIO_EXTI_Callback+0x106>
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x128>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d116      	bne.n	8004d1e <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8004cf0:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x134>)
 8004cf2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004cf6:	f112 0801 	adds.w	r8, r2, #1
 8004cfa:	f143 0900 	adc.w	r9, r3, #0
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x134>)
 8004d00:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8004d04:	f000 f986 	bl	8005014 <Micros>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	490d      	ldr	r1, [pc, #52]	; (8004d44 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004d0e:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x128>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8004d18:	480d      	ldr	r0, [pc, #52]	; (8004d50 <HAL_GPIO_EXTI_Callback+0x138>)
 8004d1a:	f004 f857 	bl	8008dcc <HAL_TIM_Base_Start_IT>
		}
	}
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	20000664 	.word	0x20000664
 8004d30:	2000068c 	.word	0x2000068c
 8004d34:	20000780 	.word	0x20000780
 8004d38:	20000690 	.word	0x20000690
 8004d3c:	43340000 	.word	0x43340000
 8004d40:	200008f0 	.word	0x200008f0
 8004d44:	200008e8 	.word	0x200008e8
 8004d48:	000186a1 	.word	0x000186a1
 8004d4c:	20000720 	.word	0x20000720
 8004d50:	200004d0 	.word	0x200004d0

08004d54 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d5e:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d76:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d7c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004d80:	eeb0 1a66 	vmov.f32	s2, s13
 8004d84:	eef0 0a47 	vmov.f32	s1, s14
 8004d88:	eeb0 0a67 	vmov.f32	s0, s15
 8004d8c:	480c      	ldr	r0, [pc, #48]	; (8004dc0 <RobotRunToPositon+0x6c>)
 8004d8e:	f7fc fd3b 	bl	8001808 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <RobotRunToPositon+0x68>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <RobotRunToPositon+0x68>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004daa:	2201      	movs	r2, #1
 8004dac:	2108      	movs	r1, #8
 8004dae:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <RobotRunToPositon+0x70>)
 8004db0:	f001 fb64 	bl	800647c <HAL_GPIO_WritePin>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000664 	.word	0x20000664
 8004dc0:	200007fc 	.word	0x200007fc
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <RobotResetAll>:

void RobotResetAll()
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8004dcc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004dd0:	f000 f866 	bl	8004ea0 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <RobotResetAll+0x9c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <RobotResetAll+0x9c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <RobotResetAll+0xa0>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8004de6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8004e6c <RobotResetAll+0xa4>
 8004dea:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004e70 <RobotResetAll+0xa8>
 8004dee:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004e70 <RobotResetAll+0xa8>
 8004df2:	4820      	ldr	r0, [pc, #128]	; (8004e74 <RobotResetAll+0xac>)
 8004df4:	f7fc fd08 	bl	8001808 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <RobotResetAll+0xb0>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8004e00:	491e      	ldr	r1, [pc, #120]	; (8004e7c <RobotResetAll+0xb4>)
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8004e0e:	491c      	ldr	r1, [pc, #112]	; (8004e80 <RobotResetAll+0xb8>)
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <RobotResetAll+0xbc>)
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <RobotResetAll+0xbc>)
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8004e2c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004e88 <RobotResetAll+0xc0>
 8004e30:	4816      	ldr	r0, [pc, #88]	; (8004e8c <RobotResetAll+0xc4>)
 8004e32:	f7fc f8f5 	bl	8001020 <KalmanMatrixReset>
	Robotinit(&Robot);
 8004e36:	4810      	ldr	r0, [pc, #64]	; (8004e78 <RobotResetAll+0xb0>)
 8004e38:	f7fc fc8a 	bl	8001750 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8004e3c:	4814      	ldr	r0, [pc, #80]	; (8004e90 <RobotResetAll+0xc8>)
 8004e3e:	f7fc fa97 	bl	8001370 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8004e42:	4814      	ldr	r0, [pc, #80]	; (8004e94 <RobotResetAll+0xcc>)
 8004e44:	f7fc fa94 	bl	8001370 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <RobotResetAll+0xd0>)
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <RobotResetAll+0xd0>)
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <RobotResetAll+0xd4>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000770 	.word	0x20000770
 8004e68:	20000778 	.word	0x20000778
 8004e6c:	42700000 	.word	0x42700000
 8004e70:	00000000 	.word	0x00000000
 8004e74:	200007fc 	.word	0x200007fc
 8004e78:	20000664 	.word	0x20000664
 8004e7c:	200008b8 	.word	0x200008b8
 8004e80:	200008c0 	.word	0x200008c0
 8004e84:	20000780 	.word	0x20000780
 8004e88:	447a0000 	.word	0x447a0000
 8004e8c:	20000034 	.word	0x20000034
 8004e90:	20000790 	.word	0x20000790
 8004e94:	200007c4 	.word	0x200007c4
 8004e98:	20000690 	.word	0x20000690
 8004e9c:	2000068c 	.word	0x2000068c

08004ea0 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a47      	ldr	r2, [pc, #284]	; (8004fe8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ed8:	eb12 0a01 	adds.w	sl, r2, r1
 8004edc:	f143 0b00 	adc.w	fp, r3, #0
 8004ee0:	4b42      	ldr	r3, [pc, #264]	; (8004fec <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004ee2:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d177      	bne.n	8004fde <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8004eee:	2120      	movs	r1, #32
 8004ef0:	4840      	ldr	r0, [pc, #256]	; (8004ff4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004ef2:	f001 faab 	bl	800644c <HAL_GPIO_ReadPin>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d15b      	bne.n	8004fb4 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8004efc:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004efe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004f02:	f112 0801 	adds.w	r8, r2, #1
 8004f06:	f143 0900 	adc.w	r9, r3, #0
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f0c:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8004f10:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e002      	b.n	8004f26 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8004f20:	4b37      	ldr	r3, [pc, #220]	; (8005000 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f22:	2202      	movs	r2, #2
 8004f24:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f2c:	4831      	ldr	r0, [pc, #196]	; (8004ff4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f2e:	f001 faa5 	bl	800647c <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d103      	bne.n	8004f42 <HAL_TIM_PeriodElapsedCallback+0x86>
 8004f3a:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_PeriodElapsedCallback+0x8e>
 8004f42:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10b      	bne.n	8004f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f50:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f52:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f56:	eef0 0a47 	vmov.f32	s1, s14
 8004f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5e:	f7ff fef9 	bl	8004d54 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8004f62:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8004f6c:	f7ff ff2c 	bl	8004dc8 <RobotResetAll>
				RobotState = init;
 8004f70:	4b23      	ldr	r3, [pc, #140]	; (8005000 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e02f      	b.n	8004fd8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f7a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f84:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d125      	bne.n	8004fd8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f8e:	2203      	movs	r2, #3
 8004f90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8004f94:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f96:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004f9c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004fa0:	eef0 0a47 	vmov.f32	s1, s14
 8004fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa8:	f7ff fed4 	bl	8004d54 <RobotRunToPositon>
				RobotState = FindHome;
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e011      	b.n	8004fd8 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004fb6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004fba:	1c54      	adds	r4, r2, #1
 8004fbc:	f143 0500 	adc.w	r5, r3, #0
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004fc2:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004fc8:	2204      	movs	r2, #4
 8004fca:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fd2:	4808      	ldr	r0, [pc, #32]	; (8004ff4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004fd4:	f001 fa52 	bl	800647c <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8004fd8:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004fda:	f003 ff59 	bl	8008e90 <HAL_TIM_Base_Stop_IT>
	}
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe8:	20000518 	.word	0x20000518
 8004fec:	20000700 	.word	0x20000700
 8004ff0:	200004d0 	.word	0x200004d0
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	20000720 	.word	0x20000720
 8004ffc:	20000000 	.word	0x20000000
 8005000:	20000699 	.word	0x20000699
 8005004:	200006f4 	.word	0x200006f4
 8005008:	200006f5 	.word	0x200006f5
 800500c:	200006f3 	.word	0x200006f3
 8005010:	20000664 	.word	0x20000664

08005014 <Micros>:

uint64_t Micros(){
 8005014:	b4b0      	push	{r4, r5, r7}
 8005016:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <Micros+0x28>)
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2200      	movs	r2, #0
 800501e:	4618      	mov	r0, r3
 8005020:	4611      	mov	r1, r2
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <Micros+0x2c>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	1884      	adds	r4, r0, r2
 800502a:	eb41 0503 	adc.w	r5, r1, r3
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
}
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bcb0      	pop	{r4, r5, r7}
 800503a:	4770      	bx	lr
 800503c:	40014800 	.word	0x40014800
 8005040:	20000700 	.word	0x20000700

08005044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005048:	b672      	cpsid	i
}
 800504a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800504c:	e7fe      	b.n	800504c <Error_Handler+0x8>
	...

08005050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_MspInit+0x4c>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <HAL_MspInit+0x4c>)
 8005060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005064:	6453      	str	r3, [r2, #68]	; 0x44
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_MspInit+0x4c>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_MspInit+0x4c>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <HAL_MspInit+0x4c>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_MspInit+0x4c>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800508e:	2007      	movs	r0, #7
 8005090:	f000 fc06 	bl	80058a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800

080050a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_I2C_MspInit+0xa4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d13c      	bne.n	800513c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	6313      	str	r3, [r2, #48]	; 0x30
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e4:	2312      	movs	r3, #18
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050f0:	2304      	movs	r3, #4
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4619      	mov	r1, r3
 80050fa:	4814      	ldr	r0, [pc, #80]	; (800514c <HAL_I2C_MspInit+0xac>)
 80050fc:	f001 f822 	bl	8006144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 800510a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800510e:	6413      	str	r3, [r2, #64]	; 0x40
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	201f      	movs	r0, #31
 8005122:	f000 fbc8 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005126:	201f      	movs	r0, #31
 8005128:	f000 fbe1 	bl	80058ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	2020      	movs	r0, #32
 8005132:	f000 fbc0 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005136:	2020      	movs	r0, #32
 8005138:	f000 fbd9 	bl	80058ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800513c:	bf00      	nop
 800513e:	3728      	adds	r7, #40	; 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40005400 	.word	0x40005400
 8005148:	40023800 	.word	0x40023800
 800514c:	40020400 	.word	0x40020400

08005150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <HAL_TIM_PWM_MspInit+0x48>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d115      	bne.n	800518e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_TIM_PWM_MspInit+0x4c>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <HAL_TIM_PWM_MspInit+0x4c>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6453      	str	r3, [r2, #68]	; 0x44
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_TIM_PWM_MspInit+0x4c>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	201a      	movs	r0, #26
 8005184:	f000 fb97 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005188:	201a      	movs	r0, #26
 800518a:	f000 fbb0 	bl	80058ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40023800 	.word	0x40023800

080051a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a8:	f107 0314 	add.w	r3, r7, #20
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d12b      	bne.n	800521a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_TIM_Encoder_MspInit+0x84>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051fa:	2303      	movs	r3, #3
 80051fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800520a:	2301      	movs	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4619      	mov	r1, r3
 8005214:	4804      	ldr	r0, [pc, #16]	; (8005228 <HAL_TIM_Encoder_MspInit+0x88>)
 8005216:	f000 ff95 	bl	8006144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800521a:	bf00      	nop
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	40020000 	.word	0x40020000

0800522c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_TIM_Base_MspInit+0x80>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d116      	bne.n	800526c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	6413      	str	r3, [r2, #64]	; 0x40
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	2100      	movs	r1, #0
 800525e:	2032      	movs	r0, #50	; 0x32
 8005260:	f000 fb29 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005264:	2032      	movs	r0, #50	; 0x32
 8005266:	f000 fb42 	bl	80058ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800526a:	e01a      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_TIM_Base_MspInit+0x88>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d115      	bne.n	80052a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6453      	str	r3, [r2, #68]	; 0x44
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <HAL_TIM_Base_MspInit+0x84>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005292:	2200      	movs	r2, #0
 8005294:	2100      	movs	r1, #0
 8005296:	201a      	movs	r0, #26
 8005298:	f000 fb0d 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800529c:	201a      	movs	r0, #26
 800529e:	f000 fb26 	bl	80058ee <HAL_NVIC_EnableIRQ>
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40014800 	.word	0x40014800

080052b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a12      	ldr	r2, [pc, #72]	; (8005320 <HAL_TIM_MspPostInit+0x68>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d11e      	bne.n	8005318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_TIM_MspPostInit+0x6c>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_TIM_MspPostInit+0x6c>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_TIM_MspPostInit+0x6c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fc:	2302      	movs	r3, #2
 80052fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005308:	2301      	movs	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530c:	f107 030c 	add.w	r3, r7, #12
 8005310:	4619      	mov	r1, r3
 8005312:	4805      	ldr	r0, [pc, #20]	; (8005328 <HAL_TIM_MspPostInit+0x70>)
 8005314:	f000 ff16 	bl	8006144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005318:	bf00      	nop
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40010000 	.word	0x40010000
 8005324:	40023800 	.word	0x40023800
 8005328:	40020000 	.word	0x40020000

0800532c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4b      	ldr	r2, [pc, #300]	; (8005478 <HAL_UART_MspInit+0x14c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	f040 8090 	bne.w	8005470 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	4b49      	ldr	r3, [pc, #292]	; (800547c <HAL_UART_MspInit+0x150>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	4a48      	ldr	r2, [pc, #288]	; (800547c <HAL_UART_MspInit+0x150>)
 800535a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535e:	6413      	str	r3, [r2, #64]	; 0x40
 8005360:	4b46      	ldr	r3, [pc, #280]	; (800547c <HAL_UART_MspInit+0x150>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	4b42      	ldr	r3, [pc, #264]	; (800547c <HAL_UART_MspInit+0x150>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	4a41      	ldr	r2, [pc, #260]	; (800547c <HAL_UART_MspInit+0x150>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6313      	str	r3, [r2, #48]	; 0x30
 800537c:	4b3f      	ldr	r3, [pc, #252]	; (800547c <HAL_UART_MspInit+0x150>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005388:	230c      	movs	r3, #12
 800538a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005394:	2303      	movs	r3, #3
 8005396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005398:	2307      	movs	r3, #7
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	4619      	mov	r1, r3
 80053a2:	4837      	ldr	r0, [pc, #220]	; (8005480 <HAL_UART_MspInit+0x154>)
 80053a4:	f000 fece 	bl	8006144 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053aa:	4a37      	ldr	r2, [pc, #220]	; (8005488 <HAL_UART_MspInit+0x15c>)
 80053ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80053ae:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053bc:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053be:	2200      	movs	r2, #0
 80053c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053c2:	4b30      	ldr	r3, [pc, #192]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ca:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053d8:	2200      	movs	r2, #0
 80053da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053de:	2200      	movs	r2, #0
 80053e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053e8:	4826      	ldr	r0, [pc, #152]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053ea:	f000 fa9b 	bl	8005924 <HAL_DMA_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80053f4:	f7ff fe26 	bl	8005044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_UART_MspInit+0x158>)
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_UART_MspInit+0x158>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_UART_MspInit+0x160>)
 8005406:	4a22      	ldr	r2, [pc, #136]	; (8005490 <HAL_UART_MspInit+0x164>)
 8005408:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_UART_MspInit+0x160>)
 800540c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005410:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_UART_MspInit+0x160>)
 8005414:	2240      	movs	r2, #64	; 0x40
 8005416:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <HAL_UART_MspInit+0x160>)
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_UART_MspInit+0x160>)
 8005420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005424:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_UART_MspInit+0x160>)
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_UART_MspInit+0x160>)
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_UART_MspInit+0x160>)
 8005434:	2200      	movs	r2, #0
 8005436:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <HAL_UART_MspInit+0x160>)
 800543a:	2200      	movs	r2, #0
 800543c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_UART_MspInit+0x160>)
 8005440:	2200      	movs	r2, #0
 8005442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005444:	4811      	ldr	r0, [pc, #68]	; (800548c <HAL_UART_MspInit+0x160>)
 8005446:	f000 fa6d 	bl	8005924 <HAL_DMA_Init>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005450:	f7ff fdf8 	bl	8005044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0d      	ldr	r2, [pc, #52]	; (800548c <HAL_UART_MspInit+0x160>)
 8005458:	635a      	str	r2, [r3, #52]	; 0x34
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <HAL_UART_MspInit+0x160>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005460:	2200      	movs	r2, #0
 8005462:	2100      	movs	r1, #0
 8005464:	2026      	movs	r0, #38	; 0x26
 8005466:	f000 fa26 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800546a:	2026      	movs	r0, #38	; 0x26
 800546c:	f000 fa3f 	bl	80058ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005470:	bf00      	nop
 8005472:	3728      	adds	r7, #40	; 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40004400 	.word	0x40004400
 800547c:	40023800 	.word	0x40023800
 8005480:	40020000 	.word	0x40020000
 8005484:	200005a4 	.word	0x200005a4
 8005488:	40026088 	.word	0x40026088
 800548c:	20000604 	.word	0x20000604
 8005490:	400260a0 	.word	0x400260a0

08005494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005498:	e7fe      	b.n	8005498 <NMI_Handler+0x4>

0800549a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800549e:	e7fe      	b.n	800549e <HardFault_Handler+0x4>

080054a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054a4:	e7fe      	b.n	80054a4 <MemManage_Handler+0x4>

080054a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054aa:	e7fe      	b.n	80054aa <BusFault_Handler+0x4>

080054ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054b0:	e7fe      	b.n	80054b0 <UsageFault_Handler+0x4>

080054b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054e0:	f000 f8ee 	bl	80056c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <DMA1_Stream5_IRQHandler+0x10>)
 80054ee:	f000 fbb1 	bl	8005c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200005a4 	.word	0x200005a4

080054fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005500:	4802      	ldr	r0, [pc, #8]	; (800550c <DMA1_Stream6_IRQHandler+0x10>)
 8005502:	f000 fba7 	bl	8005c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000604 	.word	0x20000604

08005510 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8005514:	2020      	movs	r0, #32
 8005516:	f000 ffe5 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005524:	4803      	ldr	r0, [pc, #12]	; (8005534 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005526:	f003 ff15 	bl	8009354 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800552a:	4803      	ldr	r0, [pc, #12]	; (8005538 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800552c:	f003 ff12 	bl	8009354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005530:	bf00      	nop
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000440 	.word	0x20000440
 8005538:	20000518 	.word	0x20000518

0800553c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <I2C1_EV_IRQHandler+0x10>)
 8005542:	f001 fa7f 	bl	8006a44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	200003ec 	.word	0x200003ec

08005550 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <I2C1_ER_IRQHandler+0x10>)
 8005556:	f001 fbe6 	bl	8006d26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	200003ec 	.word	0x200003ec

08005564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <USART2_IRQHandler+0x10>)
 800556a:	f004 fe7f 	bl	800a26c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000560 	.word	0x20000560

08005578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 800557c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005580:	f000 ffb0 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005588:	f000 ffac 	bl	80064e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}

08005590 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005594:	4802      	ldr	r0, [pc, #8]	; (80055a0 <TIM5_IRQHandler+0x10>)
 8005596:	f003 fedd 	bl	8009354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200004d0 	.word	0x200004d0

080055a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <SystemInit+0x20>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <SystemInit+0x20>)
 80055b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80055c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055cc:	480d      	ldr	r0, [pc, #52]	; (8005604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055ce:	490e      	ldr	r1, [pc, #56]	; (8005608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055d0:	4a0e      	ldr	r2, [pc, #56]	; (800560c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d4:	e002      	b.n	80055dc <LoopCopyDataInit>

080055d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055da:	3304      	adds	r3, #4

080055dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e0:	d3f9      	bcc.n	80055d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055e2:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055e4:	4c0b      	ldr	r4, [pc, #44]	; (8005614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055e8:	e001      	b.n	80055ee <LoopFillZerobss>

080055ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055ec:	3204      	adds	r2, #4

080055ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f0:	d3fb      	bcc.n	80055ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055f2:	f7ff ffd7 	bl	80055a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055f6:	f006 f9fb 	bl	800b9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055fa:	f7fd fc99 	bl	8002f30 <main>
  bx  lr    
 80055fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005608:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 800560c:	0800baac 	.word	0x0800baac
  ldr r2, =_sbss
 8005610:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8005614:	2000092c 	.word	0x2000092c

08005618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC_IRQHandler>
	...

0800561c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <HAL_Init+0x40>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_Init+0x40>)
 8005626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_Init+0x40>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_Init+0x40>)
 8005632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005638:	4b08      	ldr	r3, [pc, #32]	; (800565c <HAL_Init+0x40>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a07      	ldr	r2, [pc, #28]	; (800565c <HAL_Init+0x40>)
 800563e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005644:	2003      	movs	r0, #3
 8005646:	f000 f92b 	bl	80058a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800564a:	2000      	movs	r0, #0
 800564c:	f000 f808 	bl	8005660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005650:	f7ff fcfe 	bl	8005050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005668:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <HAL_InitTick+0x54>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_InitTick+0x58>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005676:	fbb3 f3f1 	udiv	r3, r3, r1
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f943 	bl	800590a <HAL_SYSTICK_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e00e      	b.n	80056ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d80a      	bhi.n	80056aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005694:	2200      	movs	r2, #0
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	f000 f90b 	bl	80058b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a0:	4a06      	ldr	r2, [pc, #24]	; (80056bc <HAL_InitTick+0x5c>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200003b8 	.word	0x200003b8
 80056b8:	200003c0 	.word	0x200003c0
 80056bc:	200003bc 	.word	0x200003bc

080056c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_IncTick+0x20>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_IncTick+0x24>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <HAL_IncTick+0x24>)
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	200003c0 	.word	0x200003c0
 80056e4:	20000928 	.word	0x20000928

080056e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return uwTick;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <HAL_GetTick+0x14>)
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000928 	.word	0x20000928

08005700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800571c:	4013      	ands	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800572c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005732:	4a04      	ldr	r2, [pc, #16]	; (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	60d3      	str	r3, [r2, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <__NVIC_GetPriorityGrouping+0x18>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f003 0307 	and.w	r3, r3, #7
}
 8005756:	4618      	mov	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	db0b      	blt.n	800578e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	4907      	ldr	r1, [pc, #28]	; (800579c <__NVIC_EnableIRQ+0x38>)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2001      	movs	r0, #1
 8005786:	fa00 f202 	lsl.w	r2, r0, r2
 800578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000e100 	.word	0xe000e100

080057a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	6039      	str	r1, [r7, #0]
 80057aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	db0a      	blt.n	80057ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	490c      	ldr	r1, [pc, #48]	; (80057ec <__NVIC_SetPriority+0x4c>)
 80057ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	440b      	add	r3, r1
 80057c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057c8:	e00a      	b.n	80057e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4908      	ldr	r1, [pc, #32]	; (80057f0 <__NVIC_SetPriority+0x50>)
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3b04      	subs	r3, #4
 80057d8:	0112      	lsls	r2, r2, #4
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	440b      	add	r3, r1
 80057de:	761a      	strb	r2, [r3, #24]
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000e100 	.word	0xe000e100
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	; 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	bf28      	it	cs
 8005812:	2304      	movcs	r3, #4
 8005814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3304      	adds	r3, #4
 800581a:	2b06      	cmp	r3, #6
 800581c:	d902      	bls.n	8005824 <NVIC_EncodePriority+0x30>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3b03      	subs	r3, #3
 8005822:	e000      	b.n	8005826 <NVIC_EncodePriority+0x32>
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	401a      	ands	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800583c:	f04f 31ff 	mov.w	r1, #4294967295
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	43d9      	mvns	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800584c:	4313      	orrs	r3, r2
         );
}
 800584e:	4618      	mov	r0, r3
 8005850:	3724      	adds	r7, #36	; 0x24
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800586c:	d301      	bcc.n	8005872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800586e:	2301      	movs	r3, #1
 8005870:	e00f      	b.n	8005892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <SysTick_Config+0x40>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3b01      	subs	r3, #1
 8005878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800587a:	210f      	movs	r1, #15
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	f7ff ff8e 	bl	80057a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <SysTick_Config+0x40>)
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <SysTick_Config+0x40>)
 800588c:	2207      	movs	r2, #7
 800588e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	e000e010 	.word	0xe000e010

080058a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ff29 	bl	8005700 <__NVIC_SetPriorityGrouping>
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	4603      	mov	r3, r0
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058c8:	f7ff ff3e 	bl	8005748 <__NVIC_GetPriorityGrouping>
 80058cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7ff ff8e 	bl	80057f4 <NVIC_EncodePriority>
 80058d8:	4602      	mov	r2, r0
 80058da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058de:	4611      	mov	r1, r2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ff5d 	bl	80057a0 <__NVIC_SetPriority>
}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	4603      	mov	r3, r0
 80058f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff ff31 	bl	8005764 <__NVIC_EnableIRQ>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff ffa2 	bl	800585c <SysTick_Config>
 8005918:	4603      	mov	r3, r0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005930:	f7ff feda 	bl	80056e8 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e099      	b.n	8005a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005960:	e00f      	b.n	8005982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005962:	f7ff fec1 	bl	80056e8 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b05      	cmp	r3, #5
 800596e:	d908      	bls.n	8005982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2203      	movs	r2, #3
 800597a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e078      	b.n	8005a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e8      	bne.n	8005962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_DMA_Init+0x158>)
 800599c:	4013      	ands	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d107      	bne.n	80059ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	4313      	orrs	r3, r2
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d117      	bne.n	8005a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb0f 	bl	800604c <DMA_CheckFifoParam>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2240      	movs	r2, #64	; 0x40
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a42:	2301      	movs	r3, #1
 8005a44:	e016      	b.n	8005a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fac6 	bl	8005fe0 <DMA_CalcBaseAndBitshift>
 8005a54:	4603      	mov	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	223f      	movs	r2, #63	; 0x3f
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	f010803f 	.word	0xf010803f

08005a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_DMA_Start_IT+0x26>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e040      	b.n	8005b28 <HAL_DMA_Start_IT+0xa8>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d12f      	bne.n	8005b1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa58 	bl	8005f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	223f      	movs	r2, #63	; 0x3f
 8005ada:	409a      	lsls	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0216 	orr.w	r2, r2, #22
 8005aee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0208 	orr.w	r2, r2, #8
 8005b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e005      	b.n	8005b26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
 8005b24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b3e:	f7ff fdd3 	bl	80056e8 <HAL_GetTick>
 8005b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d008      	beq.n	8005b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e052      	b.n	8005c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0216 	bic.w	r2, r2, #22
 8005b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_DMA_Abort+0x62>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0208 	bic.w	r2, r2, #8
 8005ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb2:	e013      	b.n	8005bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bb4:	f7ff fd98 	bl	80056e8 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d90c      	bls.n	8005bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e015      	b.n	8005c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e4      	bne.n	8005bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bee:	223f      	movs	r2, #63	; 0x3f
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d004      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e00c      	b.n	8005c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2205      	movs	r2, #5
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c60:	4b8e      	ldr	r3, [pc, #568]	; (8005e9c <HAL_DMA_IRQHandler+0x248>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a8e      	ldr	r2, [pc, #568]	; (8005ea0 <HAL_DMA_IRQHandler+0x24c>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	2208      	movs	r2, #8
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01a      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	2208      	movs	r2, #8
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f043 0202 	orr.w	r2, r3, #2
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d012      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	2204      	movs	r2, #4
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	f043 0204 	orr.w	r2, r3, #4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	2210      	movs	r2, #16
 8005d32:	409a      	lsls	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d043      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03c      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4e:	2210      	movs	r2, #16
 8005d50:	409a      	lsls	r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d024      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e01f      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
 8005d94:	e016      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0208 	bic.w	r2, r2, #8
 8005db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	2220      	movs	r2, #32
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 808f 	beq.w	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8087 	beq.w	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	2220      	movs	r2, #32
 8005dec:	409a      	lsls	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d136      	bne.n	8005e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0216 	bic.w	r2, r2, #22
 8005e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_DMA_IRQHandler+0x1da>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0208 	bic.w	r2, r2, #8
 8005e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e42:	223f      	movs	r2, #63	; 0x3f
 8005e44:	409a      	lsls	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d07e      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
        }
        return;
 8005e6a:	e079      	b.n	8005f60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01d      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10d      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d031      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e02c      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
 8005e9a:	bf00      	nop
 8005e9c:	200003b8 	.word	0x200003b8
 8005ea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d023      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	e01e      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0210 	bic.w	r2, r2, #16
 8005ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d032      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d022      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d307      	bcc.n	8005f3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f2      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x2cc>
 8005f3a:	e000      	b.n	8005f3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	e000      	b.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f60:	bf00      	nop
    }
  }
}
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f76:	b2db      	uxtb	r3, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d108      	bne.n	8005fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fc2:	e007      	b.n	8005fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	3b10      	subs	r3, #16
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <DMA_CalcBaseAndBitshift+0x64>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ffa:	4a13      	ldr	r2, [pc, #76]	; (8006048 <DMA_CalcBaseAndBitshift+0x68>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d909      	bls.n	8006022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	659a      	str	r2, [r3, #88]	; 0x58
 8006020:	e007      	b.n	8006032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	aaaaaaab 	.word	0xaaaaaaab
 8006048:	0800ba94 	.word	0x0800ba94

0800604c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11f      	bne.n	80060a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d856      	bhi.n	800611a <DMA_CheckFifoParam+0xce>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <DMA_CheckFifoParam+0x28>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	08006085 	.word	0x08006085
 8006078:	08006097 	.word	0x08006097
 800607c:	08006085 	.word	0x08006085
 8006080:	0800611b 	.word	0x0800611b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d046      	beq.n	800611e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006094:	e043      	b.n	800611e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800609e:	d140      	bne.n	8006122 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a4:	e03d      	b.n	8006122 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ae:	d121      	bne.n	80060f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d837      	bhi.n	8006126 <DMA_CheckFifoParam+0xda>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <DMA_CheckFifoParam+0x70>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060d3 	.word	0x080060d3
 80060c4:	080060cd 	.word	0x080060cd
 80060c8:	080060e5 	.word	0x080060e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e030      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d025      	beq.n	800612a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e2:	e022      	b.n	800612a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060ec:	d11f      	bne.n	800612e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060f2:	e01c      	b.n	800612e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d903      	bls.n	8006102 <DMA_CheckFifoParam+0xb6>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d003      	beq.n	8006108 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006100:	e018      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	e015      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e00b      	b.n	8006132 <DMA_CheckFifoParam+0xe6>
      break;
 800611a:	bf00      	nop
 800611c:	e00a      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e008      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e006      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;   
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006132:	bf00      	nop
    }
  } 
  
  return status; 
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop

08006144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006144:	b480      	push	{r7}
 8006146:	b089      	sub	sp, #36	; 0x24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e159      	b.n	8006414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006160:	2201      	movs	r2, #1
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	429a      	cmp	r2, r3
 800617a:	f040 8148 	bne.w	800640e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d005      	beq.n	8006196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006192:	2b02      	cmp	r3, #2
 8006194:	d130      	bne.n	80061f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2203      	movs	r2, #3
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4013      	ands	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061cc:	2201      	movs	r2, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 0201 	and.w	r2, r3, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d017      	beq.n	8006234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d123      	bne.n	8006288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	08da      	lsrs	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3208      	adds	r2, #8
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220f      	movs	r2, #15
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	08da      	lsrs	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3208      	adds	r2, #8
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	2203      	movs	r2, #3
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 0203 	and.w	r2, r3, #3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a2 	beq.w	800640e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	4b57      	ldr	r3, [pc, #348]	; (800642c <HAL_GPIO_Init+0x2e8>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	4a56      	ldr	r2, [pc, #344]	; (800642c <HAL_GPIO_Init+0x2e8>)
 80062d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062d8:	6453      	str	r3, [r2, #68]	; 0x44
 80062da:	4b54      	ldr	r3, [pc, #336]	; (800642c <HAL_GPIO_Init+0x2e8>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e6:	4a52      	ldr	r2, [pc, #328]	; (8006430 <HAL_GPIO_Init+0x2ec>)
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	3302      	adds	r3, #2
 80062ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	220f      	movs	r2, #15
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4013      	ands	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a49      	ldr	r2, [pc, #292]	; (8006434 <HAL_GPIO_Init+0x2f0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d019      	beq.n	8006346 <HAL_GPIO_Init+0x202>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a48      	ldr	r2, [pc, #288]	; (8006438 <HAL_GPIO_Init+0x2f4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_GPIO_Init+0x1fe>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a47      	ldr	r2, [pc, #284]	; (800643c <HAL_GPIO_Init+0x2f8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00d      	beq.n	800633e <HAL_GPIO_Init+0x1fa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a46      	ldr	r2, [pc, #280]	; (8006440 <HAL_GPIO_Init+0x2fc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <HAL_GPIO_Init+0x1f6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a45      	ldr	r2, [pc, #276]	; (8006444 <HAL_GPIO_Init+0x300>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_GPIO_Init+0x1f2>
 8006332:	2304      	movs	r3, #4
 8006334:	e008      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006336:	2307      	movs	r3, #7
 8006338:	e006      	b.n	8006348 <HAL_GPIO_Init+0x204>
 800633a:	2303      	movs	r3, #3
 800633c:	e004      	b.n	8006348 <HAL_GPIO_Init+0x204>
 800633e:	2302      	movs	r3, #2
 8006340:	e002      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006346:	2300      	movs	r3, #0
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	f002 0203 	and.w	r2, r2, #3
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	4093      	lsls	r3, r2
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006358:	4935      	ldr	r1, [pc, #212]	; (8006430 <HAL_GPIO_Init+0x2ec>)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <HAL_GPIO_Init+0x304>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800638a:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <HAL_GPIO_Init+0x304>)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006390:	4b2d      	ldr	r3, [pc, #180]	; (8006448 <HAL_GPIO_Init+0x304>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063b4:	4a24      	ldr	r2, [pc, #144]	; (8006448 <HAL_GPIO_Init+0x304>)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_GPIO_Init+0x304>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063de:	4a1a      	ldr	r2, [pc, #104]	; (8006448 <HAL_GPIO_Init+0x304>)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063e4:	4b18      	ldr	r3, [pc, #96]	; (8006448 <HAL_GPIO_Init+0x304>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006408:	4a0f      	ldr	r2, [pc, #60]	; (8006448 <HAL_GPIO_Init+0x304>)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b0f      	cmp	r3, #15
 8006418:	f67f aea2 	bls.w	8006160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	3724      	adds	r7, #36	; 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	40013800 	.word	0x40013800
 8006434:	40020000 	.word	0x40020000
 8006438:	40020400 	.word	0x40020400
 800643c:	40020800 	.word	0x40020800
 8006440:	40020c00 	.word	0x40020c00
 8006444:	40021000 	.word	0x40021000
 8006448:	40013c00 	.word	0x40013c00

0800644c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e001      	b.n	800646e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	807b      	strh	r3, [r7, #2]
 8006488:	4613      	mov	r3, r2
 800648a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800648c:	787b      	ldrb	r3, [r7, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006492:	887a      	ldrh	r2, [r7, #2]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006498:	e003      	b.n	80064a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800649a:	887b      	ldrh	r3, [r7, #2]
 800649c:	041a      	lsls	r2, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	619a      	str	r2, [r3, #24]
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064c0:	887a      	ldrh	r2, [r7, #2]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	041a      	lsls	r2, r3, #16
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	43d9      	mvns	r1, r3
 80064cc:	887b      	ldrh	r3, [r7, #2]
 80064ce:	400b      	ands	r3, r1
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	619a      	str	r2, [r3, #24]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064fa:	4a05      	ldr	r2, [pc, #20]	; (8006510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fb88 	bl	8004c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40013c00 	.word	0x40013c00

08006514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e12b      	b.n	800677e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fe fdb0 	bl	80050a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006578:	f002 fbb0 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
 800657c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4a81      	ldr	r2, [pc, #516]	; (8006788 <HAL_I2C_Init+0x274>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d807      	bhi.n	8006598 <HAL_I2C_Init+0x84>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a80      	ldr	r2, [pc, #512]	; (800678c <HAL_I2C_Init+0x278>)
 800658c:	4293      	cmp	r3, r2
 800658e:	bf94      	ite	ls
 8006590:	2301      	movls	r3, #1
 8006592:	2300      	movhi	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e006      	b.n	80065a6 <HAL_I2C_Init+0x92>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a7d      	ldr	r2, [pc, #500]	; (8006790 <HAL_I2C_Init+0x27c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	bf94      	ite	ls
 80065a0:	2301      	movls	r3, #1
 80065a2:	2300      	movhi	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0e7      	b.n	800677e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a78      	ldr	r2, [pc, #480]	; (8006794 <HAL_I2C_Init+0x280>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	0c9b      	lsrs	r3, r3, #18
 80065b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a6a      	ldr	r2, [pc, #424]	; (8006788 <HAL_I2C_Init+0x274>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d802      	bhi.n	80065e8 <HAL_I2C_Init+0xd4>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3301      	adds	r3, #1
 80065e6:	e009      	b.n	80065fc <HAL_I2C_Init+0xe8>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	4a69      	ldr	r2, [pc, #420]	; (8006798 <HAL_I2C_Init+0x284>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	3301      	adds	r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	430b      	orrs	r3, r1
 8006602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800660e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	495c      	ldr	r1, [pc, #368]	; (8006788 <HAL_I2C_Init+0x274>)
 8006618:	428b      	cmp	r3, r1
 800661a:	d819      	bhi.n	8006650 <HAL_I2C_Init+0x13c>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e59      	subs	r1, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	fbb1 f3f3 	udiv	r3, r1, r3
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006630:	400b      	ands	r3, r1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_I2C_Init+0x138>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1e59      	subs	r1, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fbb1 f3f3 	udiv	r3, r1, r3
 8006644:	3301      	adds	r3, #1
 8006646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800664a:	e051      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 800664c:	2304      	movs	r3, #4
 800664e:	e04f      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d111      	bne.n	800667c <HAL_I2C_Init+0x168>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1e58      	subs	r0, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	440b      	add	r3, r1
 8006666:	fbb0 f3f3 	udiv	r3, r0, r3
 800666a:	3301      	adds	r3, #1
 800666c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006670:	2b00      	cmp	r3, #0
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e012      	b.n	80066a2 <HAL_I2C_Init+0x18e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e58      	subs	r0, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006692:	3301      	adds	r3, #1
 8006694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Init+0x196>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e022      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10e      	bne.n	80066d0 <HAL_I2C_Init+0x1bc>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1e58      	subs	r0, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	440b      	add	r3, r1
 80066c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c4:	3301      	adds	r3, #1
 80066c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ce:	e00f      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1e58      	subs	r0, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	0099      	lsls	r1, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6809      	ldr	r1, [r1, #0]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800671e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6911      	ldr	r1, [r2, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68d2      	ldr	r2, [r2, #12]
 800672a:	4311      	orrs	r1, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	430b      	orrs	r3, r1
 8006732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	000186a0 	.word	0x000186a0
 800678c:	001e847f 	.word	0x001e847f
 8006790:	003d08ff 	.word	0x003d08ff
 8006794:	431bde83 	.word	0x431bde83
 8006798:	10624dd3 	.word	0x10624dd3

0800679c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	461a      	mov	r2, r3
 80067a8:	460b      	mov	r3, r1
 80067aa:	817b      	strh	r3, [r7, #10]
 80067ac:	4613      	mov	r3, r2
 80067ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b20      	cmp	r3, #32
 80067be:	f040 8085 	bne.w	80068cc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80067c2:	4b46      	ldr	r3, [pc, #280]	; (80068dc <HAL_I2C_Master_Transmit_IT+0x140>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	4a45      	ldr	r2, [pc, #276]	; (80068e0 <HAL_I2C_Master_Transmit_IT+0x144>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0a1a      	lsrs	r2, r3, #8
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009a      	lsls	r2, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3b01      	subs	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d116      	bne.n	8006816 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e05b      	b.n	80068ce <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b02      	cmp	r3, #2
 8006822:	d0db      	beq.n	80067dc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_I2C_Master_Transmit_IT+0x96>
 800682e:	2302      	movs	r3, #2
 8006830:	e04d      	b.n	80068ce <HAL_I2C_Master_Transmit_IT+0x132>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d007      	beq.n	8006858 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2221      	movs	r2, #33	; 0x21
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2210      	movs	r2, #16
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	893a      	ldrh	r2, [r7, #8]
 8006888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800689a:	897a      	ldrh	r2, [r7, #10]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80068b6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e000      	b.n	80068ce <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	200003b8 	.word	0x200003b8
 80068e0:	14f8b589 	.word	0x14f8b589
 80068e4:	ffff0000 	.word	0xffff0000

080068e8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	461a      	mov	r2, r3
 80068f4:	460b      	mov	r3, r1
 80068f6:	817b      	strh	r3, [r7, #10]
 80068f8:	4613      	mov	r3, r2
 80068fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b20      	cmp	r3, #32
 800690a:	f040 808d 	bne.w	8006a28 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <HAL_I2C_Master_Receive_IT+0x150>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	4a49      	ldr	r2, [pc, #292]	; (8006a3c <HAL_I2C_Master_Receive_IT+0x154>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0a1a      	lsrs	r2, r3, #8
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009a      	lsls	r2, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	3b01      	subs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d116      	bne.n	8006962 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e063      	b.n	8006a2a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b02      	cmp	r3, #2
 800696e:	d0db      	beq.n	8006928 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Master_Receive_IT+0x96>
 800697a:	2302      	movs	r3, #2
 800697c:	e055      	b.n	8006a2a <HAL_I2C_Master_Receive_IT+0x142>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d007      	beq.n	80069a4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2210      	movs	r2, #16
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <HAL_I2C_Master_Receive_IT+0x158>)
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80069e6:	897a      	ldrh	r2, [r7, #10]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006a02:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a12:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	200003b8 	.word	0x200003b8
 8006a3c:	14f8b589 	.word	0x14f8b589
 8006a40:	ffff0000 	.word	0xffff0000

08006a44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d003      	beq.n	8006a7c <HAL_I2C_EV_IRQHandler+0x38>
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	f040 80c1 	bne.w	8006bfe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a9c:	d003      	beq.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x62>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_EV_IRQHandler+0x66>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x68>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f000 8132 	beq.w	8006d16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <HAL_I2C_EV_IRQHandler+0x92>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fc7b 	bl	80083c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fd83 	bl	80075da <I2C_Master_SB>
 8006ad4:	e092      	b.n	8006bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	0a5b      	lsrs	r3, r3, #9
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fdf9 	bl	80076e6 <I2C_Master_ADD10>
 8006af4:	e082      	b.n	8006bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <HAL_I2C_EV_IRQHandler+0xd2>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	0a5b      	lsrs	r3, r3, #9
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fe13 	bl	800773a <I2C_Master_ADDR>
 8006b14:	e072      	b.n	8006bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	089b      	lsrs	r3, r3, #2
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d03b      	beq.n	8006b9a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	f000 80f3 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	09db      	lsrs	r3, r3, #7
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	0a9b      	lsrs	r3, r3, #10
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9f3 	bl	8006f44 <I2C_MasterTransmit_TXE>
 8006b5e:	e04d      	b.n	8006bfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80d6 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80cf 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b21      	cmp	r3, #33	; 0x21
 8006b80:	d103      	bne.n	8006b8a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa7a 	bl	800707c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b88:	e0c7      	b.n	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	f040 80c4 	bne.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fae8 	bl	8007168 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b98:	e0bf      	b.n	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba8:	f000 80b7 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00f      	beq.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x194>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	0a9b      	lsrs	r3, r3, #10
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x194>
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d103      	bne.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb5d 	bl	8007290 <I2C_MasterReceive_RXNE>
 8006bd6:	e011      	b.n	8006bfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 809a 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8093 	beq.w	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc06 	bl	8007406 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bfa:	e08e      	b.n	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bfc:	e08d      	b.n	8006d1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	e007      	b.n	8006c20 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d012      	beq.n	8006c52 <HAL_I2C_EV_IRQHandler+0x20e>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	0a5b      	lsrs	r3, r3, #9
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00c      	beq.n	8006c52 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 ffc4 	bl	8007bd8 <I2C_Slave_ADDR>
 8006c50:	e066      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	091b      	lsrs	r3, r3, #4
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_I2C_EV_IRQHandler+0x22e>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fffe 	bl	8007c6c <I2C_Slave_STOPF>
 8006c70:	e056      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b21      	cmp	r3, #33	; 0x21
 8006c76:	d002      	beq.n	8006c7e <HAL_I2C_EV_IRQHandler+0x23a>
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b29      	cmp	r3, #41	; 0x29
 8006c7c:	d125      	bne.n	8006cca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	09db      	lsrs	r3, r3, #7
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00f      	beq.n	8006caa <HAL_I2C_EV_IRQHandler+0x266>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	0a9b      	lsrs	r3, r3, #10
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_I2C_EV_IRQHandler+0x266>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	089b      	lsrs	r3, r3, #2
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 feda 	bl	8007a5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ca8:	e039      	b.n	8006d1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d033      	beq.n	8006d1e <HAL_I2C_EV_IRQHandler+0x2da>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d02d      	beq.n	8006d1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 ff07 	bl	8007ad6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cc8:	e029      	b.n	8006d1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	099b      	lsrs	r3, r3, #6
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00f      	beq.n	8006cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	0a9b      	lsrs	r3, r3, #10
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	089b      	lsrs	r3, r3, #2
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 ff12 	bl	8007b18 <I2C_SlaveReceive_RXNE>
 8006cf4:	e014      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	089b      	lsrs	r3, r3, #2
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ff40 	bl	8007b94 <I2C_SlaveReceive_BTF>
 8006d14:	e004      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b08a      	sub	sp, #40	; 0x28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <HAL_I2C_ER_IRQHandler+0x4e>
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	0a1b      	lsrs	r3, r3, #8
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	0a5b      	lsrs	r3, r3, #9
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <HAL_I2C_ER_IRQHandler+0x78>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f043 0302 	orr.w	r3, r3, #2
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	0a9b      	lsrs	r3, r3, #10
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03f      	beq.n	8006e2a <HAL_I2C_ER_IRQHandler+0x104>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	0a1b      	lsrs	r3, r3, #8
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d039      	beq.n	8006e2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006db6:	7efb      	ldrb	r3, [r7, #27]
 8006db8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006dd0:	7ebb      	ldrb	r3, [r7, #26]
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d112      	bne.n	8006dfc <HAL_I2C_ER_IRQHandler+0xd6>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10f      	bne.n	8006dfc <HAL_I2C_ER_IRQHandler+0xd6>
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	2b21      	cmp	r3, #33	; 0x21
 8006de0:	d008      	beq.n	8006df4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006de2:	7cfb      	ldrb	r3, [r7, #19]
 8006de4:	2b29      	cmp	r3, #41	; 0x29
 8006de6:	d005      	beq.n	8006df4 <HAL_I2C_ER_IRQHandler+0xce>
 8006de8:	7cfb      	ldrb	r3, [r7, #19]
 8006dea:	2b28      	cmp	r3, #40	; 0x28
 8006dec:	d106      	bne.n	8006dfc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b21      	cmp	r3, #33	; 0x21
 8006df2:	d103      	bne.n	8006dfc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f869 	bl	8007ecc <I2C_Slave_AF>
 8006dfa:	e016      	b.n	8006e2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f043 0304 	orr.w	r3, r3, #4
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e0e:	7efb      	ldrb	r3, [r7, #27]
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d002      	beq.n	8006e1a <HAL_I2C_ER_IRQHandler+0xf4>
 8006e14:	7efb      	ldrb	r3, [r7, #27]
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d107      	bne.n	8006e2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	0adb      	lsrs	r3, r3, #11
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00e      	beq.n	8006e54 <HAL_I2C_ER_IRQHandler+0x12e>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f043 0308 	orr.w	r3, r3, #8
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f8a0 	bl	8007fac <I2C_ITError>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3728      	adds	r7, #40	; 0x28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d150      	bne.n	800700c <I2C_MasterTransmit_TXE+0xc8>
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	2b21      	cmp	r3, #33	; 0x21
 8006f6e:	d14d      	bne.n	800700c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d01d      	beq.n	8006fb2 <I2C_MasterTransmit_TXE+0x6e>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d01a      	beq.n	8006fb2 <I2C_MasterTransmit_TXE+0x6e>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f82:	d016      	beq.n	8006fb2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f92:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2211      	movs	r2, #17
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff ff62 	bl	8006e74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fb0:	e060      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fc0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d107      	bne.n	8006ffc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff7d 	bl	8006ef4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ffa:	e03b      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ff35 	bl	8006e74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800700a:	e033      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b21      	cmp	r3, #33	; 0x21
 8007010:	d005      	beq.n	800701e <I2C_MasterTransmit_TXE+0xda>
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b40      	cmp	r3, #64	; 0x40
 8007016:	d12d      	bne.n	8007074 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b22      	cmp	r3, #34	; 0x22
 800701c:	d12a      	bne.n	8007074 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d108      	bne.n	800703a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007036:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007038:	e01c      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d103      	bne.n	800704e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f88e 	bl	8007168 <I2C_MemoryTransmit_TXE_BTF>
}
 800704c:	e012      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007072:	e7ff      	b.n	8007074 <I2C_MasterTransmit_TXE+0x130>
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b21      	cmp	r3, #33	; 0x21
 8007094:	d164      	bne.n	8007160 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80070c4:	e04c      	b.n	8007160 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d01d      	beq.n	8007108 <I2C_MasterTransmit_BTF+0x8c>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d01a      	beq.n	8007108 <I2C_MasterTransmit_BTF+0x8c>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070d8:	d016      	beq.n	8007108 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2211      	movs	r2, #17
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff feb7 	bl	8006e74 <HAL_I2C_MasterTxCpltCallback>
}
 8007106:	e02b      	b.n	8007160 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007116:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007126:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d107      	bne.n	8007152 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fed2 	bl	8006ef4 <HAL_I2C_MemTxCpltCallback>
}
 8007150:	e006      	b.n	8007160 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fe8a 	bl	8006e74 <HAL_I2C_MasterTxCpltCallback>
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717c:	2b00      	cmp	r3, #0
 800717e:	d11d      	bne.n	80071bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10b      	bne.n	80071a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007198:	1c9a      	adds	r2, r3, #2
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800719e:	e073      	b.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	121b      	asrs	r3, r3, #8
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071ba:	e065      	b.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10b      	bne.n	80071dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071da:	e055      	b.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d151      	bne.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b22      	cmp	r3, #34	; 0x22
 80071e8:	d10d      	bne.n	8007206 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007204:	e040      	b.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d015      	beq.n	800723c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b21      	cmp	r3, #33	; 0x21
 8007214:	d112      	bne.n	800723c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800723a:	e025      	b.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d120      	bne.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b21      	cmp	r3, #33	; 0x21
 800724a:	d11d      	bne.n	8007288 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800725a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe36 	bl	8006ef4 <HAL_I2C_MemTxCpltCallback>
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b22      	cmp	r3, #34	; 0x22
 80072a2:	f040 80ac 	bne.w	80073fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d921      	bls.n	80072f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	f040 808c 	bne.w	80073fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072f6:	e082      	b.n	80073fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d075      	beq.n	80073ec <I2C_MasterReceive_RXNE+0x15c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d002      	beq.n	800730c <I2C_MasterReceive_RXNE+0x7c>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d16f      	bne.n	80073ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f827 	bl	8008360 <I2C_WaitOnSTOPRequestThroughIT>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d142      	bne.n	800739e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007326:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007336:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d10a      	bne.n	8007388 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fdc1 	bl	8006f08 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007386:	e03a      	b.n	80073fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2212      	movs	r2, #18
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fd76 	bl	8006e88 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800739c:	e02f      	b.n	80073fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff fd99 	bl	8006f1c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073ea:	e008      	b.n	80073fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fa:	605a      	str	r2, [r3, #4]
}
 80073fc:	e7ff      	b.n	80073fe <I2C_MasterReceive_RXNE+0x16e>
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b04      	cmp	r3, #4
 800741c:	d11b      	bne.n	8007456 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007454:	e0bd      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b03      	cmp	r3, #3
 800745e:	d129      	bne.n	80074b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d00a      	beq.n	800748c <I2C_MasterReceive_BTF+0x86>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d007      	beq.n	800748c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074b2:	e08e      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d176      	bne.n	80075ac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d002      	beq.n	80074ca <I2C_MasterReceive_BTF+0xc4>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d108      	bne.n	80074dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e019      	b.n	8007510 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d002      	beq.n	80074e8 <I2C_MasterReceive_BTF+0xe2>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d108      	bne.n	80074fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e00a      	b.n	8007510 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d007      	beq.n	8007510 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800756a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d10a      	bne.n	8007596 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fcba 	bl	8006f08 <HAL_I2C_MemRxCpltCallback>
}
 8007594:	e01d      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2212      	movs	r2, #18
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fc6f 	bl	8006e88 <HAL_I2C_MasterRxCpltCallback>
}
 80075aa:	e012      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d117      	bne.n	800761e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007606:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007608:	e067      	b.n	80076da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	611a      	str	r2, [r3, #16]
}
 800761c:	e05d      	b.n	80076da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007626:	d133      	bne.n	8007690 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b21      	cmp	r3, #33	; 0x21
 8007632:	d109      	bne.n	8007648 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007644:	611a      	str	r2, [r3, #16]
 8007646:	e008      	b.n	800765a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <I2C_Master_SB+0x92>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007670:	2b00      	cmp	r3, #0
 8007672:	d032      	beq.n	80076da <I2C_Master_SB+0x100>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d02d      	beq.n	80076da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800768c:	605a      	str	r2, [r3, #4]
}
 800768e:	e024      	b.n	80076da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	b29b      	uxth	r3, r3
 800769e:	11db      	asrs	r3, r3, #7
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0306 	and.w	r3, r3, #6
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f063 030f 	orn	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	611a      	str	r2, [r3, #16]
}
 80076b4:	e011      	b.n	80076da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10d      	bne.n	80076da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	11db      	asrs	r3, r3, #7
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 0306 	and.w	r3, r3, #6
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f063 030e 	orn	r3, r3, #14
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	611a      	str	r2, [r3, #16]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <I2C_Master_ADD10+0x26>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d108      	bne.n	800771e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00c      	beq.n	800772e <I2C_Master_ADD10+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772c:	605a      	str	r2, [r3, #4]
  }
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800773a:	b480      	push	{r7}
 800773c:	b091      	sub	sp, #68	; 0x44
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b22      	cmp	r3, #34	; 0x22
 8007762:	f040 8169 	bne.w	8007a38 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10f      	bne.n	800778e <I2C_Master_ADDR+0x54>
 800776e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d10b      	bne.n	800778e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	633b      	str	r3, [r7, #48]	; 0x30
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	633b      	str	r3, [r7, #48]	; 0x30
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	e160      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11d      	bne.n	80077d2 <I2C_Master_ADDR+0x98>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800779e:	d118      	bne.n	80077d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a0:	2300      	movs	r3, #0
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	651a      	str	r2, [r3, #80]	; 0x50
 80077d0:	e13e      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d113      	bne.n	8007804 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077dc:	2300      	movs	r3, #0
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e115      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 808a 	bne.w	8007924 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007816:	d137      	bne.n	8007888 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007826:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007836:	d113      	bne.n	8007860 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007846:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007848:	2300      	movs	r3, #0
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	e0e7      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007860:	2300      	movs	r3, #0
 8007862:	623b      	str	r3, [r7, #32]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e0d3      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2b08      	cmp	r3, #8
 800788c:	d02e      	beq.n	80078ec <I2C_Master_ADDR+0x1b2>
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	2b20      	cmp	r3, #32
 8007892:	d02b      	beq.n	80078ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	2b12      	cmp	r3, #18
 8007898:	d102      	bne.n	80078a0 <I2C_Master_ADDR+0x166>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b01      	cmp	r3, #1
 800789e:	d125      	bne.n	80078ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00e      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d00b      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d008      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e007      	b.n	80078d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	e0a1      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e085      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d14d      	bne.n	80079ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	2b04      	cmp	r3, #4
 8007932:	d016      	beq.n	8007962 <I2C_Master_ADDR+0x228>
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	2b02      	cmp	r3, #2
 8007938:	d013      	beq.n	8007962 <I2C_Master_ADDR+0x228>
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	2b10      	cmp	r3, #16
 800793e:	d010      	beq.n	8007962 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e007      	b.n	8007972 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007980:	d117      	bne.n	80079b2 <I2C_Master_ADDR+0x278>
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007988:	d00b      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b01      	cmp	r3, #1
 800798e:	d008      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b08      	cmp	r3, #8
 8007994:	d005      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2b10      	cmp	r3, #16
 800799a:	d002      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d107      	bne.n	80079b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	e032      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e8:	d117      	bne.n	8007a1a <I2C_Master_ADDR+0x2e0>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079f0:	d00b      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d008      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d005      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d002      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d107      	bne.n	8007a1a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a36:	e00b      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
}
 8007a4e:	e7ff      	b.n	8007a50 <I2C_Master_ADDR+0x316>
 8007a50:	bf00      	nop
 8007a52:	3744      	adds	r7, #68	; 0x44
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02b      	beq.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d114      	bne.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b29      	cmp	r3, #41	; 0x29
 8007aa8:	d111      	bne.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2221      	movs	r2, #33	; 0x21
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2228      	movs	r2, #40	; 0x28
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff f9e7 	bl	8006e9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d011      	beq.n	8007b0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02c      	beq.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d114      	bne.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b2a      	cmp	r3, #42	; 0x2a
 8007b66:	d111      	bne.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2222      	movs	r2, #34	; 0x22
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2228      	movs	r2, #40	; 0x28
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff f992 	bl	8006eb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d012      	beq.n	8007bcc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bf2:	2b28      	cmp	r3, #40	; 0x28
 8007bf4:	d127      	bne.n	8007c46 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	089b      	lsrs	r3, r3, #2
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	81bb      	strh	r3, [r7, #12]
 8007c28:	e002      	b.n	8007c30 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c38:	89ba      	ldrh	r2, [r7, #12]
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff f940 	bl	8006ec4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c44:	e00e      	b.n	8007c64 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc8:	d172      	bne.n	8007db0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b22      	cmp	r3, #34	; 0x22
 8007cce:	d002      	beq.n	8007cd6 <I2C_Slave_STOPF+0x6a>
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd4:	d135      	bne.n	8007d42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f043 0204 	orr.w	r2, r3, #4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f92a 	bl	8005f68 <HAL_DMA_GetState>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d049      	beq.n	8007dae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	4a69      	ldr	r2, [pc, #420]	; (8007ec4 <I2C_Slave_STOPF+0x258>)
 8007d20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fd ff72 	bl	8005c10 <HAL_DMA_Abort_IT>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d03d      	beq.n	8007dae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d40:	e035      	b.n	8007dae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f043 0204 	orr.w	r2, r3, #4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe f8f4 	bl	8005f68 <HAL_DMA_GetState>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d014      	beq.n	8007db0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	; (8007ec4 <I2C_Slave_STOPF+0x258>)
 8007d8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd ff3c 	bl	8005c10 <HAL_DMA_Abort_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	e000      	b.n	8007db0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d03e      	beq.n	8007e38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d112      	bne.n	8007dee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d112      	bne.n	8007e22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f8b3 	bl	8007fac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e46:	e039      	b.n	8007ebc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4c:	d109      	bne.n	8007e62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2228      	movs	r2, #40	; 0x28
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff f827 	bl	8006eb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b28      	cmp	r3, #40	; 0x28
 8007e6c:	d111      	bne.n	8007e92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <I2C_Slave_STOPF+0x25c>)
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff f828 	bl	8006ee0 <HAL_I2C_ListenCpltCallback>
}
 8007e90:	e014      	b.n	8007ebc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	2b22      	cmp	r3, #34	; 0x22
 8007e98:	d002      	beq.n	8007ea0 <I2C_Slave_STOPF+0x234>
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b22      	cmp	r3, #34	; 0x22
 8007e9e:	d10d      	bne.n	8007ebc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fe fffa 	bl	8006eb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	08008211 	.word	0x08008211
 8007ec8:	ffff0000 	.word	0xffff0000

08007ecc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d002      	beq.n	8007eee <I2C_Slave_AF+0x22>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d129      	bne.n	8007f42 <I2C_Slave_AF+0x76>
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b28      	cmp	r3, #40	; 0x28
 8007ef2:	d126      	bne.n	8007f42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a2c      	ldr	r2, [pc, #176]	; (8007fa8 <I2C_Slave_AF+0xdc>)
 8007ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe ffd0 	bl	8006ee0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007f40:	e02e      	b.n	8007fa0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b21      	cmp	r3, #33	; 0x21
 8007f46:	d126      	bne.n	8007f96 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <I2C_Slave_AF+0xdc>)
 8007f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2221      	movs	r2, #33	; 0x21
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fe ff84 	bl	8006e9c <HAL_I2C_SlaveTxCpltCallback>
}
 8007f94:	e004      	b.n	8007fa0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f9e:	615a      	str	r2, [r3, #20]
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	ffff0000 	.word	0xffff0000

08007fac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b10      	cmp	r3, #16
 8007fc8:	d002      	beq.n	8007fd0 <I2C_ITError+0x24>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d10a      	bne.n	8007fe6 <I2C_ITError+0x3a>
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b22      	cmp	r3, #34	; 0x22
 8007fd4:	d107      	bne.n	8007fe6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fec:	2b28      	cmp	r3, #40	; 0x28
 8007fee:	d107      	bne.n	8008000 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2228      	movs	r2, #40	; 0x28
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ffe:	e015      	b.n	800802c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800e:	d00a      	beq.n	8008026 <I2C_ITError+0x7a>
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b60      	cmp	r3, #96	; 0x60
 8008014:	d007      	beq.n	8008026 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800803a:	d162      	bne.n	8008102 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800804a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d020      	beq.n	800809c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805e:	4a6a      	ldr	r2, [pc, #424]	; (8008208 <I2C_ITError+0x25c>)
 8008060:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fdd2 	bl	8005c10 <HAL_DMA_Abort_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8089 	beq.w	8008186 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008096:	4610      	mov	r0, r2
 8008098:	4798      	blx	r3
 800809a:	e074      	b.n	8008186 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	4a59      	ldr	r2, [pc, #356]	; (8008208 <I2C_ITError+0x25c>)
 80080a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd fdb1 	bl	8005c10 <HAL_DMA_Abort_IT>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d068      	beq.n	8008186 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d10b      	bne.n	80080da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	b2d2      	uxtb	r2, r2
 80080ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	e041      	b.n	8008186 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b60      	cmp	r3, #96	; 0x60
 800810c:	d125      	bne.n	800815a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d10b      	bne.n	8008142 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0201 	bic.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fe feec 	bl	8006f30 <HAL_I2C_AbortCpltCallback>
 8008158:	e015      	b.n	8008186 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d10b      	bne.n	8008180 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7fe fecb 	bl	8006f1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10e      	bne.n	80081b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d104      	bne.n	80081b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d113      	bne.n	8008200 <I2C_ITError+0x254>
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	2b28      	cmp	r3, #40	; 0x28
 80081dc:	d110      	bne.n	8008200 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <I2C_ITError+0x260>)
 80081e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fe fe70 	bl	8006ee0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08008211 	.word	0x08008211
 800820c:	ffff0000 	.word	0xffff0000

08008210 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800822a:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <I2C_DMAAbort+0x148>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	08db      	lsrs	r3, r3, #3
 8008230:	4a4a      	ldr	r2, [pc, #296]	; (800835c <I2C_DMAAbort+0x14c>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	0a1a      	lsrs	r2, r3, #8
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	00da      	lsls	r2, r3, #3
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008256:	e00a      	b.n	800826e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b01      	subs	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826c:	d0ea      	beq.n	8008244 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827a:	2200      	movs	r2, #0
 800827c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	2200      	movs	r2, #0
 800828c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2200      	movs	r2, #0
 80082a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b0:	2200      	movs	r2, #0
 80082b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	2200      	movs	r2, #0
 80082c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b60      	cmp	r3, #96	; 0x60
 80082de:	d10e      	bne.n	80082fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f7fe fe1a 	bl	8006f30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082fc:	e027      	b.n	800834e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082fe:	7cfb      	ldrb	r3, [r7, #19]
 8008300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008304:	2b28      	cmp	r3, #40	; 0x28
 8008306:	d117      	bne.n	8008338 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2228      	movs	r2, #40	; 0x28
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008336:	e007      	b.n	8008348 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f7fe fde7 	bl	8006f1c <HAL_I2C_ErrorCallback>
}
 800834e:	bf00      	nop
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200003b8 	.word	0x200003b8
 800835c:	14f8b589 	.word	0x14f8b589

08008360 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800836c:	4b13      	ldr	r3, [pc, #76]	; (80083bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	0a1a      	lsrs	r2, r3, #8
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3b01      	subs	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e008      	b.n	80083b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d0e9      	beq.n	8008382 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	200003b8 	.word	0x200003b8
 80083c0:	14f8b589 	.word	0x14f8b589

080083c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083d4:	d103      	bne.n	80083de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083dc:	e007      	b.n	80083ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083e6:	d102      	bne.n	80083ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2208      	movs	r2, #8
 80083ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e267      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d075      	beq.n	8008506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800841a:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 030c 	and.w	r3, r3, #12
 8008422:	2b04      	cmp	r3, #4
 8008424:	d00c      	beq.n	8008440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008426:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800842e:	2b08      	cmp	r3, #8
 8008430:	d112      	bne.n	8008458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008432:	4b82      	ldr	r3, [pc, #520]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800843e:	d10b      	bne.n	8008458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008440:	4b7e      	ldr	r3, [pc, #504]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d05b      	beq.n	8008504 <HAL_RCC_OscConfig+0x108>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d157      	bne.n	8008504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e242      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008460:	d106      	bne.n	8008470 <HAL_RCC_OscConfig+0x74>
 8008462:	4b76      	ldr	r3, [pc, #472]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a75      	ldr	r2, [pc, #468]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e01d      	b.n	80084ac <HAL_RCC_OscConfig+0xb0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008478:	d10c      	bne.n	8008494 <HAL_RCC_OscConfig+0x98>
 800847a:	4b70      	ldr	r3, [pc, #448]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a6f      	ldr	r2, [pc, #444]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	4b6d      	ldr	r3, [pc, #436]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a6c      	ldr	r2, [pc, #432]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800848c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	e00b      	b.n	80084ac <HAL_RCC_OscConfig+0xb0>
 8008494:	4b69      	ldr	r3, [pc, #420]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a68      	ldr	r2, [pc, #416]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800849a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	4b66      	ldr	r3, [pc, #408]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a65      	ldr	r2, [pc, #404]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80084a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d013      	beq.n	80084dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b4:	f7fd f918 	bl	80056e8 <HAL_GetTick>
 80084b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ba:	e008      	b.n	80084ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084bc:	f7fd f914 	bl	80056e8 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	2b64      	cmp	r3, #100	; 0x64
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e207      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ce:	4b5b      	ldr	r3, [pc, #364]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0f0      	beq.n	80084bc <HAL_RCC_OscConfig+0xc0>
 80084da:	e014      	b.n	8008506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7fd f904 	bl	80056e8 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084e4:	f7fd f900 	bl	80056e8 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b64      	cmp	r3, #100	; 0x64
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e1f3      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084f6:	4b51      	ldr	r3, [pc, #324]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0xe8>
 8008502:	e000      	b.n	8008506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d063      	beq.n	80085da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008512:	4b4a      	ldr	r3, [pc, #296]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 030c 	and.w	r3, r3, #12
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800851e:	4b47      	ldr	r3, [pc, #284]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008526:	2b08      	cmp	r3, #8
 8008528:	d11c      	bne.n	8008564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800852a:	4b44      	ldr	r3, [pc, #272]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d116      	bne.n	8008564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008536:	4b41      	ldr	r3, [pc, #260]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d005      	beq.n	800854e <HAL_RCC_OscConfig+0x152>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e1c7      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854e:	4b3b      	ldr	r3, [pc, #236]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4937      	ldr	r1, [pc, #220]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800855e:	4313      	orrs	r3, r2
 8008560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008562:	e03a      	b.n	80085da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d020      	beq.n	80085ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800856c:	4b34      	ldr	r3, [pc, #208]	; (8008640 <HAL_RCC_OscConfig+0x244>)
 800856e:	2201      	movs	r2, #1
 8008570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008572:	f7fd f8b9 	bl	80056e8 <HAL_GetTick>
 8008576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800857a:	f7fd f8b5 	bl	80056e8 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e1a8      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800858c:	4b2b      	ldr	r3, [pc, #172]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0f0      	beq.n	800857a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008598:	4b28      	ldr	r3, [pc, #160]	; (800863c <HAL_RCC_OscConfig+0x240>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4925      	ldr	r1, [pc, #148]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	600b      	str	r3, [r1, #0]
 80085ac:	e015      	b.n	80085da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <HAL_RCC_OscConfig+0x244>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b4:	f7fd f898 	bl	80056e8 <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085bc:	f7fd f894 	bl	80056e8 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e187      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ce:	4b1b      	ldr	r3, [pc, #108]	; (800863c <HAL_RCC_OscConfig+0x240>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f0      	bne.n	80085bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0308 	and.w	r3, r3, #8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d036      	beq.n	8008654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d016      	beq.n	800861c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <HAL_RCC_OscConfig+0x248>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f4:	f7fd f878 	bl	80056e8 <HAL_GetTick>
 80085f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085fc:	f7fd f874 	bl	80056e8 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e167      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800860e:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCC_OscConfig+0x240>)
 8008610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0f0      	beq.n	80085fc <HAL_RCC_OscConfig+0x200>
 800861a:	e01b      	b.n	8008654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <HAL_RCC_OscConfig+0x248>)
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008622:	f7fd f861 	bl	80056e8 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008628:	e00e      	b.n	8008648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800862a:	f7fd f85d 	bl	80056e8 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d907      	bls.n	8008648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e150      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
 800863c:	40023800 	.word	0x40023800
 8008640:	42470000 	.word	0x42470000
 8008644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008648:	4b88      	ldr	r3, [pc, #544]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800864a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ea      	bne.n	800862a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8097 	beq.w	8008790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008666:	4b81      	ldr	r3, [pc, #516]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10f      	bne.n	8008692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008672:	2300      	movs	r3, #0
 8008674:	60bb      	str	r3, [r7, #8]
 8008676:	4b7d      	ldr	r3, [pc, #500]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	4a7c      	ldr	r2, [pc, #496]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800867c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008680:	6413      	str	r3, [r2, #64]	; 0x40
 8008682:	4b7a      	ldr	r3, [pc, #488]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868a:	60bb      	str	r3, [r7, #8]
 800868c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800868e:	2301      	movs	r3, #1
 8008690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008692:	4b77      	ldr	r3, [pc, #476]	; (8008870 <HAL_RCC_OscConfig+0x474>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869a:	2b00      	cmp	r3, #0
 800869c:	d118      	bne.n	80086d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800869e:	4b74      	ldr	r3, [pc, #464]	; (8008870 <HAL_RCC_OscConfig+0x474>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a73      	ldr	r2, [pc, #460]	; (8008870 <HAL_RCC_OscConfig+0x474>)
 80086a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086aa:	f7fd f81d 	bl	80056e8 <HAL_GetTick>
 80086ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086b0:	e008      	b.n	80086c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086b2:	f7fd f819 	bl	80056e8 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e10c      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086c4:	4b6a      	ldr	r3, [pc, #424]	; (8008870 <HAL_RCC_OscConfig+0x474>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0f0      	beq.n	80086b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d106      	bne.n	80086e6 <HAL_RCC_OscConfig+0x2ea>
 80086d8:	4b64      	ldr	r3, [pc, #400]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086dc:	4a63      	ldr	r2, [pc, #396]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	6713      	str	r3, [r2, #112]	; 0x70
 80086e4:	e01c      	b.n	8008720 <HAL_RCC_OscConfig+0x324>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d10c      	bne.n	8008708 <HAL_RCC_OscConfig+0x30c>
 80086ee:	4b5f      	ldr	r3, [pc, #380]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f2:	4a5e      	ldr	r2, [pc, #376]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80086f4:	f043 0304 	orr.w	r3, r3, #4
 80086f8:	6713      	str	r3, [r2, #112]	; 0x70
 80086fa:	4b5c      	ldr	r3, [pc, #368]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	4a5b      	ldr	r2, [pc, #364]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	6713      	str	r3, [r2, #112]	; 0x70
 8008706:	e00b      	b.n	8008720 <HAL_RCC_OscConfig+0x324>
 8008708:	4b58      	ldr	r3, [pc, #352]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	4a57      	ldr	r2, [pc, #348]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6713      	str	r3, [r2, #112]	; 0x70
 8008714:	4b55      	ldr	r3, [pc, #340]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008718:	4a54      	ldr	r2, [pc, #336]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800871a:	f023 0304 	bic.w	r3, r3, #4
 800871e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d015      	beq.n	8008754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008728:	f7fc ffde 	bl	80056e8 <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872e:	e00a      	b.n	8008746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008730:	f7fc ffda 	bl	80056e8 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	f241 3288 	movw	r2, #5000	; 0x1388
 800873e:	4293      	cmp	r3, r2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e0cb      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008746:	4b49      	ldr	r3, [pc, #292]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0ee      	beq.n	8008730 <HAL_RCC_OscConfig+0x334>
 8008752:	e014      	b.n	800877e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008754:	f7fc ffc8 	bl	80056e8 <HAL_GetTick>
 8008758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800875a:	e00a      	b.n	8008772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800875c:	f7fc ffc4 	bl	80056e8 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	f241 3288 	movw	r2, #5000	; 0x1388
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e0b5      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008772:	4b3e      	ldr	r3, [pc, #248]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1ee      	bne.n	800875c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008784:	4b39      	ldr	r3, [pc, #228]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	4a38      	ldr	r2, [pc, #224]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800878a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800878e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80a1 	beq.w	80088dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800879a:	4b34      	ldr	r3, [pc, #208]	; (800886c <HAL_RCC_OscConfig+0x470>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 030c 	and.w	r3, r3, #12
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	d05c      	beq.n	8008860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d141      	bne.n	8008832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ae:	4b31      	ldr	r3, [pc, #196]	; (8008874 <HAL_RCC_OscConfig+0x478>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087b4:	f7fc ff98 	bl	80056e8 <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087bc:	f7fc ff94 	bl	80056e8 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e087      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ce:	4b27      	ldr	r3, [pc, #156]	; (800886c <HAL_RCC_OscConfig+0x470>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f0      	bne.n	80087bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69da      	ldr	r2, [r3, #28]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	019b      	lsls	r3, r3, #6
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	3b01      	subs	r3, #1
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	061b      	lsls	r3, r3, #24
 80087fe:	491b      	ldr	r1, [pc, #108]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008800:	4313      	orrs	r3, r2
 8008802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008804:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <HAL_RCC_OscConfig+0x478>)
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800880a:	f7fc ff6d 	bl	80056e8 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008812:	f7fc ff69 	bl	80056e8 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e05c      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <HAL_RCC_OscConfig+0x416>
 8008830:	e054      	b.n	80088dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008832:	4b10      	ldr	r3, [pc, #64]	; (8008874 <HAL_RCC_OscConfig+0x478>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008838:	f7fc ff56 	bl	80056e8 <HAL_GetTick>
 800883c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008840:	f7fc ff52 	bl	80056e8 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e045      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <HAL_RCC_OscConfig+0x470>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f0      	bne.n	8008840 <HAL_RCC_OscConfig+0x444>
 800885e:	e03d      	b.n	80088dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d107      	bne.n	8008878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e038      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
 800886c:	40023800 	.word	0x40023800
 8008870:	40007000 	.word	0x40007000
 8008874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008878:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <HAL_RCC_OscConfig+0x4ec>)
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d028      	beq.n	80088d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008890:	429a      	cmp	r2, r3
 8008892:	d121      	bne.n	80088d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800889e:	429a      	cmp	r2, r3
 80088a0:	d11a      	bne.n	80088d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088a8:	4013      	ands	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d111      	bne.n	80088d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	3b01      	subs	r3, #1
 80088c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d107      	bne.n	80088d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d001      	beq.n	80088dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40023800 	.word	0x40023800

080088ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0cc      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008900:	4b68      	ldr	r3, [pc, #416]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d90c      	bls.n	8008928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800890e:	4b65      	ldr	r3, [pc, #404]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008916:	4b63      	ldr	r3, [pc, #396]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d001      	beq.n	8008928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e0b8      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d020      	beq.n	8008976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008940:	4b59      	ldr	r3, [pc, #356]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4a58      	ldr	r2, [pc, #352]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800894a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008958:	4b53      	ldr	r3, [pc, #332]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	4a52      	ldr	r2, [pc, #328]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008964:	4b50      	ldr	r3, [pc, #320]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	494d      	ldr	r1, [pc, #308]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008972:	4313      	orrs	r3, r2
 8008974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d044      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d107      	bne.n	800899a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800898a:	4b47      	ldr	r3, [pc, #284]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d119      	bne.n	80089ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e07f      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d003      	beq.n	80089aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d107      	bne.n	80089ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089aa:	4b3f      	ldr	r3, [pc, #252]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e06f      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ba:	4b3b      	ldr	r3, [pc, #236]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e067      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089ca:	4b37      	ldr	r3, [pc, #220]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f023 0203 	bic.w	r2, r3, #3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	4934      	ldr	r1, [pc, #208]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089dc:	f7fc fe84 	bl	80056e8 <HAL_GetTick>
 80089e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e2:	e00a      	b.n	80089fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e4:	f7fc fe80 	bl	80056e8 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e04f      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089fa:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 020c 	and.w	r2, r3, #12
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d1eb      	bne.n	80089e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a0c:	4b25      	ldr	r3, [pc, #148]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d20c      	bcs.n	8008a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a22:	4b20      	ldr	r3, [pc, #128]	; (8008aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d001      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e032      	b.n	8008a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d008      	beq.n	8008a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a40:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	4916      	ldr	r1, [pc, #88]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d009      	beq.n	8008a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	490e      	ldr	r1, [pc, #56]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a72:	f000 f821 	bl	8008ab8 <HAL_RCC_GetSysClockFreq>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	490a      	ldr	r1, [pc, #40]	; (8008aac <HAL_RCC_ClockConfig+0x1c0>)
 8008a84:	5ccb      	ldrb	r3, [r1, r3]
 8008a86:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8a:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fc fde4 	bl	8005660 <HAL_InitTick>

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40023c00 	.word	0x40023c00
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	0800ba7c 	.word	0x0800ba7c
 8008ab0:	200003b8 	.word	0x200003b8
 8008ab4:	200003bc 	.word	0x200003bc

08008ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008abc:	b094      	sub	sp, #80	; 0x50
 8008abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac8:	2300      	movs	r3, #0
 8008aca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ad0:	4b79      	ldr	r3, [pc, #484]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f003 030c 	and.w	r3, r3, #12
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d00d      	beq.n	8008af8 <HAL_RCC_GetSysClockFreq+0x40>
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	f200 80e1 	bhi.w	8008ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <HAL_RCC_GetSysClockFreq+0x34>
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d003      	beq.n	8008af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aea:	e0db      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008aec:	4b73      	ldr	r3, [pc, #460]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8008aee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008af0:	e0db      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008af2:	4b73      	ldr	r3, [pc, #460]	; (8008cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008af6:	e0d8      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008af8:	4b6f      	ldr	r3, [pc, #444]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b02:	4b6d      	ldr	r3, [pc, #436]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d063      	beq.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b0e:	4b6a      	ldr	r3, [pc, #424]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	099b      	lsrs	r3, r3, #6
 8008b14:	2200      	movs	r2, #0
 8008b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b20:	633b      	str	r3, [r7, #48]	; 0x30
 8008b22:	2300      	movs	r3, #0
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
 8008b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	f04f 0000 	mov.w	r0, #0
 8008b32:	f04f 0100 	mov.w	r1, #0
 8008b36:	0159      	lsls	r1, r3, #5
 8008b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b3c:	0150      	lsls	r0, r2, #5
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4621      	mov	r1, r4
 8008b44:	1a51      	subs	r1, r2, r1
 8008b46:	6139      	str	r1, [r7, #16]
 8008b48:	4629      	mov	r1, r5
 8008b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b5c:	4659      	mov	r1, fp
 8008b5e:	018b      	lsls	r3, r1, #6
 8008b60:	4651      	mov	r1, sl
 8008b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b66:	4651      	mov	r1, sl
 8008b68:	018a      	lsls	r2, r1, #6
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8008b70:	4659      	mov	r1, fp
 8008b72:	eb63 0901 	sbc.w	r9, r3, r1
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8a:	4690      	mov	r8, r2
 8008b8c:	4699      	mov	r9, r3
 8008b8e:	4623      	mov	r3, r4
 8008b90:	eb18 0303 	adds.w	r3, r8, r3
 8008b94:	60bb      	str	r3, [r7, #8]
 8008b96:	462b      	mov	r3, r5
 8008b98:	eb49 0303 	adc.w	r3, r9, r3
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008baa:	4629      	mov	r1, r5
 8008bac:	024b      	lsls	r3, r1, #9
 8008bae:	4621      	mov	r1, r4
 8008bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	024a      	lsls	r2, r1, #9
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bc8:	f7f7 ff44 	bl	8000a54 <__aeabi_uldivmod>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd4:	e058      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bd6:	4b38      	ldr	r3, [pc, #224]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	099b      	lsrs	r3, r3, #6
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	4611      	mov	r1, r2
 8008be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008be6:	623b      	str	r3, [r7, #32]
 8008be8:	2300      	movs	r3, #0
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24
 8008bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f04f 0000 	mov.w	r0, #0
 8008bf8:	f04f 0100 	mov.w	r1, #0
 8008bfc:	0159      	lsls	r1, r3, #5
 8008bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c02:	0150      	lsls	r0, r2, #5
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4641      	mov	r1, r8
 8008c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c0e:	4649      	mov	r1, r9
 8008c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c28:	ebb2 040a 	subs.w	r4, r2, sl
 8008c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	00eb      	lsls	r3, r5, #3
 8008c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c3e:	00e2      	lsls	r2, r4, #3
 8008c40:	4614      	mov	r4, r2
 8008c42:	461d      	mov	r5, r3
 8008c44:	4643      	mov	r3, r8
 8008c46:	18e3      	adds	r3, r4, r3
 8008c48:	603b      	str	r3, [r7, #0]
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	eb45 0303 	adc.w	r3, r5, r3
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c5e:	4629      	mov	r1, r5
 8008c60:	028b      	lsls	r3, r1, #10
 8008c62:	4621      	mov	r1, r4
 8008c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c68:	4621      	mov	r1, r4
 8008c6a:	028a      	lsls	r2, r1, #10
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c72:	2200      	movs	r2, #0
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	61fa      	str	r2, [r7, #28]
 8008c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c7c:	f7f7 feea 	bl	8000a54 <__aeabi_uldivmod>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4613      	mov	r3, r2
 8008c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c88:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	3301      	adds	r3, #1
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ca2:	e002      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8008ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3750      	adds	r7, #80	; 0x50
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cb6:	bf00      	nop
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	00f42400 	.word	0x00f42400
 8008cc0:	007a1200 	.word	0x007a1200

08008cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cc8:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cca:	681b      	ldr	r3, [r3, #0]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	200003b8 	.word	0x200003b8

08008cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ce0:	f7ff fff0 	bl	8008cc4 <HAL_RCC_GetHCLKFreq>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	0a9b      	lsrs	r3, r3, #10
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	4903      	ldr	r1, [pc, #12]	; (8008d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cf2:	5ccb      	ldrb	r3, [r1, r3]
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	0800ba8c 	.word	0x0800ba8c

08008d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d08:	f7ff ffdc 	bl	8008cc4 <HAL_RCC_GetHCLKFreq>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	0b5b      	lsrs	r3, r3, #13
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	4903      	ldr	r1, [pc, #12]	; (8008d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d1a:	5ccb      	ldrb	r3, [r1, r3]
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40023800 	.word	0x40023800
 8008d28:	0800ba8c 	.word	0x0800ba8c

08008d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e041      	b.n	8008dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fc fa6a 	bl	800522c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f000 fdac 	bl	80098c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d001      	beq.n	8008de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e044      	b.n	8008e6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1e      	ldr	r2, [pc, #120]	; (8008e7c <HAL_TIM_Base_Start_IT+0xb0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d018      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x6c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0e:	d013      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x6c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a1a      	ldr	r2, [pc, #104]	; (8008e80 <HAL_TIM_Base_Start_IT+0xb4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00e      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x6c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a19      	ldr	r2, [pc, #100]	; (8008e84 <HAL_TIM_Base_Start_IT+0xb8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d009      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x6c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d004      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x6c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <HAL_TIM_Base_Start_IT+0xc0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d111      	bne.n	8008e5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b06      	cmp	r3, #6
 8008e48:	d010      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0201 	orr.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5a:	e007      	b.n	8008e6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0201 	orr.w	r2, r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40000400 	.word	0x40000400
 8008e84:	40000800 	.word	0x40000800
 8008e88:	40000c00 	.word	0x40000c00
 8008e8c:	40014000 	.word	0x40014000

08008e90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6a1a      	ldr	r2, [r3, #32]
 8008eae:	f241 1311 	movw	r3, #4369	; 0x1111
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10f      	bne.n	8008ed8 <HAL_TIM_Base_Stop_IT+0x48>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6a1a      	ldr	r2, [r3, #32]
 8008ebe:	f240 4344 	movw	r3, #1092	; 0x444
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d107      	bne.n	8008ed8 <HAL_TIM_Base_Stop_IT+0x48>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e041      	b.n	8008f84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fc f91b 	bl	8005150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f000 fccb 	bl	80098c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <HAL_TIM_PWM_Start+0x24>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	bf14      	ite	ne
 8008fa8:	2301      	movne	r3, #1
 8008faa:	2300      	moveq	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	e022      	b.n	8008ff6 <HAL_TIM_PWM_Start+0x6a>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d109      	bne.n	8008fca <HAL_TIM_PWM_Start+0x3e>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	bf14      	ite	ne
 8008fc2:	2301      	movne	r3, #1
 8008fc4:	2300      	moveq	r3, #0
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	e015      	b.n	8008ff6 <HAL_TIM_PWM_Start+0x6a>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d109      	bne.n	8008fe4 <HAL_TIM_PWM_Start+0x58>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	bf14      	ite	ne
 8008fdc:	2301      	movne	r3, #1
 8008fde:	2300      	moveq	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	e008      	b.n	8008ff6 <HAL_TIM_PWM_Start+0x6a>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	bf14      	ite	ne
 8008ff0:	2301      	movne	r3, #1
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e068      	b.n	80090d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <HAL_TIM_PWM_Start+0x82>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800900c:	e013      	b.n	8009036 <HAL_TIM_PWM_Start+0xaa>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b04      	cmp	r3, #4
 8009012:	d104      	bne.n	800901e <HAL_TIM_PWM_Start+0x92>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800901c:	e00b      	b.n	8009036 <HAL_TIM_PWM_Start+0xaa>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b08      	cmp	r3, #8
 8009022:	d104      	bne.n	800902e <HAL_TIM_PWM_Start+0xa2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800902c:	e003      	b.n	8009036 <HAL_TIM_PWM_Start+0xaa>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2201      	movs	r2, #1
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fee8 	bl	8009e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a23      	ldr	r2, [pc, #140]	; (80090d8 <HAL_TIM_PWM_Start+0x14c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d107      	bne.n	800905e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800905c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <HAL_TIM_PWM_Start+0x14c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d018      	beq.n	800909a <HAL_TIM_PWM_Start+0x10e>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009070:	d013      	beq.n	800909a <HAL_TIM_PWM_Start+0x10e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a19      	ldr	r2, [pc, #100]	; (80090dc <HAL_TIM_PWM_Start+0x150>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00e      	beq.n	800909a <HAL_TIM_PWM_Start+0x10e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <HAL_TIM_PWM_Start+0x154>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d009      	beq.n	800909a <HAL_TIM_PWM_Start+0x10e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <HAL_TIM_PWM_Start+0x158>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d004      	beq.n	800909a <HAL_TIM_PWM_Start+0x10e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <HAL_TIM_PWM_Start+0x15c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d111      	bne.n	80090be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b06      	cmp	r3, #6
 80090aa:	d010      	beq.n	80090ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0201 	orr.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090bc:	e007      	b.n	80090ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40010000 	.word	0x40010000
 80090dc:	40000400 	.word	0x40000400
 80090e0:	40000800 	.word	0x40000800
 80090e4:	40000c00 	.word	0x40000c00
 80090e8:	40014000 	.word	0x40014000

080090ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e097      	b.n	8009230 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7fc f843 	bl	80051a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2202      	movs	r2, #2
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009130:	f023 0307 	bic.w	r3, r3, #7
 8009134:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3304      	adds	r3, #4
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 fbc1 	bl	80098c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	021b      	lsls	r3, r3, #8
 800917e:	4313      	orrs	r3, r2
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800918c:	f023 030c 	bic.w	r3, r3, #12
 8009190:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800919c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	4313      	orrs	r3, r2
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	011a      	lsls	r2, r3, #4
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	031b      	lsls	r3, r3, #12
 80091bc:	4313      	orrs	r3, r2
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80091ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80091d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	4313      	orrs	r3, r2
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009248:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009250:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009258:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009260:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d110      	bne.n	800928a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d102      	bne.n	8009274 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800926e:	7b7b      	ldrb	r3, [r7, #13]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d001      	beq.n	8009278 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e069      	b.n	800934c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009288:	e031      	b.n	80092ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b04      	cmp	r3, #4
 800928e:	d110      	bne.n	80092b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d102      	bne.n	800929c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009296:	7b3b      	ldrb	r3, [r7, #12]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d001      	beq.n	80092a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e055      	b.n	800934c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b0:	e01d      	b.n	80092ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d108      	bne.n	80092ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d105      	bne.n	80092ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092be:	7b7b      	ldrb	r3, [r7, #13]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d102      	bne.n	80092ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092c4:	7b3b      	ldrb	r3, [r7, #12]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e03e      	b.n	800934c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_TIM_Encoder_Start+0xc4>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d008      	beq.n	800930c <HAL_TIM_Encoder_Start+0xd4>
 80092fa:	e00f      	b.n	800931c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2201      	movs	r2, #1
 8009302:	2100      	movs	r1, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fd85 	bl	8009e14 <TIM_CCxChannelCmd>
      break;
 800930a:	e016      	b.n	800933a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2201      	movs	r2, #1
 8009312:	2104      	movs	r1, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fd7d 	bl	8009e14 <TIM_CCxChannelCmd>
      break;
 800931a:	e00e      	b.n	800933a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2201      	movs	r2, #1
 8009322:	2100      	movs	r1, #0
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fd75 	bl	8009e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2201      	movs	r2, #1
 8009330:	2104      	movs	r1, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fd6e 	bl	8009e14 <TIM_CCxChannelCmd>
      break;
 8009338:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f042 0201 	orr.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b02      	cmp	r3, #2
 8009368:	d122      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b02      	cmp	r3, #2
 8009376:	d11b      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0202 	mvn.w	r2, #2
 8009380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa77 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 800939c:	e005      	b.n	80093aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fa69 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa7a 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d122      	bne.n	8009404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d11b      	bne.n	8009404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0204 	mvn.w	r2, #4
 80093d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa4d 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 80093f0:	e005      	b.n	80093fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa3f 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fa50 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b08      	cmp	r3, #8
 8009410:	d122      	bne.n	8009458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0308 	and.w	r3, r3, #8
 800941c:	2b08      	cmp	r3, #8
 800941e:	d11b      	bne.n	8009458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0208 	mvn.w	r2, #8
 8009428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa23 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 8009444:	e005      	b.n	8009452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa15 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa26 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b10      	cmp	r3, #16
 8009464:	d122      	bne.n	80094ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b10      	cmp	r3, #16
 8009472:	d11b      	bne.n	80094ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0210 	mvn.w	r2, #16
 800947c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2208      	movs	r2, #8
 8009482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f9f9 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 8009498:	e005      	b.n	80094a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f9eb 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9fc 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10e      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0201 	mvn.w	r2, #1
 80094d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fb fcf2 	bl	8004ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b80      	cmp	r3, #128	; 0x80
 80094e4:	d10e      	bne.n	8009504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f0:	2b80      	cmp	r3, #128	; 0x80
 80094f2:	d107      	bne.n	8009504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fd78 	bl	8009ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d10e      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b40      	cmp	r3, #64	; 0x40
 800951e:	d107      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9c1 	bl	80098b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d10e      	bne.n	800955c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d107      	bne.n	800955c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0220 	mvn.w	r2, #32
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fd42 	bl	8009fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800957a:	2b01      	cmp	r3, #1
 800957c:	d101      	bne.n	8009582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800957e:	2302      	movs	r3, #2
 8009580:	e0ae      	b.n	80096e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b0c      	cmp	r3, #12
 800958e:	f200 809f 	bhi.w	80096d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009592:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	080095cd 	.word	0x080095cd
 800959c:	080096d1 	.word	0x080096d1
 80095a0:	080096d1 	.word	0x080096d1
 80095a4:	080096d1 	.word	0x080096d1
 80095a8:	0800960d 	.word	0x0800960d
 80095ac:	080096d1 	.word	0x080096d1
 80095b0:	080096d1 	.word	0x080096d1
 80095b4:	080096d1 	.word	0x080096d1
 80095b8:	0800964f 	.word	0x0800964f
 80095bc:	080096d1 	.word	0x080096d1
 80095c0:	080096d1 	.word	0x080096d1
 80095c4:	080096d1 	.word	0x080096d1
 80095c8:	0800968f 	.word	0x0800968f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f9f8 	bl	80099c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0208 	orr.w	r2, r2, #8
 80095e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0204 	bic.w	r2, r2, #4
 80095f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6999      	ldr	r1, [r3, #24]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	691a      	ldr	r2, [r3, #16]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	619a      	str	r2, [r3, #24]
      break;
 800960a:	e064      	b.n	80096d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fa3e 	bl	8009a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6999      	ldr	r1, [r3, #24]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	021a      	lsls	r2, r3, #8
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	619a      	str	r2, [r3, #24]
      break;
 800964c:	e043      	b.n	80096d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fa89 	bl	8009b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0208 	orr.w	r2, r2, #8
 8009668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0204 	bic.w	r2, r2, #4
 8009678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69d9      	ldr	r1, [r3, #28]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	61da      	str	r2, [r3, #28]
      break;
 800968c:	e023      	b.n	80096d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fad3 	bl	8009c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69d9      	ldr	r1, [r3, #28]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	021a      	lsls	r2, r3, #8
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	61da      	str	r2, [r3, #28]
      break;
 80096ce:	e002      	b.n	80096d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
      break;
 80096d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_TIM_ConfigClockSource+0x1c>
 8009700:	2302      	movs	r3, #2
 8009702:	e0b4      	b.n	800986e <HAL_TIM_ConfigClockSource+0x186>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800972a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973c:	d03e      	beq.n	80097bc <HAL_TIM_ConfigClockSource+0xd4>
 800973e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009742:	f200 8087 	bhi.w	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 8009746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974a:	f000 8086 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x172>
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009752:	d87f      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 8009754:	2b70      	cmp	r3, #112	; 0x70
 8009756:	d01a      	beq.n	800978e <HAL_TIM_ConfigClockSource+0xa6>
 8009758:	2b70      	cmp	r3, #112	; 0x70
 800975a:	d87b      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 800975c:	2b60      	cmp	r3, #96	; 0x60
 800975e:	d050      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x11a>
 8009760:	2b60      	cmp	r3, #96	; 0x60
 8009762:	d877      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 8009764:	2b50      	cmp	r3, #80	; 0x50
 8009766:	d03c      	beq.n	80097e2 <HAL_TIM_ConfigClockSource+0xfa>
 8009768:	2b50      	cmp	r3, #80	; 0x50
 800976a:	d873      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 800976c:	2b40      	cmp	r3, #64	; 0x40
 800976e:	d058      	beq.n	8009822 <HAL_TIM_ConfigClockSource+0x13a>
 8009770:	2b40      	cmp	r3, #64	; 0x40
 8009772:	d86f      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 8009774:	2b30      	cmp	r3, #48	; 0x30
 8009776:	d064      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x15a>
 8009778:	2b30      	cmp	r3, #48	; 0x30
 800977a:	d86b      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 800977c:	2b20      	cmp	r3, #32
 800977e:	d060      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x15a>
 8009780:	2b20      	cmp	r3, #32
 8009782:	d867      	bhi.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d05c      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x15a>
 8009788:	2b10      	cmp	r3, #16
 800978a:	d05a      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x15a>
 800978c:	e062      	b.n	8009854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6899      	ldr	r1, [r3, #8]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f000 fb19 	bl	8009dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	609a      	str	r2, [r3, #8]
      break;
 80097ba:	e04f      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6899      	ldr	r1, [r3, #8]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f000 fb02 	bl	8009dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689a      	ldr	r2, [r3, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097de:	609a      	str	r2, [r3, #8]
      break;
 80097e0:	e03c      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	6859      	ldr	r1, [r3, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f000 fa76 	bl	8009ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2150      	movs	r1, #80	; 0x50
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 facf 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 8009800:	e02c      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6859      	ldr	r1, [r3, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	461a      	mov	r2, r3
 8009810:	f000 fa95 	bl	8009d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2160      	movs	r1, #96	; 0x60
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fabf 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 8009820:	e01c      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6859      	ldr	r1, [r3, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	461a      	mov	r2, r3
 8009830:	f000 fa56 	bl	8009ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2140      	movs	r1, #64	; 0x40
 800983a:	4618      	mov	r0, r3
 800983c:	f000 faaf 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 8009840:	e00c      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4619      	mov	r1, r3
 800984c:	4610      	mov	r0, r2
 800984e:	f000 faa6 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 8009852:	e003      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
      break;
 8009858:	e000      	b.n	800985c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800985a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
	...

080098c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a34      	ldr	r2, [pc, #208]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00f      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e6:	d00b      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a31      	ldr	r2, [pc, #196]	; (80099b0 <TIM_Base_SetConfig+0xe8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d007      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a30      	ldr	r2, [pc, #192]	; (80099b4 <TIM_Base_SetConfig+0xec>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a2f      	ldr	r2, [pc, #188]	; (80099b8 <TIM_Base_SetConfig+0xf0>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d108      	bne.n	8009912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a25      	ldr	r2, [pc, #148]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01b      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009920:	d017      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <TIM_Base_SetConfig+0xe8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <TIM_Base_SetConfig+0xec>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00f      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <TIM_Base_SetConfig+0xf0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <TIM_Base_SetConfig+0xf4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <TIM_Base_SetConfig+0xf8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <TIM_Base_SetConfig+0xfc>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d108      	bne.n	8009964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a08      	ldr	r2, [pc, #32]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d103      	bne.n	8009998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	691a      	ldr	r2, [r3, #16]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	615a      	str	r2, [r3, #20]
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000
 80099c0:	40014400 	.word	0x40014400
 80099c4:	40014800 	.word	0x40014800

080099c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f023 0201 	bic.w	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0303 	bic.w	r3, r3, #3
 80099fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f023 0302 	bic.w	r3, r3, #2
 8009a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a1c      	ldr	r2, [pc, #112]	; (8009a90 <TIM_OC1_SetConfig+0xc8>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d10c      	bne.n	8009a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f023 0308 	bic.w	r3, r3, #8
 8009a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f023 0304 	bic.w	r3, r3, #4
 8009a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a13      	ldr	r2, [pc, #76]	; (8009a90 <TIM_OC1_SetConfig+0xc8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d111      	bne.n	8009a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	621a      	str	r2, [r3, #32]
}
 8009a84:	bf00      	nop
 8009a86:	371c      	adds	r7, #28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	40010000 	.word	0x40010000

08009a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0210 	bic.w	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0320 	bic.w	r3, r3, #32
 8009ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <TIM_OC2_SetConfig+0xd4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d10d      	bne.n	8009b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <TIM_OC2_SetConfig+0xd4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d113      	bne.n	8009b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000

08009b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a1d      	ldr	r2, [pc, #116]	; (8009c3c <TIM_OC3_SetConfig+0xd0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d10d      	bne.n	8009be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a14      	ldr	r2, [pc, #80]	; (8009c3c <TIM_OC3_SetConfig+0xd0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d113      	bne.n	8009c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	621a      	str	r2, [r3, #32]
}
 8009c30:	bf00      	nop
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	40010000 	.word	0x40010000

08009c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	031b      	lsls	r3, r3, #12
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a10      	ldr	r2, [pc, #64]	; (8009cdc <TIM_OC4_SetConfig+0x9c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d109      	bne.n	8009cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	019b      	lsls	r3, r3, #6
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	621a      	str	r2, [r3, #32]
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000

08009ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	f023 0201 	bic.w	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f023 030a 	bic.w	r3, r3, #10
 8009d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	621a      	str	r2, [r3, #32]
}
 8009d32:	bf00      	nop
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b087      	sub	sp, #28
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	f023 0210 	bic.w	r2, r3, #16
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	f043 0307 	orr.w	r3, r3, #7
 8009dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	609a      	str	r2, [r3, #8]
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	021a      	lsls	r2, r3, #8
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	609a      	str	r2, [r3, #8]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f003 031f 	and.w	r3, r3, #31
 8009e26:	2201      	movs	r2, #1
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1a      	ldr	r2, [r3, #32]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	43db      	mvns	r3, r3
 8009e36:	401a      	ands	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1a      	ldr	r2, [r3, #32]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e050      	b.n	8009f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1c      	ldr	r2, [pc, #112]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d018      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec4:	d013      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00e      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d009      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d004      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a13      	ldr	r2, [pc, #76]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d10c      	bne.n	8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	40010000 	.word	0x40010000
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40014000 	.word	0x40014000

08009f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e03d      	b.n	8009fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e03f      	b.n	800a09a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7fb f97c 	bl	800532c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2224      	movs	r2, #36	; 0x24
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a04a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 ff81 	bl	800af54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695a      	ldr	r2, [r3, #20]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	; 0x30
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d165      	bne.n	800a18a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <HAL_UART_Transmit_DMA+0x26>
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e05e      	b.n	800a18c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_UART_Transmit_DMA+0x38>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e057      	b.n	800a18c <HAL_UART_Transmit_DMA+0xe8>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	88fa      	ldrh	r2, [r7, #6]
 800a0ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2221      	movs	r2, #33	; 0x21
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	4a22      	ldr	r2, [pc, #136]	; (800a194 <HAL_UART_Transmit_DMA+0xf0>)
 800a10a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a110:	4a21      	ldr	r2, [pc, #132]	; (800a198 <HAL_UART_Transmit_DMA+0xf4>)
 800a112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	4a20      	ldr	r2, [pc, #128]	; (800a19c <HAL_UART_Transmit_DMA+0xf8>)
 800a11a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	2200      	movs	r2, #0
 800a122:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	6819      	ldr	r1, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3304      	adds	r3, #4
 800a138:	461a      	mov	r2, r3
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	f7fb fca0 	bl	8005a80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a148:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	617b      	str	r3, [r7, #20]
   return(result);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a168:	62bb      	str	r3, [r7, #40]	; 0x28
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3314      	adds	r3, #20
 800a170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a172:	627a      	str	r2, [r7, #36]	; 0x24
 800a174:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6a39      	ldr	r1, [r7, #32]
 800a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	e000      	b.n	800a18c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a18a:	2302      	movs	r3, #2
  }
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3730      	adds	r7, #48	; 0x30
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	0800a7ed 	.word	0x0800a7ed
 800a198:	0800a887 	.word	0x0800a887
 800a19c:	0800a9ff 	.word	0x0800a9ff

0800a1a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08c      	sub	sp, #48	; 0x30
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d152      	bne.n	800a260 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e04b      	b.n	800a262 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e044      	b.n	800a262 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fc51 	bl	800aa94 <UART_Start_Receive_DMA>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d12c      	bne.n	800a25a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a204:	2b01      	cmp	r3, #1
 800a206:	d125      	bne.n	800a254 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a208:	2300      	movs	r3, #0
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	330c      	adds	r3, #12
 800a224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	617b      	str	r3, [r7, #20]
   return(result);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f043 0310 	orr.w	r3, r3, #16
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	330c      	adds	r3, #12
 800a23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a23e:	627a      	str	r2, [r7, #36]	; 0x24
 800a240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6a39      	ldr	r1, [r7, #32]
 800a244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e5      	bne.n	800a21e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a252:	e002      	b.n	800a25a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a25a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a25e:	e000      	b.n	800a262 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a260:	2302      	movs	r3, #2
  }
}
 800a262:	4618      	mov	r0, r3
 800a264:	3730      	adds	r7, #48	; 0x30
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b0ba      	sub	sp, #232	; 0xe8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a292:	2300      	movs	r3, #0
 800a294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a298:	2300      	movs	r3, #0
 800a29a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a2aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10f      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d009      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x66>
 800a2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fd87 	bl	800adde <UART_Receive_IT>
      return;
 800a2d0:	e256      	b.n	800a780 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 80de 	beq.w	800a498 <HAL_UART_IRQHandler+0x22c>
 800a2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80d1 	beq.w	800a498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <HAL_UART_IRQHandler+0xae>
 800a302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	f043 0201 	orr.w	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <HAL_UART_IRQHandler+0xd2>
 800a326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f043 0202 	orr.w	r2, r3, #2
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <HAL_UART_IRQHandler+0xf6>
 800a34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d011      	beq.n	800a392 <HAL_UART_IRQHandler+0x126>
 800a36e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	f043 0208 	orr.w	r2, r3, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 81ed 	beq.w	800a776 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a0:	f003 0320 	and.w	r3, r3, #32
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <HAL_UART_IRQHandler+0x14e>
 800a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ac:	f003 0320 	and.w	r3, r3, #32
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fd12 	bl	800adde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c4:	2b40      	cmp	r3, #64	; 0x40
 800a3c6:	bf0c      	ite	eq
 800a3c8:	2301      	moveq	r3, #1
 800a3ca:	2300      	movne	r3, #0
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	f003 0308 	and.w	r3, r3, #8
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d103      	bne.n	800a3e6 <HAL_UART_IRQHandler+0x17a>
 800a3de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d04f      	beq.n	800a486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fc1a 	bl	800ac20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d141      	bne.n	800a47e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3314      	adds	r3, #20
 800a400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3314      	adds	r3, #20
 800a422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a42a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a43e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1d9      	bne.n	800a3fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d013      	beq.n	800a476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	4a7d      	ldr	r2, [pc, #500]	; (800a648 <HAL_UART_IRQHandler+0x3dc>)
 800a454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fb fbd8 	bl	8005c10 <HAL_DMA_Abort_IT>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d016      	beq.n	800a494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a470:	4610      	mov	r0, r2
 800a472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a474:	e00e      	b.n	800a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f9ae 	bl	800a7d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a47c:	e00a      	b.n	800a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f9aa 	bl	800a7d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a484:	e006      	b.n	800a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f9a6 	bl	800a7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a492:	e170      	b.n	800a776 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a494:	bf00      	nop
    return;
 800a496:	e16e      	b.n	800a776 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	f040 814a 	bne.w	800a736 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4a6:	f003 0310 	and.w	r3, r3, #16
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 8143 	beq.w	800a736 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 813c 	beq.w	800a736 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60bb      	str	r3, [r7, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60bb      	str	r3, [r7, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	60bb      	str	r3, [r7, #8]
 800a4d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4de:	2b40      	cmp	r3, #64	; 0x40
 800a4e0:	f040 80b4 	bne.w	800a64c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8140 	beq.w	800a77a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a502:	429a      	cmp	r2, r3
 800a504:	f080 8139 	bcs.w	800a77a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a50e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51a:	f000 8088 	beq.w	800a62e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	330c      	adds	r3, #12
 800a524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a53c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a54a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a54e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1d9      	bne.n	800a51e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3314      	adds	r3, #20
 800a570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a57a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3314      	adds	r3, #20
 800a58a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a58e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e1      	bne.n	800a56a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3314      	adds	r3, #20
 800a5ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3314      	adds	r3, #20
 800a5c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e3      	bne.n	800a5a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5fe:	f023 0310 	bic.w	r3, r3, #16
 800a602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	330c      	adds	r3, #12
 800a60c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a610:	65ba      	str	r2, [r7, #88]	; 0x58
 800a612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e3      	bne.n	800a5ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fb fa81 	bl	8005b30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a636:	b29b      	uxth	r3, r3
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7f9 fbe0 	bl	8003e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a644:	e099      	b.n	800a77a <HAL_UART_IRQHandler+0x50e>
 800a646:	bf00      	nop
 800a648:	0800ace7 	.word	0x0800ace7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a654:	b29b      	uxth	r3, r3
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a660:	b29b      	uxth	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 808b 	beq.w	800a77e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 8086 	beq.w	800a77e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	330c      	adds	r3, #12
 800a678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a696:	647a      	str	r2, [r7, #68]	; 0x44
 800a698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a69c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e3      	bne.n	800a672 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3314      	adds	r3, #20
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6ce:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e3      	bne.n	800a6aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 0310 	bic.w	r3, r3, #16
 800a706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	330c      	adds	r3, #12
 800a710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a714:	61fa      	str	r2, [r7, #28]
 800a716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	69b9      	ldr	r1, [r7, #24]
 800a71a:	69fa      	ldr	r2, [r7, #28]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	617b      	str	r3, [r7, #20]
   return(result);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e3      	bne.n	800a6f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f9 fb68 	bl	8003e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a734:	e023      	b.n	800a77e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <HAL_UART_IRQHandler+0x4ea>
 800a742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fadd 	bl	800ad0e <UART_Transmit_IT>
    return;
 800a754:	e014      	b.n	800a780 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00e      	beq.n	800a780 <HAL_UART_IRQHandler+0x514>
 800a762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb1d 	bl	800adae <UART_EndTransmit_IT>
    return;
 800a774:	e004      	b.n	800a780 <HAL_UART_IRQHandler+0x514>
    return;
 800a776:	bf00      	nop
 800a778:	e002      	b.n	800a780 <HAL_UART_IRQHandler+0x514>
      return;
 800a77a:	bf00      	nop
 800a77c:	e000      	b.n	800a780 <HAL_UART_IRQHandler+0x514>
      return;
 800a77e:	bf00      	nop
  }
}
 800a780:	37e8      	adds	r7, #232	; 0xe8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop

0800a788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b090      	sub	sp, #64	; 0x40
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a804:	2b00      	cmp	r3, #0
 800a806:	d137      	bne.n	800a878 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80a:	2200      	movs	r2, #0
 800a80c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3314      	adds	r3, #20
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	623b      	str	r3, [r7, #32]
   return(result);
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
 800a826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3314      	adds	r3, #20
 800a82c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82e:	633a      	str	r2, [r7, #48]	; 0x30
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	330c      	adds	r3, #12
 800a848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	60fb      	str	r3, [r7, #12]
   return(result);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
 800a85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	330c      	adds	r3, #12
 800a860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a862:	61fa      	str	r2, [r7, #28]
 800a864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	69b9      	ldr	r1, [r7, #24]
 800a868:	69fa      	ldr	r2, [r7, #28]
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	617b      	str	r3, [r7, #20]
   return(result);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e5      	bne.n	800a842 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a876:	e002      	b.n	800a87e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a87a:	f7ff ff85 	bl	800a788 <HAL_UART_TxCpltCallback>
}
 800a87e:	bf00      	nop
 800a880:	3740      	adds	r7, #64	; 0x40
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff ff81 	bl	800a79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b09c      	sub	sp, #112	; 0x70
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d172      	bne.n	800a9a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	330c      	adds	r3, #12
 800a8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8da:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3314      	adds	r3, #20
 800a8fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	667b      	str	r3, [r7, #100]	; 0x64
 800a910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3314      	adds	r3, #20
 800a916:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a918:	647a      	str	r2, [r7, #68]	; 0x44
 800a91a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a91e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e5      	bne.n	800a8f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3314      	adds	r3, #20
 800a932:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	e853 3f00 	ldrex	r3, [r3]
 800a93a:	623b      	str	r3, [r7, #32]
   return(result);
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a942:	663b      	str	r3, [r7, #96]	; 0x60
 800a944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3314      	adds	r3, #20
 800a94a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a94c:	633a      	str	r2, [r7, #48]	; 0x30
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a954:	e841 2300 	strex	r3, r2, [r1]
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e5      	bne.n	800a92c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a962:	2220      	movs	r2, #32
 800a964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d119      	bne.n	800a9a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	330c      	adds	r3, #12
 800a976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0310 	bic.w	r3, r3, #16
 800a986:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a990:	61fa      	str	r2, [r7, #28]
 800a992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	69b9      	ldr	r1, [r7, #24]
 800a996:	69fa      	ldr	r2, [r7, #28]
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	617b      	str	r3, [r7, #20]
   return(result);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e5      	bne.n	800a970 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d106      	bne.n	800a9ba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9b4:	f7f9 fa26 	bl	8003e04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9b8:	e002      	b.n	800a9c0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a9ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9bc:	f7ff fef8 	bl	800a7b0 <HAL_UART_RxCpltCallback>
}
 800a9c0:	bf00      	nop
 800a9c2:	3770      	adds	r7, #112	; 0x70
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d108      	bne.n	800a9f0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9e2:	085b      	lsrs	r3, r3, #1
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7f9 fa0b 	bl	8003e04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9ee:	e002      	b.n	800a9f6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f7ff fee7 	bl	800a7c4 <HAL_UART_RxHalfCpltCallback>
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1a:	2b80      	cmp	r3, #128	; 0x80
 800aa1c:	bf0c      	ite	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	2300      	movne	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b21      	cmp	r3, #33	; 0x21
 800aa30:	d108      	bne.n	800aa44 <UART_DMAError+0x46>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f000 f8c6 	bl	800abd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	bf0c      	ite	eq
 800aa52:	2301      	moveq	r3, #1
 800aa54:	2300      	movne	r3, #0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b22      	cmp	r3, #34	; 0x22
 800aa64:	d108      	bne.n	800aa78 <UART_DMAError+0x7a>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	f000 f8d4 	bl	800ac20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7c:	f043 0210 	orr.w	r2, r3, #16
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa84:	68b8      	ldr	r0, [r7, #8]
 800aa86:	f7ff fea7 	bl	800a7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b098      	sub	sp, #96	; 0x60
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2222      	movs	r2, #34	; 0x22
 800aab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	4a40      	ldr	r2, [pc, #256]	; (800abc4 <UART_Start_Receive_DMA+0x130>)
 800aac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	4a3f      	ldr	r2, [pc, #252]	; (800abc8 <UART_Start_Receive_DMA+0x134>)
 800aaca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	4a3e      	ldr	r2, [pc, #248]	; (800abcc <UART_Start_Receive_DMA+0x138>)
 800aad2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	2200      	movs	r2, #0
 800aada:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4619      	mov	r1, r3
 800aaee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	88fb      	ldrh	r3, [r7, #6]
 800aaf4:	f7fa ffc4 	bl	8005a80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aaf8:	2300      	movs	r3, #0
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	613b      	str	r3, [r7, #16]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	613b      	str	r3, [r7, #16]
 800ab0c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d019      	beq.n	800ab52 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	330c      	adds	r3, #12
 800ab24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab34:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ab40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e5      	bne.n	800ab1e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3314      	adds	r3, #20
 800ab58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	f043 0301 	orr.w	r3, r3, #1
 800ab68:	657b      	str	r3, [r7, #84]	; 0x54
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3314      	adds	r3, #20
 800ab70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab72:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e5      	bne.n	800ab52 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3314      	adds	r3, #20
 800ab8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	617b      	str	r3, [r7, #20]
   return(result);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9c:	653b      	str	r3, [r7, #80]	; 0x50
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3314      	adds	r3, #20
 800aba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aba6:	627a      	str	r2, [r7, #36]	; 0x24
 800aba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	6a39      	ldr	r1, [r7, #32]
 800abac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abae:	e841 2300 	strex	r3, r2, [r1]
 800abb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1e5      	bne.n	800ab86 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3760      	adds	r7, #96	; 0x60
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	0800a8a3 	.word	0x0800a8a3
 800abc8:	0800a9c9 	.word	0x0800a9c9
 800abcc:	0800a9ff 	.word	0x0800a9ff

0800abd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b089      	sub	sp, #36	; 0x24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	330c      	adds	r3, #12
 800abde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abee:	61fb      	str	r3, [r7, #28]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	330c      	adds	r3, #12
 800abf6:	69fa      	ldr	r2, [r7, #28]
 800abf8:	61ba      	str	r2, [r7, #24]
 800abfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6979      	ldr	r1, [r7, #20]
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	613b      	str	r3, [r7, #16]
   return(result);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e5      	bne.n	800abd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ac14:	bf00      	nop
 800ac16:	3724      	adds	r7, #36	; 0x24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b095      	sub	sp, #84	; 0x54
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	330c      	adds	r3, #12
 800ac46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac48:	643a      	str	r2, [r7, #64]	; 0x40
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac50:	e841 2300 	strex	r3, r2, [r1]
 800ac54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e5      	bne.n	800ac28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3314      	adds	r3, #20
 800ac62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	e853 3f00 	ldrex	r3, [r3]
 800ac6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	f023 0301 	bic.w	r3, r3, #1
 800ac72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3314      	adds	r3, #20
 800ac7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac84:	e841 2300 	strex	r3, r2, [r1]
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e5      	bne.n	800ac5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d119      	bne.n	800accc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	e853 3f00 	ldrex	r3, [r3]
 800aca6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f023 0310 	bic.w	r3, r3, #16
 800acae:	647b      	str	r3, [r7, #68]	; 0x44
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	330c      	adds	r3, #12
 800acb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acb8:	61ba      	str	r2, [r7, #24]
 800acba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbc:	6979      	ldr	r1, [r7, #20]
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	e841 2300 	strex	r3, r2, [r1]
 800acc4:	613b      	str	r3, [r7, #16]
   return(result);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e5      	bne.n	800ac98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acda:	bf00      	nop
 800acdc:	3754      	adds	r7, #84	; 0x54
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fd69 	bl	800a7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b21      	cmp	r3, #33	; 0x21
 800ad20:	d13e      	bne.n	800ada0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2a:	d114      	bne.n	800ad56 <UART_Transmit_IT+0x48>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d110      	bne.n	800ad56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	1c9a      	adds	r2, r3, #2
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	621a      	str	r2, [r3, #32]
 800ad54:	e008      	b.n	800ad68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	1c59      	adds	r1, r3, #1
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6211      	str	r1, [r2, #32]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4619      	mov	r1, r3
 800ad76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10f      	bne.n	800ad9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e000      	b.n	800ada2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ada0:	2302      	movs	r3, #2
  }
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2220      	movs	r2, #32
 800adca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff fcda 	bl	800a788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b08c      	sub	sp, #48	; 0x30
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b22      	cmp	r3, #34	; 0x22
 800adf0:	f040 80ab 	bne.w	800af4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adfc:	d117      	bne.n	800ae2e <UART_Receive_IT+0x50>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d113      	bne.n	800ae2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	1c9a      	adds	r2, r3, #2
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	629a      	str	r2, [r3, #40]	; 0x28
 800ae2c:	e026      	b.n	800ae7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae34:	2300      	movs	r3, #0
 800ae36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae40:	d007      	beq.n	800ae52 <UART_Receive_IT+0x74>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <UART_Receive_IT+0x82>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e008      	b.n	800ae72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d15a      	bne.n	800af46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0220 	bic.w	r2, r2, #32
 800ae9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	695a      	ldr	r2, [r3, #20]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0201 	bic.w	r2, r2, #1
 800aebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d135      	bne.n	800af3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	330c      	adds	r3, #12
 800aedc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	613b      	str	r3, [r7, #16]
   return(result);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	f023 0310 	bic.w	r3, r3, #16
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	330c      	adds	r3, #12
 800aef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef6:	623a      	str	r2, [r7, #32]
 800aef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	69f9      	ldr	r1, [r7, #28]
 800aefc:	6a3a      	ldr	r2, [r7, #32]
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	61bb      	str	r3, [r7, #24]
   return(result);
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e5      	bne.n	800aed6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0310 	and.w	r3, r3, #16
 800af14:	2b10      	cmp	r3, #16
 800af16:	d10a      	bne.n	800af2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7f8 ff65 	bl	8003e04 <HAL_UARTEx_RxEventCallback>
 800af3a:	e002      	b.n	800af42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fc37 	bl	800a7b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	e002      	b.n	800af4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	e000      	b.n	800af4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af4a:	2302      	movs	r3, #2
  }
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3730      	adds	r7, #48	; 0x30
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af58:	b0c0      	sub	sp, #256	; 0x100
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af70:	68d9      	ldr	r1, [r3, #12]
 800af72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	ea40 0301 	orr.w	r3, r0, r1
 800af7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	431a      	orrs	r2, r3
 800af8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	431a      	orrs	r2, r3
 800af94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afac:	f021 010c 	bic.w	r1, r1, #12
 800afb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afba:	430b      	orrs	r3, r1
 800afbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afce:	6999      	ldr	r1, [r3, #24]
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	ea40 0301 	orr.w	r3, r0, r1
 800afda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	4b8f      	ldr	r3, [pc, #572]	; (800b220 <UART_SetConfig+0x2cc>)
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d005      	beq.n	800aff4 <UART_SetConfig+0xa0>
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b8d      	ldr	r3, [pc, #564]	; (800b224 <UART_SetConfig+0x2d0>)
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d104      	bne.n	800affe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aff4:	f7fd fe86 	bl	8008d04 <HAL_RCC_GetPCLK2Freq>
 800aff8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800affc:	e003      	b.n	800b006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800affe:	f7fd fe6d 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
 800b002:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b010:	f040 810c 	bne.w	800b22c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b01e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b026:	4622      	mov	r2, r4
 800b028:	462b      	mov	r3, r5
 800b02a:	1891      	adds	r1, r2, r2
 800b02c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b02e:	415b      	adcs	r3, r3
 800b030:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b036:	4621      	mov	r1, r4
 800b038:	eb12 0801 	adds.w	r8, r2, r1
 800b03c:	4629      	mov	r1, r5
 800b03e:	eb43 0901 	adc.w	r9, r3, r1
 800b042:	f04f 0200 	mov.w	r2, #0
 800b046:	f04f 0300 	mov.w	r3, #0
 800b04a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b04e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b056:	4690      	mov	r8, r2
 800b058:	4699      	mov	r9, r3
 800b05a:	4623      	mov	r3, r4
 800b05c:	eb18 0303 	adds.w	r3, r8, r3
 800b060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b064:	462b      	mov	r3, r5
 800b066:	eb49 0303 	adc.w	r3, r9, r3
 800b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b07a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b07e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b082:	460b      	mov	r3, r1
 800b084:	18db      	adds	r3, r3, r3
 800b086:	653b      	str	r3, [r7, #80]	; 0x50
 800b088:	4613      	mov	r3, r2
 800b08a:	eb42 0303 	adc.w	r3, r2, r3
 800b08e:	657b      	str	r3, [r7, #84]	; 0x54
 800b090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b098:	f7f5 fcdc 	bl	8000a54 <__aeabi_uldivmod>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4b61      	ldr	r3, [pc, #388]	; (800b228 <UART_SetConfig+0x2d4>)
 800b0a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b0a6:	095b      	lsrs	r3, r3, #5
 800b0a8:	011c      	lsls	r4, r3, #4
 800b0aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0bc:	4642      	mov	r2, r8
 800b0be:	464b      	mov	r3, r9
 800b0c0:	1891      	adds	r1, r2, r2
 800b0c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0c4:	415b      	adcs	r3, r3
 800b0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	eb12 0a01 	adds.w	sl, r2, r1
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	eb43 0b01 	adc.w	fp, r3, r1
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0ec:	4692      	mov	sl, r2
 800b0ee:	469b      	mov	fp, r3
 800b0f0:	4643      	mov	r3, r8
 800b0f2:	eb1a 0303 	adds.w	r3, sl, r3
 800b0f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	eb4b 0303 	adc.w	r3, fp, r3
 800b100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b110:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b118:	460b      	mov	r3, r1
 800b11a:	18db      	adds	r3, r3, r3
 800b11c:	643b      	str	r3, [r7, #64]	; 0x40
 800b11e:	4613      	mov	r3, r2
 800b120:	eb42 0303 	adc.w	r3, r2, r3
 800b124:	647b      	str	r3, [r7, #68]	; 0x44
 800b126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b12a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b12e:	f7f5 fc91 	bl	8000a54 <__aeabi_uldivmod>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	4611      	mov	r1, r2
 800b138:	4b3b      	ldr	r3, [pc, #236]	; (800b228 <UART_SetConfig+0x2d4>)
 800b13a:	fba3 2301 	umull	r2, r3, r3, r1
 800b13e:	095b      	lsrs	r3, r3, #5
 800b140:	2264      	movs	r2, #100	; 0x64
 800b142:	fb02 f303 	mul.w	r3, r2, r3
 800b146:	1acb      	subs	r3, r1, r3
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b14e:	4b36      	ldr	r3, [pc, #216]	; (800b228 <UART_SetConfig+0x2d4>)
 800b150:	fba3 2302 	umull	r2, r3, r3, r2
 800b154:	095b      	lsrs	r3, r3, #5
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b15c:	441c      	add	r4, r3
 800b15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b162:	2200      	movs	r2, #0
 800b164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b168:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b16c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b170:	4642      	mov	r2, r8
 800b172:	464b      	mov	r3, r9
 800b174:	1891      	adds	r1, r2, r2
 800b176:	63b9      	str	r1, [r7, #56]	; 0x38
 800b178:	415b      	adcs	r3, r3
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b17c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b180:	4641      	mov	r1, r8
 800b182:	1851      	adds	r1, r2, r1
 800b184:	6339      	str	r1, [r7, #48]	; 0x30
 800b186:	4649      	mov	r1, r9
 800b188:	414b      	adcs	r3, r1
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b198:	4659      	mov	r1, fp
 800b19a:	00cb      	lsls	r3, r1, #3
 800b19c:	4651      	mov	r1, sl
 800b19e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1a2:	4651      	mov	r1, sl
 800b1a4:	00ca      	lsls	r2, r1, #3
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	460a      	mov	r2, r1
 800b1b8:	eb42 0303 	adc.w	r3, r2, r3
 800b1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	18db      	adds	r3, r3, r3
 800b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1da:	4613      	mov	r3, r2
 800b1dc:	eb42 0303 	adc.w	r3, r2, r3
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1ea:	f7f5 fc33 	bl	8000a54 <__aeabi_uldivmod>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <UART_SetConfig+0x2d4>)
 800b1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1f8:	095b      	lsrs	r3, r3, #5
 800b1fa:	2164      	movs	r1, #100	; 0x64
 800b1fc:	fb01 f303 	mul.w	r3, r1, r3
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	3332      	adds	r3, #50	; 0x32
 800b206:	4a08      	ldr	r2, [pc, #32]	; (800b228 <UART_SetConfig+0x2d4>)
 800b208:	fba2 2303 	umull	r2, r3, r2, r3
 800b20c:	095b      	lsrs	r3, r3, #5
 800b20e:	f003 0207 	and.w	r2, r3, #7
 800b212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4422      	add	r2, r4
 800b21a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b21c:	e105      	b.n	800b42a <UART_SetConfig+0x4d6>
 800b21e:	bf00      	nop
 800b220:	40011000 	.word	0x40011000
 800b224:	40011400 	.word	0x40011400
 800b228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b22c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b230:	2200      	movs	r2, #0
 800b232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b236:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b23a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b23e:	4642      	mov	r2, r8
 800b240:	464b      	mov	r3, r9
 800b242:	1891      	adds	r1, r2, r2
 800b244:	6239      	str	r1, [r7, #32]
 800b246:	415b      	adcs	r3, r3
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
 800b24a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b24e:	4641      	mov	r1, r8
 800b250:	1854      	adds	r4, r2, r1
 800b252:	4649      	mov	r1, r9
 800b254:	eb43 0501 	adc.w	r5, r3, r1
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	00eb      	lsls	r3, r5, #3
 800b262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b266:	00e2      	lsls	r2, r4, #3
 800b268:	4614      	mov	r4, r2
 800b26a:	461d      	mov	r5, r3
 800b26c:	4643      	mov	r3, r8
 800b26e:	18e3      	adds	r3, r4, r3
 800b270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b274:	464b      	mov	r3, r9
 800b276:	eb45 0303 	adc.w	r3, r5, r3
 800b27a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b28a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	f04f 0300 	mov.w	r3, #0
 800b296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b29a:	4629      	mov	r1, r5
 800b29c:	008b      	lsls	r3, r1, #2
 800b29e:	4621      	mov	r1, r4
 800b2a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	008a      	lsls	r2, r1, #2
 800b2a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2ac:	f7f5 fbd2 	bl	8000a54 <__aeabi_uldivmod>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4b60      	ldr	r3, [pc, #384]	; (800b438 <UART_SetConfig+0x4e4>)
 800b2b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ba:	095b      	lsrs	r3, r3, #5
 800b2bc:	011c      	lsls	r4, r3, #4
 800b2be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	1891      	adds	r1, r2, r2
 800b2d6:	61b9      	str	r1, [r7, #24]
 800b2d8:	415b      	adcs	r3, r3
 800b2da:	61fb      	str	r3, [r7, #28]
 800b2dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	1851      	adds	r1, r2, r1
 800b2e4:	6139      	str	r1, [r7, #16]
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	414b      	adcs	r3, r1
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2f8:	4659      	mov	r1, fp
 800b2fa:	00cb      	lsls	r3, r1, #3
 800b2fc:	4651      	mov	r1, sl
 800b2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b302:	4651      	mov	r1, sl
 800b304:	00ca      	lsls	r2, r1, #3
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	4603      	mov	r3, r0
 800b30c:	4642      	mov	r2, r8
 800b30e:	189b      	adds	r3, r3, r2
 800b310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b314:	464b      	mov	r3, r9
 800b316:	460a      	mov	r2, r1
 800b318:	eb42 0303 	adc.w	r3, r2, r3
 800b31c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	67bb      	str	r3, [r7, #120]	; 0x78
 800b32a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b32c:	f04f 0200 	mov.w	r2, #0
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b338:	4649      	mov	r1, r9
 800b33a:	008b      	lsls	r3, r1, #2
 800b33c:	4641      	mov	r1, r8
 800b33e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b342:	4641      	mov	r1, r8
 800b344:	008a      	lsls	r2, r1, #2
 800b346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b34a:	f7f5 fb83 	bl	8000a54 <__aeabi_uldivmod>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4b39      	ldr	r3, [pc, #228]	; (800b438 <UART_SetConfig+0x4e4>)
 800b354:	fba3 1302 	umull	r1, r3, r3, r2
 800b358:	095b      	lsrs	r3, r3, #5
 800b35a:	2164      	movs	r1, #100	; 0x64
 800b35c:	fb01 f303 	mul.w	r3, r1, r3
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	011b      	lsls	r3, r3, #4
 800b364:	3332      	adds	r3, #50	; 0x32
 800b366:	4a34      	ldr	r2, [pc, #208]	; (800b438 <UART_SetConfig+0x4e4>)
 800b368:	fba2 2303 	umull	r2, r3, r2, r3
 800b36c:	095b      	lsrs	r3, r3, #5
 800b36e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b372:	441c      	add	r4, r3
 800b374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b378:	2200      	movs	r2, #0
 800b37a:	673b      	str	r3, [r7, #112]	; 0x70
 800b37c:	677a      	str	r2, [r7, #116]	; 0x74
 800b37e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b382:	4642      	mov	r2, r8
 800b384:	464b      	mov	r3, r9
 800b386:	1891      	adds	r1, r2, r2
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	415b      	adcs	r3, r3
 800b38c:	60fb      	str	r3, [r7, #12]
 800b38e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b392:	4641      	mov	r1, r8
 800b394:	1851      	adds	r1, r2, r1
 800b396:	6039      	str	r1, [r7, #0]
 800b398:	4649      	mov	r1, r9
 800b39a:	414b      	adcs	r3, r1
 800b39c:	607b      	str	r3, [r7, #4]
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	f04f 0300 	mov.w	r3, #0
 800b3a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3aa:	4659      	mov	r1, fp
 800b3ac:	00cb      	lsls	r3, r1, #3
 800b3ae:	4651      	mov	r1, sl
 800b3b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3b4:	4651      	mov	r1, sl
 800b3b6:	00ca      	lsls	r2, r1, #3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4642      	mov	r2, r8
 800b3c0:	189b      	adds	r3, r3, r2
 800b3c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3c4:	464b      	mov	r3, r9
 800b3c6:	460a      	mov	r2, r1
 800b3c8:	eb42 0303 	adc.w	r3, r2, r3
 800b3cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	663b      	str	r3, [r7, #96]	; 0x60
 800b3d8:	667a      	str	r2, [r7, #100]	; 0x64
 800b3da:	f04f 0200 	mov.w	r2, #0
 800b3de:	f04f 0300 	mov.w	r3, #0
 800b3e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	008b      	lsls	r3, r1, #2
 800b3ea:	4641      	mov	r1, r8
 800b3ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3f0:	4641      	mov	r1, r8
 800b3f2:	008a      	lsls	r2, r1, #2
 800b3f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b3f8:	f7f5 fb2c 	bl	8000a54 <__aeabi_uldivmod>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <UART_SetConfig+0x4e4>)
 800b402:	fba3 1302 	umull	r1, r3, r3, r2
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	2164      	movs	r1, #100	; 0x64
 800b40a:	fb01 f303 	mul.w	r3, r1, r3
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	3332      	adds	r3, #50	; 0x32
 800b414:	4a08      	ldr	r2, [pc, #32]	; (800b438 <UART_SetConfig+0x4e4>)
 800b416:	fba2 2303 	umull	r2, r3, r2, r3
 800b41a:	095b      	lsrs	r3, r3, #5
 800b41c:	f003 020f 	and.w	r2, r3, #15
 800b420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4422      	add	r2, r4
 800b428:	609a      	str	r2, [r3, #8]
}
 800b42a:	bf00      	nop
 800b42c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b430:	46bd      	mov	sp, r7
 800b432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b436:	bf00      	nop
 800b438:	51eb851f 	.word	0x51eb851f

0800b43c <arm_mat_trans_f32>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	8802      	ldrh	r2, [r0, #0]
 800b442:	884b      	ldrh	r3, [r1, #2]
 800b444:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b448:	684f      	ldr	r7, [r1, #4]
 800b44a:	8840      	ldrh	r0, [r0, #2]
 800b44c:	4293      	cmp	r3, r2
 800b44e:	b083      	sub	sp, #12
 800b450:	d14c      	bne.n	800b4ec <arm_mat_trans_f32+0xb0>
 800b452:	f8b1 e000 	ldrh.w	lr, [r1]
 800b456:	4586      	cmp	lr, r0
 800b458:	d148      	bne.n	800b4ec <arm_mat_trans_f32+0xb0>
 800b45a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b45e:	009c      	lsls	r4, r3, #2
 800b460:	f00e 0e03 	and.w	lr, lr, #3
 800b464:	fb08 f904 	mul.w	r9, r8, r4
 800b468:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b46c:	011d      	lsls	r5, r3, #4
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b474:	eb07 0a04 	add.w	sl, r7, r4
 800b478:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b47c:	9201      	str	r2, [sp, #4]
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	463b      	mov	r3, r7
 800b482:	f1b8 0f00 	cmp.w	r8, #0
 800b486:	d01d      	beq.n	800b4c4 <arm_mat_trans_f32+0x88>
 800b488:	9900      	ldr	r1, [sp, #0]
 800b48a:	f10c 0210 	add.w	r2, ip, #16
 800b48e:	4439      	add	r1, r7
 800b490:	4640      	mov	r0, r8
 800b492:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b496:	601e      	str	r6, [r3, #0]
 800b498:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b49c:	191e      	adds	r6, r3, r4
 800b49e:	edc6 7a00 	vstr	s15, [r6]
 800b4a2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b4a6:	600e      	str	r6, [r1, #0]
 800b4a8:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b4ac:	190e      	adds	r6, r1, r4
 800b4ae:	3801      	subs	r0, #1
 800b4b0:	442b      	add	r3, r5
 800b4b2:	f102 0210 	add.w	r2, r2, #16
 800b4b6:	edc6 7a00 	vstr	s15, [r6]
 800b4ba:	4429      	add	r1, r5
 800b4bc:	d1e9      	bne.n	800b492 <arm_mat_trans_f32+0x56>
 800b4be:	44dc      	add	ip, fp
 800b4c0:	eb09 0307 	add.w	r3, r9, r7
 800b4c4:	f1be 0f00 	cmp.w	lr, #0
 800b4c8:	d009      	beq.n	800b4de <arm_mat_trans_f32+0xa2>
 800b4ca:	4672      	mov	r2, lr
 800b4cc:	4661      	mov	r1, ip
 800b4ce:	f851 0b04 	ldr.w	r0, [r1], #4
 800b4d2:	6018      	str	r0, [r3, #0]
 800b4d4:	3a01      	subs	r2, #1
 800b4d6:	4423      	add	r3, r4
 800b4d8:	d1f9      	bne.n	800b4ce <arm_mat_trans_f32+0x92>
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	449c      	add	ip, r3
 800b4de:	3704      	adds	r7, #4
 800b4e0:	4557      	cmp	r7, sl
 800b4e2:	d1cd      	bne.n	800b480 <arm_mat_trans_f32+0x44>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	b003      	add	sp, #12
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	f06f 0002 	mvn.w	r0, #2
 800b4f0:	e7f9      	b.n	800b4e6 <arm_mat_trans_f32+0xaa>
 800b4f2:	bf00      	nop

0800b4f4 <arm_mat_sub_f32>:
 800b4f4:	b4f0      	push	{r4, r5, r6, r7}
 800b4f6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b4fa:	6803      	ldr	r3, [r0, #0]
 800b4fc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b500:	6856      	ldr	r6, [r2, #4]
 800b502:	42a3      	cmp	r3, r4
 800b504:	d15d      	bne.n	800b5c2 <arm_mat_sub_f32+0xce>
 800b506:	6812      	ldr	r2, [r2, #0]
 800b508:	4293      	cmp	r3, r2
 800b50a:	d15a      	bne.n	800b5c2 <arm_mat_sub_f32+0xce>
 800b50c:	8803      	ldrh	r3, [r0, #0]
 800b50e:	8844      	ldrh	r4, [r0, #2]
 800b510:	fb04 f403 	mul.w	r4, r4, r3
 800b514:	08a5      	lsrs	r5, r4, #2
 800b516:	d032      	beq.n	800b57e <arm_mat_sub_f32+0x8a>
 800b518:	f10c 0110 	add.w	r1, ip, #16
 800b51c:	f107 0210 	add.w	r2, r7, #16
 800b520:	f106 0310 	add.w	r3, r6, #16
 800b524:	4628      	mov	r0, r5
 800b526:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b52a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b52e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b532:	3801      	subs	r0, #1
 800b534:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b538:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b53c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b544:	f101 0110 	add.w	r1, r1, #16
 800b548:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b54c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b550:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b558:	f102 0210 	add.w	r2, r2, #16
 800b55c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b560:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b564:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b56c:	f103 0310 	add.w	r3, r3, #16
 800b570:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b574:	d1d7      	bne.n	800b526 <arm_mat_sub_f32+0x32>
 800b576:	012b      	lsls	r3, r5, #4
 800b578:	449c      	add	ip, r3
 800b57a:	441f      	add	r7, r3
 800b57c:	441e      	add	r6, r3
 800b57e:	f014 0403 	ands.w	r4, r4, #3
 800b582:	d01b      	beq.n	800b5bc <arm_mat_sub_f32+0xc8>
 800b584:	eddc 7a00 	vldr	s15, [ip]
 800b588:	ed97 7a00 	vldr	s14, [r7]
 800b58c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b590:	3c01      	subs	r4, #1
 800b592:	edc6 7a00 	vstr	s15, [r6]
 800b596:	d011      	beq.n	800b5bc <arm_mat_sub_f32+0xc8>
 800b598:	eddc 7a01 	vldr	s15, [ip, #4]
 800b59c:	ed97 7a01 	vldr	s14, [r7, #4]
 800b5a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5a4:	2c01      	cmp	r4, #1
 800b5a6:	edc6 7a01 	vstr	s15, [r6, #4]
 800b5aa:	d007      	beq.n	800b5bc <arm_mat_sub_f32+0xc8>
 800b5ac:	eddc 7a02 	vldr	s15, [ip, #8]
 800b5b0:	ed97 7a02 	vldr	s14, [r7, #8]
 800b5b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5b8:	edc6 7a02 	vstr	s15, [r6, #8]
 800b5bc:	2000      	movs	r0, #0
 800b5be:	bcf0      	pop	{r4, r5, r6, r7}
 800b5c0:	4770      	bx	lr
 800b5c2:	f06f 0002 	mvn.w	r0, #2
 800b5c6:	e7fa      	b.n	800b5be <arm_mat_sub_f32+0xca>

0800b5c8 <arm_mat_mult_f32>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	8845      	ldrh	r5, [r0, #2]
 800b5ce:	880b      	ldrh	r3, [r1, #0]
 800b5d0:	8806      	ldrh	r6, [r0, #0]
 800b5d2:	6847      	ldr	r7, [r0, #4]
 800b5d4:	6854      	ldr	r4, [r2, #4]
 800b5d6:	6848      	ldr	r0, [r1, #4]
 800b5d8:	b08b      	sub	sp, #44	; 0x2c
 800b5da:	42ab      	cmp	r3, r5
 800b5dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b5de:	9604      	str	r6, [sp, #16]
 800b5e0:	8849      	ldrh	r1, [r1, #2]
 800b5e2:	f040 808a 	bne.w	800b6fa <arm_mat_mult_f32+0x132>
 800b5e6:	8815      	ldrh	r5, [r2, #0]
 800b5e8:	42b5      	cmp	r5, r6
 800b5ea:	f040 8086 	bne.w	800b6fa <arm_mat_mult_f32+0x132>
 800b5ee:	8852      	ldrh	r2, [r2, #2]
 800b5f0:	428a      	cmp	r2, r1
 800b5f2:	f040 8082 	bne.w	800b6fa <arm_mat_mult_f32+0x132>
 800b5f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b5fa:	1d01      	adds	r1, r0, #4
 800b5fc:	0116      	lsls	r6, r2, #4
 800b5fe:	9108      	str	r1, [sp, #32]
 800b600:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800b604:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800b608:	9101      	str	r1, [sp, #4]
 800b60a:	fb06 f108 	mul.w	r1, r6, r8
 800b60e:	0095      	lsls	r5, r2, #2
 800b610:	9103      	str	r1, [sp, #12]
 800b612:	00d2      	lsls	r2, r2, #3
 800b614:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800b618:	f003 0903 	and.w	r9, r3, #3
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	f107 0b10 	add.w	fp, r7, #16
 800b622:	eb04 0a05 	add.w	sl, r4, r5
 800b626:	9107      	str	r1, [sp, #28]
 800b628:	9202      	str	r2, [sp, #8]
 800b62a:	9306      	str	r3, [sp, #24]
 800b62c:	f1ab 0310 	sub.w	r3, fp, #16
 800b630:	9305      	str	r3, [sp, #20]
 800b632:	9b07      	ldr	r3, [sp, #28]
 800b634:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b638:	eb03 0c0a 	add.w	ip, r3, sl
 800b63c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b704 <arm_mat_mult_f32+0x13c>
 800b640:	f1b8 0f00 	cmp.w	r8, #0
 800b644:	d053      	beq.n	800b6ee <arm_mat_mult_f32+0x126>
 800b646:	9b02      	ldr	r3, [sp, #8]
 800b648:	4644      	mov	r4, r8
 800b64a:	18c1      	adds	r1, r0, r3
 800b64c:	4602      	mov	r2, r0
 800b64e:	465b      	mov	r3, fp
 800b650:	ed92 6a00 	vldr	s12, [r2]
 800b654:	ed13 7a04 	vldr	s14, [r3, #-16]
 800b658:	ed53 4a03 	vldr	s9, [r3, #-12]
 800b65c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b660:	ed91 5a00 	vldr	s10, [r1]
 800b664:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b668:	1957      	adds	r7, r2, r5
 800b66a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b66e:	ed97 6a00 	vldr	s12, [r7]
 800b672:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b676:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b67a:	194f      	adds	r7, r1, r5
 800b67c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b680:	ee26 7a85 	vmul.f32	s14, s13, s10
 800b684:	edd7 7a00 	vldr	s15, [r7]
 800b688:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b68c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b690:	3c01      	subs	r4, #1
 800b692:	4432      	add	r2, r6
 800b694:	4431      	add	r1, r6
 800b696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b69a:	f103 0310 	add.w	r3, r3, #16
 800b69e:	d1d7      	bne.n	800b650 <arm_mat_mult_f32+0x88>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	9a01      	ldr	r2, [sp, #4]
 800b6a4:	4418      	add	r0, r3
 800b6a6:	f1b9 0f00 	cmp.w	r9, #0
 800b6aa:	d00b      	beq.n	800b6c4 <arm_mat_mult_f32+0xfc>
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	edd0 6a00 	vldr	s13, [r0]
 800b6b2:	ecb2 7a01 	vldmia	r2!, {s14}
 800b6b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	4428      	add	r0, r5
 800b6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6c2:	d1f4      	bne.n	800b6ae <arm_mat_mult_f32+0xe6>
 800b6c4:	ecec 7a01 	vstmia	ip!, {s15}
 800b6c8:	45d4      	cmp	ip, sl
 800b6ca:	4670      	mov	r0, lr
 800b6cc:	f10e 0e04 	add.w	lr, lr, #4
 800b6d0:	d1b4      	bne.n	800b63c <arm_mat_mult_f32+0x74>
 800b6d2:	9a01      	ldr	r2, [sp, #4]
 800b6d4:	9b06      	ldr	r3, [sp, #24]
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4419      	add	r1, r3
 800b6da:	449b      	add	fp, r3
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	9101      	str	r1, [sp, #4]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	44aa      	add	sl, r5
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	d004      	beq.n	800b6f2 <arm_mat_mult_f32+0x12a>
 800b6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ea:	6858      	ldr	r0, [r3, #4]
 800b6ec:	e79e      	b.n	800b62c <arm_mat_mult_f32+0x64>
 800b6ee:	9a05      	ldr	r2, [sp, #20]
 800b6f0:	e7d9      	b.n	800b6a6 <arm_mat_mult_f32+0xde>
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	b00b      	add	sp, #44	; 0x2c
 800b6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fa:	f06f 0002 	mvn.w	r0, #2
 800b6fe:	b00b      	add	sp, #44	; 0x2c
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	00000000 	.word	0x00000000

0800b708 <arm_mat_inverse_f32>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	8843      	ldrh	r3, [r0, #2]
 800b70e:	8804      	ldrh	r4, [r0, #0]
 800b710:	684e      	ldr	r6, [r1, #4]
 800b712:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b716:	b087      	sub	sp, #28
 800b718:	429c      	cmp	r4, r3
 800b71a:	9301      	str	r3, [sp, #4]
 800b71c:	9603      	str	r6, [sp, #12]
 800b71e:	f040 80ea 	bne.w	800b8f6 <arm_mat_inverse_f32+0x1ee>
 800b722:	880a      	ldrh	r2, [r1, #0]
 800b724:	884b      	ldrh	r3, [r1, #2]
 800b726:	4293      	cmp	r3, r2
 800b728:	f040 80e5 	bne.w	800b8f6 <arm_mat_inverse_f32+0x1ee>
 800b72c:	429c      	cmp	r4, r3
 800b72e:	f040 80e2 	bne.w	800b8f6 <arm_mat_inverse_f32+0x1ee>
 800b732:	9005      	str	r0, [sp, #20]
 800b734:	b30c      	cbz	r4, 800b77a <arm_mat_inverse_f32+0x72>
 800b736:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800b73a:	1e67      	subs	r7, r4, #1
 800b73c:	f846 bb04 	str.w	fp, [r6], #4
 800b740:	d01b      	beq.n	800b77a <arm_mat_inverse_f32+0x72>
 800b742:	f04f 0801 	mov.w	r8, #1
 800b746:	00ba      	lsls	r2, r7, #2
 800b748:	eb06 0a02 	add.w	sl, r6, r2
 800b74c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800b750:	4630      	mov	r0, r6
 800b752:	2100      	movs	r1, #0
 800b754:	f000 f97e 	bl	800ba54 <memset>
 800b758:	eb0a 0605 	add.w	r6, sl, r5
 800b75c:	462a      	mov	r2, r5
 800b75e:	2100      	movs	r1, #0
 800b760:	4650      	mov	r0, sl
 800b762:	f1b8 0f00 	cmp.w	r8, #0
 800b766:	f000 80cb 	beq.w	800b900 <arm_mat_inverse_f32+0x1f8>
 800b76a:	f000 f973 	bl	800ba54 <memset>
 800b76e:	3f01      	subs	r7, #1
 800b770:	f108 0801 	add.w	r8, r8, #1
 800b774:	f846 bb04 	str.w	fp, [r6], #4
 800b778:	d1e5      	bne.n	800b746 <arm_mat_inverse_f32+0x3e>
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 80b5 	beq.w	800b8ec <arm_mat_inverse_f32+0x1e4>
 800b782:	009d      	lsls	r5, r3, #2
 800b784:	eb09 0205 	add.w	r2, r9, r5
 800b788:	46cc      	mov	ip, r9
 800b78a:	9202      	str	r2, [sp, #8]
 800b78c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b790:	1d2a      	adds	r2, r5, #4
 800b792:	9204      	str	r2, [sp, #16]
 800b794:	462f      	mov	r7, r5
 800b796:	469e      	mov	lr, r3
 800b798:	2600      	movs	r6, #0
 800b79a:	9b02      	ldr	r3, [sp, #8]
 800b79c:	eddc 6a00 	vldr	s13, [ip]
 800b7a0:	42b4      	cmp	r4, r6
 800b7a2:	eba3 0b07 	sub.w	fp, r3, r7
 800b7a6:	f000 80a1 	beq.w	800b8ec <arm_mat_inverse_f32+0x1e4>
 800b7aa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b910 <arm_mat_inverse_f32+0x208>
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	4663      	mov	r3, ip
 800b7b2:	e00b      	b.n	800b7cc <arm_mat_inverse_f32+0xc4>
 800b7b4:	eef4 7a47 	vcmp.f32	s15, s14
 800b7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7bc:	f102 0201 	add.w	r2, r2, #1
 800b7c0:	bfc8      	it	gt
 800b7c2:	eeb0 7a67 	vmovgt.f32	s14, s15
 800b7c6:	42a2      	cmp	r2, r4
 800b7c8:	442b      	add	r3, r5
 800b7ca:	d014      	beq.n	800b7f6 <arm_mat_inverse_f32+0xee>
 800b7cc:	edd3 7a00 	vldr	s15, [r3]
 800b7d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	eeb1 6a67 	vneg.f32	s12, s15
 800b7dc:	dcea      	bgt.n	800b7b4 <arm_mat_inverse_f32+0xac>
 800b7de:	eeb4 6a47 	vcmp.f32	s12, s14
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	f102 0201 	add.w	r2, r2, #1
 800b7ea:	bfc8      	it	gt
 800b7ec:	eeb0 7a46 	vmovgt.f32	s14, s12
 800b7f0:	42a2      	cmp	r2, r4
 800b7f2:	442b      	add	r3, r5
 800b7f4:	d1ea      	bne.n	800b7cc <arm_mat_inverse_f32+0xc4>
 800b7f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	d075      	beq.n	800b8ec <arm_mat_inverse_f32+0x1e4>
 800b800:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b808:	d070      	beq.n	800b8ec <arm_mat_inverse_f32+0x1e4>
 800b80a:	4672      	mov	r2, lr
 800b80c:	4663      	mov	r3, ip
 800b80e:	ed93 7a00 	vldr	s14, [r3]
 800b812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b816:	3a01      	subs	r2, #1
 800b818:	ece3 7a01 	vstmia	r3!, {s15}
 800b81c:	d1f7      	bne.n	800b80e <arm_mat_inverse_f32+0x106>
 800b81e:	9901      	ldr	r1, [sp, #4]
 800b820:	464b      	mov	r3, r9
 800b822:	ed93 7a00 	vldr	s14, [r3]
 800b826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b82a:	3901      	subs	r1, #1
 800b82c:	ece3 7a01 	vstmia	r3!, {s15}
 800b830:	d1f7      	bne.n	800b822 <arm_mat_inverse_f32+0x11a>
 800b832:	9803      	ldr	r0, [sp, #12]
 800b834:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b838:	42b1      	cmp	r1, r6
 800b83a:	d039      	beq.n	800b8b0 <arm_mat_inverse_f32+0x1a8>
 800b83c:	eddb 6a00 	vldr	s13, [fp]
 800b840:	465a      	mov	r2, fp
 800b842:	4673      	mov	r3, lr
 800b844:	46e2      	mov	sl, ip
 800b846:	ecba 7a01 	vldmia	sl!, {s14}
 800b84a:	edd2 7a00 	vldr	s15, [r2]
 800b84e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b852:	3b01      	subs	r3, #1
 800b854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b858:	ece2 7a01 	vstmia	r2!, {s15}
 800b85c:	d1f3      	bne.n	800b846 <arm_mat_inverse_f32+0x13e>
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	44bb      	add	fp, r7
 800b862:	4602      	mov	r2, r0
 800b864:	46ca      	mov	sl, r9
 800b866:	ecba 7a01 	vldmia	sl!, {s14}
 800b86a:	edd2 7a00 	vldr	s15, [r2]
 800b86e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b872:	3b01      	subs	r3, #1
 800b874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b878:	ece2 7a01 	vstmia	r2!, {s15}
 800b87c:	d1f3      	bne.n	800b866 <arm_mat_inverse_f32+0x15e>
 800b87e:	4428      	add	r0, r5
 800b880:	3101      	adds	r1, #1
 800b882:	428c      	cmp	r4, r1
 800b884:	44c3      	add	fp, r8
 800b886:	d1d7      	bne.n	800b838 <arm_mat_inverse_f32+0x130>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	f1be 0e01 	subs.w	lr, lr, #1
 800b88e:	f106 0601 	add.w	r6, r6, #1
 800b892:	449c      	add	ip, r3
 800b894:	f1a7 0704 	sub.w	r7, r7, #4
 800b898:	44a9      	add	r9, r5
 800b89a:	f47f af7e 	bne.w	800b79a <arm_mat_inverse_f32+0x92>
 800b89e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	d006      	beq.n	800b8b6 <arm_mat_inverse_f32+0x1ae>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	b007      	add	sp, #28
 800b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b0:	44bb      	add	fp, r7
 800b8b2:	4428      	add	r0, r5
 800b8b4:	e7e4      	b.n	800b880 <arm_mat_inverse_f32+0x178>
 800b8b6:	9b05      	ldr	r3, [sp, #20]
 800b8b8:	9a01      	ldr	r2, [sp, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	edd3 7a00 	vldr	s15, [r3]
 800b8c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b8c4:	fb02 f204 	mul.w	r2, r2, r4
 800b8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	bf08      	it	eq
 800b8d0:	3304      	addeq	r3, #4
 800b8d2:	d007      	beq.n	800b8e4 <arm_mat_inverse_f32+0x1dc>
 800b8d4:	e7e8      	b.n	800b8a8 <arm_mat_inverse_f32+0x1a0>
 800b8d6:	ecf3 7a01 	vldmia	r3!, {s15}
 800b8da:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e2:	d1e1      	bne.n	800b8a8 <arm_mat_inverse_f32+0x1a0>
 800b8e4:	f10e 0e01 	add.w	lr, lr, #1
 800b8e8:	4574      	cmp	r4, lr
 800b8ea:	d1f4      	bne.n	800b8d6 <arm_mat_inverse_f32+0x1ce>
 800b8ec:	f06f 0004 	mvn.w	r0, #4
 800b8f0:	b007      	add	sp, #28
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	f06f 0002 	mvn.w	r0, #2
 800b8fa:	b007      	add	sp, #28
 800b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b900:	4656      	mov	r6, sl
 800b902:	3f01      	subs	r7, #1
 800b904:	f846 bb04 	str.w	fp, [r6], #4
 800b908:	f47f af1b 	bne.w	800b742 <arm_mat_inverse_f32+0x3a>
 800b90c:	e735      	b.n	800b77a <arm_mat_inverse_f32+0x72>
 800b90e:	bf00      	nop
 800b910:	00000000 	.word	0x00000000

0800b914 <arm_mat_init_f32>:
 800b914:	8001      	strh	r1, [r0, #0]
 800b916:	8042      	strh	r2, [r0, #2]
 800b918:	6043      	str	r3, [r0, #4]
 800b91a:	4770      	bx	lr

0800b91c <arm_mat_add_f32>:
 800b91c:	b4f0      	push	{r4, r5, r6, r7}
 800b91e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b922:	6803      	ldr	r3, [r0, #0]
 800b924:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b928:	6856      	ldr	r6, [r2, #4]
 800b92a:	42a3      	cmp	r3, r4
 800b92c:	d15d      	bne.n	800b9ea <arm_mat_add_f32+0xce>
 800b92e:	6812      	ldr	r2, [r2, #0]
 800b930:	4293      	cmp	r3, r2
 800b932:	d15a      	bne.n	800b9ea <arm_mat_add_f32+0xce>
 800b934:	8803      	ldrh	r3, [r0, #0]
 800b936:	8844      	ldrh	r4, [r0, #2]
 800b938:	fb04 f403 	mul.w	r4, r4, r3
 800b93c:	08a5      	lsrs	r5, r4, #2
 800b93e:	d032      	beq.n	800b9a6 <arm_mat_add_f32+0x8a>
 800b940:	f10c 0110 	add.w	r1, ip, #16
 800b944:	f107 0210 	add.w	r2, r7, #16
 800b948:	f106 0310 	add.w	r3, r6, #16
 800b94c:	4628      	mov	r0, r5
 800b94e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b952:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b95a:	3801      	subs	r0, #1
 800b95c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b960:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b964:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b96c:	f101 0110 	add.w	r1, r1, #16
 800b970:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b974:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b978:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b97c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b980:	f102 0210 	add.w	r2, r2, #16
 800b984:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b988:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b98c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b990:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b994:	f103 0310 	add.w	r3, r3, #16
 800b998:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b99c:	d1d7      	bne.n	800b94e <arm_mat_add_f32+0x32>
 800b99e:	012b      	lsls	r3, r5, #4
 800b9a0:	449c      	add	ip, r3
 800b9a2:	441f      	add	r7, r3
 800b9a4:	441e      	add	r6, r3
 800b9a6:	f014 0403 	ands.w	r4, r4, #3
 800b9aa:	d01b      	beq.n	800b9e4 <arm_mat_add_f32+0xc8>
 800b9ac:	edd7 7a00 	vldr	s15, [r7]
 800b9b0:	ed9c 7a00 	vldr	s14, [ip]
 800b9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9b8:	3c01      	subs	r4, #1
 800b9ba:	edc6 7a00 	vstr	s15, [r6]
 800b9be:	d011      	beq.n	800b9e4 <arm_mat_add_f32+0xc8>
 800b9c0:	eddc 7a01 	vldr	s15, [ip, #4]
 800b9c4:	ed97 7a01 	vldr	s14, [r7, #4]
 800b9c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9cc:	2c01      	cmp	r4, #1
 800b9ce:	edc6 7a01 	vstr	s15, [r6, #4]
 800b9d2:	d007      	beq.n	800b9e4 <arm_mat_add_f32+0xc8>
 800b9d4:	eddc 7a02 	vldr	s15, [ip, #8]
 800b9d8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b9dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9e0:	edc6 7a02 	vstr	s15, [r6, #8]
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	bcf0      	pop	{r4, r5, r6, r7}
 800b9e8:	4770      	bx	lr
 800b9ea:	f06f 0002 	mvn.w	r0, #2
 800b9ee:	e7fa      	b.n	800b9e6 <arm_mat_add_f32+0xca>

0800b9f0 <__libc_init_array>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	4d0d      	ldr	r5, [pc, #52]	; (800ba28 <__libc_init_array+0x38>)
 800b9f4:	4c0d      	ldr	r4, [pc, #52]	; (800ba2c <__libc_init_array+0x3c>)
 800b9f6:	1b64      	subs	r4, r4, r5
 800b9f8:	10a4      	asrs	r4, r4, #2
 800b9fa:	2600      	movs	r6, #0
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	d109      	bne.n	800ba14 <__libc_init_array+0x24>
 800ba00:	4d0b      	ldr	r5, [pc, #44]	; (800ba30 <__libc_init_array+0x40>)
 800ba02:	4c0c      	ldr	r4, [pc, #48]	; (800ba34 <__libc_init_array+0x44>)
 800ba04:	f000 f82e 	bl	800ba64 <_init>
 800ba08:	1b64      	subs	r4, r4, r5
 800ba0a:	10a4      	asrs	r4, r4, #2
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	42a6      	cmp	r6, r4
 800ba10:	d105      	bne.n	800ba1e <__libc_init_array+0x2e>
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba18:	4798      	blx	r3
 800ba1a:	3601      	adds	r6, #1
 800ba1c:	e7ee      	b.n	800b9fc <__libc_init_array+0xc>
 800ba1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba22:	4798      	blx	r3
 800ba24:	3601      	adds	r6, #1
 800ba26:	e7f2      	b.n	800ba0e <__libc_init_array+0x1e>
 800ba28:	0800baa4 	.word	0x0800baa4
 800ba2c:	0800baa4 	.word	0x0800baa4
 800ba30:	0800baa4 	.word	0x0800baa4
 800ba34:	0800baa8 	.word	0x0800baa8

0800ba38 <memcpy>:
 800ba38:	440a      	add	r2, r1
 800ba3a:	4291      	cmp	r1, r2
 800ba3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba40:	d100      	bne.n	800ba44 <memcpy+0xc>
 800ba42:	4770      	bx	lr
 800ba44:	b510      	push	{r4, lr}
 800ba46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba4e:	4291      	cmp	r1, r2
 800ba50:	d1f9      	bne.n	800ba46 <memcpy+0xe>
 800ba52:	bd10      	pop	{r4, pc}

0800ba54 <memset>:
 800ba54:	4402      	add	r2, r0
 800ba56:	4603      	mov	r3, r0
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <memset+0xa>
 800ba5c:	4770      	bx	lr
 800ba5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba62:	e7f9      	b.n	800ba58 <memset+0x4>

0800ba64 <_init>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	bf00      	nop
 800ba68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6a:	bc08      	pop	{r3}
 800ba6c:	469e      	mov	lr, r3
 800ba6e:	4770      	bx	lr

0800ba70 <_fini>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr
