
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006280  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006430  08006430  00020484  2**0
                  CONTENTS
  4 .ARM          00000008  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006438  08006438  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  08006440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000488  080068c4  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  080068c4  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012acf  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6b  00000000  00000000  00032f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000359f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00036728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c48  00000000  00000000  00037338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc43  00000000  00000000  0004df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feef  00000000  00000000  0005dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000edab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000edb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000f11c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000488 	.word	0x20000488
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006400 	.word	0x08006400

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000048c 	.word	0x2000048c
 80001d4:	08006400 	.word	0x08006400

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f005 face 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f005 fac5 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f005 fabc 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f005 fab3 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2203      	movs	r2, #3
 8000d72:	2103      	movs	r1, #3
 8000d74:	f005 faaa 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3364      	adds	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f005 faa1 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3368      	adds	r3, #104	; 0x68
 8000d94:	2203      	movs	r2, #3
 8000d96:	2103      	movs	r1, #3
 8000d98:	f005 fa98 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	338c      	adds	r3, #140	; 0x8c
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f005 fa8f 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3398      	adds	r3, #152	; 0x98
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f005 fa86 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	33a4      	adds	r3, #164	; 0xa4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f005 fa7d 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	33c8      	adds	r3, #200	; 0xc8
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f005 fa74 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33ec      	adds	r3, #236	; 0xec
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f005 fa6b 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33f0      	adds	r3, #240	; 0xf0
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f005 fa62 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33f4      	adds	r3, #244	; 0xf4
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f005 fa59 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33f8      	adds	r3, #248	; 0xf8
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f005 fa50 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	f005 fa46 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f005 fa3c 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000e60:	2203      	movs	r2, #3
 8000e62:	2103      	movs	r1, #3
 8000e64:	f005 fa32 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000e74:	2201      	movs	r2, #1
 8000e76:	2103      	movs	r1, #3
 8000e78:	f005 fa28 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2203      	movs	r2, #3
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	f005 fa1e 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f005 fa14 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f005 fa0a 	bl	80062cc <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	f005 fa00 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000ed8:	2203      	movs	r2, #3
 8000eda:	2103      	movs	r1, #3
 8000edc:	f005 f9f6 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f005 f9ec 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	f005 f9e2 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f14:	2201      	movs	r2, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	f005 f9d8 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	f005 f9ce 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	2103      	movs	r1, #3
 8000f40:	f005 f9c4 	bl	80062cc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f50:	2203      	movs	r2, #3
 8000f52:	2103      	movs	r1, #3
 8000f54:	f005 f9ba 	bl	80062cc <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f004 ff44 	bl	8005df4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f004 ff3a 	bl	8005df4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f004 ff30 	bl	8005df4 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQGt));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7120 	add.w	r1, r3, #640	; 0x280
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f004 ffea 	bl	8005f80 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQGt), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f004 ffde 	bl	8005f80 <arm_mat_mult_f32>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 7128 	add.w	r1, r3, #672	; 0x2a0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000fea:	461a      	mov	r2, r3
 8000fec:	f004 ffc8 	bl	8005f80 <arm_mat_mult_f32>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800100c:	461a      	mov	r2, r3
 800100e:	f004 ffb7 	bl	8005f80 <arm_mat_mult_f32>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7138 	add.w	r1, r3, #736	; 0x2e0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800102e:	461a      	mov	r2, r3
 8001030:	f004 ffa6 	bl	8005f80 <arm_mat_mult_f32>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f503 7140 	add.w	r1, r3, #768	; 0x300
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001050:	461a      	mov	r2, r3
 8001052:	f005 f93f 	bl	80062d4 <arm_mat_add_f32>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800107a:	461a      	mov	r2, r3
 800107c:	f004 ff80 	bl	8005f80 <arm_mat_mult_f32>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 7148 	add.w	r1, r3, #800	; 0x320
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800109c:	461a      	mov	r2, r3
 800109e:	f004 ff05 	bl	8005eac <arm_mat_sub_f32>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80010be:	461a      	mov	r2, r3
 80010c0:	f004 ff5e 	bl	8005f80 <arm_mat_mult_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80010e0:	461a      	mov	r2, r3
 80010e2:	f004 ff4d 	bl	8005f80 <arm_mat_mult_f32>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 704a 	add.w	r0, r3, #808	; 0x328
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 7122 	add.w	r1, r3, #648	; 0x288
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001102:	461a      	mov	r2, r3
 8001104:	f005 f8e6 	bl	80062d4 <arm_mat_add_f32>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f004 ffcd 	bl	80060c0 <arm_mat_inverse_f32>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001142:	461a      	mov	r2, r3
 8001144:	f004 ff1c 	bl	8005f80 <arm_mat_mult_f32>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001164:	461a      	mov	r2, r3
 8001166:	f004 ff0b 	bl	8005f80 <arm_mat_mult_f32>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001186:	461a      	mov	r2, r3
 8001188:	f004 fefa 	bl	8005f80 <arm_mat_mult_f32>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 704e 	add.w	r0, r3, #824	; 0x338
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f005 f893 	bl	80062d4 <arm_mat_add_f32>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80011ca:	461a      	mov	r2, r3
 80011cc:	f004 fed8 	bl	8005f80 <arm_mat_mult_f32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 7150 	add.w	r1, r3, #832	; 0x340
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80011ec:	461a      	mov	r2, r3
 80011ee:	f004 fe5d 	bl	8005eac <arm_mat_sub_f32>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800120e:	461a      	mov	r2, r3
 8001210:	f004 feb6 	bl	8005f80 <arm_mat_mult_f32>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	ed87 0a02 	vstr	s0, [r7, #8]
 800126e:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001272:	ed97 7a02 	vldr	s14, [r7, #8]
 8001276:	edd7 7a01 	vldr	s15, [r7, #4]
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ed97 7a05 	vldr	s14, [r7, #20]
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80012b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	dd04      	ble.n	80012ee <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	69da      	ldr	r2, [r3, #28]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
 80012ec:	e00e      	b.n	800130c <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d503      	bpl.n	800130c <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/
		
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001312:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800131c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	edd3 7a03 	vldr	s15, [r3, #12]
 800132e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a08 	vldr	s15, [r3, #32]
 8001338:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800134a:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	edd3 7a08 	vldr	s15, [r3, #32]
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001362:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001372:	edd7 7a04 	vldr	s15, [r7, #16]
 8001376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edd3 7a05 	vldr	s15, [r3, #20]
 8001396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd04      	ble.n	80013aa <PIDController_Update+0x148>

        pid->out = pid->limMax;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
 80013a8:	e00e      	b.n	80013c8 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d503      	bpl.n	80013c8 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	ee07 3a90 	vmov	s15, r3

}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PIDVelocityController_Init>:
 *  Created on: 4 Jun 2022
 *      Author: mobil
 */

#include "PIDVelocity.h"
void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last2Error = 0.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28

	pidVelocity->differentiatorOutput = 0.0f;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
	pidVelocity->integratorOutput = 0.0f;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
	pidVelocity->proportionalOutput = 0.0f;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	621a      	str	r2, [r3, #32]

	pidVelocity->ControllerOut = 0.0f;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->ControllerLastOut = 0.0f;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001436:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	ed87 0a02 	vstr	s0, [r7, #8]
 8001444:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 8001448:	ed97 7a02 	vldr	s14, [r7, #8]
 800144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	edd3 6a00 	vldr	s13, [r3]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edc3 7a08 	vstr	s15, [r3, #32]

    pidVelocity->integratorOutput = (pidVelocity->Ki * pidVelocity->dt * error);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ed93 7a01 	vldr	s14, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a05 	vldr	s15, [r3, #20]
 800148c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001490:	edd7 7a05 	vldr	s15, [r7, #20]
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edc3 7a06 	vstr	s15, [r3, #24]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)/pidVelocity->dt)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80014a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80014b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b6:	ee16 0a90 	vmov	r0, s13
 80014ba:	f7fe fff1 	bl	80004a0 <__aeabi_f2d>
 80014be:	4604      	mov	r4, r0
 80014c0:	460d      	mov	r5, r1
    									-((2.0 * pidVelocity->Kd * pidVelocity->Last1Error)/pidVelocity->dt)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffea 	bl	80004a0 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	f7fe fe88 	bl	80001e4 <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4690      	mov	r8, r2
 80014da:	4699      	mov	r9, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffdd 	bl	80004a0 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4640      	mov	r0, r8
 80014ec:	4649      	mov	r1, r9
 80014ee:	f7ff f82f 	bl	8000550 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4690      	mov	r8, r2
 80014f8:	4699      	mov	r9, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffce 	bl	80004a0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4640      	mov	r0, r8
 800150a:	4649      	mov	r1, r9
 800150c:	f7ff f94a 	bl	80007a4 <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7fe fe62 	bl	80001e0 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4614      	mov	r4, r2
 8001522:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error)/pidVelocity->dt)	;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	ed93 7a02 	vldr	s14, [r3, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a05 	vldr	s15, [r3, #20]
 800153a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800153e:	ee16 0a90 	vmov	r0, s13
 8001542:	f7fe ffad 	bl	80004a0 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7fe fe49 	bl	80001e4 <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fa0b 	bl	8000974 <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)/pidVelocity->dt)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	61da      	str	r2, [r3, #28]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	ed93 7a08 	vldr	s14, [r3, #32]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	edd3 7a07 	vldr	s15, [r3, #28]
 800157a:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001584:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	edd3 7a04 	vldr	s15, [r3, #16]
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd04      	ble.n	80015ae <PIDVelocityController_Update+0x178>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	e00e      	b.n	80015cc <PIDVelocityController_Update+0x196>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d503      	bpl.n	80015cc <PIDVelocityController_Update+0x196>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c

    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
	pidVelocity->Last1Error = error;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

	return pidVelocity->ControllerOut;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	ee07 3a90 	vmov	s15, r3
}
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080015f8 <VmaxOptimization>:


#include "Trajectory.h"


float VmaxOptimization(float Qinitial, float Qfinal){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
	float Qrelative = Qfinal - Qinitial;
 8001606:	ed97 7a00 	vldr	s14, [r7]
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	edc7 7a02 	vstr	s15, [r7, #8]
	float Vmax = -1;
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <VmaxOptimization+0xf8>)
 8001618:	60fb      	str	r3, [r7, #12]
	if(Qrelative >= 1.0  && Qrelative < 20.0)
 800161a:	edd7 7a02 	vldr	s15, [r7, #8]
 800161e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	db0b      	blt.n	8001644 <VmaxOptimization+0x4c>
 800162c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001630:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d502      	bpl.n	8001644 <VmaxOptimization+0x4c>
	{
		Vmax = 0.7f;
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <VmaxOptimization+0xfc>)
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	e035      	b.n	80016b0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 20.0  && Qrelative < 60.0)
 8001644:	edd7 7a02 	vldr	s15, [r7, #8]
 8001648:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800164c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	db0b      	blt.n	800166e <VmaxOptimization+0x76>
 8001656:	edd7 7a02 	vldr	s15, [r7, #8]
 800165a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80016f8 <VmaxOptimization+0x100>
 800165e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d502      	bpl.n	800166e <VmaxOptimization+0x76>
	{
		Vmax = 3.0f;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <VmaxOptimization+0x104>)
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e020      	b.n	80016b0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 60.0  && Qrelative < 160.0)
 800166e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001672:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016f8 <VmaxOptimization+0x100>
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	db0b      	blt.n	8001698 <VmaxOptimization+0xa0>
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001700 <VmaxOptimization+0x108>
 8001688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d502      	bpl.n	8001698 <VmaxOptimization+0xa0>
	{
		Vmax = 6.0f;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <VmaxOptimization+0x10c>)
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e00b      	b.n	80016b0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 160.0)
 8001698:	edd7 7a02 	vldr	s15, [r7, #8]
 800169c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001700 <VmaxOptimization+0x108>
 80016a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	db02      	blt.n	80016b0 <VmaxOptimization+0xb8>
	{
		Vmax = 8.0f;
 80016aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80016ae:	60fb      	str	r3, [r7, #12]
	}
	// RPM to deg/sec
	return Vmax *360.0/60.0;
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7fe fef5 	bl	80004a0 <__aeabi_f2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <VmaxOptimization+0x110>)
 80016bc:	f7fe ff48 	bl	8000550 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <VmaxOptimization+0x114>)
 80016ce:	f7ff f869 	bl	80007a4 <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f94b 	bl	8000974 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	ee07 3a90 	vmov	s15, r3
}
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	bf800000 	.word	0xbf800000
 80016f4:	3f333333 	.word	0x3f333333
 80016f8:	42700000 	.word	0x42700000
 80016fc:	40400000 	.word	0x40400000
 8001700:	43200000 	.word	0x43200000
 8001704:	40c00000 	.word	0x40c00000
 8001708:	40768000 	.word	0x40768000
 800170c:	404e0000 	.word	0x404e0000

08001710 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	ed87 0a02 	vstr	s0, [r7, #8]
 800171c:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	// Set initial = 0;
	float Qrelative = Qfinal - Qinitial;
 8001730:	ed97 7a01 	vldr	s14, [r7, #4]
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	edc7 7a05 	vstr	s15, [r7, #20]
	// Set Vmax
	traject -> Vmax = VmaxOptimization(Qinitial,Qfinal);
 8001740:	edd7 0a01 	vldr	s1, [r7, #4]
 8001744:	ed97 0a02 	vldr	s0, [r7, #8]
 8001748:	f7ff ff56 	bl	80015f8 <VmaxOptimization>
 800174c:	eef0 7a40 	vmov.f32	s15, s0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (Qrelative/traject -> Vmax);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	edd3 6a00 	vldr	s13, [r3]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	ed93 6a02 	vldr	s12, [r3, #8]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	edd3 6a00 	vldr	s13, [r3]
 8001772:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001780:	ed97 6a05 	vldr	s12, [r7, #20]
 8001784:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	edd3 6a00 	vldr	s13, [r3]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	ed93 7a01 	vldr	s14, [r3, #4]
 800179e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	edd3 6a00 	vldr	s13, [r3]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	ed93 6a02 	vldr	s12, [r3, #8]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edd3 6a00 	vldr	s13, [r3]
 80017da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe2e 	bl	80004a0 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f892 	bl	8000974 <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef1 7a67 	vneg.f32	s15, s15
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe17 	bl	80004a0 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f87b 	bl	8000974 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fdd5 	bl	80004a0 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f839 	bl	8000974 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef1 7a67 	vneg.f32	s15, s15
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fdc2 	bl	80004a0 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ed93 7a01 	vldr	s14, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	ee17 0a90 	vmov	r0, s15
 800193a:	f7fe fdb1 	bl	80004a0 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fc4b 	bl	80001e0 <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f80f 	bl	8000974 <__aeabi_d2f>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	ed93 7a03 	vldr	s14, [r3, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019a0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	edd3 6a04 	vldr	s13, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80019b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019c2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80019d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80019f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a20:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001a36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a42:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001a52:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edd3 6a06 	vldr	s13, [r3, #24]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001ab6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ac2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001ad2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ada:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b42:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b52:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	edd3 6a08 	vldr	s13, [r3, #32]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bc2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001bd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001c20:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001c36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c42:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001c52:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cb6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001cee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001cf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d04:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d22:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d92:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 6a05 	vldr	s13, [r3, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001de4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001dfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dfe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e02:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001eae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ec4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001eda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ede:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ee2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001efa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001f02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fa4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fc2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800202a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800202e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002032:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002036:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800204a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800206e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002084:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800209a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800209e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80020a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80020de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80020e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800210a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800210e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002112:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002116:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800211a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800212a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002138:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800214e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002158:	ee66 7a27 	vmul.f32	s15, s12, s15
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002164:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800217a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800217e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002182:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800219a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800219e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	0000      	movs	r0, r0
	...

080021b8 <TrajectoryEvaluation>:


float TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80021c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021cc:	1a84      	subs	r4, r0, r2
 80021ce:	eb61 0503 	sbc.w	r5, r1, r3
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f985 	bl	80004e4 <__aeabi_ul2d>
 80021da:	a392      	add	r3, pc, #584	; (adr r3, 8002424 <TrajectoryEvaluation+0x26c>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe fae0 	bl	80007a4 <__aeabi_ddiv>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fbc2 	bl	8000974 <__aeabi_d2f>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a8b      	ldr	r2, [pc, #556]	; (8002420 <TrajectoryEvaluation+0x268>)
 80021f4:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80021f6:	4b8a      	ldr	r3, [pc, #552]	; (8002420 <TrajectoryEvaluation+0x268>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	db7e      	blt.n	8002304 <TrajectoryEvaluation+0x14c>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <TrajectoryEvaluation+0x268>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	dd73      	ble.n	8002304 <TrajectoryEvaluation+0x14c>
	{
		traject -> QJ = traject -> A[0];
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	ed93 7a03 	vldr	s14, [r3, #12]
 800222c:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <TrajectoryEvaluation+0x268>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	ed93 7a03 	vldr	s14, [r3, #12]
 800224c:	4b74      	ldr	r3, [pc, #464]	; (8002420 <TrajectoryEvaluation+0x268>)
 800224e:	edd3 6a00 	vldr	s13, [r3]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002264:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800226e:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002294:	edd3 6a00 	vldr	s13, [r3]
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <TrajectoryEvaluation+0x268>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <TrajectoryEvaluation+0x268>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80022be:	4b58      	ldr	r3, [pc, #352]	; (8002420 <TrajectoryEvaluation+0x268>)
 80022c0:	ed93 6a00 	vldr	s12, [r3]
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <TrajectoryEvaluation+0x268>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <TrajectoryEvaluation+0x268>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002302:	e362      	b.n	80029ca <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <TrajectoryEvaluation+0x268>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	f200 8088 	bhi.w	800242c <TrajectoryEvaluation+0x274>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	dd7c      	ble.n	800242c <TrajectoryEvaluation+0x274>
	{
		traject -> QJ = traject -> A[1];
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002342:	4b37      	ldr	r3, [pc, #220]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <TrajectoryEvaluation+0x268>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800237a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <TrajectoryEvaluation+0x268>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023aa:	edd3 6a00 	vldr	s13, [r3]
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80023ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023d6:	ed93 6a00 	vldr	s12, [r3]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <TrajectoryEvaluation+0x268>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002418:	e2d7      	b.n	80029ca <TrajectoryEvaluation+0x812>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	200004a4 	.word	0x200004a4
 8002424:	00000000 	.word	0x00000000
 8002428:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	d87e      	bhi.n	8002540 <TrajectoryEvaluation+0x388>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002448:	4b83      	ldr	r3, [pc, #524]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	dd73      	ble.n	8002540 <TrajectoryEvaluation+0x388>
	{
		traject -> QJ = traject -> A[2];
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	ed93 7a05 	vldr	s14, [r3, #20]
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	ed93 7a05 	vldr	s14, [r3, #20]
 8002488:	4b73      	ldr	r3, [pc, #460]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 800248a:	edd3 6a00 	vldr	s13, [r3]
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80024aa:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80024be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80024ce:	4b62      	ldr	r3, [pc, #392]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80024d0:	edd3 6a00 	vldr	s13, [r3]
 80024d4:	4b60      	ldr	r3, [pc, #384]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024de:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80024f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80024fc:	ed93 6a00 	vldr	s12, [r3]
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee66 7a27 	vmul.f32	s15, s12, s15
 800250a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800250e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002512:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800253e:	e244      	b.n	80029ca <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	f200 8082 	bhi.w	800265c <TrajectoryEvaluation+0x4a4>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd76      	ble.n	800265c <TrajectoryEvaluation+0x4a4>
	{
		traject -> QJ = traject -> A[3];
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	ed93 7a06 	vldr	s14, [r3, #24]
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	ed93 7a06 	vldr	s14, [r3, #24]
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025a0:	edd3 6a00 	vldr	s13, [r3]
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025e6:	edd3 6a00 	vldr	s13, [r3]
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002606:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002612:	ed93 6a00 	vldr	s12, [r3]
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002620:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002624:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002628:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800262c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <TrajectoryEvaluation+0x4a0>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002654:	e1b9      	b.n	80029ca <TrajectoryEvaluation+0x812>
 8002656:	bf00      	nop
 8002658:	200004a4 	.word	0x200004a4
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002662:	4b89      	ldr	r3, [pc, #548]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d87e      	bhi.n	8002770 <TrajectoryEvaluation+0x5b8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002678:	4b83      	ldr	r3, [pc, #524]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	dd73      	ble.n	8002770 <TrajectoryEvaluation+0x5b8>
	{
		traject -> QJ = traject -> A[4];
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	ed93 7a07 	vldr	s14, [r3, #28]
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80026b8:	4b73      	ldr	r3, [pc, #460]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80026ba:	edd3 6a00 	vldr	s13, [r3]
 80026be:	4b72      	ldr	r3, [pc, #456]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80026da:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002700:	edd3 6a00 	vldr	s13, [r3]
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002720:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800272a:	4b57      	ldr	r3, [pc, #348]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 800272c:	ed93 6a00 	vldr	s12, [r3]
 8002730:	4b55      	ldr	r3, [pc, #340]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee66 7a27 	vmul.f32	s15, s12, s15
 800273a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800273e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002742:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800276e:	e12c      	b.n	80029ca <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	f200 8082 	bhi.w	800288c <TrajectoryEvaluation+0x6d4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279c:	dd76      	ble.n	800288c <TrajectoryEvaluation+0x6d4>
	{
		traject -> QJ = traject -> A[5];
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	ed93 7a08 	vldr	s14, [r3, #32]
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002816:	edd3 6a00 	vldr	s13, [r3]
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002836:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002842:	ed93 6a00 	vldr	s12, [r3]
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002850:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002854:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <TrajectoryEvaluation+0x6d0>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800287a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002884:	e0a1      	b.n	80029ca <TrajectoryEvaluation+0x812>
 8002886:	bf00      	nop
 8002888:	200004a4 	.word	0x200004a4
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d87e      	bhi.n	80029a0 <TrajectoryEvaluation+0x7e8>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <TrajectoryEvaluation+0x828>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	dd73      	ble.n	80029a0 <TrajectoryEvaluation+0x7e8>
	{
		traject -> QJ = traject -> A[6];
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <TrajectoryEvaluation+0x828>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028e8:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <TrajectoryEvaluation+0x828>)
 80028ea:	edd3 6a00 	vldr	s13, [r3]
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <TrajectoryEvaluation+0x828>)
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002900:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <TrajectoryEvaluation+0x828>)
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800291e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002930:	edd3 6a00 	vldr	s13, [r3]
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002950:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <TrajectoryEvaluation+0x828>)
 800295c:	ed93 6a00 	vldr	s12, [r3]
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee66 7a27 	vmul.f32	s15, s12, s15
 800296a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800296e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002972:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002976:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <TrajectoryEvaluation+0x828>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800299e:	e014      	b.n	80029ca <TrajectoryEvaluation+0x812>
	}
	else
	{
		traject -> QJ = 0;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = 0;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QV = 0;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QX = traject -> Qfinal;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	return traject -> QV;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029d0:	ee07 3a90 	vmov	s15, r3
}
 80029d4:	eeb0 0a67 	vmov.f32	s0, s15
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}
 80029de:	bf00      	nop
 80029e0:	200004a4 	.word	0x200004a4

080029e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029e8:	f000 fe48 	bl	800367c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ec:	f000 f852 	bl	8002a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f0:	f000 fa2c 	bl	8002e4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029f4:	f000 fa00 	bl	8002df8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80029f8:	f000 f8b4 	bl	8002b64 <MX_TIM1_Init>
  MX_TIM2_Init();
 80029fc:	f000 f936 	bl	8002c6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a00:	f000 f988 	bl	8002d14 <MX_TIM3_Init>
  MX_TIM11_Init();
 8002a04:	f000 f9d4 	bl	8002db0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  KalmanMatrixInit(&KalmanVar);
 8002a08:	4816      	ldr	r0, [pc, #88]	; (8002a64 <main+0x80>)
 8002a0a:	f7fe f985 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4815      	ldr	r0, [pc, #84]	; (8002a68 <main+0x84>)
 8002a12:	f001 feef 	bl	80047f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002a16:	4815      	ldr	r0, [pc, #84]	; (8002a6c <main+0x88>)
 8002a18:	f001 fe3a 	bl	8004690 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002a1c:	4814      	ldr	r0, [pc, #80]	; (8002a70 <main+0x8c>)
 8002a1e:	f001 fe37 	bl	8004690 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002a22:	213c      	movs	r1, #60	; 0x3c
 8002a24:	4813      	ldr	r0, [pc, #76]	; (8002a74 <main+0x90>)
 8002a26:	f002 f83b 	bl	8004aa0 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <main+0x94>)
 8002a34:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <main+0x94>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <main+0x94>)
 8002a3c:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <main+0x94>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <main+0x98>)
 8002a44:	6013      	str	r3, [r2, #0]
  PIDController_Init(&pid);
 8002a46:	480e      	ldr	r0, [pc, #56]	; (8002a80 <main+0x9c>)
 8002a48:	f7fe fbed 	bl	8001226 <PIDController_Init>
  PIDVelocityController_Init(&PidVelo);
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <main+0xa0>)
 8002a4e:	f7fe fccc 	bl	80013ea <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,testDes);
 8002a52:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8002a88 <main+0xa4>
 8002a56:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002a8c <main+0xa8>
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <main+0xac>)
 8002a5c:	f7fe fe58 	bl	8001710 <CoefficientAndTimeCalculation>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <main+0x7c>
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	200004a8 	.word	0x200004a8
 8002a6c:	20000580 	.word	0x20000580
 8002a70:	20000538 	.word	0x20000538
 8002a74:	200004f0 	.word	0x200004f0
 8002a78:	20000618 	.word	0x20000618
 8002a7c:	20000624 	.word	0x20000624
 8002a80:	20000354 	.word	0x20000354
 8002a84:	2000038c 	.word	0x2000038c
 8002a88:	43340000 	.word	0x43340000
 8002a8c:	00000000 	.word	0x00000000
 8002a90:	200003c4 	.word	0x200003c4

08002a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b094      	sub	sp, #80	; 0x50
 8002a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9a:	f107 0320 	add.w	r3, r7, #32
 8002a9e:	2230      	movs	r2, #48	; 0x30
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 fca4 	bl	80063f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <SystemClock_Config+0xc8>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <SystemClock_Config+0xc8>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <SystemClock_Config+0xc8>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <SystemClock_Config+0xcc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <SystemClock_Config+0xcc>)
 8002ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <SystemClock_Config+0xcc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002af4:	2301      	movs	r3, #1
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002af8:	2310      	movs	r3, #16
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002afc:	2302      	movs	r3, #2
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b04:	2308      	movs	r3, #8
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002b08:	2364      	movs	r3, #100	; 0x64
 8002b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b10:	2304      	movs	r3, #4
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 f8d1 	bl	8003cc0 <HAL_RCC_OscConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b24:	f000 fbc8 	bl	80032b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b28:	230f      	movs	r3, #15
 8002b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	2103      	movs	r1, #3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 fb33 	bl	80041b0 <HAL_RCC_ClockConfig>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b50:	f000 fbb2 	bl	80032b8 <Error_Handler>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3750      	adds	r7, #80	; 0x50
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000

08002b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b092      	sub	sp, #72	; 0x48
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]
 8002b86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fc2e 	bl	80063f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002b96:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <MX_TIM1_Init+0x104>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002b9c:	2209      	movs	r2, #9
 8002b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002ba8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc0:	4828      	ldr	r0, [pc, #160]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002bc2:	f001 fdc7 	bl	8004754 <HAL_TIM_PWM_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002bcc:	f000 fb74 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4821      	ldr	r0, [pc, #132]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002be0:	f002 fd72 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bea:	f000 fb65 	bl	80032b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bee:	2360      	movs	r3, #96	; 0x60
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	4814      	ldr	r0, [pc, #80]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002c14:	f002 f8da 	bl	8004dcc <HAL_TIM_PWM_ConfigChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c1e:	f000 fb4b 	bl	80032b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4807      	ldr	r0, [pc, #28]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002c46:	f002 fdad 	bl	80057a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c50:	f000 fb32 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <MX_TIM1_Init+0x100>)
 8002c56:	f000 fc11 	bl	800347c <HAL_TIM_MspPostInit>

}
 8002c5a:	bf00      	nop
 8002c5c:	3748      	adds	r7, #72	; 0x48
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200004a8 	.word	0x200004a8
 8002c68:	40010000 	.word	0x40010000

08002c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fbb8 	bl	80063f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002c9e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cd4:	f107 030c 	add.w	r3, r7, #12
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002cdc:	f001 fe3a 	bl	8004954 <HAL_TIM_Encoder_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ce6:	f000 fae7 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <MX_TIM2_Init+0xa4>)
 8002cf8:	f002 fce6 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d02:	f000 fad9 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200004f0 	.word	0x200004f0

08002d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d28:	463b      	mov	r3, r7
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <MX_TIM3_Init+0x98>)
 8002d34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d38:	2209      	movs	r2, #9
 8002d3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d44:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d56:	4814      	ldr	r0, [pc, #80]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d58:	f001 fc4a 	bl	80045f0 <HAL_TIM_Base_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d62:	f000 faa9 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4619      	mov	r1, r3
 8002d72:	480d      	ldr	r0, [pc, #52]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d74:	f002 f8ec 	bl	8004f50 <HAL_TIM_ConfigClockSource>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d7e:	f000 fa9b 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4806      	ldr	r0, [pc, #24]	; (8002da8 <MX_TIM3_Init+0x94>)
 8002d90:	f002 fc9a 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d9a:	f000 fa8d 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000538 	.word	0x20000538
 8002dac:	40000400 	.word	0x40000400

08002db0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <MX_TIM11_Init+0x44>)
 8002db8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002dbc:	2263      	movs	r2, #99	; 0x63
 8002dbe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dcc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_TIM11_Init+0x40>)
 8002ddc:	f001 fc08 	bl	80045f0 <HAL_TIM_Base_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002de6:	f000 fa67 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000580 	.word	0x20000580
 8002df4:	40014800 	.word	0x40014800

08002df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <MX_USART2_UART_Init+0x50>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e30:	f002 fd1e 	bl	8005870 <HAL_UART_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e3a:	f000 fa3d 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200005c8 	.word	0x200005c8
 8002e48:	40004400 	.word	0x40004400

08002e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <MX_GPIO_Init+0xd4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002ed8:	4812      	ldr	r0, [pc, #72]	; (8002f24 <MX_GPIO_Init+0xd8>)
 8002eda:	f000 fed7 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ee4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <MX_GPIO_Init+0xdc>)
 8002ef6:	f000 fd45 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002efa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	4804      	ldr	r0, [pc, #16]	; (8002f24 <MX_GPIO_Init+0xd8>)
 8002f14:	f000 fd36 	bl	8003984 <HAL_GPIO_Init>

}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	00000000 	.word	0x00000000

08002f30 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <EncoderRead+0x100>)
 8002f3e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002f40:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <EncoderRead+0x100>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <EncoderRead+0x100>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	1ad2      	subs	r2, r2, r3
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <EncoderRead+0x104>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	425b      	negs	r3, r3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	da07      	bge.n	8002f64 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <EncoderRead+0x108>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002f5c:	3320      	adds	r3, #32
 8002f5e:	4a36      	ldr	r2, [pc, #216]	; (8003038 <EncoderRead+0x108>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00f      	b.n	8002f84 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <EncoderRead+0x100>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b31      	ldr	r3, [pc, #196]	; (8003030 <EncoderRead+0x100>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	1ad2      	subs	r2, r2, r3
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <EncoderRead+0x104>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	db06      	blt.n	8002f84 <EncoderRead+0x54>
		WrappingStep-=12000;
 8002f76:	4b30      	ldr	r3, [pc, #192]	; (8003038 <EncoderRead+0x108>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8002f7e:	3b20      	subs	r3, #32
 8002f80:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <EncoderRead+0x108>)
 8002f82:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <EncoderRead+0x100>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <EncoderRead+0x108>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <EncoderRead+0x10c>)
 8002f90:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg = (PositionRaw/12000.0)*360.0;
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <EncoderRead+0x10c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fa70 	bl	800047c <__aeabi_i2d>
 8002f9c:	a322      	add	r3, pc, #136	; (adr r3, 8003028 <EncoderRead+0xf8>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd fbff 	bl	80007a4 <__aeabi_ddiv>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <EncoderRead+0x110>)
 8002fb4:	f7fd facc 	bl	8000550 <__aeabi_dmul>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f7fd fcd8 	bl	8000974 <__aeabi_d2f>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <EncoderRead+0x114>)
 8002fc8:	6013      	str	r3, [r2, #0]
	VelocityDeg = (((EncoderRawData[0] - EncoderRawData[1])/dt)/12000.0)*360.0;
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <EncoderRead+0x100>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <EncoderRead+0x100>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003048 <EncoderRead+0x118>
 8002fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fe4:	ee16 0a90 	vmov	r0, s13
 8002fe8:	f7fd fa5a 	bl	80004a0 <__aeabi_f2d>
 8002fec:	a30e      	add	r3, pc, #56	; (adr r3, 8003028 <EncoderRead+0xf8>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fbd7 	bl	80007a4 <__aeabi_ddiv>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <EncoderRead+0x110>)
 8003004:	f7fd faa4 	bl	8000550 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f7fd fcb0 	bl	8000974 <__aeabi_d2f>
 8003014:	4603      	mov	r3, r0
 8003016:	4a0d      	ldr	r2, [pc, #52]	; (800304c <EncoderRead+0x11c>)
 8003018:	6013      	str	r3, [r2, #0]
	EncoderRawData[1] = EncoderRawData[0];
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <EncoderRead+0x100>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <EncoderRead+0x100>)
 8003020:	6053      	str	r3, [r2, #4]
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	00000000 	.word	0x00000000
 800302c:	40c77000 	.word	0x40c77000
 8003030:	20000618 	.word	0x20000618
 8003034:	20000474 	.word	0x20000474
 8003038:	20000620 	.word	0x20000620
 800303c:	20000624 	.word	0x20000624
 8003040:	40768000 	.word	0x40768000
 8003044:	20000628 	.word	0x20000628
 8003048:	3a83126f 	.word	0x3a83126f
 800304c:	2000062c 	.word	0x2000062c

08003050 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM){
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

	if(PWM<0){
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da02      	bge.n	8003064 <PWMAbs+0x14>
		return PWM*-1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	425b      	negs	r3, r3
 8003062:	e000      	b.n	8003066 <PWMAbs+0x16>
	}else{
		return PWM;
 8003064:	687b      	ldr	r3, [r7, #4]
	}
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-PWM_MAX){
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	dc11      	bgt.n	80030a6 <Drivemotor+0x32>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <Drivemotor+0xa8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	db0d      	blt.n	80030a6 <Drivemotor+0x32>
		htim1.Instance->CCR1=PWMAbs(PWM);
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <Drivemotor+0xac>)
 800308c:	681c      	ldr	r4, [r3, #0]
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffde 	bl	8003050 <PWMAbs>
 8003094:	4603      	mov	r3, r0
 8003096:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800309e:	4821      	ldr	r0, [pc, #132]	; (8003124 <Drivemotor+0xb0>)
 80030a0:	f000 fdf4 	bl	8003c8c <HAL_GPIO_WritePin>
 80030a4:	e036      	b.n	8003114 <Drivemotor+0xa0>
	}else if (PWM<-PWM_MAX){
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <Drivemotor+0xa8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	da0b      	bge.n	80030c6 <Drivemotor+0x52>
		htim1.Instance->CCR1=PWM_MAX;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <Drivemotor+0xac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030be:	4819      	ldr	r0, [pc, #100]	; (8003124 <Drivemotor+0xb0>)
 80030c0:	f000 fde4 	bl	8003c8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}else if(PWM>PWM_MAX){
		htim1.Instance->CCR1=PWM_MAX;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}
}
 80030c4:	e026      	b.n	8003114 <Drivemotor+0xa0>
	}else if(PWM>=0 && PWM<=PWM_MAX){
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db12      	blt.n	80030f2 <Drivemotor+0x7e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80030d2:	4293      	cmp	r3, r2
 80030d4:	dc0d      	bgt.n	80030f2 <Drivemotor+0x7e>
		htim1.Instance->CCR1=PWMAbs(PWM);
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <Drivemotor+0xac>)
 80030d8:	681c      	ldr	r4, [r3, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffb8 	bl	8003050 <PWMAbs>
 80030e0:	4603      	mov	r3, r0
 80030e2:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80030e4:	2201      	movs	r2, #1
 80030e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ea:	480e      	ldr	r0, [pc, #56]	; (8003124 <Drivemotor+0xb0>)
 80030ec:	f000 fdce 	bl	8003c8c <HAL_GPIO_WritePin>
 80030f0:	e010      	b.n	8003114 <Drivemotor+0xa0>
	}else if(PWM>PWM_MAX){
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd0b      	ble.n	8003114 <Drivemotor+0xa0>
		htim1.Instance->CCR1=PWM_MAX;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <Drivemotor+0xac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f242 7210 	movw	r2, #10000	; 0x2710
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800310c:	4805      	ldr	r0, [pc, #20]	; (8003124 <Drivemotor+0xb0>)
 800310e:	f000 fdbd 	bl	8003c8c <HAL_GPIO_WritePin>
}
 8003112:	e7ff      	b.n	8003114 <Drivemotor+0xa0>
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	ffffd8f0 	.word	0xffffd8f0
 8003120:	200004a8 	.word	0x200004a8
 8003124:	40020000 	.word	0x40020000

08003128 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af02      	add	r7, sp, #8
 8003130:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10b      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 800313a:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003144:	eb12 0801 	adds.w	r8, r2, r1
 8003148:	f143 0900 	adc.w	r9, r3, #0
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800314e:	e9c3 8900 	strd	r8, r9, [r3]
	}
	if (htim == &htim3) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a3f      	ldr	r2, [pc, #252]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d172      	bne.n	8003240 <HAL_TIM_PeriodElapsedCallback+0x118>
		CheckLoopStartTime = Micros();
 800315a:	f000 f895 	bl	8003288 <Micros>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	493d      	ldr	r1, [pc, #244]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003164:	e9c1 2300 	strd	r2, r3, [r1]
		  if (flagT == 0)
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PeriodElapsedCallback+0x5c>
		  {
		    StartTime = Micros();
 8003170:	f000 f88a 	bl	8003288 <Micros>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4939      	ldr	r1, [pc, #228]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
		    flagT =1;
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
		  }
		CurrentTime = Micros();
 8003184:	f000 f880 	bl	8003288 <Micros>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4935      	ldr	r1, [pc, #212]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800318e:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003192:	f7ff fecd 	bl	8002f30 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg);
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	4832      	ldr	r0, [pc, #200]	; (800326c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031a2:	f7fd ff13 	bl	8000fcc <KalmanFilterFunction>
		setpoint = TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80031a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	e9cd 2300 	strd	r2, r3, [sp]
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	482d      	ldr	r0, [pc, #180]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031bc:	f7fe fffc 	bl	80021b8 <TrajectoryEvaluation>
 80031c0:	eef0 7a40 	vmov.f32	s15, s0
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031c6:	edc3 7a00 	vstr	s15, [r3]
		PIDController_Update(&pid, traject.QX, KalmanVar.MatState_Data[0]);
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031cc:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031d2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80031d6:	eef0 0a47 	vmov.f32	s1, s14
 80031da:	eeb0 0a67 	vmov.f32	s0, s15
 80031de:	4826      	ldr	r0, [pc, #152]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80031e0:	f7fe f83f 	bl	8001262 <PIDController_Update>
		PIDVelocityController_Update(&PidVelo, traject.QV + pid.out, KalmanVar.MatState_Data[1]);
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031e6:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80031ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80031f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031f6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80031fa:	eef0 0a47 	vmov.f32	s1, s14
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	481e      	ldr	r0, [pc, #120]	; (800327c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003204:	f7fe f917 	bl	8001436 <PIDVelocityController_Update>
		Drivemotor(PidVelo.ControllerOut);
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800320a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800320e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003212:	ee17 0a90 	vmov	r0, s15
 8003216:	f7ff ff2d 	bl	8003074 <Drivemotor>
//		timeC = (CurrentTime - StartTime)/1000000.0;
		CheckLoopStopTime = Micros();
 800321a:	f000 f835 	bl	8003288 <Micros>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003224:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800322a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	1a84      	subs	r4, r0, r2
 8003236:	eb61 0503 	sbc.w	r5, r1, r3
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800323c:	e9c3 4500 	strd	r4, r5, [r3]
		}
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800324a:	bf00      	nop
 800324c:	20000580 	.word	0x20000580
 8003250:	20000610 	.word	0x20000610
 8003254:	20000538 	.word	0x20000538
 8003258:	20000648 	.word	0x20000648
 800325c:	20000630 	.word	0x20000630
 8003260:	20000638 	.word	0x20000638
 8003264:	20000640 	.word	0x20000640
 8003268:	20000628 	.word	0x20000628
 800326c:	20000000 	.word	0x20000000
 8003270:	200003c4 	.word	0x200003c4
 8003274:	200003c0 	.word	0x200003c0
 8003278:	20000354 	.word	0x20000354
 800327c:	2000038c 	.word	0x2000038c
 8003280:	20000650 	.word	0x20000650
 8003284:	20000658 	.word	0x20000658

08003288 <Micros>:

uint64_t Micros(){
 8003288:	b4b0      	push	{r4, r5, r7}
 800328a:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <Micros+0x28>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2200      	movs	r2, #0
 8003292:	4618      	mov	r0, r3
 8003294:	4611      	mov	r1, r2
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <Micros+0x2c>)
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	1884      	adds	r4, r0, r2
 800329e:	eb41 0503 	adc.w	r5, r1, r3
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
}
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bcb0      	pop	{r4, r5, r7}
 80032ae:	4770      	bx	lr
 80032b0:	40014800 	.word	0x40014800
 80032b4:	20000610 	.word	0x20000610

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
}
 80032be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <Error_Handler+0x8>
	...

080032c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_MspInit+0x4c>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HAL_MspInit+0x4c>)
 80032d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_MspInit+0x4c>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_MspInit+0x4c>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_MspInit+0x4c>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_MspInit+0x4c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003302:	2007      	movs	r0, #7
 8003304:	f000 fafc 	bl	8003900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_TIM_PWM_MspInit+0x48>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d115      	bne.n	8003352 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_TIM_PWM_MspInit+0x4c>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_TIM_PWM_MspInit+0x4c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_TIM_PWM_MspInit+0x4c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	201a      	movs	r0, #26
 8003348:	f000 fae5 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800334c:	201a      	movs	r0, #26
 800334e:	f000 fafe 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d12b      	bne.n	80033de <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033be:	2303      	movs	r3, #3
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	4804      	ldr	r0, [pc, #16]	; (80033ec <HAL_TIM_Encoder_MspInit+0x88>)
 80033da:	f000 fad3 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033de:	bf00      	nop
 80033e0:	3728      	adds	r7, #40	; 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020000 	.word	0x40020000

080033f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIM_Base_MspInit+0x80>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d116      	bne.n	8003430 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	201d      	movs	r0, #29
 8003424:	f000 fa77 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003428:	201d      	movs	r0, #29
 800342a:	f000 fa90 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800342e:	e01a      	b.n	8003466 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_TIM_Base_MspInit+0x88>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d115      	bne.n	8003466 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 8003444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003448:	6453      	str	r3, [r2, #68]	; 0x44
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_TIM_Base_MspInit+0x84>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	201a      	movs	r0, #26
 800345c:	f000 fa5b 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003460:	201a      	movs	r0, #26
 8003462:	f000 fa74 	bl	800394e <HAL_NVIC_EnableIRQ>
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40000400 	.word	0x40000400
 8003474:	40023800 	.word	0x40023800
 8003478:	40014800 	.word	0x40014800

0800347c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <HAL_TIM_MspPostInit+0x68>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d11e      	bne.n	80034dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	4619      	mov	r1, r3
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <HAL_TIM_MspPostInit+0x70>)
 80034d8:	f000 fa54 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034dc:	bf00      	nop
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000

080034f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_UART_MspInit+0x84>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d12b      	bne.n	800356a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_UART_MspInit+0x88>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_UART_MspInit+0x88>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_UART_MspInit+0x88>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_UART_MspInit+0x88>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_UART_MspInit+0x88>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <HAL_UART_MspInit+0x88>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800354a:	230c      	movs	r3, #12
 800354c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800355a:	2307      	movs	r3, #7
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	4619      	mov	r1, r3
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <HAL_UART_MspInit+0x8c>)
 8003566:	f000 fa0d 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800356a:	bf00      	nop
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40004400 	.word	0x40004400
 8003578:	40023800 	.word	0x40023800
 800357c:	40020000 	.word	0x40020000

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <NMI_Handler+0x4>

08003586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <HardFault_Handler+0x4>

0800358c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <MemManage_Handler+0x4>

08003592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <BusFault_Handler+0x4>

08003598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <UsageFault_Handler+0x4>

0800359e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035cc:	f000 f8a8 	bl	8003720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80035da:	f001 faef 	bl	8004bbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80035e0:	f001 faec 	bl	8004bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200004a8 	.word	0x200004a8
 80035ec:	20000580 	.word	0x20000580

080035f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <TIM3_IRQHandler+0x10>)
 80035f6:	f001 fae1 	bl	8004bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000538 	.word	0x20000538

08003604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <SystemInit+0x20>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <SystemInit+0x20>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800362c:	480d      	ldr	r0, [pc, #52]	; (8003664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800363c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003644:	4c0b      	ldr	r4, [pc, #44]	; (8003674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003652:	f7ff ffd7 	bl	8003604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003656:	f002 fea7 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800365a:	f7ff f9c3 	bl	80029e4 <main>
  bx  lr    
 800365e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003668:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 800366c:	08006440 	.word	0x08006440
  ldr r2, =_sbss
 8003670:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8003674:	20000664 	.word	0x20000664

08003678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003678:	e7fe      	b.n	8003678 <ADC_IRQHandler>
	...

0800367c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <HAL_Init+0x40>)
 8003686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800368a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <HAL_Init+0x40>)
 8003692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <HAL_Init+0x40>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a4:	2003      	movs	r0, #3
 80036a6:	f000 f92b 	bl	8003900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f000 f808 	bl	80036c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b0:	f7ff fe08 	bl	80032c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00

080036c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_InitTick+0x54>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x58>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f943 	bl	800396a <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00e      	b.n	800370c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d80a      	bhi.n	800370a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f000 f90b 	bl	8003916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_InitTick+0x5c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000478 	.word	0x20000478
 8003718:	20000480 	.word	0x20000480
 800371c:	2000047c 	.word	0x2000047c

08003720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000480 	.word	0x20000480
 8003744:	20000660 	.word	0x20000660

08003748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000660 	.word	0x20000660

08003760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0307 	and.w	r3, r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db0b      	blt.n	80037ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4907      	ldr	r1, [pc, #28]	; (80037fc <__NVIC_EnableIRQ+0x38>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2001      	movs	r0, #1
 80037e6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e100 	.word	0xe000e100

08003800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	; (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	; (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf28      	it	cs
 8003872:	2304      	movcs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3304      	adds	r3, #4
 800387a:	2b06      	cmp	r3, #6
 800387c:	d902      	bls.n	8003884 <NVIC_EncodePriority+0x30>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3b03      	subs	r3, #3
 8003882:	e000      	b.n	8003886 <NVIC_EncodePriority+0x32>
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	4313      	orrs	r3, r2
         );
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038cc:	d301      	bcc.n	80038d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00f      	b.n	80038f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <SysTick_Config+0x40>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038da:	210f      	movs	r1, #15
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f7ff ff8e 	bl	8003800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <SysTick_Config+0x40>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <SysTick_Config+0x40>)
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	e000e010 	.word	0xe000e010

08003900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff29 	bl	8003760 <__NVIC_SetPriorityGrouping>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003928:	f7ff ff3e 	bl	80037a8 <__NVIC_GetPriorityGrouping>
 800392c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff8e 	bl	8003854 <NVIC_EncodePriority>
 8003938:	4602      	mov	r2, r0
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff5d 	bl	8003800 <__NVIC_SetPriority>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff31 	bl	80037c4 <__NVIC_EnableIRQ>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffa2 	bl	80038bc <SysTick_Config>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e159      	b.n	8003c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f040 8148 	bne.w	8003c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d130      	bne.n	8003a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 0201 	and.w	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d017      	beq.n	8003a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d123      	bne.n	8003ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a2 	beq.w	8003c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b26:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_GPIO_Init+0x2ec>)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a49      	ldr	r2, [pc, #292]	; (8003c74 <HAL_GPIO_Init+0x2f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <HAL_GPIO_Init+0x202>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a48      	ldr	r2, [pc, #288]	; (8003c78 <HAL_GPIO_Init+0x2f4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_GPIO_Init+0x1fe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a47      	ldr	r2, [pc, #284]	; (8003c7c <HAL_GPIO_Init+0x2f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00d      	beq.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_GPIO_Init+0x2fc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x1f6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a45      	ldr	r2, [pc, #276]	; (8003c84 <HAL_GPIO_Init+0x300>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_GPIO_Init+0x1f2>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b76:	2307      	movs	r3, #7
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b86:	2300      	movs	r3, #0
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	4935      	ldr	r1, [pc, #212]	; (8003c70 <HAL_GPIO_Init+0x2ec>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1e:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c48:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	f67f aea2 	bls.w	80039a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40013c00 	.word	0x40013c00

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c9c:	787b      	ldrb	r3, [r7, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca8:	e003      	b.n	8003cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e267      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e242      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6f      	ldr	r2, [pc, #444]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6c      	ldr	r2, [pc, #432]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b69      	ldr	r3, [pc, #420]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a68      	ldr	r2, [pc, #416]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7ff fce6 	bl	8003748 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7ff fce2 	bl	8003748 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e207      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b5b      	ldr	r3, [pc, #364]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7ff fcd2 	bl	8003748 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7ff fcce 	bl	8003748 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1f3      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d11c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1c7      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4937      	ldr	r1, [pc, #220]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	e03a      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7ff fc87 	bl	8003748 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7ff fc83 	bl	8003748 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e1a8      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4925      	ldr	r1, [pc, #148]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7ff fc66 	bl	8003748 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e80:	f7ff fc62 	bl	8003748 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e187      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d036      	beq.n	8003f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7ff fc46 	bl	8003748 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7ff fc42 	bl	8003748 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e167      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
 8003ede:	e01b      	b.n	8003f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7ff fc2f 	bl	8003748 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e00e      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7ff fc2b 	bl	8003748 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d907      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e150      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8097 	beq.w	8004054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b7a      	ldr	r3, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d118      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f62:	4b74      	ldr	r3, [pc, #464]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a73      	ldr	r2, [pc, #460]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6e:	f7ff fbeb 	bl	8003748 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f76:	f7ff fbe7 	bl	8003748 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e10c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x2ea>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a63      	ldr	r2, [pc, #396]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x30c>
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003fcc:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	4b55      	ldr	r3, [pc, #340]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7ff fbac 	bl	8003748 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7ff fba8 	bl	8003748 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0cb      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7ff fb96 	bl	8003748 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7ff fb92 	bl	8003748 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0b5      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a1 	beq.w	80041a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405e:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d05c      	beq.n	8004124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d141      	bne.n	80040f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7ff fb66 	bl	8003748 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7ff fb62 	bl	8003748 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e087      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	019b      	lsls	r3, r3, #6
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	491b      	ldr	r1, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7ff fb3b 	bl	8003748 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7ff fb37 	bl	8003748 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e05c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x416>
 80040f4:	e054      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7ff fb24 	bl	8003748 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7ff fb20 	bl	8003748 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e045      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
 8004122:	e03d      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e038      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4ec>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d028      	beq.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d121      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d11a      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0cc      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b68      	ldr	r3, [pc, #416]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d90c      	bls.n	80041ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b65      	ldr	r3, [pc, #404]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b8      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a58      	ldr	r2, [pc, #352]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494d      	ldr	r1, [pc, #308]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d044      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d119      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e067      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4934      	ldr	r1, [pc, #208]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7ff fa52 	bl	8003748 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7ff fa4e 	bl	8003748 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e04f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2b      	ldr	r3, [pc, #172]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20c      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b22      	ldr	r3, [pc, #136]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e032      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4916      	ldr	r1, [pc, #88]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f821 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800433a:	4602      	mov	r2, r0
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	490a      	ldr	r1, [pc, #40]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f9b2 	bl	80036c0 <HAL_InitTick>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00
 800436c:	40023800 	.word	0x40023800
 8004370:	08006418 	.word	0x08006418
 8004374:	20000478 	.word	0x20000478
 8004378:	2000047c 	.word	0x2000047c

0800437c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004380:	b094      	sub	sp, #80	; 0x50
 8004382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	647b      	str	r3, [r7, #68]	; 0x44
 8004388:	2300      	movs	r3, #0
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	2300      	movs	r3, #0
 800438e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004394:	4b79      	ldr	r3, [pc, #484]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d00d      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x40>
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	f200 80e1 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x34>
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ae:	e0db      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCC_GetSysClockFreq+0x204>)
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043b4:	e0db      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b6:	4b73      	ldr	r3, [pc, #460]	; (8004584 <HAL_RCC_GetSysClockFreq+0x208>)
 80043b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ba:	e0d8      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043bc:	4b6f      	ldr	r3, [pc, #444]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b6a      	ldr	r3, [pc, #424]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	2200      	movs	r2, #0
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
 80043dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043ee:	4622      	mov	r2, r4
 80043f0:	462b      	mov	r3, r5
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004400:	0150      	lsls	r0, r2, #5
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4621      	mov	r1, r4
 8004408:	1a51      	subs	r1, r2, r1
 800440a:	6139      	str	r1, [r7, #16]
 800440c:	4629      	mov	r1, r5
 800440e:	eb63 0301 	sbc.w	r3, r3, r1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004420:	4659      	mov	r1, fp
 8004422:	018b      	lsls	r3, r1, #6
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442a:	4651      	mov	r1, sl
 800442c:	018a      	lsls	r2, r1, #6
 800442e:	4651      	mov	r1, sl
 8004430:	ebb2 0801 	subs.w	r8, r2, r1
 8004434:	4659      	mov	r1, fp
 8004436:	eb63 0901 	sbc.w	r9, r3, r1
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444e:	4690      	mov	r8, r2
 8004450:	4699      	mov	r9, r3
 8004452:	4623      	mov	r3, r4
 8004454:	eb18 0303 	adds.w	r3, r8, r3
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	462b      	mov	r3, r5
 800445c:	eb49 0303 	adc.w	r3, r9, r3
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800446e:	4629      	mov	r1, r5
 8004470:	024b      	lsls	r3, r1, #9
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004478:	4621      	mov	r1, r4
 800447a:	024a      	lsls	r2, r1, #9
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	2200      	movs	r2, #0
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
 8004486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800448c:	f7fc fac2 	bl	8000a14 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004498:	e058      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b38      	ldr	r3, [pc, #224]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	2200      	movs	r2, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	4611      	mov	r1, r2
 80044a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c6:	0150      	lsls	r0, r2, #5
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4641      	mov	r1, r8
 80044ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d2:	4649      	mov	r1, r9
 80044d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044ec:	ebb2 040a 	subs.w	r4, r2, sl
 80044f0:	eb63 050b 	sbc.w	r5, r3, fp
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	00eb      	lsls	r3, r5, #3
 80044fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004502:	00e2      	lsls	r2, r4, #3
 8004504:	4614      	mov	r4, r2
 8004506:	461d      	mov	r5, r3
 8004508:	4643      	mov	r3, r8
 800450a:	18e3      	adds	r3, r4, r3
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	464b      	mov	r3, r9
 8004510:	eb45 0303 	adc.w	r3, r5, r3
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004522:	4629      	mov	r1, r5
 8004524:	028b      	lsls	r3, r1, #10
 8004526:	4621      	mov	r1, r4
 8004528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800452c:	4621      	mov	r1, r4
 800452e:	028a      	lsls	r2, r1, #10
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004536:	2200      	movs	r2, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	61fa      	str	r2, [r7, #28]
 800453c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004540:	f7fc fa68 	bl	8000a14 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4613      	mov	r3, r2
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	3301      	adds	r3, #1
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800455c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004566:	e002      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCC_GetSysClockFreq+0x204>)
 800456a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004570:	4618      	mov	r0, r3
 8004572:	3750      	adds	r7, #80	; 0x50
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400
 8004584:	007a1200 	.word	0x007a1200

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_GetHCLKFreq+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000478 	.word	0x20000478

080045a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a4:	f7ff fff0 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0a9b      	lsrs	r3, r3, #10
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	08006428 	.word	0x08006428

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045cc:	f7ff ffdc 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	0b5b      	lsrs	r3, r3, #13
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4903      	ldr	r1, [pc, #12]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	08006428 	.word	0x08006428

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe feea 	bl	80033f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fd7e 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e044      	b.n	8004732 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_TIM_Base_Start_IT+0xb0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d018      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d013      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_TIM_Base_Start_IT+0xb4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_TIM_Base_Start_IT+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIM_Base_Start_IT+0xbc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_TIM_Base_Start_IT+0xc0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d010      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e007      	b.n	8004730 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014000 	.word	0x40014000

08004754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e041      	b.n	80047ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe fdca 	bl	8003314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fccc 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x24>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e022      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d109      	bne.n	8004832 <HAL_TIM_PWM_Start+0x3e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e015      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x58>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e008      	b.n	800485e <HAL_TIM_PWM_Start+0x6a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e068      	b.n	8004938 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0x82>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	e013      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0x92>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	e00b      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	e003      	b.n	800489e <HAL_TIM_PWM_Start+0xaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fee8 	bl	800567c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a23      	ldr	r2, [pc, #140]	; (8004940 <HAL_TIM_PWM_Start+0x14c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_TIM_PWM_Start+0x14c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d018      	beq.n	8004902 <HAL_TIM_PWM_Start+0x10e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d8:	d013      	beq.n	8004902 <HAL_TIM_PWM_Start+0x10e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_TIM_PWM_Start+0x150>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00e      	beq.n	8004902 <HAL_TIM_PWM_Start+0x10e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIM_PWM_Start+0x154>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_TIM_PWM_Start+0x10e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIM_PWM_Start+0x158>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_TIM_PWM_Start+0x10e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <HAL_TIM_PWM_Start+0x15c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b06      	cmp	r3, #6
 8004912:	d010      	beq.n	8004936 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e007      	b.n	8004936 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40010000 	.word	0x40010000
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40000c00 	.word	0x40000c00
 8004950:	40014000 	.word	0x40014000

08004954 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e097      	b.n	8004a98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fe fcf1 	bl	8003364 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004998:	f023 0307 	bic.w	r3, r3, #7
 800499c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fbc1 	bl	8005130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049f4:	f023 030c 	bic.w	r3, r3, #12
 80049f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4313      	orrs	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	011a      	lsls	r2, r3, #4
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	4313      	orrs	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4313      	orrs	r3, r2
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ab8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ac0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ac8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d110      	bne.n	8004af2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad6:	7b7b      	ldrb	r3, [r7, #13]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e069      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af0:	e031      	b.n	8004b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d110      	bne.n	8004b1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af8:	7bbb      	ldrb	r3, [r7, #14]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004afe:	7b3b      	ldrb	r3, [r7, #12]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d001      	beq.n	8004b08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e055      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b18:	e01d      	b.n	8004b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d108      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b2c:	7b3b      	ldrb	r3, [r7, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e03e      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_TIM_Encoder_Start+0xc4>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d008      	beq.n	8004b74 <HAL_TIM_Encoder_Start+0xd4>
 8004b62:	e00f      	b.n	8004b84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd85 	bl	800567c <TIM_CCxChannelCmd>
      break;
 8004b72:	e016      	b.n	8004ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fd7d 	bl	800567c <TIM_CCxChannelCmd>
      break;
 8004b82:	e00e      	b.n	8004ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd75 	bl	800567c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	2104      	movs	r1, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fd6e 	bl	800567c <TIM_CCxChannelCmd>
      break;
 8004ba0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0202 	mvn.w	r2, #2
 8004be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa77 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa69 	bl	80050de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa7a 	bl	8005106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0204 	mvn.w	r2, #4
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa4d 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa3f 	bl	80050de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa50 	bl	8005106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0208 	mvn.w	r2, #8
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2204      	movs	r2, #4
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa23 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa15 	bl	80050de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa26 	bl	8005106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d122      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d11b      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0210 	mvn.w	r2, #16
 8004ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9f9 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9eb 	bl	80050de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f9fc 	bl	8005106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0201 	mvn.w	r2, #1
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fe f9f4 	bl	8003128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fd78 	bl	800585c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d10e      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d107      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f9c1 	bl	800511a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d10e      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d107      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0220 	mvn.w	r2, #32
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fd42 	bl	8005848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0ae      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	f200 809f 	bhi.w	8004f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004f39 	.word	0x08004f39
 8004e08:	08004f39 	.word	0x08004f39
 8004e0c:	08004f39 	.word	0x08004f39
 8004e10:	08004e75 	.word	0x08004e75
 8004e14:	08004f39 	.word	0x08004f39
 8004e18:	08004f39 	.word	0x08004f39
 8004e1c:	08004f39 	.word	0x08004f39
 8004e20:	08004eb7 	.word	0x08004eb7
 8004e24:	08004f39 	.word	0x08004f39
 8004e28:	08004f39 	.word	0x08004f39
 8004e2c:	08004f39 	.word	0x08004f39
 8004e30:	08004ef7 	.word	0x08004ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f9f8 	bl	8005230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0208 	orr.w	r2, r2, #8
 8004e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	619a      	str	r2, [r3, #24]
      break;
 8004e72:	e064      	b.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fa3e 	bl	80052fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	619a      	str	r2, [r3, #24]
      break;
 8004eb4:	e043      	b.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fa89 	bl	80053d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0208 	orr.w	r2, r2, #8
 8004ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0204 	bic.w	r2, r2, #4
 8004ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	61da      	str	r2, [r3, #28]
      break;
 8004ef4:	e023      	b.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fad3 	bl	80054a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	61da      	str	r2, [r3, #28]
      break;
 8004f36:	e002      	b.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_ConfigClockSource+0x1c>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e0b4      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x186>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa4:	d03e      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0xd4>
 8004fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004faa:	f200 8087 	bhi.w	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	f000 8086 	beq.w	80050c2 <HAL_TIM_ConfigClockSource+0x172>
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d87f      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d01a      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8004fc0:	2b70      	cmp	r3, #112	; 0x70
 8004fc2:	d87b      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d050      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x11a>
 8004fc8:	2b60      	cmp	r3, #96	; 0x60
 8004fca:	d877      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d03c      	beq.n	800504a <HAL_TIM_ConfigClockSource+0xfa>
 8004fd0:	2b50      	cmp	r3, #80	; 0x50
 8004fd2:	d873      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d058      	beq.n	800508a <HAL_TIM_ConfigClockSource+0x13a>
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d86f      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d064      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x15a>
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d86b      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d060      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x15a>
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d867      	bhi.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d05c      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x15a>
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d05a      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x15a>
 8004ff4:	e062      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6899      	ldr	r1, [r3, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f000 fb19 	bl	800563c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	609a      	str	r2, [r3, #8]
      break;
 8005022:	e04f      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f000 fb02 	bl	800563c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005046:	609a      	str	r2, [r3, #8]
      break;
 8005048:	e03c      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6859      	ldr	r1, [r3, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	461a      	mov	r2, r3
 8005058:	f000 fa76 	bl	8005548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2150      	movs	r1, #80	; 0x50
 8005062:	4618      	mov	r0, r3
 8005064:	f000 facf 	bl	8005606 <TIM_ITRx_SetConfig>
      break;
 8005068:	e02c      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6859      	ldr	r1, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	461a      	mov	r2, r3
 8005078:	f000 fa95 	bl	80055a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2160      	movs	r1, #96	; 0x60
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fabf 	bl	8005606 <TIM_ITRx_SetConfig>
      break;
 8005088:	e01c      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	f000 fa56 	bl	8005548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2140      	movs	r1, #64	; 0x40
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 faaf 	bl	8005606 <TIM_ITRx_SetConfig>
      break;
 80050a8:	e00c      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f000 faa6 	bl	8005606 <TIM_ITRx_SetConfig>
      break;
 80050ba:	e003      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      break;
 80050c0:	e000      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a34      	ldr	r2, [pc, #208]	; (8005214 <TIM_Base_SetConfig+0xe4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a31      	ldr	r2, [pc, #196]	; (8005218 <TIM_Base_SetConfig+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a30      	ldr	r2, [pc, #192]	; (800521c <TIM_Base_SetConfig+0xec>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <TIM_Base_SetConfig+0xf0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a25      	ldr	r2, [pc, #148]	; (8005214 <TIM_Base_SetConfig+0xe4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <TIM_Base_SetConfig+0xe8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <TIM_Base_SetConfig+0xec>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a20      	ldr	r2, [pc, #128]	; (8005220 <TIM_Base_SetConfig+0xf0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <TIM_Base_SetConfig+0xf4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <TIM_Base_SetConfig+0xf8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	; (800522c <TIM_Base_SetConfig+0xfc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a08      	ldr	r2, [pc, #32]	; (8005214 <TIM_Base_SetConfig+0xe4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 0302 	bic.w	r3, r3, #2
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <TIM_OC1_SetConfig+0xc8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10c      	bne.n	80052a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0308 	bic.w	r3, r3, #8
 8005292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <TIM_OC1_SetConfig+0xc8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d111      	bne.n	80052d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40010000 	.word	0x40010000

080052fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0320 	bic.w	r3, r3, #32
 8005346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <TIM_OC2_SetConfig+0xd4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10d      	bne.n	8005378 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC2_SetConfig+0xd4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d113      	bne.n	80053a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000

080053d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800541c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <TIM_OC3_SetConfig+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10d      	bne.n	800544e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800544c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a14      	ldr	r2, [pc, #80]	; (80054a4 <TIM_OC3_SetConfig+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d113      	bne.n	800547e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40010000 	.word	0x40010000

080054a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <TIM_OC4_SetConfig+0x9c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d109      	bne.n	800551c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000

08005548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 030a 	bic.w	r3, r3, #10
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f023 0210 	bic.w	r2, r3, #16
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	031b      	lsls	r3, r3, #12
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	f043 0307 	orr.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	431a      	orrs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2201      	movs	r2, #1
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e050      	b.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d018      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d013      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a18      	ldr	r2, [pc, #96]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10c      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4313      	orrs	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40014000 	.word	0x40014000

080057a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057bc:	2302      	movs	r3, #2
 80057be:	e03d      	b.n	800583c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e03f      	b.n	8005902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fd fe2a 	bl	80034f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	; 0x24
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f829 	bl	800590c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005910:	b0c0      	sub	sp, #256	; 0x100
 8005912:	af00      	add	r7, sp, #0
 8005914:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	ea40 0301 	orr.w	r3, r0, r1
 8005934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	431a      	orrs	r2, r3
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	431a      	orrs	r2, r3
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005964:	f021 010c 	bic.w	r1, r1, #12
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005972:	430b      	orrs	r3, r1
 8005974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005986:	6999      	ldr	r1, [r3, #24]
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	ea40 0301 	orr.w	r3, r0, r1
 8005992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8f      	ldr	r3, [pc, #572]	; (8005bd8 <UART_SetConfig+0x2cc>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d005      	beq.n	80059ac <UART_SetConfig+0xa0>
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b8d      	ldr	r3, [pc, #564]	; (8005bdc <UART_SetConfig+0x2d0>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d104      	bne.n	80059b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fe fe0c 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 80059b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059b4:	e003      	b.n	80059be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059b6:	f7fe fdf3 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 80059ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c8:	f040 810c 	bne.w	8005be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	1891      	adds	r1, r2, r2
 80059e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80059e6:	415b      	adcs	r3, r3
 80059e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059ee:	4621      	mov	r1, r4
 80059f0:	eb12 0801 	adds.w	r8, r2, r1
 80059f4:	4629      	mov	r1, r5
 80059f6:	eb43 0901 	adc.w	r9, r3, r1
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a0e:	4690      	mov	r8, r2
 8005a10:	4699      	mov	r9, r3
 8005a12:	4623      	mov	r3, r4
 8005a14:	eb18 0303 	adds.w	r3, r8, r3
 8005a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	eb49 0303 	adc.w	r3, r9, r3
 8005a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	18db      	adds	r3, r3, r3
 8005a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a40:	4613      	mov	r3, r2
 8005a42:	eb42 0303 	adc.w	r3, r2, r3
 8005a46:	657b      	str	r3, [r7, #84]	; 0x54
 8005a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a50:	f7fa ffe0 	bl	8000a14 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	011c      	lsls	r4, r3, #4
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a84:	4641      	mov	r1, r8
 8005a86:	eb12 0a01 	adds.w	sl, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa4:	4692      	mov	sl, r2
 8005aa6:	469b      	mov	fp, r3
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8005aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	18db      	adds	r3, r3, r3
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ae6:	f7fa ff95 	bl	8000a14 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	4b3b      	ldr	r3, [pc, #236]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005af2:	fba3 2301 	umull	r2, r3, r3, r1
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2264      	movs	r2, #100	; 0x64
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	1acb      	subs	r3, r1, r3
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005b08:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b14:	441c      	add	r4, r3
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b30:	415b      	adcs	r3, r3
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b38:	4641      	mov	r1, r8
 8005b3a:	1851      	adds	r1, r2, r1
 8005b3c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b3e:	4649      	mov	r1, r9
 8005b40:	414b      	adcs	r3, r1
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b50:	4659      	mov	r1, fp
 8005b52:	00cb      	lsls	r3, r1, #3
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	00ca      	lsls	r2, r1, #3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	4642      	mov	r2, r8
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	460a      	mov	r2, r1
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	18db      	adds	r3, r3, r3
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b92:	4613      	mov	r3, r2
 8005b94:	eb42 0303 	adc.w	r3, r2, r3
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ba2:	f7fa ff37 	bl	8000a14 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	2164      	movs	r1, #100	; 0x64
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	3332      	adds	r3, #50	; 0x32
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	f003 0207 	and.w	r2, r3, #7
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4422      	add	r2, r4
 8005bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bd4:	e105      	b.n	8005de2 <UART_SetConfig+0x4d6>
 8005bd6:	bf00      	nop
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	1891      	adds	r1, r2, r2
 8005bfc:	6239      	str	r1, [r7, #32]
 8005bfe:	415b      	adcs	r3, r3
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c06:	4641      	mov	r1, r8
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	eb43 0501 	adc.w	r5, r3, r1
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	00eb      	lsls	r3, r5, #3
 8005c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c1e:	00e2      	lsls	r2, r4, #3
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	18e3      	adds	r3, r4, r3
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	eb45 0303 	adc.w	r3, r5, r3
 8005c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c52:	4629      	mov	r1, r5
 8005c54:	008b      	lsls	r3, r1, #2
 8005c56:	4621      	mov	r1, r4
 8005c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	008a      	lsls	r2, r1, #2
 8005c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c64:	f7fa fed6 	bl	8000a14 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b60      	ldr	r3, [pc, #384]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	011c      	lsls	r4, r3, #4
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	1891      	adds	r1, r2, r2
 8005c8e:	61b9      	str	r1, [r7, #24]
 8005c90:	415b      	adcs	r3, r3
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c98:	4641      	mov	r1, r8
 8005c9a:	1851      	adds	r1, r2, r1
 8005c9c:	6139      	str	r1, [r7, #16]
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	414b      	adcs	r3, r1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	00cb      	lsls	r3, r1, #3
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cba:	4651      	mov	r1, sl
 8005cbc:	00ca      	lsls	r2, r1, #3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ccc:	464b      	mov	r3, r9
 8005cce:	460a      	mov	r2, r1
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	008b      	lsls	r3, r1, #2
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	008a      	lsls	r2, r1, #2
 8005cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d02:	f7fa fe87 	bl	8000a14 <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	2164      	movs	r1, #100	; 0x64
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	3332      	adds	r3, #50	; 0x32
 8005d1e:	4a34      	ldr	r2, [pc, #208]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d2a:	441c      	add	r4, r3
 8005d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d30:	2200      	movs	r2, #0
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70
 8005d34:	677a      	str	r2, [r7, #116]	; 0x74
 8005d36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	1891      	adds	r1, r2, r2
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	415b      	adcs	r3, r3
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d4a:	4641      	mov	r1, r8
 8005d4c:	1851      	adds	r1, r2, r1
 8005d4e:	6039      	str	r1, [r7, #0]
 8005d50:	4649      	mov	r1, r9
 8005d52:	414b      	adcs	r3, r1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d62:	4659      	mov	r1, fp
 8005d64:	00cb      	lsls	r3, r1, #3
 8005d66:	4651      	mov	r1, sl
 8005d68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	00ca      	lsls	r2, r1, #3
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	4642      	mov	r2, r8
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	460a      	mov	r2, r1
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d90:	667a      	str	r2, [r7, #100]	; 0x64
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d9e:	4649      	mov	r1, r9
 8005da0:	008b      	lsls	r3, r1, #2
 8005da2:	4641      	mov	r1, r8
 8005da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da8:	4641      	mov	r1, r8
 8005daa:	008a      	lsls	r2, r1, #2
 8005dac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005db0:	f7fa fe30 	bl	8000a14 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005dba:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2164      	movs	r1, #100	; 0x64
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	3332      	adds	r3, #50	; 0x32
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f003 020f 	and.w	r2, r3, #15
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4422      	add	r2, r4
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005de8:	46bd      	mov	sp, r7
 8005dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dee:	bf00      	nop
 8005df0:	51eb851f 	.word	0x51eb851f

08005df4 <arm_mat_trans_f32>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	8802      	ldrh	r2, [r0, #0]
 8005dfa:	884b      	ldrh	r3, [r1, #2]
 8005dfc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005e00:	684f      	ldr	r7, [r1, #4]
 8005e02:	8840      	ldrh	r0, [r0, #2]
 8005e04:	4293      	cmp	r3, r2
 8005e06:	b083      	sub	sp, #12
 8005e08:	d14c      	bne.n	8005ea4 <arm_mat_trans_f32+0xb0>
 8005e0a:	f8b1 e000 	ldrh.w	lr, [r1]
 8005e0e:	4586      	cmp	lr, r0
 8005e10:	d148      	bne.n	8005ea4 <arm_mat_trans_f32+0xb0>
 8005e12:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8005e16:	009c      	lsls	r4, r3, #2
 8005e18:	f00e 0e03 	and.w	lr, lr, #3
 8005e1c:	fb08 f904 	mul.w	r9, r8, r4
 8005e20:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8005e24:	011d      	lsls	r5, r3, #4
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005e2c:	eb07 0a04 	add.w	sl, r7, r4
 8005e30:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8005e34:	9201      	str	r2, [sp, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	463b      	mov	r3, r7
 8005e3a:	f1b8 0f00 	cmp.w	r8, #0
 8005e3e:	d01d      	beq.n	8005e7c <arm_mat_trans_f32+0x88>
 8005e40:	9900      	ldr	r1, [sp, #0]
 8005e42:	f10c 0210 	add.w	r2, ip, #16
 8005e46:	4439      	add	r1, r7
 8005e48:	4640      	mov	r0, r8
 8005e4a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8005e4e:	601e      	str	r6, [r3, #0]
 8005e50:	ed52 7a03 	vldr	s15, [r2, #-12]
 8005e54:	191e      	adds	r6, r3, r4
 8005e56:	edc6 7a00 	vstr	s15, [r6]
 8005e5a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8005e5e:	600e      	str	r6, [r1, #0]
 8005e60:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005e64:	190e      	adds	r6, r1, r4
 8005e66:	3801      	subs	r0, #1
 8005e68:	442b      	add	r3, r5
 8005e6a:	f102 0210 	add.w	r2, r2, #16
 8005e6e:	edc6 7a00 	vstr	s15, [r6]
 8005e72:	4429      	add	r1, r5
 8005e74:	d1e9      	bne.n	8005e4a <arm_mat_trans_f32+0x56>
 8005e76:	44dc      	add	ip, fp
 8005e78:	eb09 0307 	add.w	r3, r9, r7
 8005e7c:	f1be 0f00 	cmp.w	lr, #0
 8005e80:	d009      	beq.n	8005e96 <arm_mat_trans_f32+0xa2>
 8005e82:	4672      	mov	r2, lr
 8005e84:	4661      	mov	r1, ip
 8005e86:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e8a:	6018      	str	r0, [r3, #0]
 8005e8c:	3a01      	subs	r2, #1
 8005e8e:	4423      	add	r3, r4
 8005e90:	d1f9      	bne.n	8005e86 <arm_mat_trans_f32+0x92>
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	449c      	add	ip, r3
 8005e96:	3704      	adds	r7, #4
 8005e98:	4557      	cmp	r7, sl
 8005e9a:	d1cd      	bne.n	8005e38 <arm_mat_trans_f32+0x44>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	b003      	add	sp, #12
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	f06f 0002 	mvn.w	r0, #2
 8005ea8:	e7f9      	b.n	8005e9e <arm_mat_trans_f32+0xaa>
 8005eaa:	bf00      	nop

08005eac <arm_mat_sub_f32>:
 8005eac:	b4f0      	push	{r4, r5, r6, r7}
 8005eae:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005eb2:	6803      	ldr	r3, [r0, #0]
 8005eb4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005eb8:	6856      	ldr	r6, [r2, #4]
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	d15d      	bne.n	8005f7a <arm_mat_sub_f32+0xce>
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d15a      	bne.n	8005f7a <arm_mat_sub_f32+0xce>
 8005ec4:	8803      	ldrh	r3, [r0, #0]
 8005ec6:	8844      	ldrh	r4, [r0, #2]
 8005ec8:	fb04 f403 	mul.w	r4, r4, r3
 8005ecc:	08a5      	lsrs	r5, r4, #2
 8005ece:	d032      	beq.n	8005f36 <arm_mat_sub_f32+0x8a>
 8005ed0:	f10c 0110 	add.w	r1, ip, #16
 8005ed4:	f107 0210 	add.w	r2, r7, #16
 8005ed8:	f106 0310 	add.w	r3, r6, #16
 8005edc:	4628      	mov	r0, r5
 8005ede:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005ee2:	ed51 7a04 	vldr	s15, [r1, #-16]
 8005ee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eea:	3801      	subs	r0, #1
 8005eec:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005ef0:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005ef4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005efc:	f101 0110 	add.w	r1, r1, #16
 8005f00:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005f04:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005f08:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8005f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f10:	f102 0210 	add.w	r2, r2, #16
 8005f14:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005f18:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8005f1c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f24:	f103 0310 	add.w	r3, r3, #16
 8005f28:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005f2c:	d1d7      	bne.n	8005ede <arm_mat_sub_f32+0x32>
 8005f2e:	012b      	lsls	r3, r5, #4
 8005f30:	449c      	add	ip, r3
 8005f32:	441f      	add	r7, r3
 8005f34:	441e      	add	r6, r3
 8005f36:	f014 0403 	ands.w	r4, r4, #3
 8005f3a:	d01b      	beq.n	8005f74 <arm_mat_sub_f32+0xc8>
 8005f3c:	eddc 7a00 	vldr	s15, [ip]
 8005f40:	ed97 7a00 	vldr	s14, [r7]
 8005f44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f48:	3c01      	subs	r4, #1
 8005f4a:	edc6 7a00 	vstr	s15, [r6]
 8005f4e:	d011      	beq.n	8005f74 <arm_mat_sub_f32+0xc8>
 8005f50:	eddc 7a01 	vldr	s15, [ip, #4]
 8005f54:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f5c:	2c01      	cmp	r4, #1
 8005f5e:	edc6 7a01 	vstr	s15, [r6, #4]
 8005f62:	d007      	beq.n	8005f74 <arm_mat_sub_f32+0xc8>
 8005f64:	eddc 7a02 	vldr	s15, [ip, #8]
 8005f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f70:	edc6 7a02 	vstr	s15, [r6, #8]
 8005f74:	2000      	movs	r0, #0
 8005f76:	bcf0      	pop	{r4, r5, r6, r7}
 8005f78:	4770      	bx	lr
 8005f7a:	f06f 0002 	mvn.w	r0, #2
 8005f7e:	e7fa      	b.n	8005f76 <arm_mat_sub_f32+0xca>

08005f80 <arm_mat_mult_f32>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	8845      	ldrh	r5, [r0, #2]
 8005f86:	880b      	ldrh	r3, [r1, #0]
 8005f88:	8806      	ldrh	r6, [r0, #0]
 8005f8a:	6847      	ldr	r7, [r0, #4]
 8005f8c:	6854      	ldr	r4, [r2, #4]
 8005f8e:	6848      	ldr	r0, [r1, #4]
 8005f90:	b08b      	sub	sp, #44	; 0x2c
 8005f92:	42ab      	cmp	r3, r5
 8005f94:	9109      	str	r1, [sp, #36]	; 0x24
 8005f96:	9604      	str	r6, [sp, #16]
 8005f98:	8849      	ldrh	r1, [r1, #2]
 8005f9a:	f040 808a 	bne.w	80060b2 <arm_mat_mult_f32+0x132>
 8005f9e:	8815      	ldrh	r5, [r2, #0]
 8005fa0:	42b5      	cmp	r5, r6
 8005fa2:	f040 8086 	bne.w	80060b2 <arm_mat_mult_f32+0x132>
 8005fa6:	8852      	ldrh	r2, [r2, #2]
 8005fa8:	428a      	cmp	r2, r1
 8005faa:	f040 8082 	bne.w	80060b2 <arm_mat_mult_f32+0x132>
 8005fae:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8005fb2:	1d01      	adds	r1, r0, #4
 8005fb4:	0116      	lsls	r6, r2, #4
 8005fb6:	9108      	str	r1, [sp, #32]
 8005fb8:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005fbc:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005fc0:	9101      	str	r1, [sp, #4]
 8005fc2:	fb06 f108 	mul.w	r1, r6, r8
 8005fc6:	0095      	lsls	r5, r2, #2
 8005fc8:	9103      	str	r1, [sp, #12]
 8005fca:	00d2      	lsls	r2, r2, #3
 8005fcc:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005fd0:	f003 0903 	and.w	r9, r3, #3
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	f107 0b10 	add.w	fp, r7, #16
 8005fda:	eb04 0a05 	add.w	sl, r4, r5
 8005fde:	9107      	str	r1, [sp, #28]
 8005fe0:	9202      	str	r2, [sp, #8]
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	f1ab 0310 	sub.w	r3, fp, #16
 8005fe8:	9305      	str	r3, [sp, #20]
 8005fea:	9b07      	ldr	r3, [sp, #28]
 8005fec:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005ff0:	eb03 0c0a 	add.w	ip, r3, sl
 8005ff4:	eddf 7a31 	vldr	s15, [pc, #196]	; 80060bc <arm_mat_mult_f32+0x13c>
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	d053      	beq.n	80060a6 <arm_mat_mult_f32+0x126>
 8005ffe:	9b02      	ldr	r3, [sp, #8]
 8006000:	4644      	mov	r4, r8
 8006002:	18c1      	adds	r1, r0, r3
 8006004:	4602      	mov	r2, r0
 8006006:	465b      	mov	r3, fp
 8006008:	ed92 6a00 	vldr	s12, [r2]
 800600c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8006010:	ed53 4a03 	vldr	s9, [r3, #-12]
 8006014:	ed53 6a02 	vldr	s13, [r3, #-8]
 8006018:	ed91 5a00 	vldr	s10, [r1]
 800601c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8006020:	1957      	adds	r7, r2, r5
 8006022:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006026:	ed97 6a00 	vldr	s12, [r7]
 800602a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800602e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006032:	194f      	adds	r7, r1, r5
 8006034:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006038:	ee26 7a85 	vmul.f32	s14, s13, s10
 800603c:	edd7 7a00 	vldr	s15, [r7]
 8006040:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006044:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006048:	3c01      	subs	r4, #1
 800604a:	4432      	add	r2, r6
 800604c:	4431      	add	r1, r6
 800604e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006052:	f103 0310 	add.w	r3, r3, #16
 8006056:	d1d7      	bne.n	8006008 <arm_mat_mult_f32+0x88>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	9a01      	ldr	r2, [sp, #4]
 800605c:	4418      	add	r0, r3
 800605e:	f1b9 0f00 	cmp.w	r9, #0
 8006062:	d00b      	beq.n	800607c <arm_mat_mult_f32+0xfc>
 8006064:	464b      	mov	r3, r9
 8006066:	edd0 6a00 	vldr	s13, [r0]
 800606a:	ecb2 7a01 	vldmia	r2!, {s14}
 800606e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006072:	3b01      	subs	r3, #1
 8006074:	4428      	add	r0, r5
 8006076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800607a:	d1f4      	bne.n	8006066 <arm_mat_mult_f32+0xe6>
 800607c:	ecec 7a01 	vstmia	ip!, {s15}
 8006080:	45d4      	cmp	ip, sl
 8006082:	4670      	mov	r0, lr
 8006084:	f10e 0e04 	add.w	lr, lr, #4
 8006088:	d1b4      	bne.n	8005ff4 <arm_mat_mult_f32+0x74>
 800608a:	9a01      	ldr	r2, [sp, #4]
 800608c:	9b06      	ldr	r3, [sp, #24]
 800608e:	4611      	mov	r1, r2
 8006090:	4419      	add	r1, r3
 8006092:	449b      	add	fp, r3
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	9101      	str	r1, [sp, #4]
 8006098:	3b01      	subs	r3, #1
 800609a:	44aa      	add	sl, r5
 800609c:	9304      	str	r3, [sp, #16]
 800609e:	d004      	beq.n	80060aa <arm_mat_mult_f32+0x12a>
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	6858      	ldr	r0, [r3, #4]
 80060a4:	e79e      	b.n	8005fe4 <arm_mat_mult_f32+0x64>
 80060a6:	9a05      	ldr	r2, [sp, #20]
 80060a8:	e7d9      	b.n	800605e <arm_mat_mult_f32+0xde>
 80060aa:	4618      	mov	r0, r3
 80060ac:	b00b      	add	sp, #44	; 0x2c
 80060ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b2:	f06f 0002 	mvn.w	r0, #2
 80060b6:	b00b      	add	sp, #44	; 0x2c
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	00000000 	.word	0x00000000

080060c0 <arm_mat_inverse_f32>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	8843      	ldrh	r3, [r0, #2]
 80060c6:	8804      	ldrh	r4, [r0, #0]
 80060c8:	684e      	ldr	r6, [r1, #4]
 80060ca:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80060ce:	b087      	sub	sp, #28
 80060d0:	429c      	cmp	r4, r3
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	9603      	str	r6, [sp, #12]
 80060d6:	f040 80ea 	bne.w	80062ae <arm_mat_inverse_f32+0x1ee>
 80060da:	880a      	ldrh	r2, [r1, #0]
 80060dc:	884b      	ldrh	r3, [r1, #2]
 80060de:	4293      	cmp	r3, r2
 80060e0:	f040 80e5 	bne.w	80062ae <arm_mat_inverse_f32+0x1ee>
 80060e4:	429c      	cmp	r4, r3
 80060e6:	f040 80e2 	bne.w	80062ae <arm_mat_inverse_f32+0x1ee>
 80060ea:	9005      	str	r0, [sp, #20]
 80060ec:	b30c      	cbz	r4, 8006132 <arm_mat_inverse_f32+0x72>
 80060ee:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80060f2:	1e67      	subs	r7, r4, #1
 80060f4:	f846 bb04 	str.w	fp, [r6], #4
 80060f8:	d01b      	beq.n	8006132 <arm_mat_inverse_f32+0x72>
 80060fa:	f04f 0801 	mov.w	r8, #1
 80060fe:	00ba      	lsls	r2, r7, #2
 8006100:	eb06 0a02 	add.w	sl, r6, r2
 8006104:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8006108:	4630      	mov	r0, r6
 800610a:	2100      	movs	r1, #0
 800610c:	f000 f970 	bl	80063f0 <memset>
 8006110:	eb0a 0605 	add.w	r6, sl, r5
 8006114:	462a      	mov	r2, r5
 8006116:	2100      	movs	r1, #0
 8006118:	4650      	mov	r0, sl
 800611a:	f1b8 0f00 	cmp.w	r8, #0
 800611e:	f000 80cb 	beq.w	80062b8 <arm_mat_inverse_f32+0x1f8>
 8006122:	f000 f965 	bl	80063f0 <memset>
 8006126:	3f01      	subs	r7, #1
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	f846 bb04 	str.w	fp, [r6], #4
 8006130:	d1e5      	bne.n	80060fe <arm_mat_inverse_f32+0x3e>
 8006132:	9b01      	ldr	r3, [sp, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80b5 	beq.w	80062a4 <arm_mat_inverse_f32+0x1e4>
 800613a:	009d      	lsls	r5, r3, #2
 800613c:	eb09 0205 	add.w	r2, r9, r5
 8006140:	46cc      	mov	ip, r9
 8006142:	9202      	str	r2, [sp, #8]
 8006144:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006148:	1d2a      	adds	r2, r5, #4
 800614a:	9204      	str	r2, [sp, #16]
 800614c:	462f      	mov	r7, r5
 800614e:	469e      	mov	lr, r3
 8006150:	2600      	movs	r6, #0
 8006152:	9b02      	ldr	r3, [sp, #8]
 8006154:	eddc 6a00 	vldr	s13, [ip]
 8006158:	42b4      	cmp	r4, r6
 800615a:	eba3 0b07 	sub.w	fp, r3, r7
 800615e:	f000 80a1 	beq.w	80062a4 <arm_mat_inverse_f32+0x1e4>
 8006162:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80062c8 <arm_mat_inverse_f32+0x208>
 8006166:	4632      	mov	r2, r6
 8006168:	4663      	mov	r3, ip
 800616a:	e00b      	b.n	8006184 <arm_mat_inverse_f32+0xc4>
 800616c:	eef4 7a47 	vcmp.f32	s15, s14
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	f102 0201 	add.w	r2, r2, #1
 8006178:	bfc8      	it	gt
 800617a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800617e:	42a2      	cmp	r2, r4
 8006180:	442b      	add	r3, r5
 8006182:	d014      	beq.n	80061ae <arm_mat_inverse_f32+0xee>
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	eeb1 6a67 	vneg.f32	s12, s15
 8006194:	dcea      	bgt.n	800616c <arm_mat_inverse_f32+0xac>
 8006196:	eeb4 6a47 	vcmp.f32	s12, s14
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	f102 0201 	add.w	r2, r2, #1
 80061a2:	bfc8      	it	gt
 80061a4:	eeb0 7a46 	vmovgt.f32	s14, s12
 80061a8:	42a2      	cmp	r2, r4
 80061aa:	442b      	add	r3, r5
 80061ac:	d1ea      	bne.n	8006184 <arm_mat_inverse_f32+0xc4>
 80061ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d075      	beq.n	80062a4 <arm_mat_inverse_f32+0x1e4>
 80061b8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	d070      	beq.n	80062a4 <arm_mat_inverse_f32+0x1e4>
 80061c2:	4672      	mov	r2, lr
 80061c4:	4663      	mov	r3, ip
 80061c6:	ed93 7a00 	vldr	s14, [r3]
 80061ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ce:	3a01      	subs	r2, #1
 80061d0:	ece3 7a01 	vstmia	r3!, {s15}
 80061d4:	d1f7      	bne.n	80061c6 <arm_mat_inverse_f32+0x106>
 80061d6:	9901      	ldr	r1, [sp, #4]
 80061d8:	464b      	mov	r3, r9
 80061da:	ed93 7a00 	vldr	s14, [r3]
 80061de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061e2:	3901      	subs	r1, #1
 80061e4:	ece3 7a01 	vstmia	r3!, {s15}
 80061e8:	d1f7      	bne.n	80061da <arm_mat_inverse_f32+0x11a>
 80061ea:	9803      	ldr	r0, [sp, #12]
 80061ec:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80061f0:	42b1      	cmp	r1, r6
 80061f2:	d039      	beq.n	8006268 <arm_mat_inverse_f32+0x1a8>
 80061f4:	eddb 6a00 	vldr	s13, [fp]
 80061f8:	465a      	mov	r2, fp
 80061fa:	4673      	mov	r3, lr
 80061fc:	46e2      	mov	sl, ip
 80061fe:	ecba 7a01 	vldmia	sl!, {s14}
 8006202:	edd2 7a00 	vldr	s15, [r2]
 8006206:	ee26 7a87 	vmul.f32	s14, s13, s14
 800620a:	3b01      	subs	r3, #1
 800620c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006210:	ece2 7a01 	vstmia	r2!, {s15}
 8006214:	d1f3      	bne.n	80061fe <arm_mat_inverse_f32+0x13e>
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	44bb      	add	fp, r7
 800621a:	4602      	mov	r2, r0
 800621c:	46ca      	mov	sl, r9
 800621e:	ecba 7a01 	vldmia	sl!, {s14}
 8006222:	edd2 7a00 	vldr	s15, [r2]
 8006226:	ee26 7a87 	vmul.f32	s14, s13, s14
 800622a:	3b01      	subs	r3, #1
 800622c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006230:	ece2 7a01 	vstmia	r2!, {s15}
 8006234:	d1f3      	bne.n	800621e <arm_mat_inverse_f32+0x15e>
 8006236:	4428      	add	r0, r5
 8006238:	3101      	adds	r1, #1
 800623a:	428c      	cmp	r4, r1
 800623c:	44c3      	add	fp, r8
 800623e:	d1d7      	bne.n	80061f0 <arm_mat_inverse_f32+0x130>
 8006240:	9b04      	ldr	r3, [sp, #16]
 8006242:	f1be 0e01 	subs.w	lr, lr, #1
 8006246:	f106 0601 	add.w	r6, r6, #1
 800624a:	449c      	add	ip, r3
 800624c:	f1a7 0704 	sub.w	r7, r7, #4
 8006250:	44a9      	add	r9, r5
 8006252:	f47f af7e 	bne.w	8006152 <arm_mat_inverse_f32+0x92>
 8006256:	eef5 6a40 	vcmp.f32	s13, #0.0
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	d006      	beq.n	800626e <arm_mat_inverse_f32+0x1ae>
 8006260:	2000      	movs	r0, #0
 8006262:	b007      	add	sp, #28
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	44bb      	add	fp, r7
 800626a:	4428      	add	r0, r5
 800626c:	e7e4      	b.n	8006238 <arm_mat_inverse_f32+0x178>
 800626e:	9b05      	ldr	r3, [sp, #20]
 8006270:	9a01      	ldr	r2, [sp, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	edd3 7a00 	vldr	s15, [r3]
 8006278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800627c:	fb02 f204 	mul.w	r2, r2, r4
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	4614      	mov	r4, r2
 8006286:	bf08      	it	eq
 8006288:	3304      	addeq	r3, #4
 800628a:	d007      	beq.n	800629c <arm_mat_inverse_f32+0x1dc>
 800628c:	e7e8      	b.n	8006260 <arm_mat_inverse_f32+0x1a0>
 800628e:	ecf3 7a01 	vldmia	r3!, {s15}
 8006292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629a:	d1e1      	bne.n	8006260 <arm_mat_inverse_f32+0x1a0>
 800629c:	f10e 0e01 	add.w	lr, lr, #1
 80062a0:	4574      	cmp	r4, lr
 80062a2:	d1f4      	bne.n	800628e <arm_mat_inverse_f32+0x1ce>
 80062a4:	f06f 0004 	mvn.w	r0, #4
 80062a8:	b007      	add	sp, #28
 80062aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	f06f 0002 	mvn.w	r0, #2
 80062b2:	b007      	add	sp, #28
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	4656      	mov	r6, sl
 80062ba:	3f01      	subs	r7, #1
 80062bc:	f846 bb04 	str.w	fp, [r6], #4
 80062c0:	f47f af1b 	bne.w	80060fa <arm_mat_inverse_f32+0x3a>
 80062c4:	e735      	b.n	8006132 <arm_mat_inverse_f32+0x72>
 80062c6:	bf00      	nop
 80062c8:	00000000 	.word	0x00000000

080062cc <arm_mat_init_f32>:
 80062cc:	8001      	strh	r1, [r0, #0]
 80062ce:	8042      	strh	r2, [r0, #2]
 80062d0:	6043      	str	r3, [r0, #4]
 80062d2:	4770      	bx	lr

080062d4 <arm_mat_add_f32>:
 80062d4:	b4f0      	push	{r4, r5, r6, r7}
 80062d6:	e9d1 4700 	ldrd	r4, r7, [r1]
 80062da:	6803      	ldr	r3, [r0, #0]
 80062dc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80062e0:	6856      	ldr	r6, [r2, #4]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	d15d      	bne.n	80063a2 <arm_mat_add_f32+0xce>
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d15a      	bne.n	80063a2 <arm_mat_add_f32+0xce>
 80062ec:	8803      	ldrh	r3, [r0, #0]
 80062ee:	8844      	ldrh	r4, [r0, #2]
 80062f0:	fb04 f403 	mul.w	r4, r4, r3
 80062f4:	08a5      	lsrs	r5, r4, #2
 80062f6:	d032      	beq.n	800635e <arm_mat_add_f32+0x8a>
 80062f8:	f10c 0110 	add.w	r1, ip, #16
 80062fc:	f107 0210 	add.w	r2, r7, #16
 8006300:	f106 0310 	add.w	r3, r6, #16
 8006304:	4628      	mov	r0, r5
 8006306:	ed12 7a04 	vldr	s14, [r2, #-16]
 800630a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800630e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006312:	3801      	subs	r0, #1
 8006314:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006318:	ed12 7a03 	vldr	s14, [r2, #-12]
 800631c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006324:	f101 0110 	add.w	r1, r1, #16
 8006328:	ed43 7a03 	vstr	s15, [r3, #-12]
 800632c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006330:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8006334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006338:	f102 0210 	add.w	r2, r2, #16
 800633c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006340:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8006344:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8006348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800634c:	f103 0310 	add.w	r3, r3, #16
 8006350:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006354:	d1d7      	bne.n	8006306 <arm_mat_add_f32+0x32>
 8006356:	012b      	lsls	r3, r5, #4
 8006358:	449c      	add	ip, r3
 800635a:	441f      	add	r7, r3
 800635c:	441e      	add	r6, r3
 800635e:	f014 0403 	ands.w	r4, r4, #3
 8006362:	d01b      	beq.n	800639c <arm_mat_add_f32+0xc8>
 8006364:	edd7 7a00 	vldr	s15, [r7]
 8006368:	ed9c 7a00 	vldr	s14, [ip]
 800636c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006370:	3c01      	subs	r4, #1
 8006372:	edc6 7a00 	vstr	s15, [r6]
 8006376:	d011      	beq.n	800639c <arm_mat_add_f32+0xc8>
 8006378:	eddc 7a01 	vldr	s15, [ip, #4]
 800637c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006384:	2c01      	cmp	r4, #1
 8006386:	edc6 7a01 	vstr	s15, [r6, #4]
 800638a:	d007      	beq.n	800639c <arm_mat_add_f32+0xc8>
 800638c:	eddc 7a02 	vldr	s15, [ip, #8]
 8006390:	ed97 7a02 	vldr	s14, [r7, #8]
 8006394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006398:	edc6 7a02 	vstr	s15, [r6, #8]
 800639c:	2000      	movs	r0, #0
 800639e:	bcf0      	pop	{r4, r5, r6, r7}
 80063a0:	4770      	bx	lr
 80063a2:	f06f 0002 	mvn.w	r0, #2
 80063a6:	e7fa      	b.n	800639e <arm_mat_add_f32+0xca>

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4d0d      	ldr	r5, [pc, #52]	; (80063e0 <__libc_init_array+0x38>)
 80063ac:	4c0d      	ldr	r4, [pc, #52]	; (80063e4 <__libc_init_array+0x3c>)
 80063ae:	1b64      	subs	r4, r4, r5
 80063b0:	10a4      	asrs	r4, r4, #2
 80063b2:	2600      	movs	r6, #0
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	4d0b      	ldr	r5, [pc, #44]	; (80063e8 <__libc_init_array+0x40>)
 80063ba:	4c0c      	ldr	r4, [pc, #48]	; (80063ec <__libc_init_array+0x44>)
 80063bc:	f000 f820 	bl	8006400 <_init>
 80063c0:	1b64      	subs	r4, r4, r5
 80063c2:	10a4      	asrs	r4, r4, #2
 80063c4:	2600      	movs	r6, #0
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	08006438 	.word	0x08006438
 80063e4:	08006438 	.word	0x08006438
 80063e8:	08006438 	.word	0x08006438
 80063ec:	0800643c 	.word	0x0800643c

080063f0 <memset>:
 80063f0:	4402      	add	r2, r0
 80063f2:	4603      	mov	r3, r0
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d100      	bne.n	80063fa <memset+0xa>
 80063f8:	4770      	bx	lr
 80063fa:	f803 1b01 	strb.w	r1, [r3], #1
 80063fe:	e7f9      	b.n	80063f4 <memset+0x4>

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
