
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a058  0800a058  0002044c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a060  0800a060  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000044c  20000000  0800a068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000450  0800a4b4  00020450  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800a4b4  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d5d  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee6  00000000  00000000  000371d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0003a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017687  00000000  00000000  0003c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015241  00000000  00000000  000537f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c36  00000000  00000000  00068a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fb66e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  000fb734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000ffea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000450 	.word	0x20000450
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a020 	.word	0x0800a020

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000454 	.word	0x20000454
 80001d4:	0800a020 	.word	0x0800a020

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f009 f8d0 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f009 f8c7 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f009 f8be 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 700d 	add.w	r0, r3, #564	; 0x234
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f009 f8b5 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 1, 1, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 700f 	add.w	r0, r3, #572	; 0x23c
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2201      	movs	r2, #1
 8000d72:	2101      	movs	r1, #1
 8000d74:	f009 f8ac 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3344      	adds	r3, #68	; 0x44
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f009 f8a3 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 1, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3348      	adds	r3, #72	; 0x48
 8000d94:	2201      	movs	r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	f009 f89a 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3354      	adds	r3, #84	; 0x54
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f009 f891 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3360      	adds	r3, #96	; 0x60
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f009 f888 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 7019 	add.w	r0, r3, #612	; 0x264
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	336c      	adds	r3, #108	; 0x6c
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f009 f87f 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3390      	adds	r3, #144	; 0x90
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f009 f876 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 701d 	add.w	r0, r3, #628	; 0x274
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33b4      	adds	r3, #180	; 0xb4
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f009 f86d 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33b8      	adds	r3, #184	; 0xb8
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f009 f864 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33bc      	adds	r3, #188	; 0xbc
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f009 f85b 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33c0      	adds	r3, #192	; 0xc0
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f009 f852 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	33cc      	adds	r3, #204	; 0xcc
 8000e36:	2203      	movs	r2, #3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	f009 f849 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	33f0      	adds	r3, #240	; 0xf0
 8000e48:	2203      	movs	r2, #3
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	f009 f840 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 1, 3, KalmanVar ->MatGt_Data);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	2101      	movs	r1, #1
 8000e60:	f009 f836 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 1, KalmanVar ->MatGQ_Data);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000e70:	2201      	movs	r2, #1
 8000e72:	2103      	movs	r1, #3
 8000e74:	f009 f82c 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e84:	2201      	movs	r2, #1
 8000e86:	2103      	movs	r1, #3
 8000e88:	f009 f822 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e98:	2203      	movs	r2, #3
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	f009 f818 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000eac:	2201      	movs	r2, #1
 8000eae:	2101      	movs	r1, #1
 8000eb0:	f009 f80e 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	f009 f804 	bl	8009ed0 <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	f008 fffa 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000ee8:	2203      	movs	r2, #3
 8000eea:	2103      	movs	r1, #3
 8000eec:	f008 fff0 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	f008 ffe6 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f10:	2201      	movs	r2, #1
 8000f12:	2101      	movs	r1, #1
 8000f14:	f008 ffdc 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f24:	2201      	movs	r2, #1
 8000f26:	2103      	movs	r1, #3
 8000f28:	f008 ffd2 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	f008 ffc8 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	2103      	movs	r1, #3
 8000f50:	f008 ffbe 	bl	8009ed0 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f60:	2203      	movs	r2, #3
 8000f62:	2103      	movs	r1, #3
 8000f64:	f008 ffb4 	bl	8009ed0 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f008 fd3e 	bl	80099f8 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f008 fd34 	bl	80099f8 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f008 fd2a 	bl	80099f8 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f008 fde4 	bl	8009b84 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f008 fdd8 	bl	8009b84 <arm_mat_mult_f32>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f008 fdc2 	bl	8009b84 <arm_mat_mult_f32>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f503 711b 	add.w	r1, r3, #620	; 0x26c
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 800101c:	461a      	mov	r2, r3
 800101e:	f008 fdb1 	bl	8009b84 <arm_mat_mult_f32>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800103e:	461a      	mov	r2, r3
 8001040:	f008 fda0 	bl	8009b84 <arm_mat_mult_f32>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001060:	461a      	mov	r2, r3
 8001062:	f008 ff39 	bl	8009ed8 <arm_mat_add_f32>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f503 7115 	add.w	r1, r3, #596	; 0x254
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800108a:	461a      	mov	r2, r3
 800108c:	f008 fd7a 	bl	8009b84 <arm_mat_mult_f32>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f503 7139 	add.w	r1, r3, #740	; 0x2e4
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 731d 	add.w	r3, r3, #628	; 0x274
 80010ac:	461a      	mov	r2, r3
 80010ae:	f008 fcff 	bl	8009ab0 <arm_mat_sub_f32>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 7119 	add.w	r1, r3, #612	; 0x264
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80010ce:	461a      	mov	r2, r3
 80010d0:	f008 fd58 	bl	8009b84 <arm_mat_mult_f32>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80010f0:	461a      	mov	r2, r3
 80010f2:	f008 fd47 	bl	8009b84 <arm_mat_mult_f32>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f503 7111 	add.w	r1, r3, #580	; 0x244
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001112:	461a      	mov	r2, r3
 8001114:	f008 fee0 	bl	8009ed8 <arm_mat_add_f32>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f008 fdc7 	bl	8009cc4 <arm_mat_inverse_f32>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f503 7019 	add.w	r0, r3, #612	; 0x264
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8001152:	461a      	mov	r2, r3
 8001154:	f008 fd16 	bl	8009b84 <arm_mat_mult_f32>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001174:	461a      	mov	r2, r3
 8001176:	f008 fd05 	bl	8009b84 <arm_mat_mult_f32>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001196:	461a      	mov	r2, r3
 8001198:	f008 fcf4 	bl	8009b84 <arm_mat_mult_f32>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f503 7115 	add.w	r1, r3, #596	; 0x254
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80011b8:	461a      	mov	r2, r3
 80011ba:	f008 fe8d 	bl	8009ed8 <arm_mat_add_f32>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80011da:	461a      	mov	r2, r3
 80011dc:	f008 fcd2 	bl	8009b84 <arm_mat_mult_f32>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 7141 	add.w	r1, r3, #772	; 0x304
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80011fc:	461a      	mov	r2, r3
 80011fe:	f008 fc57 	bl	8009ab0 <arm_mat_sub_f32>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 7119 	add.w	r1, r3, #612	; 0x264
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800121e:	461a      	mov	r2, r3
 8001220:	f008 fcb0 	bl	8009b84 <arm_mat_mult_f32>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <PIDVelocityController_Init>:
 */

#include "PIDVelocity.h"
#include "Trajectory.h"

void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	0000      	movs	r0, r0
 8001284:	0000      	movs	r0, r0
	...

08001288 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	ed87 0a02 	vstr	s0, [r7, #8]
 8001296:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 800129a:	ed97 7a02 	vldr	s14, [r7, #8]
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorLow = setpoint*0.1;
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff f8f8 	bl	80004a0 <__aeabi_f2d>
 80012b0:	a367      	add	r3, pc, #412	; (adr r3, 8001450 <PIDVelocityController_Update+0x1c8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f94b 	bl	8000550 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fb57 	bl	8000974 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
    float errorHigh = setpoint*0.9;
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff f8e8 	bl	80004a0 <__aeabi_f2d>
 80012d0:	a361      	add	r3, pc, #388	; (adr r3, 8001458 <PIDVelocityController_Update+0x1d0>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f93b 	bl	8000550 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb47 	bl	8000974 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]
//    	pidVelocity->KpUse = pidVelocity->Kp;
//    }

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edd3 6a00 	vldr	s13, [r3]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edd3 7a08 	vldr	s15, [r3, #32]
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * error);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	ed93 7a01 	vldr	s14, [r3, #4]
 8001318:	edd7 7a07 	vldr	s15, [r7, #28]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	ed93 7a02 	vldr	s14, [r3, #8]
 800132c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f8b2 	bl	80004a0 <__aeabi_f2d>
 800133c:	4604      	mov	r4, r0
 800133e:	460d      	mov	r5, r1
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ab 	bl	80004a0 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f7fe ff49 	bl	80001e4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4690      	mov	r8, r2
 8001358:	4699      	mov	r9, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f89e 	bl	80004a0 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4640      	mov	r0, r8
 800136a:	4649      	mov	r1, r9
 800136c:	f7ff f8f0 	bl	8000550 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7fe ff32 	bl	80001e0 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4614      	mov	r4, r2
 8001382:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error))	;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	ed93 7a02 	vldr	s14, [r3, #8]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	ee17 0a90 	vmov	r0, s15
 8001398:	f7ff f882 	bl	80004a0 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ff1e 	bl	80001e4 <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fae0 	bl	8000974 <__aeabi_d2f>
 80013b4:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd04      	ble.n	8001404 <PIDVelocityController_Update+0x17c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
 8001402:	e00e      	b.n	8001422 <PIDVelocityController_Update+0x19a>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d503      	bpl.n	8001422 <PIDVelocityController_Update+0x19a>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last1Error = error;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

	return pidVelocity->ControllerOut;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	9999999a 	.word	0x9999999a
 8001454:	3fb99999 	.word	0x3fb99999
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	3feccccc 	.word	0x3feccccc

08001460 <AbsVal>:

#include "Trajectory.h"


float AbsVal(float number)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d50e      	bpl.n	8001496 <AbsVal+0x36>
  {
    return number*-1.0;
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff f811 	bl	80004a0 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fa75 	bl	8000974 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef1 7a67 	vneg.f32	s15, s15
 8001494:	e001      	b.n	800149a <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80014a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80014b2:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80014d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	float gain = 0.0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
	// Check Direction
	if(traject -> QRelative < 0.0)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80014e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d508      	bpl.n	8001504 <CoefficientAndTimeCalculation+0x60>
	{
		gain = -1.0;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <CoefficientAndTimeCalculation+0x138>)
 80014f4:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  -17.19; // 0.3 rad/s^2 to deg/sec^2
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <CoefficientAndTimeCalculation+0x13c>)
 80014fa:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  -114.6; // 2.0 rad/s^3 to deg/sec^3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <CoefficientAndTimeCalculation+0x140>)
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e008      	b.n	8001516 <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 8001504:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001508:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  17.19; // 0.3 rad/s^2 to deg/sec^2
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <CoefficientAndTimeCalculation+0x144>)
 800150e:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6; // 2.0 rad/s^3 to deg/sec^3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <CoefficientAndTimeCalculation+0x148>)
 8001514:	605a      	str	r2, [r3, #4]
	}
	// Find Speed limit
	float Vmax = 0.0;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
	float Vcheck = AbsVal(traject -> QRelative);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f7ff ff9b 	bl	8001460 <AbsVal>
 800152a:	ed87 0a05 	vstr	s0, [r7, #20]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 800152e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db0b      	blt.n	8001558 <CoefficientAndTimeCalculation+0xb4>
 8001540:	edd7 7a05 	vldr	s15, [r7, #20]
 8001544:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d502      	bpl.n	8001558 <CoefficientAndTimeCalculation+0xb4>
	{
		Vmax = 0.4f;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <CoefficientAndTimeCalculation+0x14c>)
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e061      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 20.0  && Vcheck < 60.0)
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	db0c      	blt.n	8001584 <CoefficientAndTimeCalculation+0xe0>
 800156a:	edd7 7a05 	vldr	s15, [r7, #20]
 800156e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80015f4 <CoefficientAndTimeCalculation+0x150>
 8001572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d503      	bpl.n	8001584 <CoefficientAndTimeCalculation+0xe0>
	{
		Vmax = 2.0f;
 800157c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e04b      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 8001584:	edd7 7a05 	vldr	s15, [r7, #20]
 8001588:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015f4 <CoefficientAndTimeCalculation+0x150>
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	db0c      	blt.n	80015b0 <CoefficientAndTimeCalculation+0x10c>
 8001596:	edd7 7a05 	vldr	s15, [r7, #20]
 800159a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80015f8 <CoefficientAndTimeCalculation+0x154>
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d503      	bpl.n	80015b0 <CoefficientAndTimeCalculation+0x10c>
	{
		Vmax = 4.0f;
 80015a8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	e035      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 80015b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015f8 <CoefficientAndTimeCalculation+0x154>
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	db20      	blt.n	8001604 <CoefficientAndTimeCalculation+0x160>
 80015c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001600 <CoefficientAndTimeCalculation+0x15c>
 80015ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d517      	bpl.n	8001604 <CoefficientAndTimeCalculation+0x160>
	{
		Vmax = 6.0f;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <CoefficientAndTimeCalculation+0x158>)
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	e020      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
 80015da:	bf00      	nop
 80015dc:	bf800000 	.word	0xbf800000
 80015e0:	c189851f 	.word	0xc189851f
 80015e4:	c2e53333 	.word	0xc2e53333
 80015e8:	4189851f 	.word	0x4189851f
 80015ec:	42e53333 	.word	0x42e53333
 80015f0:	3ecccccd 	.word	0x3ecccccd
 80015f4:	42700000 	.word	0x42700000
 80015f8:	42c80000 	.word	0x42c80000
 80015fc:	40c00000 	.word	0x40c00000
 8001600:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 8001604:	edd7 7a05 	vldr	s15, [r7, #20]
 8001608:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001600 <CoefficientAndTimeCalculation+0x15c>
 800160c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	db02      	blt.n	800161c <CoefficientAndTimeCalculation+0x178>
	{
		Vmax = 8.0f;
 8001616:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800161a:	61bb      	str	r3, [r7, #24]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  (Vmax *360.0/60.0)*gain;
 800161c:	69b8      	ldr	r0, [r7, #24]
 800161e:	f7fe ff3f 	bl	80004a0 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4bc8      	ldr	r3, [pc, #800]	; (8001948 <CoefficientAndTimeCalculation+0x4a4>)
 8001628:	f7fe ff92 	bl	8000550 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4bc4      	ldr	r3, [pc, #784]	; (800194c <CoefficientAndTimeCalculation+0x4a8>)
 800163a:	f7ff f8b3 	bl	80007a4 <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	69f8      	ldr	r0, [r7, #28]
 8001648:	f7fe ff2a 	bl	80004a0 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4640      	mov	r0, r8
 8001652:	4649      	mov	r1, r9
 8001654:	f7fe ff7c 	bl	8000550 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff f988 	bl	8000974 <__aeabi_d2f>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	609a      	str	r2, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	edd3 7a01 	vldr	s15, [r3, #4]
 8001676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	ed93 6a02 	vldr	s12, [r3, #8]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	edd3 6a00 	vldr	s13, [r3]
 8001686:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800168a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edd3 6a02 	vldr	s13, [r3, #8]
 800169a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 6a00 	vldr	s13, [r3]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edd3 6a00 	vldr	s13, [r3]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ed93 6a02 	vldr	s12, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fea3 	bl	80004a0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f907 	bl	8000974 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef1 7a67 	vneg.f32	s15, s15
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe8c 	bl	80004a0 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f8f0 	bl	8000974 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef1 7a67 	vneg.f32	s15, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80017d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80017f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe4a 	bl	80004a0 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f8ae 	bl	8000974 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef1 7a67 	vneg.f32	s15, s15
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe37 	bl	80004a0 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4614      	mov	r4, r2
 8001838:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	ee17 0a90 	vmov	r0, s15
 8001850:	f7fe fe26 	bl	80004a0 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fcc0 	bl	80001e0 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f884 	bl	8000974 <__aeabi_d2f>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001898:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018b6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018d8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001918:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001936:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001946:	e003      	b.n	8001950 <CoefficientAndTimeCalculation+0x4ac>
 8001948:	40768000 	.word	0x40768000
 800194c:	404e0000 	.word	0x404e0000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001956:	ee66 7a27 	vmul.f32	s15, s12, s15
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001962:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001972:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	ed93 7a05 	vldr	s14, [r3, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80019c0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 6a06 	vldr	s13, [r3, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019e2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 6a08 	vldr	s13, [r3, #32]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ad6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ade:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ae2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001af2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001b40:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c24:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c42:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cb6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d04:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d22:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d92:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 6a06 	vldr	s13, [r3, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001de4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dfe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e02:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ec4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ede:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ee2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001efa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fa4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001fba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fc2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001fda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800202a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800202e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002032:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002036:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800204a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800206e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002084:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800209a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800209e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80020a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80020ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020d6:	bf00      	nop

080020d8 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80020e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	1a84      	subs	r4, r0, r2
 80020ee:	eb61 0503 	sbc.w	r5, r1, r3
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f9f5 	bl	80004e4 <__aeabi_ul2d>
 80020fa:	a396      	add	r3, pc, #600	; (adr r3, 8002354 <TrajectoryEvaluation+0x27c>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fb50 	bl	80007a4 <__aeabi_ddiv>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fc32 	bl	8000974 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a8f      	ldr	r2, [pc, #572]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002114:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	f2c0 8084 	blt.w	8002230 <TrajectoryEvaluation+0x158>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	dd78      	ble.n	8002230 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	ed93 7a03 	vldr	s14, [r3, #12]
 800214e:	4b80      	ldr	r3, [pc, #512]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	ed93 7a03 	vldr	s14, [r3, #12]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	4b76      	ldr	r3, [pc, #472]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80021ba:	4b65      	ldr	r3, [pc, #404]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021bc:	ed93 6a00 	vldr	s12, [r3]
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021ca:	4b61      	ldr	r3, [pc, #388]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80021dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80021ea:	4b59      	ldr	r3, [pc, #356]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021ec:	ed93 6a00 	vldr	s12, [r3]
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002210:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800222e:	e37e      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	f200 808a 	bhi.w	800235c <TrajectoryEvaluation+0x284>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	dd7e      	ble.n	800235c <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	ed93 7a04 	vldr	s14, [r3, #16]
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	ed93 7a04 	vldr	s14, [r3, #16]
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002290:	edd3 6a00 	vldr	s13, [r3]
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	edd3 6a04 	vldr	s13, [r3, #16]
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022dc:	ed93 6a00 	vldr	s12, [r3]
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80022fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <TrajectoryEvaluation+0x278>)
 800230c:	ed93 6a00 	vldr	s12, [r3]
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	ee66 7a27 	vmul.f32	s15, s12, s15
 800231a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800231e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002322:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800234e:	e2ee      	b.n	800292e <TrajectoryEvaluation+0x856>
 8002350:	2000046c 	.word	0x2000046c
 8002354:	00000000 	.word	0x00000000
 8002358:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002362:	4b8e      	ldr	r3, [pc, #568]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	f200 8084 	bhi.w	800247c <TrajectoryEvaluation+0x3a4>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	dd78      	ble.n	800247c <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ed93 7a05 	vldr	s14, [r3, #20]
 800239a:	4b80      	ldr	r3, [pc, #512]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023bc:	edd3 6a00 	vldr	s13, [r3]
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023dc:	4b6f      	ldr	r3, [pc, #444]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	edd3 6a05 	vldr	s13, [r3, #20]
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002408:	ed93 6a00 	vldr	s12, [r3]
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002420:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002424:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002428:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800242c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002438:	ed93 6a00 	vldr	s12, [r3]
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800244a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800244e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800247a:	e258      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	f200 8086 	bhi.w	80025a0 <TrajectoryEvaluation+0x4c8>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	dd7a      	ble.n	80025a0 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024dc:	edd3 6a00 	vldr	s13, [r3]
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	edd3 6a06 	vldr	s13, [r3, #24]
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002528:	ed93 6a00 	vldr	s12, [r3]
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002544:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002548:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002558:	ed93 6a00 	vldr	s12, [r3]
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002566:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800256a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800256e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800259a:	e1c8      	b.n	800292e <TrajectoryEvaluation+0x856>
 800259c:	2000046c 	.word	0x2000046c
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	f200 8084 	bhi.w	80026c0 <TrajectoryEvaluation+0x5e8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd78      	ble.n	80026c0 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	ed93 7a07 	vldr	s14, [r3, #28]
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80025fe:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002600:	edd3 6a00 	vldr	s13, [r3]
 8002604:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	edd3 6a07 	vldr	s13, [r3, #28]
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800264c:	ed93 6a00 	vldr	s12, [r3]
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee26 6a27 	vmul.f32	s12, s12, s15
 800265a:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002668:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800266c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800267c:	ed93 6a00 	vldr	s12, [r3]
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee66 7a27 	vmul.f32	s15, s12, s15
 800268a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800268e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002692:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80026be:	e136      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	f200 8086 	bhi.w	80027e4 <TrajectoryEvaluation+0x70c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd7a      	ble.n	80027e4 <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ed93 7a08 	vldr	s14, [r3, #32]
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	edd3 6a08 	vldr	s13, [r3, #32]
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800276c:	ed93 6a00 	vldr	s12, [r3]
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee26 6a27 	vmul.f32	s12, s12, s15
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002788:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800278c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800279c:	ed93 6a00 	vldr	s12, [r3]
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80027b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80027de:	e0a6      	b.n	800292e <TrajectoryEvaluation+0x856>
 80027e0:	2000046c 	.word	0x2000046c
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <TrajectoryEvaluation+0x860>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	f200 8084 	bhi.w	8002904 <TrajectoryEvaluation+0x82c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	dd78      	ble.n	8002904 <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002822:	4b45      	ldr	r3, [pc, #276]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002844:	edd3 6a00 	vldr	s13, [r3]
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <TrajectoryEvaluation+0x860>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800285a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002890:	ed93 6a00 	vldr	s12, [r3]
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028ac:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80028b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028c0:	ed93 6a00 	vldr	s12, [r3]
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80028d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002902:	e014      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 800292e:	bf00      	nop
}
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bdb0      	pop	{r4, r5, r7, pc}
 8002936:	bf00      	nop
 8002938:	2000046c 	.word	0x2000046c

0800293c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002940:	f001 fb84 	bl	800404c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002944:	f000 f864 	bl	8002a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002948:	f000 fadc 	bl	8002f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800294c:	f000 fa8e 	bl	8002e6c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002950:	f000 f8f4 	bl	8002b3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002954:	f000 f976 	bl	8002c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002958:	f000 f9c8 	bl	8002cec <MX_TIM3_Init>
  MX_TIM11_Init();
 800295c:	f000 fa62 	bl	8002e24 <MX_TIM11_Init>
  MX_DMA_Init();
 8002960:	f000 fab0 	bl	8002ec4 <MX_DMA_Init>
  MX_TIM4_Init();
 8002964:	f000 fa10 	bl	8002d88 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002968:	f000 f8ba 	bl	8002ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //----UART-----//
  Ringbuf_Init();
 800296c:	f000 fda6 	bl	80034bc <Ringbuf_Init>
  //  HAL_UART_Receive_DMA(&huart2, RxDataBuffer, 32);
  //----UART-----//
  KalmanMatrixInit(&KalmanVar);
 8002970:	4819      	ldr	r0, [pc, #100]	; (80029d8 <main+0x9c>)
 8002972:	f7fe f9d1 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002976:	2100      	movs	r1, #0
 8002978:	4818      	ldr	r0, [pc, #96]	; (80029dc <main+0xa0>)
 800297a:	f004 fe85 	bl	8007688 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 800297e:	4818      	ldr	r0, [pc, #96]	; (80029e0 <main+0xa4>)
 8002980:	f004 fdd0 	bl	8007524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002984:	4817      	ldr	r0, [pc, #92]	; (80029e4 <main+0xa8>)
 8002986:	f004 fdcd 	bl	8007524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4);
 800298a:	4817      	ldr	r0, [pc, #92]	; (80029e8 <main+0xac>)
 800298c:	f004 fdca 	bl	8007524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002990:	213c      	movs	r1, #60	; 0x3c
 8002992:	4816      	ldr	r0, [pc, #88]	; (80029ec <main+0xb0>)
 8002994:	f004 ffce 	bl	8007934 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	461a      	mov	r2, r3
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <main+0xb4>)
 80029a2:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <main+0xb4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <main+0xb4>)
 80029aa:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <main+0xb4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <main+0xb8>)
 80029b2:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <main+0xbc>)
 80029b6:	f7fe fc3e 	bl	8001236 <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <main+0xc0>)
 80029bc:	f7fe fc3b 	bl	8001236 <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,testDes);
 80029c0:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002a00 <main+0xc4>
 80029c4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002a04 <main+0xc8>
 80029c8:	480f      	ldr	r0, [pc, #60]	; (8002a08 <main+0xcc>)
 80029ca:	f7fe fd6b 	bl	80014a4 <CoefficientAndTimeCalculation>

  btncheck = 0;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <main+0xd0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <main+0x98>
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008
 80029dc:	200004c4 	.word	0x200004c4
 80029e0:	200005e4 	.word	0x200005e4
 80029e4:	20000554 	.word	0x20000554
 80029e8:	2000059c 	.word	0x2000059c
 80029ec:	2000050c 	.word	0x2000050c
 80029f0:	20000738 	.word	0x20000738
 80029f4:	20000744 	.word	0x20000744
 80029f8:	20000320 	.word	0x20000320
 80029fc:	20000354 	.word	0x20000354
 8002a00:	42b40000 	.word	0x42b40000
 8002a04:	00000000 	.word	0x00000000
 8002a08:	20000388 	.word	0x20000388
 8002a0c:	20000788 	.word	0x20000788

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	; 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0320 	add.w	r3, r7, #32
 8002a1a:	2230      	movs	r2, #48	; 0x30
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f007 faf6 	bl	800a010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <SystemClock_Config+0xcc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a20      	ldr	r2, [pc, #128]	; (8002adc <SystemClock_Config+0xcc>)
 8002a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <SystemClock_Config+0xcc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a70:	2301      	movs	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	2310      	movs	r3, #16
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 f85d 	bl	8006b54 <HAL_RCC_OscConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002aa0:	f000 fff4 	bl	8003a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	2103      	movs	r1, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fabf 	bl	8007044 <HAL_RCC_ClockConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002acc:	f000 ffde 	bl	8003a8c <Error_Handler>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3750      	adds	r7, #80	; 0x50
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000

08002ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <MX_I2C1_Init+0x54>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_I2C1_Init+0x58>)
 8002aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b1e:	f002 f9f9 	bl	8004f14 <HAL_I2C_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b28:	f000 ffb0 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000470 	.word	0x20000470
 8002b34:	40005400 	.word	0x40005400
 8002b38:	00061a80 	.word	0x00061a80

08002b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b092      	sub	sp, #72	; 0x48
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2220      	movs	r2, #32
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fa52 	bl	800a010 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6c:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b6e:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <MX_TIM1_Init+0x104>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b98:	4828      	ldr	r0, [pc, #160]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b9a:	f004 fd25 	bl	80075e8 <HAL_TIM_PWM_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ba4:	f000 ff72 	bl	8003a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4821      	ldr	r0, [pc, #132]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002bb8:	f005 fcd0 	bl	800855c <HAL_TIMEx_MasterConfigSynchronization>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bc2:	f000 ff63 	bl	8003a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc6:	2360      	movs	r3, #96	; 0x60
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	4814      	ldr	r0, [pc, #80]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002bec:	f005 f838 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002bf6:	f000 ff49 	bl	8003a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4807      	ldr	r0, [pc, #28]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002c1e:	f005 fd0b 	bl	8008638 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c28:	f000 ff30 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002c2e:	f001 f885 	bl	8003d3c <HAL_TIM_MspPostInit>

}
 8002c32:	bf00      	nop
 8002c34:	3748      	adds	r7, #72	; 0x48
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004c4 	.word	0x200004c4
 8002c40:	40010000 	.word	0x40010000

08002c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f007 f9dc 	bl	800a010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c76:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002cb4:	f004 fd98 	bl	80077e8 <HAL_TIM_Encoder_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cbe:	f000 fee5 	bl	8003a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002cd0:	f005 fc44 	bl	800855c <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002cda:	f000 fed7 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	3730      	adds	r7, #48	; 0x30
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000050c 	.word	0x2000050c

08002cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <MX_TIM3_Init+0x98>)
 8002d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d10:	2209      	movs	r2, #9
 8002d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d30:	f004 fba8 	bl	8007484 <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d3a:	f000 fea7 	bl	8003a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d4c:	f005 f84a 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d56:	f000 fe99 	bl	8003a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d62:	463b      	mov	r3, r7
 8002d64:	4619      	mov	r1, r3
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d68:	f005 fbf8 	bl	800855c <HAL_TIMEx_MasterConfigSynchronization>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d72:	f000 fe8b 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000554 	.word	0x20000554
 8002d84:	40000400 	.word	0x40000400

08002d88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <MX_TIM4_Init+0x98>)
 8002da8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dac:	2209      	movs	r2, #9
 8002dae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002db8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dcc:	f004 fb5a 	bl	8007484 <HAL_TIM_Base_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002dd6:	f000 fe59 	bl	8003a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002de8:	f004 fffc 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002df2:	f000 fe4b 	bl	8003a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002e04:	f005 fbaa 	bl	800855c <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002e0e:	f000 fe3d 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000059c 	.word	0x2000059c
 8002e20:	40000800 	.word	0x40000800

08002e24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <MX_TIM11_Init+0x44>)
 8002e2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e30:	2263      	movs	r2, #99	; 0x63
 8002e32:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e40:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e50:	f004 fb18 	bl	8007484 <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002e5a:	f000 fe17 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200005e4 	.word	0x200005e4
 8002e68:	40014800 	.word	0x40014800

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <MX_USART2_UART_Init+0x54>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e78:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e84:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002ea8:	f005 fc2c 	bl	8008704 <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002eb2:	f000 fdeb 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000062c 	.word	0x2000062c
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2010      	movs	r0, #16
 8002eec:	f001 f9fb 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ef0:	2010      	movs	r0, #16
 8002ef2:	f001 fa14 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	f107 0314 	add.w	r3, r7, #20
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a45      	ldr	r2, [pc, #276]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a37      	ldr	r2, [pc, #220]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b35      	ldr	r3, [pc, #212]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002f90:	4831      	ldr	r0, [pc, #196]	; (8003058 <MX_GPIO_Init+0x154>)
 8002f92:	f001 ff73 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2118      	movs	r1, #24
 8002f9a:	4830      	ldr	r0, [pc, #192]	; (800305c <MX_GPIO_Init+0x158>)
 8002f9c:	f001 ff6e 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	482a      	ldr	r0, [pc, #168]	; (8003060 <MX_GPIO_Init+0x15c>)
 8002fb8:	f001 fddc 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002fbc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4820      	ldr	r0, [pc, #128]	; (8003058 <MX_GPIO_Init+0x154>)
 8002fd6:	f001 fdcd 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8002fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4819      	ldr	r0, [pc, #100]	; (8003058 <MX_GPIO_Init+0x154>)
 8002ff2:	f001 fdbf 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 8002ff6:	2318      	movs	r3, #24
 8002ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 0314 	add.w	r3, r7, #20
 800300a:	4619      	mov	r1, r3
 800300c:	4813      	ldr	r0, [pc, #76]	; (800305c <MX_GPIO_Init+0x158>)
 800300e:	f001 fdb1 	bl	8004b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8003012:	2320      	movs	r3, #32
 8003014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003016:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800301a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	480d      	ldr	r0, [pc, #52]	; (800305c <MX_GPIO_Init+0x158>)
 8003028:	f001 fda4 	bl	8004b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	2017      	movs	r0, #23
 8003032:	f001 f958 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003036:	2017      	movs	r0, #23
 8003038:	f001 f971 	bl	800431e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	2028      	movs	r0, #40	; 0x28
 8003042:	f001 f950 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003046:	2028      	movs	r0, #40	; 0x28
 8003048:	f001 f969 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	00000000 	.word	0x00000000

08003068 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800306c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	461a      	mov	r2, r3
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <EncoderRead+0xf8>)
 8003076:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <EncoderRead+0xf8>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <EncoderRead+0xf8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	1ad2      	subs	r2, r2, r3
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <EncoderRead+0xfc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	425b      	negs	r3, r3
 8003088:	429a      	cmp	r2, r3
 800308a:	da07      	bge.n	800309c <EncoderRead+0x34>
		WrappingStep+=12000;
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <EncoderRead+0x100>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003094:	3320      	adds	r3, #32
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <EncoderRead+0x100>)
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e00f      	b.n	80030bc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <EncoderRead+0xf8>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <EncoderRead+0xf8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <EncoderRead+0xfc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	db06      	blt.n	80030bc <EncoderRead+0x54>
		WrappingStep-=12000;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <EncoderRead+0x100>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80030b6:	3b20      	subs	r3, #32
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <EncoderRead+0x100>)
 80030ba:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <EncoderRead+0xf8>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <EncoderRead+0x100>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <EncoderRead+0x104>)
 80030c8:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <EncoderRead+0x104>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f9d4 	bl	800047c <__aeabi_i2d>
 80030d4:	a320      	add	r3, pc, #128	; (adr r3, 8003158 <EncoderRead+0xf0>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd fb63 	bl	80007a4 <__aeabi_ddiv>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <EncoderRead+0x108>)
 80030ec:	f7fd fa30 	bl	8000550 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fd fc3c 	bl	8000974 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <EncoderRead+0x10c>)
 8003100:	6013      	str	r3, [r2, #0]
	if(PositionDeg[0] != PositionDeg[1])
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <EncoderRead+0x10c>)
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <EncoderRead+0x10c>)
 800310a:	edd3 7a01 	vldr	s15, [r3, #4]
 800310e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d00f      	beq.n	8003138 <EncoderRead+0xd0>
	{
		VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <EncoderRead+0x10c>)
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <EncoderRead+0x10c>)
 8003120:	edd3 7a01 	vldr	s15, [r3, #4]
 8003124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003128:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003178 <EncoderRead+0x110>
 800312c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <EncoderRead+0x114>)
 8003132:	edc3 7a00 	vstr	s15, [r3]
 8003136:	e003      	b.n	8003140 <EncoderRead+0xd8>
	}
	else
	{
		VelocityDeg = VelocityDeg;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <EncoderRead+0x114>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <EncoderRead+0x114>)
 800313e:	6013      	str	r3, [r2, #0]
	}
	EncoderRawData[1] = EncoderRawData[0];
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <EncoderRead+0xf8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a06      	ldr	r2, [pc, #24]	; (8003160 <EncoderRead+0xf8>)
 8003146:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <EncoderRead+0x10c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a09      	ldr	r2, [pc, #36]	; (8003174 <EncoderRead+0x10c>)
 800314e:	6053      	str	r3, [r2, #4]
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	f3af 8000 	nop.w
 8003158:	00000000 	.word	0x00000000
 800315c:	40c77000 	.word	0x40c77000
 8003160:	20000738 	.word	0x20000738
 8003164:	2000043c 	.word	0x2000043c
 8003168:	20000740 	.word	0x20000740
 800316c:	20000744 	.word	0x20000744
 8003170:	40768000 	.word	0x40768000
 8003174:	20000748 	.word	0x20000748
 8003178:	3a83126f 	.word	0x3a83126f
 800317c:	20000750 	.word	0x20000750

08003180 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da02      	bge.n	8003194 <PWMAbs+0x14>
		return PWM*-1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	425b      	negs	r3, r3
 8003192:	e000      	b.n	8003196 <PWMAbs+0x16>
	}else{
		return PWM;
 8003194:	687b      	ldr	r3, [r7, #4]
	}
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	dc11      	bgt.n	80031d6 <Drivemotor+0x32>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a25      	ldr	r2, [pc, #148]	; (800324c <Drivemotor+0xa8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	db0d      	blt.n	80031d6 <Drivemotor+0x32>
			htim1.Instance->CCR1=PWMAbs(PWM);
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <Drivemotor+0xac>)
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffde 	bl	8003180 <PWMAbs>
 80031c4:	4603      	mov	r3, r0
 80031c6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ce:	4821      	ldr	r0, [pc, #132]	; (8003254 <Drivemotor+0xb0>)
 80031d0:	f001 fe54 	bl	8004e7c <HAL_GPIO_WritePin>
 80031d4:	e036      	b.n	8003244 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <Drivemotor+0xa8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	da0b      	bge.n	80031f6 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <Drivemotor+0xac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ee:	4819      	ldr	r0, [pc, #100]	; (8003254 <Drivemotor+0xb0>)
 80031f0:	f001 fe44 	bl	8004e7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 80031f4:	e026      	b.n	8003244 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db12      	blt.n	8003222 <Drivemotor+0x7e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003202:	4293      	cmp	r3, r2
 8003204:	dc0d      	bgt.n	8003222 <Drivemotor+0x7e>
			htim1.Instance->CCR1=PWMAbs(PWM);
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <Drivemotor+0xac>)
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffb8 	bl	8003180 <PWMAbs>
 8003210:	4603      	mov	r3, r0
 8003212:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003214:	2201      	movs	r2, #1
 8003216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321a:	480e      	ldr	r0, [pc, #56]	; (8003254 <Drivemotor+0xb0>)
 800321c:	f001 fe2e 	bl	8004e7c <HAL_GPIO_WritePin>
 8003220:	e010      	b.n	8003244 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f242 7210 	movw	r2, #10000	; 0x2710
 8003228:	4293      	cmp	r3, r2
 800322a:	dd0b      	ble.n	8003244 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <Drivemotor+0xac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f242 7210 	movw	r2, #10000	; 0x2710
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <Drivemotor+0xb0>)
 800323e:	f001 fe1d 	bl	8004e7c <HAL_GPIO_WritePin>
}
 8003242:	e7ff      	b.n	8003244 <Drivemotor+0xa0>
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	ffffd8f0 	.word	0xffffd8f0
 8003250:	200004c4 	.word	0x200004c4
 8003254:	40020000 	.word	0x40020000

08003258 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af02      	add	r7, sp, #8
//	setpoint = 180.0;
//	PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	PWMCHECKER = PidVelo.ControllerOut;
//	Drivemotor(2500.0);
	  if (flagT == 0)
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <ControllLoopAndErrorHandler+0x110>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <ControllLoopAndErrorHandler+0x22>
	  {
	    StartTime = Micros();
 8003266:	f000 f911 	bl	800348c <Micros>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	493f      	ldr	r1, [pc, #252]	; (800336c <ControllLoopAndErrorHandler+0x114>)
 8003270:	e9c1 2300 	strd	r2, r3, [r1]
	    flagT =1;
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <ControllLoopAndErrorHandler+0x110>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
	  }
		CurrentTime = Micros();
 800327a:	f000 f907 	bl	800348c <Micros>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	493b      	ldr	r1, [pc, #236]	; (8003370 <ControllLoopAndErrorHandler+0x118>)
 8003284:	e9c1 2300 	strd	r2, r3, [r1]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <ControllLoopAndErrorHandler+0x114>)
 800328a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <ControllLoopAndErrorHandler+0x118>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	e9cd 2300 	strd	r2, r3, [sp]
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4835      	ldr	r0, [pc, #212]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 800329e:	f7fe ff1b 	bl	80020d8 <TrajectoryEvaluation>
	  if(AbsVal(testDes - PositionDeg[0]) < 0.5 && AbsVal(KalmanVar.MatState_Data[1]) < 1.0)
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <ControllLoopAndErrorHandler+0x120>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800337c <ControllLoopAndErrorHandler+0x124>
 80032ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b0:	eeb0 0a67 	vmov.f32	s0, s15
 80032b4:	f7fe f8d4 	bl	8001460 <AbsVal>
 80032b8:	eef0 7a40 	vmov.f32	s15, s0
 80032bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	d51d      	bpl.n	8003306 <ControllLoopAndErrorHandler+0xae>
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <ControllLoopAndErrorHandler+0x128>)
 80032cc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	f7fe f8c4 	bl	8001460 <AbsVal>
 80032d8:	eef0 7a40 	vmov.f32	s15, s0
 80032dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d50d      	bpl.n	8003306 <ControllLoopAndErrorHandler+0xae>
	  {
	    PWMCHECKER = 0.0;
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	    Drivemotor(PWMCHECKER);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fc:	ee17 0a90 	vmov	r0, s15
 8003300:	f7ff ff50 	bl	80031a4 <Drivemotor>
 8003304:	e02c      	b.n	8003360 <ControllLoopAndErrorHandler+0x108>
	  }
	  else
	  {
		PIDVelocityController_Update(&PidPos,traject.QX, PositionDeg[0]);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 8003308:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <ControllLoopAndErrorHandler+0x120>)
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	eef0 0a47 	vmov.f32	s1, s14
 8003316:	eeb0 0a67 	vmov.f32	s0, s15
 800331a:	481b      	ldr	r0, [pc, #108]	; (8003388 <ControllLoopAndErrorHandler+0x130>)
 800331c:	f7fd ffb4 	bl	8001288 <PIDVelocityController_Update>
		PIDVelocityController_Update(&PidVelo, traject.QV + PidPos.ControllerOut  , KalmanVar.MatState_Data[1]);
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 8003322:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <ControllLoopAndErrorHandler+0x130>)
 8003328:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <ControllLoopAndErrorHandler+0x128>)
 8003332:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003336:	eef0 0a47 	vmov.f32	s1, s14
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	4813      	ldr	r0, [pc, #76]	; (800338c <ControllLoopAndErrorHandler+0x134>)
 8003340:	f7fd ffa2 	bl	8001288 <PIDVelocityController_Update>
		PWMCHECKER = PidVelo.ControllerOut;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <ControllLoopAndErrorHandler+0x134>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 800334a:	6013      	str	r3, [r2, #0]
		Drivemotor(PWMCHECKER);
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7ff ff23 	bl	80031a4 <Drivemotor>
	  }
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000758 	.word	0x20000758
 800336c:	20000760 	.word	0x20000760
 8003370:	20000768 	.word	0x20000768
 8003374:	20000388 	.word	0x20000388
 8003378:	20000748 	.word	0x20000748
 800337c:	42b40000 	.word	0x42b40000
 8003380:	20000008 	.word	0x20000008
 8003384:	20000754 	.word	0x20000754
 8003388:	20000354 	.word	0x20000354
 800338c:	20000320 	.word	0x20000320

08003390 <HAL_GPIO_EXTI_Callback>:
		I2CEndEffectorReadFlag = 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
//		I2CEndEffectorWriteFlag = 1;
//		I2CWriteFcn(dumdata,len,Endeff_ADDR);
////		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, 0b01000101, 1);
////		HAL_I2C_Mem_Write_IT(&hi2c1, Endeff_ADDR, Endeff_TEST, I2C_MEMADD_SIZE_16BIT, pData, Size);
//	}
	if(GPIO_Pin == GPIO_PIN_10)
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d103      	bne.n	80033aa <HAL_GPIO_EXTI_Callback+0x1a>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80033a2:	2108      	movs	r1, #8
 80033a4:	4809      	ldr	r0, [pc, #36]	; (80033cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80033a6:	f001 fd82 	bl	8004eae <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d109      	bne.n	80033c4 <HAL_GPIO_EXTI_Callback+0x34>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80033b0:	2110      	movs	r1, #16
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80033b4:	f001 fd7b 	bl	8004eae <HAL_GPIO_TogglePin>
		btncheck++;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80033c2:	701a      	strb	r2, [r3, #0]
	}
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40020400 	.word	0x40020400
 80033d0:	20000788 	.word	0x20000788

080033d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10c      	bne.n	8003400 <HAL_TIM_PeriodElapsedCallback+0x2c>
		_micro += 65535;
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033f0:	eb12 0801 	adds.w	r8, r2, r1
 80033f4:	f143 0900 	adc.w	r9, r3, #0
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80033fa:	e9c3 8900 	strd	r8, r9, [r3]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
	}
	else if (htim == &htim4) {

		}
}
 80033fe:	e030      	b.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x8e>
	else if (htim == &htim3) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d12c      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x8e>
		CheckLoopStartTime = Micros();
 8003408:	f000 f840 	bl	800348c <Micros>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4919      	ldr	r1, [pc, #100]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003412:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003416:	f7ff fe27 	bl	8003068 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb0 0a67 	vmov.f32	s0, s15
 8003424:	4816      	ldr	r0, [pc, #88]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003426:	f7fd fdd9 	bl	8000fdc <KalmanFilterFunction>
		ControllLoopAndErrorHandler();
 800342a:	f7ff ff15 	bl	8003258 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 800342e:	f000 f82d 	bl	800348c <Micros>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4913      	ldr	r1, [pc, #76]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStopTime = Micros();
 800343c:	f000 f826 	bl	800348c <Micros>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	490f      	ldr	r1, [pc, #60]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003446:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800344c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	1a84      	subs	r4, r0, r2
 8003458:	eb61 0503 	sbc.w	r5, r1, r3
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800345e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800346c:	200005e4 	.word	0x200005e4
 8003470:	20000730 	.word	0x20000730
 8003474:	20000554 	.word	0x20000554
 8003478:	20000770 	.word	0x20000770
 800347c:	20000748 	.word	0x20000748
 8003480:	20000008 	.word	0x20000008
 8003484:	20000778 	.word	0x20000778
 8003488:	20000780 	.word	0x20000780

0800348c <Micros>:

uint64_t Micros(){
 800348c:	b4b0      	push	{r4, r5, r7}
 800348e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <Micros+0x28>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2200      	movs	r2, #0
 8003496:	4618      	mov	r0, r3
 8003498:	4611      	mov	r1, r2
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <Micros+0x2c>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	1884      	adds	r4, r0, r2
 80034a2:	eb41 0503 	adc.w	r5, r1, r3
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
}
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bcb0      	pop	{r4, r5, r7}
 80034b2:	4770      	bx	lr
 80034b4:	40014800 	.word	0x40014800
 80034b8:	20000730 	.word	0x20000730

080034bc <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 80034c0:	2214      	movs	r2, #20
 80034c2:	2100      	movs	r1, #0
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <Ringbuf_Init+0x50>)
 80034c6:	f006 fda3 	bl	800a010 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 80034ca:	2228      	movs	r2, #40	; 0x28
 80034cc:	2100      	movs	r1, #0
 80034ce:	4810      	ldr	r0, [pc, #64]	; (8003510 <Ringbuf_Init+0x54>)
 80034d0:	f006 fd9e 	bl	800a010 <memset>

	Head = Tail = 0;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <Ringbuf_Init+0x58>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <Ringbuf_Init+0x58>)
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <Ringbuf_Init+0x5c>)
 80034e0:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <Ringbuf_Init+0x60>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <Ringbuf_Init+0x64>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 80034ee:	2214      	movs	r2, #20
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <Ringbuf_Init+0x50>)
 80034f2:	480c      	ldr	r0, [pc, #48]	; (8003524 <Ringbuf_Init+0x68>)
 80034f4:	f005 f998 	bl	8008828 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <Ringbuf_Init+0x6c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <Ringbuf_Init+0x6c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0208 	bic.w	r2, r2, #8
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200006d0 	.word	0x200006d0
 8003510:	200006e4 	.word	0x200006e4
 8003514:	20000712 	.word	0x20000712
 8003518:	20000710 	.word	0x20000710
 800351c:	2000070c 	.word	0x2000070c
 8003520:	2000070e 	.word	0x2000070e
 8003524:	2000062c 	.word	0x2000062c
 8003528:	20000670 	.word	0x20000670

0800352c <checkSum>:
	oldPos = 0;
	newPos = 0;
}

uint8_t checkSum (uint8_t *buffertoCheckSum , int bufferSize)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
	for (int index = 0; index < bufferSize-1; ++index)
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	e009      	b.n	8003554 <checkSum+0x28>
	{
		sum = sum + buffertoCheckSum[index];
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	4413      	add	r3, r2
 800354c:	73fb      	strb	r3, [r7, #15]
	for (int index = 0; index < bufferSize-1; ++index)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbf0      	blt.n	8003540 <checkSum+0x14>
	}
	if((uint8_t)(buffertoCheckSum[bufferSize-1])==(uint8_t)(~sum))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	43db      	mvns	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	429a      	cmp	r2, r3
 8003570:	d101      	bne.n	8003576 <checkSum+0x4a>
	{
		return 1;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <checkSum+0x4c>
	}
	else
	{
		return 0;
 8003576:	2300      	movs	r3, #0
	}
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
		oldPos = newPos;  // Update the last position before copying new data
 8003590:	4b3e      	ldr	r3, [pc, #248]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003596:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	4413      	add	r3, r2
 80035a2:	2b28      	cmp	r3, #40	; 0x28
 80035a4:	dd22      	ble.n	80035ec <HAL_UARTEx_RxEventCallback+0x68>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80035ae:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, datatocopy);  // copy data in that remaining space
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035b8:	4413      	add	r3, r2
 80035ba:	89fa      	ldrh	r2, [r7, #14]
 80035bc:	4936      	ldr	r1, [pc, #216]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035be:	4618      	mov	r0, r3
 80035c0:	f006 fd18 	bl	8009ff4 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80035ca:	89fb      	ldrh	r3, [r7, #14]
 80035cc:	4a32      	ldr	r2, [pc, #200]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035ce:	1899      	adds	r1, r3, r2
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035da:	f006 fd0b 	bl	8009ff4 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	89fb      	ldrh	r3, [r7, #14]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e010      	b.n	800360e <HAL_UARTEx_RxEventCallback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035f4:	4413      	add	r3, r2
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	4927      	ldr	r1, [pc, #156]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f006 fcfa 	bl	8009ff4 <memcpy>
			newPos = Size+oldPos;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4413      	add	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 800360c:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4413      	add	r3, r2
 8003618:	2b27      	cmp	r3, #39	; 0x27
 800361a:	dc07      	bgt.n	800362c <HAL_UARTEx_RxEventCallback+0xa8>
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	4413      	add	r3, r2
 8003624:	b29a      	uxth	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e008      	b.n	800363e <HAL_UARTEx_RxEventCallback+0xba>
		else Head = Head+Size - MainBuf_SIZE;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4413      	add	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b28      	subs	r3, #40	; 0x28
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800363c:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 800363e:	2214      	movs	r2, #20
 8003640:	4915      	ldr	r1, [pc, #84]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 8003642:	4817      	ldr	r0, [pc, #92]	; (80036a0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8003644:	f005 f8f0 	bl	8008828 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_UARTEx_RxEventCallback+0x120>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_UARTEx_RxEventCallback+0x120>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0208 	bic.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]


	/****************** PROCESS (Little) THE DATA HERE *********************/
		if(checkSum(RxBuf, newPos-oldPos))
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	4619      	mov	r1, r3
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 8003668:	f7ff ff60 	bl	800352c <checkSum>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_UARTEx_RxEventCallback+0xfe>
		{
		stateManagement(RxBuf,newPos,oldPos);
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4806      	ldr	r0, [pc, #24]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 800367e:	f000 f813 	bl	80036a8 <stateManagement>
		}
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000070e 	.word	0x2000070e
 8003690:	2000070c 	.word	0x2000070c
 8003694:	200006e4 	.word	0x200006e4
 8003698:	200006d0 	.word	0x200006d0
 800369c:	20000710 	.word	0x20000710
 80036a0:	2000062c 	.word	0x2000062c
 80036a4:	20000670 	.word	0x20000670

080036a8 <stateManagement>:

void stateManagement(uint8_t *Rxbuffer , uint16_t rxDataCurPos , uint16_t rxDataLastPos)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	803b      	strh	r3, [r7, #0]
	uint16_t rxDatalen = rxDataCurPos - rxDataLastPos;
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	883b      	ldrh	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	81fb      	strh	r3, [r7, #14]
	switch (MainState) {
 80036c0:	4ba0      	ldr	r3, [pc, #640]	; (8003944 <stateManagement+0x29c>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	f000 81c7 	beq.w	8003a58 <stateManagement+0x3b0>
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f300 81c7 	bgt.w	8003a5e <stateManagement+0x3b6>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <stateManagement+0x32>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00e      	beq.n	80036f6 <stateManagement+0x4e>
					homingFlag = 1;
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
					break;
				}
	}
}
 80036d8:	e1c1      	b.n	8003a5e <stateManagement+0x3b6>
			if(Rxbuffer[0] == 0b10010010)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b92      	cmp	r3, #146	; 0x92
 80036e0:	f040 81bc 	bne.w	8003a5c <stateManagement+0x3b4>
				MainState = normOperation;
 80036e4:	4b97      	ldr	r3, [pc, #604]	; (8003944 <stateManagement+0x29c>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 80036ea:	2202      	movs	r2, #2
 80036ec:	4996      	ldr	r1, [pc, #600]	; (8003948 <stateManagement+0x2a0>)
 80036ee:	4897      	ldr	r0, [pc, #604]	; (800394c <stateManagement+0x2a4>)
 80036f0:	f005 f855 	bl	800879e <HAL_UART_Transmit_IT>
			break;
 80036f4:	e1b2      	b.n	8003a5c <stateManagement+0x3b4>
			switch (Rxbuffer[0])
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3b91      	subs	r3, #145	; 0x91
 80036fc:	2b0d      	cmp	r3, #13
 80036fe:	f200 81ae 	bhi.w	8003a5e <stateManagement+0x3b6>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <stateManagement+0x60>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003741 	.word	0x08003741
 800370c:	0800374d 	.word	0x0800374d
 8003710:	0800375f 	.word	0x0800375f
 8003714:	08003771 	.word	0x08003771
 8003718:	08003789 	.word	0x08003789
 800371c:	08003a5f 	.word	0x08003a5f
 8003720:	08003a5f 	.word	0x08003a5f
 8003724:	080037b1 	.word	0x080037b1
 8003728:	080037c3 	.word	0x080037c3
 800372c:	0800384f 	.word	0x0800384f
 8003730:	08003975 	.word	0x08003975
 8003734:	08003a23 	.word	0x08003a23
 8003738:	08003a35 	.word	0x08003a35
 800373c:	08003a47 	.word	0x08003a47
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003740:	2202      	movs	r2, #2
 8003742:	4981      	ldr	r1, [pc, #516]	; (8003948 <stateManagement+0x2a0>)
 8003744:	4881      	ldr	r0, [pc, #516]	; (800394c <stateManagement+0x2a4>)
 8003746:	f005 f82a 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 800374a:	e188      	b.n	8003a5e <stateManagement+0x3b6>
					MainState = normOperation;
 800374c:	4b7d      	ldr	r3, [pc, #500]	; (8003944 <stateManagement+0x29c>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003752:	2202      	movs	r2, #2
 8003754:	497c      	ldr	r1, [pc, #496]	; (8003948 <stateManagement+0x2a0>)
 8003756:	487d      	ldr	r0, [pc, #500]	; (800394c <stateManagement+0x2a4>)
 8003758:	f005 f821 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 800375c:	e17f      	b.n	8003a5e <stateManagement+0x3b6>
					MainState = MCDisCon;
 800375e:	4b79      	ldr	r3, [pc, #484]	; (8003944 <stateManagement+0x29c>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003764:	2202      	movs	r2, #2
 8003766:	4978      	ldr	r1, [pc, #480]	; (8003948 <stateManagement+0x2a0>)
 8003768:	4878      	ldr	r0, [pc, #480]	; (800394c <stateManagement+0x2a4>)
 800376a:	f005 f818 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 800376e:	e176      	b.n	8003a5e <stateManagement+0x3b6>
					uartVelo = Rxbuffer[2];
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3302      	adds	r3, #2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b75      	ldr	r3, [pc, #468]	; (8003950 <stateManagement+0x2a8>)
 800377a:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 800377c:	2202      	movs	r2, #2
 800377e:	4972      	ldr	r1, [pc, #456]	; (8003948 <stateManagement+0x2a0>)
 8003780:	4872      	ldr	r0, [pc, #456]	; (800394c <stateManagement+0x2a4>)
 8003782:	f005 f80c 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003786:	e16a      	b.n	8003a5e <stateManagement+0x3b6>
					uartPos = (Rxbuffer[1] << 8) | Rxbuffer[2];
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	b21a      	sxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3302      	adds	r3, #2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b21b      	sxth	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b21b      	sxth	r3, r3
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <stateManagement+0x2ac>)
 80037a2:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 80037a4:	2202      	movs	r2, #2
 80037a6:	4968      	ldr	r1, [pc, #416]	; (8003948 <stateManagement+0x2a0>)
 80037a8:	4868      	ldr	r0, [pc, #416]	; (800394c <stateManagement+0x2a4>)
 80037aa:	f004 fff8 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 80037ae:	e156      	b.n	8003a5e <stateManagement+0x3b6>
					runningFlag = 1;
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <stateManagement+0x2b0>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 80037b6:	2202      	movs	r2, #2
 80037b8:	4963      	ldr	r1, [pc, #396]	; (8003948 <stateManagement+0x2a0>)
 80037ba:	4864      	ldr	r0, [pc, #400]	; (800394c <stateManagement+0x2a4>)
 80037bc:	f004 ffef 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 80037c0:	e14d      	b.n	8003a5e <stateManagement+0x3b6>
					goalData = 10;
 80037c2:	4b66      	ldr	r3, [pc, #408]	; (800395c <stateManagement+0x2b4>)
 80037c4:	220a      	movs	r2, #10
 80037c6:	701a      	strb	r2, [r3, #0]
					if(runningFlag == 1){
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <stateManagement+0x2b0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d11c      	bne.n	800380a <stateManagement+0x162>
 80037d0:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <stateManagement+0x2a0>)
 80037d2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 80037d4:	4b62      	ldr	r3, [pc, #392]	; (8003960 <stateManagement+0x2b8>)
 80037d6:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 80037d8:	4b61      	ldr	r3, [pc, #388]	; (8003960 <stateManagement+0x2b8>)
 80037da:	2299      	movs	r2, #153	; 0x99
 80037dc:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 80037de:	4b60      	ldr	r3, [pc, #384]	; (8003960 <stateManagement+0x2b8>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	70da      	strb	r2, [r3, #3]
						sendData[4] = goalData; // set current goal
 80037e4:	4b5d      	ldr	r3, [pc, #372]	; (800395c <stateManagement+0x2b4>)
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <stateManagement+0x2b8>)
 80037ea:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 80037ec:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <stateManagement+0x2b8>)
 80037ee:	789a      	ldrb	r2, [r3, #2]
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <stateManagement+0x2b8>)
 80037f2:	78db      	ldrb	r3, [r3, #3]
 80037f4:	4413      	add	r3, r2
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <stateManagement+0x2b8>)
 80037fa:	791b      	ldrb	r3, [r3, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	4b56      	ldr	r3, [pc, #344]	; (8003960 <stateManagement+0x2b8>)
 8003806:	715a      	strb	r2, [r3, #5]
 8003808:	e01b      	b.n	8003842 <stateManagement+0x19a>
 800380a:	4b56      	ldr	r3, [pc, #344]	; (8003964 <stateManagement+0x2bc>)
 800380c:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <stateManagement+0x2b8>)
 8003810:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <stateManagement+0x2b8>)
 8003814:	2299      	movs	r2, #153	; 0x99
 8003816:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 8003818:	4b51      	ldr	r3, [pc, #324]	; (8003960 <stateManagement+0x2b8>)
 800381a:	2200      	movs	r2, #0
 800381c:	70da      	strb	r2, [r3, #3]
						sendData[4] = goalData; // set current goal
 800381e:	4b4f      	ldr	r3, [pc, #316]	; (800395c <stateManagement+0x2b4>)
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <stateManagement+0x2b8>)
 8003824:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <stateManagement+0x2b8>)
 8003828:	789a      	ldrb	r2, [r3, #2]
 800382a:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <stateManagement+0x2b8>)
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	4413      	add	r3, r2
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <stateManagement+0x2b8>)
 8003834:	791b      	ldrb	r3, [r3, #4]
 8003836:	4413      	add	r3, r2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b48      	ldr	r3, [pc, #288]	; (8003960 <stateManagement+0x2b8>)
 8003840:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 8003842:	2206      	movs	r2, #6
 8003844:	4946      	ldr	r1, [pc, #280]	; (8003960 <stateManagement+0x2b8>)
 8003846:	4841      	ldr	r0, [pc, #260]	; (800394c <stateManagement+0x2a4>)
 8003848:	f004 ffa9 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 800384c:	e107      	b.n	8003a5e <stateManagement+0x3b6>
					modeNo = 10;
 800384e:	4b46      	ldr	r3, [pc, #280]	; (8003968 <stateManagement+0x2c0>)
 8003850:	220a      	movs	r2, #10
 8003852:	701a      	strb	r2, [r3, #0]
					posData = 10271; // data from zhong
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <stateManagement+0x2c4>)
 8003856:	f642 021f 	movw	r2, #10271	; 0x281f
 800385a:	801a      	strh	r2, [r3, #0]
					if(runningFlag == 1){
 800385c:	4b3e      	ldr	r3, [pc, #248]	; (8003958 <stateManagement+0x2b0>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d134      	bne.n	80038ce <stateManagement+0x226>
 8003864:	4b38      	ldr	r3, [pc, #224]	; (8003948 <stateManagement+0x2a0>)
 8003866:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <stateManagement+0x2b8>)
 800386a:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 800386c:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <stateManagement+0x2b8>)
 800386e:	229a      	movs	r2, #154	; 0x9a
 8003870:	709a      	strb	r2, [r3, #2]
						sendData[3] = ((posData*65535)/16000) & 255; // set low byte posData
 8003872:	4b3e      	ldr	r3, [pc, #248]	; (800396c <stateManagement+0x2c4>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4613      	mov	r3, r2
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <stateManagement+0x2c8>)
 8003880:	fb82 1203 	smull	r1, r2, r2, r3
 8003884:	1292      	asrs	r2, r2, #10
 8003886:	17db      	asrs	r3, r3, #31
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <stateManagement+0x2b8>)
 800388e:	70da      	strb	r2, [r3, #3]
						sendData[4] = ((posData*65535)/16000) >> 8; // set high byte posData
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <stateManagement+0x2c4>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4613      	mov	r3, r2
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	4a34      	ldr	r2, [pc, #208]	; (8003970 <stateManagement+0x2c8>)
 800389e:	fb82 1203 	smull	r1, r2, r2, r3
 80038a2:	1292      	asrs	r2, r2, #10
 80038a4:	17db      	asrs	r3, r3, #31
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	121b      	asrs	r3, r3, #8
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <stateManagement+0x2b8>)
 80038ae:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <stateManagement+0x2b8>)
 80038b2:	789a      	ldrb	r2, [r3, #2]
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <stateManagement+0x2b8>)
 80038b6:	78db      	ldrb	r3, [r3, #3]
 80038b8:	4413      	add	r3, r2
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <stateManagement+0x2b8>)
 80038be:	791b      	ldrb	r3, [r3, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <stateManagement+0x2b8>)
 80038ca:	715a      	strb	r2, [r3, #5]
 80038cc:	e033      	b.n	8003936 <stateManagement+0x28e>
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <stateManagement+0x2bc>)
 80038d0:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <stateManagement+0x2b8>)
 80038d4:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <stateManagement+0x2b8>)
 80038d8:	229a      	movs	r2, #154	; 0x9a
 80038da:	709a      	strb	r2, [r3, #2]
						sendData[3] = ((posData*65535)/16000) & 255; // set low byte posData
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <stateManagement+0x2c4>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4613      	mov	r3, r2
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <stateManagement+0x2c8>)
 80038ea:	fb82 1203 	smull	r1, r2, r2, r3
 80038ee:	1292      	asrs	r2, r2, #10
 80038f0:	17db      	asrs	r3, r3, #31
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <stateManagement+0x2b8>)
 80038f8:	70da      	strb	r2, [r3, #3]
						sendData[4] = ((posData*65535)/16000) >> 8; // set high byte posData
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <stateManagement+0x2c4>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4613      	mov	r3, r2
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <stateManagement+0x2c8>)
 8003908:	fb82 1203 	smull	r1, r2, r2, r3
 800390c:	1292      	asrs	r2, r2, #10
 800390e:	17db      	asrs	r3, r3, #31
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	121b      	asrs	r3, r3, #8
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <stateManagement+0x2b8>)
 8003918:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <stateManagement+0x2b8>)
 800391c:	789a      	ldrb	r2, [r3, #2]
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <stateManagement+0x2b8>)
 8003920:	78db      	ldrb	r3, [r3, #3]
 8003922:	4413      	add	r3, r2
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <stateManagement+0x2b8>)
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	4413      	add	r3, r2
 800392c:	b2db      	uxtb	r3, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <stateManagement+0x2b8>)
 8003934:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 8003936:	2206      	movs	r2, #6
 8003938:	4909      	ldr	r1, [pc, #36]	; (8003960 <stateManagement+0x2b8>)
 800393a:	4804      	ldr	r0, [pc, #16]	; (800394c <stateManagement+0x2a4>)
 800393c:	f004 ff2f 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003940:	e08d      	b.n	8003a5e <stateManagement+0x3b6>
 8003942:	bf00      	nop
 8003944:	20000006 	.word	0x20000006
 8003948:	20000000 	.word	0x20000000
 800394c:	2000062c 	.word	0x2000062c
 8003950:	20000724 	.word	0x20000724
 8003954:	20000726 	.word	0x20000726
 8003958:	20000728 	.word	0x20000728
 800395c:	2000071e 	.word	0x2000071e
 8003960:	20000718 	.word	0x20000718
 8003964:	20000004 	.word	0x20000004
 8003968:	2000072b 	.word	0x2000072b
 800396c:	20000720 	.word	0x20000720
 8003970:	10624dd3 	.word	0x10624dd3
					veloData = 2496;
 8003974:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <stateManagement+0x3c0>)
 8003976:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
 800397a:	801a      	strh	r2, [r3, #0]
					if(runningFlag == 1){
 800397c:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <stateManagement+0x3c4>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d124      	bne.n	80039ce <stateManagement+0x326>
 8003984:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <stateManagement+0x3c8>)
 8003986:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003988:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <stateManagement+0x3cc>)
 800398a:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <stateManagement+0x3cc>)
 800398e:	229b      	movs	r2, #155	; 0x9b
 8003990:	709a      	strb	r2, [r3, #2]
						sendData[4] = ((veloData*255)/16000) & 255; // set low byte posData
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <stateManagement+0x3c0>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	4613      	mov	r3, r2
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <stateManagement+0x3d0>)
 80039a0:	fb82 1203 	smull	r1, r2, r2, r3
 80039a4:	1292      	asrs	r2, r2, #10
 80039a6:	17db      	asrs	r3, r3, #31
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <stateManagement+0x3cc>)
 80039ae:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <stateManagement+0x3cc>)
 80039b2:	789a      	ldrb	r2, [r3, #2]
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <stateManagement+0x3cc>)
 80039b6:	78db      	ldrb	r3, [r3, #3]
 80039b8:	4413      	add	r3, r2
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <stateManagement+0x3cc>)
 80039be:	791b      	ldrb	r3, [r3, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <stateManagement+0x3cc>)
 80039ca:	715a      	strb	r2, [r3, #5]
 80039cc:	e023      	b.n	8003a16 <stateManagement+0x36e>
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <stateManagement+0x3d4>)
 80039d0:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <stateManagement+0x3cc>)
 80039d4:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <stateManagement+0x3cc>)
 80039d8:	229b      	movs	r2, #155	; 0x9b
 80039da:	709a      	strb	r2, [r3, #2]
						sendData[4] = ((veloData*255)/16000) & 255; // set low byte posData
 80039dc:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <stateManagement+0x3c0>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4613      	mov	r3, r2
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <stateManagement+0x3d0>)
 80039ea:	fb82 1203 	smull	r1, r2, r2, r3
 80039ee:	1292      	asrs	r2, r2, #10
 80039f0:	17db      	asrs	r3, r3, #31
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <stateManagement+0x3cc>)
 80039f8:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <stateManagement+0x3cc>)
 80039fc:	789a      	ldrb	r2, [r3, #2]
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <stateManagement+0x3cc>)
 8003a00:	78db      	ldrb	r3, [r3, #3]
 8003a02:	4413      	add	r3, r2
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <stateManagement+0x3cc>)
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <stateManagement+0x3cc>)
 8003a14:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 8003a16:	2206      	movs	r2, #6
 8003a18:	4916      	ldr	r1, [pc, #88]	; (8003a74 <stateManagement+0x3cc>)
 8003a1a:	4819      	ldr	r0, [pc, #100]	; (8003a80 <stateManagement+0x3d8>)
 8003a1c:	f004 febf 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003a20:	e01d      	b.n	8003a5e <stateManagement+0x3b6>
					endEffFlag = 1;
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <stateManagement+0x3dc>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4911      	ldr	r1, [pc, #68]	; (8003a70 <stateManagement+0x3c8>)
 8003a2c:	4814      	ldr	r0, [pc, #80]	; (8003a80 <stateManagement+0x3d8>)
 8003a2e:	f004 feb6 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003a32:	e014      	b.n	8003a5e <stateManagement+0x3b6>
					endEffFlag = 0;
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <stateManagement+0x3dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	490c      	ldr	r1, [pc, #48]	; (8003a70 <stateManagement+0x3c8>)
 8003a3e:	4810      	ldr	r0, [pc, #64]	; (8003a80 <stateManagement+0x3d8>)
 8003a40:	f004 fead 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003a44:	e00b      	b.n	8003a5e <stateManagement+0x3b6>
					homingFlag = 1;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <stateManagement+0x3e0>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <stateManagement+0x3c8>)
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <stateManagement+0x3d8>)
 8003a52:	f004 fea4 	bl	800879e <HAL_UART_Transmit_IT>
					break;
 8003a56:	e002      	b.n	8003a5e <stateManagement+0x3b6>
			break;
 8003a58:	bf00      	nop
 8003a5a:	e000      	b.n	8003a5e <stateManagement+0x3b6>
			break;
 8003a5c:	bf00      	nop
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000722 	.word	0x20000722
 8003a6c:	20000728 	.word	0x20000728
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000718 	.word	0x20000718
 8003a78:	10624dd3 	.word	0x10624dd3
 8003a7c:	20000004 	.word	0x20000004
 8003a80:	2000062c 	.word	0x2000062c
 8003a84:	2000072a 	.word	0x2000072a
 8003a88:	20000729 	.word	0x20000729

08003a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a90:	b672      	cpsid	i
}
 8003a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <Error_Handler+0x8>
	...

08003a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aac:	6453      	str	r3, [r2, #68]	; 0x44
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_MspInit+0x4c>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ad6:	2007      	movs	r0, #7
 8003ad8:	f000 fbfa 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_I2C_MspInit+0xa4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d13c      	bne.n	8003b84 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b34:	2303      	movs	r3, #3
 8003b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	4814      	ldr	r0, [pc, #80]	; (8003b94 <HAL_I2C_MspInit+0xac>)
 8003b44:	f001 f816 	bl	8004b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_I2C_MspInit+0xa8>)
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	201f      	movs	r0, #31
 8003b6a:	f000 fbbc 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b6e:	201f      	movs	r0, #31
 8003b70:	f000 fbd5 	bl	800431e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	2020      	movs	r0, #32
 8003b7a:	f000 fbb4 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b7e:	2020      	movs	r0, #32
 8003b80:	f000 fbcd 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40005400 	.word	0x40005400
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40020400 	.word	0x40020400

08003b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HAL_TIM_PWM_MspInit+0x48>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d115      	bne.n	8003bd6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	201a      	movs	r0, #26
 8003bcc:	f000 fb8b 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003bd0:	201a      	movs	r0, #26
 8003bd2:	f000 fba4 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d12b      	bne.n	8003c62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c42:	2303      	movs	r3, #3
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8003c5e:	f000 ff89 	bl	8004b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020000 	.word	0x40020000

08003c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <HAL_TIM_Base_MspInit+0xb8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d116      	bne.n	8003cb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	201d      	movs	r0, #29
 8003ca8:	f000 fb1d 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cac:	201d      	movs	r0, #29
 8003cae:	f000 fb36 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003cb2:	e036      	b.n	8003d22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_TIM_Base_MspInit+0xc0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d116      	bne.n	8003cec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	201e      	movs	r0, #30
 8003ce0:	f000 fb01 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ce4:	201e      	movs	r0, #30
 8003ce6:	f000 fb1a 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 8003cea:	e01a      	b.n	8003d22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <HAL_TIM_Base_MspInit+0xc4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d115      	bne.n	8003d22 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_TIM_Base_MspInit+0xbc>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	201a      	movs	r0, #26
 8003d18:	f000 fae5 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003d1c:	201a      	movs	r0, #26
 8003d1e:	f000 fafe 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40014800 	.word	0x40014800

08003d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_TIM_MspPostInit+0x68>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d11e      	bne.n	8003d9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_TIM_MspPostInit+0x6c>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <HAL_TIM_MspPostInit+0x6c>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_TIM_MspPostInit+0x6c>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	4619      	mov	r1, r3
 8003d96:	4805      	ldr	r0, [pc, #20]	; (8003dac <HAL_TIM_MspPostInit+0x70>)
 8003d98:	f000 feec 	bl	8004b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d9c:	bf00      	nop
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40020000 	.word	0x40020000

08003db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a34      	ldr	r2, [pc, #208]	; (8003ea0 <HAL_UART_MspInit+0xf0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d161      	bne.n	8003e96 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a32      	ldr	r2, [pc, #200]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_UART_MspInit+0xf4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 0314 	add.w	r3, r7, #20
 8003e22:	4619      	mov	r1, r3
 8003e24:	4820      	ldr	r0, [pc, #128]	; (8003ea8 <HAL_UART_MspInit+0xf8>)
 8003e26:	f000 fea5 	bl	8004b74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <HAL_UART_MspInit+0x100>)
 8003e2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e6a:	4810      	ldr	r0, [pc, #64]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e6c:	f000 fa72 	bl	8004354 <HAL_DMA_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003e76:	f7ff fe09 	bl	8003a8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_UART_MspInit+0xfc>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2026      	movs	r0, #38	; 0x26
 8003e8c:	f000 fa2b 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e90:	2026      	movs	r0, #38	; 0x26
 8003e92:	f000 fa44 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e96:	bf00      	nop
 8003e98:	3728      	adds	r7, #40	; 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	20000670 	.word	0x20000670
 8003eb0:	40026088 	.word	0x40026088

08003eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <NMI_Handler+0x4>

08003eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <HardFault_Handler+0x4>

08003ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <MemManage_Handler+0x4>

08003ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eca:	e7fe      	b.n	8003eca <BusFault_Handler+0x4>

08003ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <UsageFault_Handler+0x4>

08003ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f00:	f000 f8f6 	bl	80040f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <SysTick_Handler+0x18>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <SysTick_Handler+0x18>)
 8003f0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000714 	.word	0x20000714

08003f18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <DMA1_Stream5_IRQHandler+0x10>)
 8003f1e:	f000 fbb1 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000670 	.word	0x20000670

08003f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8003f30:	2020      	movs	r0, #32
 8003f32:	f000 ffd7 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f40:	4803      	ldr	r0, [pc, #12]	; (8003f50 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003f42:	f003 fd85 	bl	8007a50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003f46:	4803      	ldr	r0, [pc, #12]	; (8003f54 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003f48:	f003 fd82 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200004c4 	.word	0x200004c4
 8003f54:	200005e4 	.word	0x200005e4

08003f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <TIM3_IRQHandler+0x10>)
 8003f5e:	f003 fd77 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000554 	.word	0x20000554

08003f6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <TIM4_IRQHandler+0x10>)
 8003f72:	f003 fd6d 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000059c 	.word	0x2000059c

08003f80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <I2C1_EV_IRQHandler+0x10>)
 8003f86:	f001 f909 	bl	800519c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000470 	.word	0x20000470

08003f94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <I2C1_ER_IRQHandler+0x10>)
 8003f9a:	f001 fa70 	bl	800547e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000470 	.word	0x20000470

08003fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <USART2_IRQHandler+0x10>)
 8003fae:	f004 fca1 	bl	80088f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000062c 	.word	0x2000062c

08003fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8003fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fc4:	f000 ff8e 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fcc:	f000 ff8a 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <SystemInit+0x20>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <SystemInit+0x20>)
 8003fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ffc:	480d      	ldr	r0, [pc, #52]	; (8004034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ffe:	490e      	ldr	r1, [pc, #56]	; (8004038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004000:	4a0e      	ldr	r2, [pc, #56]	; (800403c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004004:	e002      	b.n	800400c <LoopCopyDataInit>

08004006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400a:	3304      	adds	r3, #4

0800400c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800400c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800400e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004010:	d3f9      	bcc.n	8004006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004014:	4c0b      	ldr	r4, [pc, #44]	; (8004044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004018:	e001      	b.n	800401e <LoopFillZerobss>

0800401a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800401c:	3204      	adds	r2, #4

0800401e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800401e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004020:	d3fb      	bcc.n	800401a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004022:	f7ff ffd7 	bl	8003fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004026:	f005 ffc1 	bl	8009fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800402a:	f7fe fc87 	bl	800293c <main>
  bx  lr    
 800402e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004038:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 800403c:	0800a068 	.word	0x0800a068
  ldr r2, =_sbss
 8004040:	20000450 	.word	0x20000450
  ldr r4, =_ebss
 8004044:	20000790 	.word	0x20000790

08004048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004048:	e7fe      	b.n	8004048 <ADC_IRQHandler>
	...

0800404c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <HAL_Init+0x40>)
 8004056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_Init+0x40>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <HAL_Init+0x40>)
 8004062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_Init+0x40>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a07      	ldr	r2, [pc, #28]	; (800408c <HAL_Init+0x40>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004074:	2003      	movs	r0, #3
 8004076:	f000 f92b 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800407a:	2000      	movs	r0, #0
 800407c:	f000 f808 	bl	8004090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004080:	f7ff fd0a 	bl	8003a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00

08004090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_InitTick+0x54>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_InitTick+0x58>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f943 	bl	800433a <HAL_SYSTICK_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00e      	b.n	80040dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d80a      	bhi.n	80040da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c4:	2200      	movs	r2, #0
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f000 f90b 	bl	80042e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <HAL_InitTick+0x5c>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000440 	.word	0x20000440
 80040e8:	20000448 	.word	0x20000448
 80040ec:	20000444 	.word	0x20000444

080040f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_IncTick+0x20>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_IncTick+0x24>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_IncTick+0x24>)
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000448 	.word	0x20000448
 8004114:	2000078c 	.word	0x2000078c

08004118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return uwTick;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_GetTick+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000078c 	.word	0x2000078c

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff3e 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff8e 	bl	8004224 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5d 	bl	80041d0 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff31 	bl	8004194 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa2 	bl	800428c <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7ff feda 	bl	8004118 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e099      	b.n	80044a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004390:	e00f      	b.n	80043b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004392:	f7ff fec1 	bl	8004118 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b05      	cmp	r3, #5
 800439e:	d908      	bls.n	80043b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e078      	b.n	80044a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e8      	bne.n	8004392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_DMA_Init+0x158>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4313      	orrs	r3, r2
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b04      	cmp	r3, #4
 8004444:	d117      	bne.n	8004476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb0f 	bl	8004a7c <DMA_CheckFifoParam>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004472:	2301      	movs	r3, #1
 8004474:	e016      	b.n	80044a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fac6 	bl	8004a10 <DMA_CalcBaseAndBitshift>
 8004484:	4603      	mov	r3, r0
 8004486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	223f      	movs	r2, #63	; 0x3f
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	f010803f 	.word	0xf010803f

080044b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_Start_IT+0x26>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e040      	b.n	8004558 <HAL_DMA_Start_IT+0xa8>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d12f      	bne.n	800454a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fa58 	bl	80049b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	223f      	movs	r2, #63	; 0x3f
 800450a:	409a      	lsls	r2, r3
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0216 	orr.w	r2, r2, #22
 800451e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004552:	2302      	movs	r3, #2
 8004554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800456e:	f7ff fdd3 	bl	8004118 <HAL_GetTick>
 8004572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d008      	beq.n	8004592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e052      	b.n	8004638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0216 	bic.w	r2, r2, #22
 80045a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <HAL_DMA_Abort+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0208 	bic.w	r2, r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045e2:	e013      	b.n	800460c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e4:	f7ff fd98 	bl	8004118 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d90c      	bls.n	800460c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e015      	b.n	8004638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e4      	bne.n	80045e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	223f      	movs	r2, #63	; 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e00c      	b.n	8004678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2205      	movs	r2, #5
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004690:	4b8e      	ldr	r3, [pc, #568]	; (80048cc <HAL_DMA_IRQHandler+0x248>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a8e      	ldr	r2, [pc, #568]	; (80048d0 <HAL_DMA_IRQHandler+0x24c>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0a9b      	lsrs	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2208      	movs	r2, #8
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01a      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	2208      	movs	r2, #8
 80046de:	409a      	lsls	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	2201      	movs	r2, #1
 8004714:	409a      	lsls	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2204      	movs	r2, #4
 800472c:	409a      	lsls	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	2204      	movs	r2, #4
 800474a:	409a      	lsls	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	2210      	movs	r2, #16
 8004762:	409a      	lsls	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d043      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d03c      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	2210      	movs	r2, #16
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d024      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
 80047b2:	e01f      	b.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	e016      	b.n	80047f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0208 	bic.w	r2, r2, #8
 80047e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2220      	movs	r2, #32
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 808f 	beq.w	8004924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8087 	beq.w	8004924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2220      	movs	r2, #32
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b05      	cmp	r3, #5
 800482c:	d136      	bne.n	800489c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0216 	bic.w	r2, r2, #22
 800483c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <HAL_DMA_IRQHandler+0x1da>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0208 	bic.w	r2, r2, #8
 800486c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	223f      	movs	r2, #63	; 0x3f
 8004874:	409a      	lsls	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	2b00      	cmp	r3, #0
 8004890:	d07e      	beq.n	8004990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
        }
        return;
 800489a:	e079      	b.n	8004990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10d      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d031      	beq.n	8004924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
 80048c8:	e02c      	b.n	8004924 <HAL_DMA_IRQHandler+0x2a0>
 80048ca:	bf00      	nop
 80048cc:	20000440 	.word	0x20000440
 80048d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
 80048e4:	e01e      	b.n	8004924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0210 	bic.w	r2, r2, #16
 8004902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	2b00      	cmp	r3, #0
 800492a:	d032      	beq.n	8004992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d022      	beq.n	800497e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2205      	movs	r2, #5
 800493c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3301      	adds	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	d307      	bcc.n	800496c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f2      	bne.n	8004950 <HAL_DMA_IRQHandler+0x2cc>
 800496a:	e000      	b.n	800496e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800496c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
 800498e:	e000      	b.n	8004992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004990:	bf00      	nop
    }
  }
}
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a6:	b2db      	uxtb	r3, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d108      	bne.n	80049f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049f2:	e007      	b.n	8004a04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3b10      	subs	r3, #16
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <DMA_CalcBaseAndBitshift+0x64>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <DMA_CalcBaseAndBitshift+0x68>)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d909      	bls.n	8004a52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a50:	e007      	b.n	8004a62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	aaaaaaab 	.word	0xaaaaaaab
 8004a78:	0800a050 	.word	0x0800a050

08004a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11f      	bne.n	8004ad6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d856      	bhi.n	8004b4a <DMA_CheckFifoParam+0xce>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <DMA_CheckFifoParam+0x28>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac7 	.word	0x08004ac7
 8004aac:	08004ab5 	.word	0x08004ab5
 8004ab0:	08004b4b 	.word	0x08004b4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d046      	beq.n	8004b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e043      	b.n	8004b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ace:	d140      	bne.n	8004b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad4:	e03d      	b.n	8004b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ade:	d121      	bne.n	8004b24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d837      	bhi.n	8004b56 <DMA_CheckFifoParam+0xda>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <DMA_CheckFifoParam+0x70>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b03 	.word	0x08004b03
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b15 	.word	0x08004b15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      break;
 8004b00:	e030      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d025      	beq.n	8004b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b12:	e022      	b.n	8004b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b1c:	d11f      	bne.n	8004b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b22:	e01c      	b.n	8004b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d903      	bls.n	8004b32 <DMA_CheckFifoParam+0xb6>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d003      	beq.n	8004b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b30:	e018      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
      break;
 8004b36:	e015      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      break;
 8004b48:	e00b      	b.n	8004b62 <DMA_CheckFifoParam+0xe6>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e00a      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e008      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;
 8004b52:	bf00      	nop
 8004b54:	e006      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;
 8004b56:	bf00      	nop
 8004b58:	e004      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
      break;
 8004b62:	bf00      	nop
    }
  } 
  
  return status; 
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop

08004b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e159      	b.n	8004e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b90:	2201      	movs	r2, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	f040 8148 	bne.w	8004e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d005      	beq.n	8004bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d130      	bne.n	8004c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 0201 	and.w	r2, r3, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d017      	beq.n	8004c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d123      	bne.n	8004cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	08da      	lsrs	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3208      	adds	r2, #8
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	220f      	movs	r2, #15
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0203 	and.w	r2, r3, #3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80a2 	beq.w	8004e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <HAL_GPIO_Init+0x2e8>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	4a56      	ldr	r2, [pc, #344]	; (8004e5c <HAL_GPIO_Init+0x2e8>)
 8004d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d08:	6453      	str	r3, [r2, #68]	; 0x44
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <HAL_GPIO_Init+0x2e8>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d16:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <HAL_GPIO_Init+0x2ec>)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a49      	ldr	r2, [pc, #292]	; (8004e64 <HAL_GPIO_Init+0x2f0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d019      	beq.n	8004d76 <HAL_GPIO_Init+0x202>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a48      	ldr	r2, [pc, #288]	; (8004e68 <HAL_GPIO_Init+0x2f4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_GPIO_Init+0x1fe>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a47      	ldr	r2, [pc, #284]	; (8004e6c <HAL_GPIO_Init+0x2f8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00d      	beq.n	8004d6e <HAL_GPIO_Init+0x1fa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a46      	ldr	r2, [pc, #280]	; (8004e70 <HAL_GPIO_Init+0x2fc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <HAL_GPIO_Init+0x1f6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a45      	ldr	r2, [pc, #276]	; (8004e74 <HAL_GPIO_Init+0x300>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_GPIO_Init+0x1f2>
 8004d62:	2304      	movs	r3, #4
 8004d64:	e008      	b.n	8004d78 <HAL_GPIO_Init+0x204>
 8004d66:	2307      	movs	r3, #7
 8004d68:	e006      	b.n	8004d78 <HAL_GPIO_Init+0x204>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e004      	b.n	8004d78 <HAL_GPIO_Init+0x204>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e002      	b.n	8004d78 <HAL_GPIO_Init+0x204>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_GPIO_Init+0x204>
 8004d76:	2300      	movs	r3, #0
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	f002 0203 	and.w	r2, r2, #3
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	4093      	lsls	r3, r2
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d88:	4935      	ldr	r1, [pc, #212]	; (8004e60 <HAL_GPIO_Init+0x2ec>)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	089b      	lsrs	r3, r3, #2
 8004d8e:	3302      	adds	r3, #2
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d96:	4b38      	ldr	r3, [pc, #224]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_GPIO_Init+0x304>)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	f67f aea2 	bls.w	8004b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40013800 	.word	0x40013800
 8004e64:	40020000 	.word	0x40020000
 8004e68:	40020400 	.word	0x40020400
 8004e6c:	40020800 	.word	0x40020800
 8004e70:	40020c00 	.word	0x40020c00
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40013c00 	.word	0x40013c00

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e8c:	787b      	ldrb	r3, [r7, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e98:	e003      	b.n	8004ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	041a      	lsls	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ec0:	887a      	ldrh	r2, [r7, #2]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	041a      	lsls	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	400b      	ands	r3, r1
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	619a      	str	r2, [r3, #24]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004efa:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fa44 	bl	8003390 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40013c00 	.word	0x40013c00

08004f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e12b      	b.n	800517e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fe fdd4 	bl	8003ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f78:	f002 fa5c 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a81      	ldr	r2, [pc, #516]	; (8005188 <HAL_I2C_Init+0x274>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d807      	bhi.n	8004f98 <HAL_I2C_Init+0x84>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a80      	ldr	r2, [pc, #512]	; (800518c <HAL_I2C_Init+0x278>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bf94      	ite	ls
 8004f90:	2301      	movls	r3, #1
 8004f92:	2300      	movhi	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e006      	b.n	8004fa6 <HAL_I2C_Init+0x92>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a7d      	ldr	r2, [pc, #500]	; (8005190 <HAL_I2C_Init+0x27c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bf94      	ite	ls
 8004fa0:	2301      	movls	r3, #1
 8004fa2:	2300      	movhi	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0e7      	b.n	800517e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a78      	ldr	r2, [pc, #480]	; (8005194 <HAL_I2C_Init+0x280>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0c9b      	lsrs	r3, r3, #18
 8004fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a6a      	ldr	r2, [pc, #424]	; (8005188 <HAL_I2C_Init+0x274>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d802      	bhi.n	8004fe8 <HAL_I2C_Init+0xd4>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	e009      	b.n	8004ffc <HAL_I2C_Init+0xe8>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	4a69      	ldr	r2, [pc, #420]	; (8005198 <HAL_I2C_Init+0x284>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800500e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	495c      	ldr	r1, [pc, #368]	; (8005188 <HAL_I2C_Init+0x274>)
 8005018:	428b      	cmp	r3, r1
 800501a:	d819      	bhi.n	8005050 <HAL_I2C_Init+0x13c>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e59      	subs	r1, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fbb1 f3f3 	udiv	r3, r1, r3
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005030:	400b      	ands	r3, r1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_I2C_Init+0x138>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e59      	subs	r1, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fbb1 f3f3 	udiv	r3, r1, r3
 8005044:	3301      	adds	r3, #1
 8005046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504a:	e051      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 800504c:	2304      	movs	r3, #4
 800504e:	e04f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d111      	bne.n	800507c <HAL_I2C_Init+0x168>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1e58      	subs	r0, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e012      	b.n	80050a2 <HAL_I2C_Init+0x18e>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1e58      	subs	r0, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	0099      	lsls	r1, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005092:	3301      	adds	r3, #1
 8005094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x196>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e022      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10e      	bne.n	80050d0 <HAL_I2C_Init+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e58      	subs	r0, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	440b      	add	r3, r1
 80050c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	e00f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e58      	subs	r0, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	0099      	lsls	r1, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6809      	ldr	r1, [r1, #0]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800511e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6911      	ldr	r1, [r2, #16]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	4311      	orrs	r1, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	430b      	orrs	r3, r1
 8005132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	000186a0 	.word	0x000186a0
 800518c:	001e847f 	.word	0x001e847f
 8005190:	003d08ff 	.word	0x003d08ff
 8005194:	431bde83 	.word	0x431bde83
 8005198:	10624dd3 	.word	0x10624dd3

0800519c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d003      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x38>
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	f040 80c1 	bne.w	8005356 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <HAL_I2C_EV_IRQHandler+0x6e>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051f4:	d003      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x62>
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051fc:	d101      	bne.n	8005202 <HAL_I2C_EV_IRQHandler+0x66>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x68>
 8005202:	2300      	movs	r3, #0
 8005204:	2b01      	cmp	r3, #1
 8005206:	f000 8132 	beq.w	800546e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <HAL_I2C_EV_IRQHandler+0x92>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	0a5b      	lsrs	r3, r3, #9
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 fc7b 	bl	8006b1c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fd83 	bl	8005d32 <I2C_Master_SB>
 800522c:	e092      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_I2C_EV_IRQHandler+0xb2>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	0a5b      	lsrs	r3, r3, #9
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fdf9 	bl	8005e3e <I2C_Master_ADD10>
 800524c:	e082      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0xd2>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	0a5b      	lsrs	r3, r3, #9
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fe13 	bl	8005e92 <I2C_Master_ADDR>
 800526c:	e072      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d03b      	beq.n	80052f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	f000 80f3 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	09db      	lsrs	r3, r3, #7
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00f      	beq.n	80052b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	0a9b      	lsrs	r3, r3, #10
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f9f3 	bl	800569c <I2C_MasterTransmit_TXE>
 80052b6:	e04d      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80d6 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	0a5b      	lsrs	r3, r3, #9
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80cf 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	2b21      	cmp	r3, #33	; 0x21
 80052d8:	d103      	bne.n	80052e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa7a 	bl	80057d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052e0:	e0c7      	b.n	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	f040 80c4 	bne.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fae8 	bl	80058c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052f0:	e0bf      	b.n	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	f000 80b7 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00f      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x194>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x194>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb5d 	bl	80059e8 <I2C_MasterReceive_RXNE>
 800532e:	e011      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 809a 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8093 	beq.w	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc06 	bl	8005b5e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005352:	e08e      	b.n	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005354:	e08d      	b.n	8005472 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e007      	b.n	8005378 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x20e>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	0a5b      	lsrs	r3, r3, #9
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80053a0:	69b9      	ldr	r1, [r7, #24]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 ffc4 	bl	8006330 <I2C_Slave_ADDR>
 80053a8:	e066      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_I2C_EV_IRQHandler+0x22e>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	0a5b      	lsrs	r3, r3, #9
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fffe 	bl	80063c4 <I2C_Slave_STOPF>
 80053c8:	e056      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	2b21      	cmp	r3, #33	; 0x21
 80053ce:	d002      	beq.n	80053d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	2b29      	cmp	r3, #41	; 0x29
 80053d4:	d125      	bne.n	8005422 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00f      	beq.n	8005402 <HAL_I2C_EV_IRQHandler+0x266>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	0a9b      	lsrs	r3, r3, #10
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_I2C_EV_IRQHandler+0x266>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 feda 	bl	80061b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005400:	e039      	b.n	8005476 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d033      	beq.n	8005476 <HAL_I2C_EV_IRQHandler+0x2da>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	0a5b      	lsrs	r3, r3, #9
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02d      	beq.n	8005476 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ff07 	bl	800622e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005420:	e029      	b.n	8005476 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00f      	beq.n	800544e <HAL_I2C_EV_IRQHandler+0x2b2>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	0a9b      	lsrs	r3, r3, #10
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_I2C_EV_IRQHandler+0x2b2>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 ff12 	bl	8006270 <I2C_SlaveReceive_RXNE>
 800544c:	e014      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00e      	beq.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	0a5b      	lsrs	r3, r3, #9
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 ff40 	bl	80062ec <I2C_SlaveReceive_BTF>
 800546c:	e004      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800546e:	bf00      	nop
 8005470:	e002      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005476:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08a      	sub	sp, #40	; 0x28
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <HAL_I2C_ER_IRQHandler+0x4e>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00e      	beq.n	80054f6 <HAL_I2C_ER_IRQHandler+0x78>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f043 0302 	orr.w	r3, r3, #2
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80054f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	0a9b      	lsrs	r3, r3, #10
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d03f      	beq.n	8005582 <HAL_I2C_ER_IRQHandler+0x104>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d039      	beq.n	8005582 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800550e:	7efb      	ldrb	r3, [r7, #27]
 8005510:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005528:	7ebb      	ldrb	r3, [r7, #26]
 800552a:	2b20      	cmp	r3, #32
 800552c:	d112      	bne.n	8005554 <HAL_I2C_ER_IRQHandler+0xd6>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10f      	bne.n	8005554 <HAL_I2C_ER_IRQHandler+0xd6>
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b21      	cmp	r3, #33	; 0x21
 8005538:	d008      	beq.n	800554c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	2b29      	cmp	r3, #41	; 0x29
 800553e:	d005      	beq.n	800554c <HAL_I2C_ER_IRQHandler+0xce>
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	2b28      	cmp	r3, #40	; 0x28
 8005544:	d106      	bne.n	8005554 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b21      	cmp	r3, #33	; 0x21
 800554a:	d103      	bne.n	8005554 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 f869 	bl	8006624 <I2C_Slave_AF>
 8005552:	e016      	b.n	8005582 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800555c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005566:	7efb      	ldrb	r3, [r7, #27]
 8005568:	2b10      	cmp	r3, #16
 800556a:	d002      	beq.n	8005572 <HAL_I2C_ER_IRQHandler+0xf4>
 800556c:	7efb      	ldrb	r3, [r7, #27]
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d107      	bne.n	8005582 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005580:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	0adb      	lsrs	r3, r3, #11
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00e      	beq.n	80055ac <HAL_I2C_ER_IRQHandler+0x12e>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80055aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f8a0 	bl	8006704 <I2C_ITError>
  }
}
 80055c4:	bf00      	nop
 80055c6:	3728      	adds	r7, #40	; 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
 8005628:	4613      	mov	r3, r2
 800562a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d150      	bne.n	8005764 <I2C_MasterTransmit_TXE+0xc8>
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b21      	cmp	r3, #33	; 0x21
 80056c6:	d14d      	bne.n	8005764 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d01d      	beq.n	800570a <I2C_MasterTransmit_TXE+0x6e>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d01a      	beq.n	800570a <I2C_MasterTransmit_TXE+0x6e>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056da:	d016      	beq.n	800570a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2211      	movs	r2, #17
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ff62 	bl	80055cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005708:	e060      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005718:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d107      	bne.n	8005754 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff7d 	bl	800564c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005752:	e03b      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ff35 	bl	80055cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005762:	e033      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b21      	cmp	r3, #33	; 0x21
 8005768:	d005      	beq.n	8005776 <I2C_MasterTransmit_TXE+0xda>
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d12d      	bne.n	80057cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b22      	cmp	r3, #34	; 0x22
 8005774:	d12a      	bne.n	80057cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005790:	e01c      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d103      	bne.n	80057a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f88e 	bl	80058c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80057a4:	e012      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057ca:	e7ff      	b.n	80057cc <I2C_MasterTransmit_TXE+0x130>
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b21      	cmp	r3, #33	; 0x21
 80057ec:	d164      	bne.n	80058b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800581c:	e04c      	b.n	80058b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d01d      	beq.n	8005860 <I2C_MasterTransmit_BTF+0x8c>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b20      	cmp	r3, #32
 8005828:	d01a      	beq.n	8005860 <I2C_MasterTransmit_BTF+0x8c>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d016      	beq.n	8005860 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005840:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2211      	movs	r2, #17
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff feb7 	bl	80055cc <HAL_I2C_MasterTxCpltCallback>
}
 800585e:	e02b      	b.n	80058b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800586e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d107      	bne.n	80058aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fed2 	bl	800564c <HAL_I2C_MemTxCpltCallback>
}
 80058a8:	e006      	b.n	80058b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fe8a 	bl	80055cc <HAL_I2C_MasterTxCpltCallback>
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11d      	bne.n	8005914 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10b      	bne.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80058f6:	e073      	b.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	121b      	asrs	r3, r3, #8
 8005900:	b2da      	uxtb	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005912:	e065      	b.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10b      	bne.n	8005934 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	b2da      	uxtb	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005932:	e055      	b.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	2b02      	cmp	r3, #2
 800593a:	d151      	bne.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b22      	cmp	r3, #34	; 0x22
 8005940:	d10d      	bne.n	800595e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005950:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800595c:	e040      	b.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b21      	cmp	r3, #33	; 0x21
 800596c:	d112      	bne.n	8005994 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005992:	e025      	b.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d120      	bne.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b21      	cmp	r3, #33	; 0x21
 80059a2:	d11d      	bne.n	80059e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fe36 	bl	800564c <HAL_I2C_MemTxCpltCallback>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b22      	cmp	r3, #34	; 0x22
 80059fa:	f040 80ac 	bne.w	8005b56 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d921      	bls.n	8005a50 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	f040 808c 	bne.w	8005b56 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005a4e:	e082      	b.n	8005b56 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d075      	beq.n	8005b44 <I2C_MasterReceive_RXNE+0x15c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d002      	beq.n	8005a64 <I2C_MasterReceive_RXNE+0x7c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d16f      	bne.n	8005b44 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f827 	bl	8006ab8 <I2C_WaitOnSTOPRequestThroughIT>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d142      	bne.n	8005af6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d10a      	bne.n	8005ae0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff fdc1 	bl	8005660 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ade:	e03a      	b.n	8005b56 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2212      	movs	r2, #18
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fd76 	bl	80055e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005af4:	e02f      	b.n	8005b56 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fd99 	bl	8005674 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b42:	e008      	b.n	8005b56 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b52:	605a      	str	r2, [r3, #4]
}
 8005b54:	e7ff      	b.n	8005b56 <I2C_MasterReceive_RXNE+0x16e>
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d11b      	bne.n	8005bae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005bac:	e0bd      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d129      	bne.n	8005c0c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d00a      	beq.n	8005be4 <I2C_MasterReceive_BTF+0x86>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d007      	beq.n	8005be4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c0a:	e08e      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d176      	bne.n	8005d04 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d002      	beq.n	8005c22 <I2C_MasterReceive_BTF+0xc4>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d108      	bne.n	8005c34 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e019      	b.n	8005c68 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d002      	beq.n	8005c40 <I2C_MasterReceive_BTF+0xe2>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d108      	bne.n	8005c52 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e00a      	b.n	8005c68 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d007      	beq.n	8005c68 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cc2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d10a      	bne.n	8005cee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fcba 	bl	8005660 <HAL_I2C_MemRxCpltCallback>
}
 8005cec:	e01d      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2212      	movs	r2, #18
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fc6f 	bl	80055e0 <HAL_I2C_MasterRxCpltCallback>
}
 8005d02:	e012      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d117      	bne.n	8005d76 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d5e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d60:	e067      	b.n	8005e32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	611a      	str	r2, [r3, #16]
}
 8005d74:	e05d      	b.n	8005e32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d7e:	d133      	bne.n	8005de8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b21      	cmp	r3, #33	; 0x21
 8005d8a:	d109      	bne.n	8005da0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e008      	b.n	8005db2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <I2C_Master_SB+0x92>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d108      	bne.n	8005dd6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d032      	beq.n	8005e32 <I2C_Master_SB+0x100>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02d      	beq.n	8005e32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de4:	605a      	str	r2, [r3, #4]
}
 8005de6:	e024      	b.n	8005e32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10e      	bne.n	8005e0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	11db      	asrs	r3, r3, #7
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0306 	and.w	r3, r3, #6
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f063 030f 	orn	r3, r3, #15
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]
}
 8005e0c:	e011      	b.n	8005e32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d10d      	bne.n	8005e32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	11db      	asrs	r3, r3, #7
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0306 	and.w	r3, r3, #6
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f063 030e 	orn	r3, r3, #14
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <I2C_Master_ADD10+0x26>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <I2C_Master_ADD10+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e84:	605a      	str	r2, [r3, #4]
  }
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b091      	sub	sp, #68	; 0x44
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b22      	cmp	r3, #34	; 0x22
 8005eba:	f040 8169 	bne.w	8006190 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10f      	bne.n	8005ee6 <I2C_Master_ADDR+0x54>
 8005ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d10b      	bne.n	8005ee6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	e160      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11d      	bne.n	8005f2a <I2C_Master_ADDR+0x98>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ef6:	d118      	bne.n	8005f2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
 8005f28:	e13e      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d113      	bne.n	8005f5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e115      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 808a 	bne.w	800607c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f6e:	d137      	bne.n	8005fe0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d113      	bne.n	8005fb8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	e0e7      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e0d3      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d02e      	beq.n	8006044 <I2C_Master_ADDR+0x1b2>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d02b      	beq.n	8006044 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	2b12      	cmp	r3, #18
 8005ff0:	d102      	bne.n	8005ff8 <I2C_Master_ADDR+0x166>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d125      	bne.n	8006044 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00e      	beq.n	800601c <I2C_Master_ADDR+0x18a>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2b02      	cmp	r3, #2
 8006002:	d00b      	beq.n	800601c <I2C_Master_ADDR+0x18a>
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	2b10      	cmp	r3, #16
 8006008:	d008      	beq.n	800601c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e007      	b.n	800602c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800602a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	e0a1      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006052:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e085      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d14d      	bne.n	8006122 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b04      	cmp	r3, #4
 800608a:	d016      	beq.n	80060ba <I2C_Master_ADDR+0x228>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2b02      	cmp	r3, #2
 8006090:	d013      	beq.n	80060ba <I2C_Master_ADDR+0x228>
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b10      	cmp	r3, #16
 8006096:	d010      	beq.n	80060ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e007      	b.n	80060ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d8:	d117      	bne.n	800610a <I2C_Master_ADDR+0x278>
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e0:	d00b      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d008      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d005      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d002      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d107      	bne.n	800610a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006108:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	e032      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006130:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006140:	d117      	bne.n	8006172 <I2C_Master_ADDR+0x2e0>
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006148:	d00b      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2b01      	cmp	r3, #1
 800614e:	d008      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	2b08      	cmp	r3, #8
 8006154:	d005      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b10      	cmp	r3, #16
 800615a:	d002      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	2b20      	cmp	r3, #32
 8006160:	d107      	bne.n	8006172 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006170:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800618e:	e00b      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	e7ff      	b.n	80061a8 <I2C_Master_ADDR+0x316>
 80061a8:	bf00      	nop
 80061aa:	3744      	adds	r7, #68	; 0x44
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d02b      	beq.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d114      	bne.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b29      	cmp	r3, #41	; 0x29
 8006200:	d111      	bne.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2221      	movs	r2, #33	; 0x21
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2228      	movs	r2, #40	; 0x28
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff f9e7 	bl	80055f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d011      	beq.n	8006264 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02c      	beq.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d114      	bne.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	2b2a      	cmp	r3, #42	; 0x2a
 80062be:	d111      	bne.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2222      	movs	r2, #34	; 0x22
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2228      	movs	r2, #40	; 0x28
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff f992 	bl	8005608 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d012      	beq.n	8006324 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800634a:	2b28      	cmp	r3, #40	; 0x28
 800634c:	d127      	bne.n	800639e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	09db      	lsrs	r3, r3, #7
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	81bb      	strh	r3, [r7, #12]
 8006380:	e002      	b.n	8006388 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006390:	89ba      	ldrh	r2, [r7, #12]
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff f940 	bl	800561c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800639c:	e00e      	b.n	80063bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	60bb      	str	r3, [r7, #8]
 80063b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d172      	bne.n	8006508 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b22      	cmp	r3, #34	; 0x22
 8006426:	d002      	beq.n	800642e <I2C_Slave_STOPF+0x6a>
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b2a      	cmp	r3, #42	; 0x2a
 800642c:	d135      	bne.n	800649a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006460:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fa96 	bl	8004998 <HAL_DMA_GetState>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d049      	beq.n	8006506 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	4a69      	ldr	r2, [pc, #420]	; (800661c <I2C_Slave_STOPF+0x258>)
 8006478:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f8de 	bl	8004640 <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d03d      	beq.n	8006506 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006498:	e035      	b.n	8006506 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fa60 	bl	8004998 <HAL_DMA_GetState>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d014      	beq.n	8006508 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	4a4e      	ldr	r2, [pc, #312]	; (800661c <I2C_Slave_STOPF+0x258>)
 80064e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe f8a8 	bl	8004640 <HAL_DMA_Abort_IT>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	e000      	b.n	8006508 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006506:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d03e      	beq.n	8006590 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d112      	bne.n	8006546 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d112      	bne.n	800657a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f8b3 	bl	8006704 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800659e:	e039      	b.n	8006614 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d109      	bne.n	80065ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2228      	movs	r2, #40	; 0x28
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff f827 	bl	8005608 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b28      	cmp	r3, #40	; 0x28
 80065c4:	d111      	bne.n	80065ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <I2C_Slave_STOPF+0x25c>)
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff f828 	bl	8005638 <HAL_I2C_ListenCpltCallback>
}
 80065e8:	e014      	b.n	8006614 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	2b22      	cmp	r3, #34	; 0x22
 80065f0:	d002      	beq.n	80065f8 <I2C_Slave_STOPF+0x234>
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b22      	cmp	r3, #34	; 0x22
 80065f6:	d10d      	bne.n	8006614 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fffa 	bl	8005608 <HAL_I2C_SlaveRxCpltCallback>
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08006969 	.word	0x08006969
 8006620:	ffff0000 	.word	0xffff0000

08006624 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006632:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d002      	beq.n	8006646 <I2C_Slave_AF+0x22>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b20      	cmp	r3, #32
 8006644:	d129      	bne.n	800669a <I2C_Slave_AF+0x76>
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b28      	cmp	r3, #40	; 0x28
 800664a:	d126      	bne.n	800669a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <I2C_Slave_AF+0xdc>)
 8006650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006660:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800666a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fe ffd0 	bl	8005638 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006698:	e02e      	b.n	80066f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b21      	cmp	r3, #33	; 0x21
 800669e:	d126      	bne.n	80066ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a17      	ldr	r2, [pc, #92]	; (8006700 <I2C_Slave_AF+0xdc>)
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2221      	movs	r2, #33	; 0x21
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fe ff84 	bl	80055f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80066ec:	e004      	b.n	80066f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f6:	615a      	str	r2, [r3, #20]
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	ffff0000 	.word	0xffff0000

08006704 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006712:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	2b10      	cmp	r3, #16
 8006720:	d002      	beq.n	8006728 <I2C_ITError+0x24>
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d10a      	bne.n	800673e <I2C_ITError+0x3a>
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b22      	cmp	r3, #34	; 0x22
 800672c:	d107      	bne.n	800673e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800673c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006744:	2b28      	cmp	r3, #40	; 0x28
 8006746:	d107      	bne.n	8006758 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2228      	movs	r2, #40	; 0x28
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006756:	e015      	b.n	8006784 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006766:	d00a      	beq.n	800677e <I2C_ITError+0x7a>
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b60      	cmp	r3, #96	; 0x60
 800676c:	d007      	beq.n	800677e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006792:	d162      	bne.n	800685a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d020      	beq.n	80067f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	4a6a      	ldr	r2, [pc, #424]	; (8006960 <I2C_ITError+0x25c>)
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd ff3e 	bl	8004640 <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8089 	beq.w	80068de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
 80067f2:	e074      	b.n	80068de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	4a59      	ldr	r2, [pc, #356]	; (8006960 <I2C_ITError+0x25c>)
 80067fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	4618      	mov	r0, r3
 8006802:	f7fd ff1d 	bl	8004640 <HAL_DMA_Abort_IT>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d068      	beq.n	80068de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d10b      	bne.n	8006832 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	e041      	b.n	80068de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b60      	cmp	r3, #96	; 0x60
 8006864:	d125      	bne.n	80068b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d10b      	bne.n	800689a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fe feec 	bl	8005688 <HAL_I2C_AbortCpltCallback>
 80068b0:	e015      	b.n	80068de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d10b      	bne.n	80068d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fe fecb 	bl	8005674 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d113      	bne.n	8006958 <I2C_ITError+0x254>
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b28      	cmp	r3, #40	; 0x28
 8006934:	d110      	bne.n	8006958 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <I2C_ITError+0x260>)
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe fe70 	bl	8005638 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	08006969 	.word	0x08006969
 8006964:	ffff0000 	.word	0xffff0000

08006968 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006982:	4b4b      	ldr	r3, [pc, #300]	; (8006ab0 <I2C_DMAAbort+0x148>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	4a4a      	ldr	r2, [pc, #296]	; (8006ab4 <I2C_DMAAbort+0x14c>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0a1a      	lsrs	r2, r3, #8
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	00da      	lsls	r2, r3, #3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f043 0220 	orr.w	r2, r3, #32
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80069ae:	e00a      	b.n	80069c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c4:	d0ea      	beq.n	800699c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	2200      	movs	r2, #0
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	2200      	movs	r2, #0
 80069e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	2200      	movs	r2, #0
 8006a0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	2200      	movs	r2, #0
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d10e      	bne.n	8006a56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a4e:	6978      	ldr	r0, [r7, #20]
 8006a50:	f7fe fe1a 	bl	8005688 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a54:	e027      	b.n	8006aa6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a5c:	2b28      	cmp	r3, #40	; 0x28
 8006a5e:	d117      	bne.n	8006a90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2228      	movs	r2, #40	; 0x28
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a8e:	e007      	b.n	8006aa0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006aa0:	6978      	ldr	r0, [r7, #20]
 8006aa2:	f7fe fde7 	bl	8005674 <HAL_I2C_ErrorCallback>
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000440 	.word	0x20000440
 8006ab4:	14f8b589 	.word	0x14f8b589

08006ab8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	0a1a      	lsrs	r2, r3, #8
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e008      	b.n	8006b08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d0e9      	beq.n	8006ada <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000440 	.word	0x20000440
 8006b18:	14f8b589 	.word	0x14f8b589

08006b1c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b2c:	d103      	bne.n	8006b36 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b34:	e007      	b.n	8006b46 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b3e:	d102      	bne.n	8006b46 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2208      	movs	r2, #8
 8006b44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e267      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d075      	beq.n	8006c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b72:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d00c      	beq.n	8006b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b7e:	4b85      	ldr	r3, [pc, #532]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d112      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b8a:	4b82      	ldr	r3, [pc, #520]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b96:	d10b      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b98:	4b7e      	ldr	r3, [pc, #504]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d05b      	beq.n	8006c5c <HAL_RCC_OscConfig+0x108>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d157      	bne.n	8006c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e242      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x74>
 8006bba:	4b76      	ldr	r3, [pc, #472]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a75      	ldr	r2, [pc, #468]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	e01d      	b.n	8006c04 <HAL_RCC_OscConfig+0xb0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x98>
 8006bd2:	4b70      	ldr	r3, [pc, #448]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6f      	ldr	r2, [pc, #444]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	4b6d      	ldr	r3, [pc, #436]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6c      	ldr	r2, [pc, #432]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	e00b      	b.n	8006c04 <HAL_RCC_OscConfig+0xb0>
 8006bec:	4b69      	ldr	r3, [pc, #420]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a68      	ldr	r2, [pc, #416]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	4b66      	ldr	r3, [pc, #408]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a65      	ldr	r2, [pc, #404]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d013      	beq.n	8006c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fd fa84 	bl	8004118 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c14:	f7fd fa80 	bl	8004118 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b64      	cmp	r3, #100	; 0x64
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e207      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c26:	4b5b      	ldr	r3, [pc, #364]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0xc0>
 8006c32:	e014      	b.n	8006c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c34:	f7fd fa70 	bl	8004118 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c3c:	f7fd fa6c 	bl	8004118 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b64      	cmp	r3, #100	; 0x64
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e1f3      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c4e:	4b51      	ldr	r3, [pc, #324]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0xe8>
 8006c5a:	e000      	b.n	8006c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d063      	beq.n	8006d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c6a:	4b4a      	ldr	r3, [pc, #296]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 030c 	and.w	r3, r3, #12
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c76:	4b47      	ldr	r3, [pc, #284]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d11c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c82:	4b44      	ldr	r3, [pc, #272]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d116      	bne.n	8006cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c8e:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x152>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d001      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e1c7      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4937      	ldr	r1, [pc, #220]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cba:	e03a      	b.n	8006d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d020      	beq.n	8006d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cc4:	4b34      	ldr	r3, [pc, #208]	; (8006d98 <HAL_RCC_OscConfig+0x244>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fd fa25 	bl	8004118 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd2:	f7fd fa21 	bl	8004118 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e1a8      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4925      	ldr	r1, [pc, #148]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	600b      	str	r3, [r1, #0]
 8006d04:	e015      	b.n	8006d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d06:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <HAL_RCC_OscConfig+0x244>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7fd fa04 	bl	8004118 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d14:	f7fd fa00 	bl	8004118 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e187      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d26:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d036      	beq.n	8006dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d016      	beq.n	8006d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d46:	4b15      	ldr	r3, [pc, #84]	; (8006d9c <HAL_RCC_OscConfig+0x248>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4c:	f7fd f9e4 	bl	8004118 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d54:	f7fd f9e0 	bl	8004118 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e167      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_RCC_OscConfig+0x240>)
 8006d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0x200>
 8006d72:	e01b      	b.n	8006dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d74:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <HAL_RCC_OscConfig+0x248>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d7a:	f7fd f9cd 	bl	8004118 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d80:	e00e      	b.n	8006da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d82:	f7fd f9c9 	bl	8004118 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d907      	bls.n	8006da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e150      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
 8006d94:	40023800 	.word	0x40023800
 8006d98:	42470000 	.word	0x42470000
 8006d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da0:	4b88      	ldr	r3, [pc, #544]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1ea      	bne.n	8006d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8097 	beq.w	8006ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dbe:	4b81      	ldr	r3, [pc, #516]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10f      	bne.n	8006dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	4b7d      	ldr	r3, [pc, #500]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	4a7c      	ldr	r2, [pc, #496]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dda:	4b7a      	ldr	r3, [pc, #488]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de2:	60bb      	str	r3, [r7, #8]
 8006de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006de6:	2301      	movs	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dea:	4b77      	ldr	r3, [pc, #476]	; (8006fc8 <HAL_RCC_OscConfig+0x474>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d118      	bne.n	8006e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006df6:	4b74      	ldr	r3, [pc, #464]	; (8006fc8 <HAL_RCC_OscConfig+0x474>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a73      	ldr	r2, [pc, #460]	; (8006fc8 <HAL_RCC_OscConfig+0x474>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e02:	f7fd f989 	bl	8004118 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e0a:	f7fd f985 	bl	8004118 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e10c      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1c:	4b6a      	ldr	r3, [pc, #424]	; (8006fc8 <HAL_RCC_OscConfig+0x474>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCC_OscConfig+0x2ea>
 8006e30:	4b64      	ldr	r3, [pc, #400]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e34:	4a63      	ldr	r2, [pc, #396]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCC_OscConfig+0x324>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d10c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x30c>
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	4a5e      	ldr	r2, [pc, #376]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	f043 0304 	orr.w	r3, r3, #4
 8006e50:	6713      	str	r3, [r2, #112]	; 0x70
 8006e52:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	4a5b      	ldr	r2, [pc, #364]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5e:	e00b      	b.n	8006e78 <HAL_RCC_OscConfig+0x324>
 8006e60:	4b58      	ldr	r3, [pc, #352]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	4a57      	ldr	r2, [pc, #348]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6c:	4b55      	ldr	r3, [pc, #340]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	4a54      	ldr	r2, [pc, #336]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006e72:	f023 0304 	bic.w	r3, r3, #4
 8006e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d015      	beq.n	8006eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fd f94a 	bl	8004118 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e88:	f7fd f946 	bl	8004118 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e0cb      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9e:	4b49      	ldr	r3, [pc, #292]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ee      	beq.n	8006e88 <HAL_RCC_OscConfig+0x334>
 8006eaa:	e014      	b.n	8006ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eac:	f7fd f934 	bl	8004118 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb4:	f7fd f930 	bl	8004118 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e0b5      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eca:	4b3e      	ldr	r3, [pc, #248]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ee      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d105      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006edc:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	4a38      	ldr	r2, [pc, #224]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80a1 	beq.w	8007034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ef2:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d05c      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d141      	bne.n	8006f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f06:	4b31      	ldr	r3, [pc, #196]	; (8006fcc <HAL_RCC_OscConfig+0x478>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fd f904 	bl	8004118 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fd f900 	bl	8004118 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e087      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	019b      	lsls	r3, r3, #6
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	061b      	lsls	r3, r3, #24
 8006f56:	491b      	ldr	r1, [pc, #108]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <HAL_RCC_OscConfig+0x478>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f62:	f7fd f8d9 	bl	8004118 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f6a:	f7fd f8d5 	bl	8004118 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e05c      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0x416>
 8006f88:	e054      	b.n	8007034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <HAL_RCC_OscConfig+0x478>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f90:	f7fd f8c2 	bl	8004118 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f98:	f7fd f8be 	bl	8004118 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e045      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <HAL_RCC_OscConfig+0x470>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0x444>
 8006fb6:	e03d      	b.n	8007034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e038      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	40007000 	.word	0x40007000
 8006fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fd0:	4b1b      	ldr	r3, [pc, #108]	; (8007040 <HAL_RCC_OscConfig+0x4ec>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d028      	beq.n	8007030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d121      	bne.n	8007030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d11a      	bne.n	8007030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007000:	4013      	ands	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007008:	4293      	cmp	r3, r2
 800700a:	d111      	bne.n	8007030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	3b01      	subs	r3, #1
 800701a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d107      	bne.n	8007030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800

08007044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0cc      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007058:	4b68      	ldr	r3, [pc, #416]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d90c      	bls.n	8007080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b65      	ldr	r3, [pc, #404]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b63      	ldr	r3, [pc, #396]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0b8      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d020      	beq.n	80070ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007098:	4b59      	ldr	r3, [pc, #356]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4a58      	ldr	r2, [pc, #352]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4a52      	ldr	r2, [pc, #328]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070bc:	4b50      	ldr	r3, [pc, #320]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	494d      	ldr	r1, [pc, #308]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d044      	beq.n	8007164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e2:	4b47      	ldr	r3, [pc, #284]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d119      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e07f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d003      	beq.n	8007102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007102:	4b3f      	ldr	r3, [pc, #252]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e06f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007112:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e067      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f023 0203 	bic.w	r2, r3, #3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4934      	ldr	r1, [pc, #208]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007134:	f7fc fff0 	bl	8004118 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713a:	e00a      	b.n	8007152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800713c:	f7fc ffec 	bl	8004118 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	; 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e04f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007152:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 020c 	and.w	r2, r3, #12
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	429a      	cmp	r2, r3
 8007162:	d1eb      	bne.n	800713c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d20c      	bcs.n	800718c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b22      	ldr	r3, [pc, #136]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800717a:	4b20      	ldr	r3, [pc, #128]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d001      	beq.n	800718c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e032      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4916      	ldr	r1, [pc, #88]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	490e      	ldr	r1, [pc, #56]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ca:	f000 f821 	bl	8007210 <HAL_RCC_GetSysClockFreq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	490a      	ldr	r1, [pc, #40]	; (8007204 <HAL_RCC_ClockConfig+0x1c0>)
 80071dc:	5ccb      	ldrb	r3, [r1, r3]
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <HAL_RCC_ClockConfig+0x1c4>)
 80071e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_ClockConfig+0x1c8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc ff50 	bl	8004090 <HAL_InitTick>

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40023c00 	.word	0x40023c00
 8007200:	40023800 	.word	0x40023800
 8007204:	0800a038 	.word	0x0800a038
 8007208:	20000440 	.word	0x20000440
 800720c:	20000444 	.word	0x20000444

08007210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007214:	b094      	sub	sp, #80	; 0x50
 8007216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
 800721c:	2300      	movs	r3, #0
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007220:	2300      	movs	r3, #0
 8007222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007228:	4b79      	ldr	r3, [pc, #484]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 030c 	and.w	r3, r3, #12
 8007230:	2b08      	cmp	r3, #8
 8007232:	d00d      	beq.n	8007250 <HAL_RCC_GetSysClockFreq+0x40>
 8007234:	2b08      	cmp	r3, #8
 8007236:	f200 80e1 	bhi.w	80073fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x34>
 800723e:	2b04      	cmp	r3, #4
 8007240:	d003      	beq.n	800724a <HAL_RCC_GetSysClockFreq+0x3a>
 8007242:	e0db      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007244:	4b73      	ldr	r3, [pc, #460]	; (8007414 <HAL_RCC_GetSysClockFreq+0x204>)
 8007246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007248:	e0db      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800724a:	4b73      	ldr	r3, [pc, #460]	; (8007418 <HAL_RCC_GetSysClockFreq+0x208>)
 800724c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800724e:	e0d8      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007250:	4b6f      	ldr	r3, [pc, #444]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800725a:	4b6d      	ldr	r3, [pc, #436]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d063      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007266:	4b6a      	ldr	r3, [pc, #424]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	099b      	lsrs	r3, r3, #6
 800726c:	2200      	movs	r2, #0
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007278:	633b      	str	r3, [r7, #48]	; 0x30
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
 800727e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	f04f 0000 	mov.w	r0, #0
 800728a:	f04f 0100 	mov.w	r1, #0
 800728e:	0159      	lsls	r1, r3, #5
 8007290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007294:	0150      	lsls	r0, r2, #5
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	4621      	mov	r1, r4
 800729c:	1a51      	subs	r1, r2, r1
 800729e:	6139      	str	r1, [r7, #16]
 80072a0:	4629      	mov	r1, r5
 80072a2:	eb63 0301 	sbc.w	r3, r3, r1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b4:	4659      	mov	r1, fp
 80072b6:	018b      	lsls	r3, r1, #6
 80072b8:	4651      	mov	r1, sl
 80072ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072be:	4651      	mov	r1, sl
 80072c0:	018a      	lsls	r2, r1, #6
 80072c2:	4651      	mov	r1, sl
 80072c4:	ebb2 0801 	subs.w	r8, r2, r1
 80072c8:	4659      	mov	r1, fp
 80072ca:	eb63 0901 	sbc.w	r9, r3, r1
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072e2:	4690      	mov	r8, r2
 80072e4:	4699      	mov	r9, r3
 80072e6:	4623      	mov	r3, r4
 80072e8:	eb18 0303 	adds.w	r3, r8, r3
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	462b      	mov	r3, r5
 80072f0:	eb49 0303 	adc.w	r3, r9, r3
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007302:	4629      	mov	r1, r5
 8007304:	024b      	lsls	r3, r1, #9
 8007306:	4621      	mov	r1, r4
 8007308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800730c:	4621      	mov	r1, r4
 800730e:	024a      	lsls	r2, r1, #9
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007316:	2200      	movs	r2, #0
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
 800731a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800731c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007320:	f7f9 fb78 	bl	8000a14 <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4613      	mov	r3, r2
 800732a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732c:	e058      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732e:	4b38      	ldr	r3, [pc, #224]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	099b      	lsrs	r3, r3, #6
 8007334:	2200      	movs	r2, #0
 8007336:	4618      	mov	r0, r3
 8007338:	4611      	mov	r1, r2
 800733a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	2300      	movs	r3, #0
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
 8007344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007348:	4642      	mov	r2, r8
 800734a:	464b      	mov	r3, r9
 800734c:	f04f 0000 	mov.w	r0, #0
 8007350:	f04f 0100 	mov.w	r1, #0
 8007354:	0159      	lsls	r1, r3, #5
 8007356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800735a:	0150      	lsls	r0, r2, #5
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4641      	mov	r1, r8
 8007362:	ebb2 0a01 	subs.w	sl, r2, r1
 8007366:	4649      	mov	r1, r9
 8007368:	eb63 0b01 	sbc.w	fp, r3, r1
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800737c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007380:	ebb2 040a 	subs.w	r4, r2, sl
 8007384:	eb63 050b 	sbc.w	r5, r3, fp
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	00eb      	lsls	r3, r5, #3
 8007392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007396:	00e2      	lsls	r2, r4, #3
 8007398:	4614      	mov	r4, r2
 800739a:	461d      	mov	r5, r3
 800739c:	4643      	mov	r3, r8
 800739e:	18e3      	adds	r3, r4, r3
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	464b      	mov	r3, r9
 80073a4:	eb45 0303 	adc.w	r3, r5, r3
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073b6:	4629      	mov	r1, r5
 80073b8:	028b      	lsls	r3, r1, #10
 80073ba:	4621      	mov	r1, r4
 80073bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073c0:	4621      	mov	r1, r4
 80073c2:	028a      	lsls	r2, r1, #10
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ca:	2200      	movs	r2, #0
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	61fa      	str	r2, [r7, #28]
 80073d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073d4:	f7f9 fb1e 	bl	8000a14 <__aeabi_uldivmod>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4613      	mov	r3, r2
 80073de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_RCC_GetSysClockFreq+0x200>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	3301      	adds	r3, #1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073fa:	e002      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCC_GetSysClockFreq+0x204>)
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007404:	4618      	mov	r0, r3
 8007406:	3750      	adds	r7, #80	; 0x50
 8007408:	46bd      	mov	sp, r7
 800740a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800740e:	bf00      	nop
 8007410:	40023800 	.word	0x40023800
 8007414:	00f42400 	.word	0x00f42400
 8007418:	007a1200 	.word	0x007a1200

0800741c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <HAL_RCC_GetHCLKFreq+0x14>)
 8007422:	681b      	ldr	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000440 	.word	0x20000440

08007434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007438:	f7ff fff0 	bl	800741c <HAL_RCC_GetHCLKFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	0a9b      	lsrs	r3, r3, #10
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	4903      	ldr	r1, [pc, #12]	; (8007458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40023800 	.word	0x40023800
 8007458:	0800a048 	.word	0x0800a048

0800745c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007460:	f7ff ffdc 	bl	800741c <HAL_RCC_GetHCLKFreq>
 8007464:	4602      	mov	r2, r0
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0b5b      	lsrs	r3, r3, #13
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007472:	5ccb      	ldrb	r3, [r1, r3]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40023800 	.word	0x40023800
 8007480:	0800a048 	.word	0x0800a048

08007484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e041      	b.n	800751a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fc fbe2 	bl	8003c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f000 fd7e 	bl	8007fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d001      	beq.n	800753c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e044      	b.n	80075c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d018      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x6c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d013      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x6c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00e      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x6c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a19      	ldr	r2, [pc, #100]	; (80075dc <HAL_TIM_Base_Start_IT+0xb8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d009      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x6c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x6c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d010      	beq.n	80075c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e007      	b.n	80075c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014000 	.word	0x40014000

080075e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e041      	b.n	800767e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fc fac2 	bl	8003b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fccc 	bl	8007fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <HAL_TIM_PWM_Start+0x24>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e022      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d109      	bne.n	80076c6 <HAL_TIM_PWM_Start+0x3e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	bf14      	ite	ne
 80076be:	2301      	movne	r3, #1
 80076c0:	2300      	moveq	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e015      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d109      	bne.n	80076e0 <HAL_TIM_PWM_Start+0x58>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e008      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e068      	b.n	80077cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0x82>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	e013      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0x92>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007718:	e00b      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007728:	e003      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2201      	movs	r2, #1
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fee8 	bl	8008510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <HAL_TIM_PWM_Start+0x14c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d107      	bne.n	800775a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_TIM_PWM_Start+0x14c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_TIM_PWM_Start+0x10e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d013      	beq.n	8007796 <HAL_TIM_PWM_Start+0x10e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <HAL_TIM_PWM_Start+0x150>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_TIM_PWM_Start+0x10e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_TIM_PWM_Start+0x154>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_TIM_PWM_Start+0x10e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <HAL_TIM_PWM_Start+0x158>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_TIM_PWM_Start+0x10e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <HAL_TIM_PWM_Start+0x15c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d111      	bne.n	80077ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b06      	cmp	r3, #6
 80077a6:	d010      	beq.n	80077ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b8:	e007      	b.n	80077ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	40014000 	.word	0x40014000

080077e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e097      	b.n	800792c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fc f9e9 	bl	8003be8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f000 fbc1 	bl	8007fc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	4313      	orrs	r3, r2
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007888:	f023 030c 	bic.w	r3, r3, #12
 800788c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4313      	orrs	r3, r2
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	031b      	lsls	r3, r3, #12
 80078b8:	4313      	orrs	r3, r2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	4313      	orrs	r3, r2
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007944:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800794c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007954:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800795c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d110      	bne.n	8007986 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d102      	bne.n	8007970 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e069      	b.n	8007a48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007984:	e031      	b.n	80079ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d110      	bne.n	80079ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d102      	bne.n	8007998 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007992:	7b3b      	ldrb	r3, [r7, #12]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d001      	beq.n	800799c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e055      	b.n	8007a48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079ac:	e01d      	b.n	80079ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d108      	bne.n	80079c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d105      	bne.n	80079c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ba:	7b7b      	ldrb	r3, [r7, #13]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d102      	bne.n	80079c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079c0:	7b3b      	ldrb	r3, [r7, #12]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d001      	beq.n	80079ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e03e      	b.n	8007a48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_TIM_Encoder_Start+0xc4>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d008      	beq.n	8007a08 <HAL_TIM_Encoder_Start+0xd4>
 80079f6:	e00f      	b.n	8007a18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2201      	movs	r2, #1
 80079fe:	2100      	movs	r1, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fd85 	bl	8008510 <TIM_CCxChannelCmd>
      break;
 8007a06:	e016      	b.n	8007a36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	2104      	movs	r1, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fd7d 	bl	8008510 <TIM_CCxChannelCmd>
      break;
 8007a16:	e00e      	b.n	8007a36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fd75 	bl	8008510 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	2104      	movs	r1, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fd6e 	bl	8008510 <TIM_CCxChannelCmd>
      break;
 8007a34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0201 	orr.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d122      	bne.n	8007aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d11b      	bne.n	8007aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f06f 0202 	mvn.w	r2, #2
 8007a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa77 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007a98:	e005      	b.n	8007aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa69 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fa7a 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d122      	bne.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d11b      	bne.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0204 	mvn.w	r2, #4
 8007ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa4d 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa3f 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa50 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d122      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0208 	mvn.w	r2, #8
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2204      	movs	r2, #4
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa23 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007b40:	e005      	b.n	8007b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa15 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa26 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0210 	mvn.w	r2, #16
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9f9 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9eb 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9fc 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0201 	mvn.w	r2, #1
 8007bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fb fc00 	bl	80033d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b80      	cmp	r3, #128	; 0x80
 8007be0:	d10e      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d107      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fd78 	bl	80086f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d10e      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	d107      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9c1 	bl	8007fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d10e      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d107      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0220 	mvn.w	r2, #32
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fd42 	bl	80086dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e0ae      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	f200 809f 	bhi.w	8007dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007dcd 	.word	0x08007dcd
 8007c9c:	08007dcd 	.word	0x08007dcd
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007dcd 	.word	0x08007dcd
 8007cac:	08007dcd 	.word	0x08007dcd
 8007cb0:	08007dcd 	.word	0x08007dcd
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007dcd 	.word	0x08007dcd
 8007cbc:	08007dcd 	.word	0x08007dcd
 8007cc0:	08007dcd 	.word	0x08007dcd
 8007cc4:	08007d8b 	.word	0x08007d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f9f8 	bl	80080c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0208 	orr.w	r2, r2, #8
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0204 	bic.w	r2, r2, #4
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
      break;
 8007d06:	e064      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fa3e 	bl	8008190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6999      	ldr	r1, [r3, #24]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	021a      	lsls	r2, r3, #8
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	619a      	str	r2, [r3, #24]
      break;
 8007d48:	e043      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fa89 	bl	8008268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0208 	orr.w	r2, r2, #8
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0204 	bic.w	r2, r2, #4
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	61da      	str	r2, [r3, #28]
      break;
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fad3 	bl	800833c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69d9      	ldr	r1, [r3, #28]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	61da      	str	r2, [r3, #28]
      break;
 8007dca:	e002      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIM_ConfigClockSource+0x1c>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e0b4      	b.n	8007f6a <HAL_TIM_ConfigClockSource+0x186>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d03e      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3e:	f200 8087 	bhi.w	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e46:	f000 8086 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x172>
 8007e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4e:	d87f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b70      	cmp	r3, #112	; 0x70
 8007e52:	d01a      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0xa6>
 8007e54:	2b70      	cmp	r3, #112	; 0x70
 8007e56:	d87b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e58:	2b60      	cmp	r3, #96	; 0x60
 8007e5a:	d050      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x11a>
 8007e5c:	2b60      	cmp	r3, #96	; 0x60
 8007e5e:	d877      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e60:	2b50      	cmp	r3, #80	; 0x50
 8007e62:	d03c      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xfa>
 8007e64:	2b50      	cmp	r3, #80	; 0x50
 8007e66:	d873      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e68:	2b40      	cmp	r3, #64	; 0x40
 8007e6a:	d058      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x13a>
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d86f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e70:	2b30      	cmp	r3, #48	; 0x30
 8007e72:	d064      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	d86b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d060      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d867      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05c      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d05a      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e88:	e062      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6899      	ldr	r1, [r3, #8]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f000 fb19 	bl	80084d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	609a      	str	r2, [r3, #8]
      break;
 8007eb6:	e04f      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6899      	ldr	r1, [r3, #8]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f000 fb02 	bl	80084d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eda:	609a      	str	r2, [r3, #8]
      break;
 8007edc:	e03c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 fa76 	bl	80083dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2150      	movs	r1, #80	; 0x50
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 facf 	bl	800849a <TIM_ITRx_SetConfig>
      break;
 8007efc:	e02c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f000 fa95 	bl	800843a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2160      	movs	r1, #96	; 0x60
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fabf 	bl	800849a <TIM_ITRx_SetConfig>
      break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6859      	ldr	r1, [r3, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f000 fa56 	bl	80083dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2140      	movs	r1, #64	; 0x40
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 faaf 	bl	800849a <TIM_ITRx_SetConfig>
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f000 faa6 	bl	800849a <TIM_ITRx_SetConfig>
      break;
 8007f4e:	e003      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e000      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a34      	ldr	r2, [pc, #208]	; (80080a8 <TIM_Base_SetConfig+0xe4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00f      	beq.n	8007ffc <TIM_Base_SetConfig+0x38>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe2:	d00b      	beq.n	8007ffc <TIM_Base_SetConfig+0x38>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a31      	ldr	r2, [pc, #196]	; (80080ac <TIM_Base_SetConfig+0xe8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d007      	beq.n	8007ffc <TIM_Base_SetConfig+0x38>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a30      	ldr	r2, [pc, #192]	; (80080b0 <TIM_Base_SetConfig+0xec>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d003      	beq.n	8007ffc <TIM_Base_SetConfig+0x38>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a2f      	ldr	r2, [pc, #188]	; (80080b4 <TIM_Base_SetConfig+0xf0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d108      	bne.n	800800e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a25      	ldr	r2, [pc, #148]	; (80080a8 <TIM_Base_SetConfig+0xe4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01b      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801c:	d017      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a22      	ldr	r2, [pc, #136]	; (80080ac <TIM_Base_SetConfig+0xe8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a21      	ldr	r2, [pc, #132]	; (80080b0 <TIM_Base_SetConfig+0xec>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00f      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a20      	ldr	r2, [pc, #128]	; (80080b4 <TIM_Base_SetConfig+0xf0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00b      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <TIM_Base_SetConfig+0xf4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d007      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <TIM_Base_SetConfig+0xf8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <TIM_Base_SetConfig+0x8a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <TIM_Base_SetConfig+0xfc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a08      	ldr	r2, [pc, #32]	; (80080a8 <TIM_Base_SetConfig+0xe4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d103      	bne.n	8008094 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	615a      	str	r2, [r3, #20]
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400
 80080c0:	40014800 	.word	0x40014800

080080c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f023 0201 	bic.w	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 0302 	bic.w	r3, r3, #2
 800810c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a1c      	ldr	r2, [pc, #112]	; (800818c <TIM_OC1_SetConfig+0xc8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10c      	bne.n	800813a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0308 	bic.w	r3, r3, #8
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f023 0304 	bic.w	r3, r3, #4
 8008138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a13      	ldr	r2, [pc, #76]	; (800818c <TIM_OC1_SetConfig+0xc8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d111      	bne.n	8008166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40010000 	.word	0x40010000

08008190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f023 0210 	bic.w	r2, r3, #16
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0320 	bic.w	r3, r3, #32
 80081da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <TIM_OC2_SetConfig+0xd4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10d      	bne.n	800820c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <TIM_OC2_SetConfig+0xd4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d113      	bne.n	800823c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	621a      	str	r2, [r3, #32]
}
 8008256:	bf00      	nop
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000

08008268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <TIM_OC3_SetConfig+0xd0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d10d      	bne.n	80082e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a14      	ldr	r2, [pc, #80]	; (8008338 <TIM_OC3_SetConfig+0xd0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d113      	bne.n	8008312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	621a      	str	r2, [r3, #32]
}
 800832c:	bf00      	nop
 800832e:	371c      	adds	r7, #28
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	40010000 	.word	0x40010000

0800833c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	031b      	lsls	r3, r3, #12
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a10      	ldr	r2, [pc, #64]	; (80083d8 <TIM_OC4_SetConfig+0x9c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d109      	bne.n	80083b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	019b      	lsls	r3, r3, #6
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	621a      	str	r2, [r3, #32]
}
 80083ca:	bf00      	nop
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	40010000 	.word	0x40010000

080083dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f023 0201 	bic.w	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f023 030a 	bic.w	r3, r3, #10
 8008418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4313      	orrs	r3, r2
 8008420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	621a      	str	r2, [r3, #32]
}
 800842e:	bf00      	nop
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800843a:	b480      	push	{r7}
 800843c:	b087      	sub	sp, #28
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f023 0210 	bic.w	r2, r3, #16
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	031b      	lsls	r3, r3, #12
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	621a      	str	r2, [r3, #32]
}
 800848e:	bf00      	nop
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f043 0307 	orr.w	r3, r3, #7
 80084bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	609a      	str	r2, [r3, #8]
}
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	021a      	lsls	r2, r3, #8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	431a      	orrs	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	609a      	str	r2, [r3, #8]
}
 8008504:	bf00      	nop
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 031f 	and.w	r3, r3, #31
 8008522:	2201      	movs	r2, #1
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	43db      	mvns	r3, r3
 8008532:	401a      	ands	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1a      	ldr	r2, [r3, #32]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	fa01 f303 	lsl.w	r3, r1, r3
 8008548:	431a      	orrs	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008570:	2302      	movs	r3, #2
 8008572:	e050      	b.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c0:	d013      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a16      	ldr	r2, [pc, #88]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a15      	ldr	r2, [pc, #84]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a13      	ldr	r2, [pc, #76]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d10c      	bne.n	8008604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	40010000 	.word	0x40010000
 8008628:	40000400 	.word	0x40000400
 800862c:	40000800 	.word	0x40000800
 8008630:	40000c00 	.word	0x40000c00
 8008634:	40014000 	.word	0x40014000

08008638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008650:	2302      	movs	r3, #2
 8008652:	e03d      	b.n	80086d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e03f      	b.n	8008796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fb fb40 	bl	8003db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2224      	movs	r2, #36	; 0x24
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fee1 	bl	8009510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800875c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695a      	ldr	r2, [r3, #20]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800876c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800877c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	4613      	mov	r3, r2
 80087aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d130      	bne.n	800881a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_UART_Transmit_IT+0x26>
 80087be:	88fb      	ldrh	r3, [r7, #6]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e029      	b.n	800881c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_UART_Transmit_IT+0x38>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e022      	b.n	800881c <HAL_UART_Transmit_IT+0x7e>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2221      	movs	r2, #33	; 0x21
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008814:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	e000      	b.n	800881c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800881a:	2302      	movs	r3, #2
  }
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08c      	sub	sp, #48	; 0x30
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b20      	cmp	r3, #32
 8008840:	d152      	bne.n	80088e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e04b      	b.n	80088ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800885c:	2302      	movs	r3, #2
 800885e:	e044      	b.n	80088ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2201      	movs	r2, #1
 800886c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	461a      	mov	r2, r3
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fbeb 	bl	8009050 <UART_Start_Receive_DMA>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008884:	2b00      	cmp	r3, #0
 8008886:	d12c      	bne.n	80088e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	2b01      	cmp	r3, #1
 800888e:	d125      	bne.n	80088dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	330c      	adds	r3, #12
 80088ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	617b      	str	r3, [r7, #20]
   return(result);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f043 0310 	orr.w	r3, r3, #16
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	330c      	adds	r3, #12
 80088c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c6:	627a      	str	r2, [r7, #36]	; 0x24
 80088c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6a39      	ldr	r1, [r7, #32]
 80088cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e5      	bne.n	80088a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80088da:	e002      	b.n	80088e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80088e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088e6:	e000      	b.n	80088ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3730      	adds	r7, #48	; 0x30
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b0ba      	sub	sp, #232	; 0xe8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800891a:	2300      	movs	r3, #0
 800891c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008920:	2300      	movs	r3, #0
 8008922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10f      	bne.n	800895a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d009      	beq.n	800895a <HAL_UART_IRQHandler+0x66>
 8008946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fd21 	bl	800939a <UART_Receive_IT>
      return;
 8008958:	e256      	b.n	8008e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800895a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80de 	beq.w	8008b20 <HAL_UART_IRQHandler+0x22c>
 8008964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80d1 	beq.w	8008b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800897e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <HAL_UART_IRQHandler+0xae>
 800898a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f043 0201 	orr.w	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <HAL_UART_IRQHandler+0xd2>
 80089ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f043 0202 	orr.w	r2, r3, #2
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <HAL_UART_IRQHandler+0xf6>
 80089d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f043 0204 	orr.w	r2, r3, #4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d011      	beq.n	8008a1a <HAL_UART_IRQHandler+0x126>
 80089f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f043 0208 	orr.w	r2, r3, #8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 81ed 	beq.w	8008dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a28:	f003 0320 	and.w	r3, r3, #32
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <HAL_UART_IRQHandler+0x14e>
 8008a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fcac 	bl	800939a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	bf0c      	ite	eq
 8008a50:	2301      	moveq	r3, #1
 8008a52:	2300      	movne	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f003 0308 	and.w	r3, r3, #8
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <HAL_UART_IRQHandler+0x17a>
 8008a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d04f      	beq.n	8008b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fbb4 	bl	80091dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	d141      	bne.n	8008b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3314      	adds	r3, #20
 8008a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1d9      	bne.n	8008a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d013      	beq.n	8008afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	4a7d      	ldr	r2, [pc, #500]	; (8008cd0 <HAL_UART_IRQHandler+0x3dc>)
 8008adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fb fdac 	bl	8004640 <HAL_DMA_Abort_IT>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d016      	beq.n	8008b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	e00e      	b.n	8008b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f9a4 	bl	8008e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	e00a      	b.n	8008b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9a0 	bl	8008e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0c:	e006      	b.n	8008b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f99c 	bl	8008e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b1a:	e170      	b.n	8008dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1c:	bf00      	nop
    return;
 8008b1e:	e16e      	b.n	8008dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	f040 814a 	bne.w	8008dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2e:	f003 0310 	and.w	r3, r3, #16
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8143 	beq.w	8008dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 813c 	beq.w	8008dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	60bb      	str	r3, [r7, #8]
 8008b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b40      	cmp	r3, #64	; 0x40
 8008b68:	f040 80b4 	bne.w	8008cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8140 	beq.w	8008e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	f080 8139 	bcs.w	8008e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba2:	f000 8088 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	330c      	adds	r3, #12
 8008bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1d9      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c04:	f023 0301 	bic.w	r3, r3, #1
 8008c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3314      	adds	r3, #20
 8008c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e1      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3314      	adds	r3, #20
 8008c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3314      	adds	r3, #20
 8008c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e3      	bne.n	8008c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	330c      	adds	r3, #12
 8008c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	330c      	adds	r3, #12
 8008c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e3      	bne.n	8008c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb fc55 	bl	8004560 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fa fc5c 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ccc:	e099      	b.n	8008e02 <HAL_UART_IRQHandler+0x50e>
 8008cce:	bf00      	nop
 8008cd0:	080092a3 	.word	0x080092a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 808b 	beq.w	8008e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8086 	beq.w	8008e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	330c      	adds	r3, #12
 8008d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8008d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e3      	bne.n	8008cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3314      	adds	r3, #20
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	623b      	str	r3, [r7, #32]
   return(result);
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3314      	adds	r3, #20
 8008d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d56:	633a      	str	r2, [r7, #48]	; 0x30
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e3      	bne.n	8008d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0310 	bic.w	r3, r3, #16
 8008d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d9c:	61fa      	str	r2, [r7, #28]
 8008d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	617b      	str	r3, [r7, #20]
   return(result);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e3      	bne.n	8008d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fa fbe4 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dbc:	e023      	b.n	8008e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <HAL_UART_IRQHandler+0x4ea>
 8008dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa77 	bl	80092ca <UART_Transmit_IT>
    return;
 8008ddc:	e014      	b.n	8008e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00e      	beq.n	8008e08 <HAL_UART_IRQHandler+0x514>
 8008dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fab7 	bl	800936a <UART_EndTransmit_IT>
    return;
 8008dfc:	e004      	b.n	8008e08 <HAL_UART_IRQHandler+0x514>
    return;
 8008dfe:	bf00      	nop
 8008e00:	e002      	b.n	8008e08 <HAL_UART_IRQHandler+0x514>
      return;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <HAL_UART_IRQHandler+0x514>
      return;
 8008e06:	bf00      	nop
  }
}
 8008e08:	37e8      	adds	r7, #232	; 0xe8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop

08008e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b09c      	sub	sp, #112	; 0x70
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d172      	bne.n	8008f62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	2200      	movs	r2, #0
 8008e80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	330c      	adds	r3, #12
 8008e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	330c      	adds	r3, #12
 8008ea0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ea2:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ea4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e5      	bne.n	8008e82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3314      	adds	r3, #20
 8008ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8008ed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f00:	663b      	str	r3, [r7, #96]	; 0x60
 8008f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3314      	adds	r3, #20
 8008f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8008f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e5      	bne.n	8008eea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f20:	2220      	movs	r2, #32
 8008f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d119      	bne.n	8008f62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f023 0310 	bic.w	r3, r3, #16
 8008f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f4e:	61fa      	str	r2, [r7, #28]
 8008f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	69b9      	ldr	r1, [r7, #24]
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e5      	bne.n	8008f2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d106      	bne.n	8008f78 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f72:	f7fa fb07 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f76:	e002      	b.n	8008f7e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008f78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f7a:	f7ff ff53 	bl	8008e24 <HAL_UART_RxCpltCallback>
}
 8008f7e:	bf00      	nop
 8008f80:	3770      	adds	r7, #112	; 0x70
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d108      	bne.n	8008fae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7fa faec 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fac:	e002      	b.n	8008fb4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ff42 	bl	8008e38 <HAL_UART_RxHalfCpltCallback>
}
 8008fb4:	bf00      	nop
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd8:	2b80      	cmp	r3, #128	; 0x80
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b21      	cmp	r3, #33	; 0x21
 8008fee:	d108      	bne.n	8009002 <UART_DMAError+0x46>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ffc:	68b8      	ldr	r0, [r7, #8]
 8008ffe:	f000 f8c5 	bl	800918c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	bf0c      	ite	eq
 8009010:	2301      	moveq	r3, #1
 8009012:	2300      	movne	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b22      	cmp	r3, #34	; 0x22
 8009022:	d108      	bne.n	8009036 <UART_DMAError+0x7a>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2200      	movs	r2, #0
 800902e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009030:	68b8      	ldr	r0, [r7, #8]
 8009032:	f000 f8d3 	bl	80091dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f043 0210 	orr.w	r2, r3, #16
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009042:	68b8      	ldr	r0, [r7, #8]
 8009044:	f7ff ff02 	bl	8008e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b098      	sub	sp, #96	; 0x60
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2222      	movs	r2, #34	; 0x22
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	4a40      	ldr	r2, [pc, #256]	; (8009180 <UART_Start_Receive_DMA+0x130>)
 800907e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	4a3f      	ldr	r2, [pc, #252]	; (8009184 <UART_Start_Receive_DMA+0x134>)
 8009086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	4a3e      	ldr	r2, [pc, #248]	; (8009188 <UART_Start_Receive_DMA+0x138>)
 800908e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	2200      	movs	r2, #0
 8009096:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	f7fb f9fe 	bl	80044b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d019      	beq.n	800910e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	657b      	str	r3, [r7, #84]	; 0x54
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800912e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e5      	bne.n	800910e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	617b      	str	r3, [r7, #20]
   return(result);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009158:	653b      	str	r3, [r7, #80]	; 0x50
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3314      	adds	r3, #20
 8009160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009162:	627a      	str	r2, [r7, #36]	; 0x24
 8009164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6a39      	ldr	r1, [r7, #32]
 8009168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e5      	bne.n	8009142 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3760      	adds	r7, #96	; 0x60
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	08008e61 	.word	0x08008e61
 8009184:	08008f87 	.word	0x08008f87
 8009188:	08008fbd 	.word	0x08008fbd

0800918c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b089      	sub	sp, #36	; 0x24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	330c      	adds	r3, #12
 800919a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	61ba      	str	r2, [r7, #24]
 80091b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6979      	ldr	r1, [r7, #20]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	613b      	str	r3, [r7, #16]
   return(result);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e5      	bne.n	8009194 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091d0:	bf00      	nop
 80091d2:	3724      	adds	r7, #36	; 0x24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b095      	sub	sp, #84	; 0x54
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009204:	643a      	str	r2, [r7, #64]	; 0x40
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800920a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	61fb      	str	r3, [r7, #28]
   return(result);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3314      	adds	r3, #20
 8009236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800923e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e5      	bne.n	8009218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	2b01      	cmp	r3, #1
 8009252:	d119      	bne.n	8009288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	60bb      	str	r3, [r7, #8]
   return(result);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f023 0310 	bic.w	r3, r3, #16
 800926a:	647b      	str	r3, [r7, #68]	; 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009274:	61ba      	str	r2, [r7, #24]
 8009276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6979      	ldr	r1, [r7, #20]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	613b      	str	r3, [r7, #16]
   return(result);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e5      	bne.n	8009254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2220      	movs	r2, #32
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009296:	bf00      	nop
 8009298:	3754      	adds	r7, #84	; 0x54
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fdc5 	bl	8008e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b21      	cmp	r3, #33	; 0x21
 80092dc:	d13e      	bne.n	800935c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e6:	d114      	bne.n	8009312 <UART_Transmit_IT+0x48>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009304:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	1c9a      	adds	r2, r3, #2
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	621a      	str	r2, [r3, #32]
 8009310:	e008      	b.n	8009324 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	1c59      	adds	r1, r3, #1
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6211      	str	r1, [r2, #32]
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	4619      	mov	r1, r3
 8009332:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10f      	bne.n	8009358 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009346:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009356:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009380:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fd40 	bl	8008e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b08c      	sub	sp, #48	; 0x30
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b22      	cmp	r3, #34	; 0x22
 80093ac:	f040 80ab 	bne.w	8009506 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b8:	d117      	bne.n	80093ea <UART_Receive_IT+0x50>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d113      	bne.n	80093ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	1c9a      	adds	r2, r3, #2
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
 80093e8:	e026      	b.n	8009438 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fc:	d007      	beq.n	800940e <UART_Receive_IT+0x74>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <UART_Receive_IT+0x82>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	e008      	b.n	800942e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009428:	b2da      	uxtb	r2, r3
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29b      	uxth	r3, r3
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4619      	mov	r1, r3
 8009446:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009448:	2b00      	cmp	r3, #0
 800944a:	d15a      	bne.n	8009502 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0220 	bic.w	r2, r2, #32
 800945a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800946a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	2b01      	cmp	r3, #1
 800948a:	d135      	bne.n	80094f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	613b      	str	r3, [r7, #16]
   return(result);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f023 0310 	bic.w	r3, r3, #16
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	623a      	str	r2, [r7, #32]
 80094b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	69f9      	ldr	r1, [r7, #28]
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	61bb      	str	r3, [r7, #24]
   return(result);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e5      	bne.n	8009492 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d10a      	bne.n	80094ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fa f847 	bl	8003584 <HAL_UARTEx_RxEventCallback>
 80094f6:	e002      	b.n	80094fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff fc93 	bl	8008e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e002      	b.n	8009508 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	e000      	b.n	8009508 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009506:	2302      	movs	r3, #2
  }
}
 8009508:	4618      	mov	r0, r3
 800950a:	3730      	adds	r7, #48	; 0x30
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009514:	b0c0      	sub	sp, #256	; 0x100
 8009516:	af00      	add	r7, sp, #0
 8009518:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952c:	68d9      	ldr	r1, [r3, #12]
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	ea40 0301 	orr.w	r3, r0, r1
 8009538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	431a      	orrs	r2, r3
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	431a      	orrs	r2, r3
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	4313      	orrs	r3, r2
 8009558:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800955c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009568:	f021 010c 	bic.w	r1, r1, #12
 800956c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009576:	430b      	orrs	r3, r1
 8009578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958a:	6999      	ldr	r1, [r3, #24]
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	ea40 0301 	orr.w	r3, r0, r1
 8009596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b8f      	ldr	r3, [pc, #572]	; (80097dc <UART_SetConfig+0x2cc>)
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d005      	beq.n	80095b0 <UART_SetConfig+0xa0>
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	4b8d      	ldr	r3, [pc, #564]	; (80097e0 <UART_SetConfig+0x2d0>)
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d104      	bne.n	80095ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095b0:	f7fd ff54 	bl	800745c <HAL_RCC_GetPCLK2Freq>
 80095b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095b8:	e003      	b.n	80095c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ba:	f7fd ff3b 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 80095be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095cc:	f040 810c 	bne.w	80097e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095e2:	4622      	mov	r2, r4
 80095e4:	462b      	mov	r3, r5
 80095e6:	1891      	adds	r1, r2, r2
 80095e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80095ea:	415b      	adcs	r3, r3
 80095ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095f2:	4621      	mov	r1, r4
 80095f4:	eb12 0801 	adds.w	r8, r2, r1
 80095f8:	4629      	mov	r1, r5
 80095fa:	eb43 0901 	adc.w	r9, r3, r1
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800960a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800960e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009612:	4690      	mov	r8, r2
 8009614:	4699      	mov	r9, r3
 8009616:	4623      	mov	r3, r4
 8009618:	eb18 0303 	adds.w	r3, r8, r3
 800961c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009620:	462b      	mov	r3, r5
 8009622:	eb49 0303 	adc.w	r3, r9, r3
 8009626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800962a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009636:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800963a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800963e:	460b      	mov	r3, r1
 8009640:	18db      	adds	r3, r3, r3
 8009642:	653b      	str	r3, [r7, #80]	; 0x50
 8009644:	4613      	mov	r3, r2
 8009646:	eb42 0303 	adc.w	r3, r2, r3
 800964a:	657b      	str	r3, [r7, #84]	; 0x54
 800964c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009654:	f7f7 f9de 	bl	8000a14 <__aeabi_uldivmod>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4b61      	ldr	r3, [pc, #388]	; (80097e4 <UART_SetConfig+0x2d4>)
 800965e:	fba3 2302 	umull	r2, r3, r3, r2
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	011c      	lsls	r4, r3, #4
 8009666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966a:	2200      	movs	r2, #0
 800966c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009670:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	1891      	adds	r1, r2, r2
 800967e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009680:	415b      	adcs	r3, r3
 8009682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009688:	4641      	mov	r1, r8
 800968a:	eb12 0a01 	adds.w	sl, r2, r1
 800968e:	4649      	mov	r1, r9
 8009690:	eb43 0b01 	adc.w	fp, r3, r1
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096a8:	4692      	mov	sl, r2
 80096aa:	469b      	mov	fp, r3
 80096ac:	4643      	mov	r3, r8
 80096ae:	eb1a 0303 	adds.w	r3, sl, r3
 80096b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096b6:	464b      	mov	r3, r9
 80096b8:	eb4b 0303 	adc.w	r3, fp, r3
 80096bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096d4:	460b      	mov	r3, r1
 80096d6:	18db      	adds	r3, r3, r3
 80096d8:	643b      	str	r3, [r7, #64]	; 0x40
 80096da:	4613      	mov	r3, r2
 80096dc:	eb42 0303 	adc.w	r3, r2, r3
 80096e0:	647b      	str	r3, [r7, #68]	; 0x44
 80096e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096ea:	f7f7 f993 	bl	8000a14 <__aeabi_uldivmod>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4611      	mov	r1, r2
 80096f4:	4b3b      	ldr	r3, [pc, #236]	; (80097e4 <UART_SetConfig+0x2d4>)
 80096f6:	fba3 2301 	umull	r2, r3, r3, r1
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	2264      	movs	r2, #100	; 0x64
 80096fe:	fb02 f303 	mul.w	r3, r2, r3
 8009702:	1acb      	subs	r3, r1, r3
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800970a:	4b36      	ldr	r3, [pc, #216]	; (80097e4 <UART_SetConfig+0x2d4>)
 800970c:	fba3 2302 	umull	r2, r3, r3, r2
 8009710:	095b      	lsrs	r3, r3, #5
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009718:	441c      	add	r4, r3
 800971a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800971e:	2200      	movs	r2, #0
 8009720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009724:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800972c:	4642      	mov	r2, r8
 800972e:	464b      	mov	r3, r9
 8009730:	1891      	adds	r1, r2, r2
 8009732:	63b9      	str	r1, [r7, #56]	; 0x38
 8009734:	415b      	adcs	r3, r3
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800973c:	4641      	mov	r1, r8
 800973e:	1851      	adds	r1, r2, r1
 8009740:	6339      	str	r1, [r7, #48]	; 0x30
 8009742:	4649      	mov	r1, r9
 8009744:	414b      	adcs	r3, r1
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009754:	4659      	mov	r1, fp
 8009756:	00cb      	lsls	r3, r1, #3
 8009758:	4651      	mov	r1, sl
 800975a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800975e:	4651      	mov	r1, sl
 8009760:	00ca      	lsls	r2, r1, #3
 8009762:	4610      	mov	r0, r2
 8009764:	4619      	mov	r1, r3
 8009766:	4603      	mov	r3, r0
 8009768:	4642      	mov	r2, r8
 800976a:	189b      	adds	r3, r3, r2
 800976c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009770:	464b      	mov	r3, r9
 8009772:	460a      	mov	r2, r1
 8009774:	eb42 0303 	adc.w	r3, r2, r3
 8009778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009788:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800978c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009790:	460b      	mov	r3, r1
 8009792:	18db      	adds	r3, r3, r3
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28
 8009796:	4613      	mov	r3, r2
 8009798:	eb42 0303 	adc.w	r3, r2, r3
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800979e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097a6:	f7f7 f935 	bl	8000a14 <__aeabi_uldivmod>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <UART_SetConfig+0x2d4>)
 80097b0:	fba3 1302 	umull	r1, r3, r3, r2
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	2164      	movs	r1, #100	; 0x64
 80097b8:	fb01 f303 	mul.w	r3, r1, r3
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	3332      	adds	r3, #50	; 0x32
 80097c2:	4a08      	ldr	r2, [pc, #32]	; (80097e4 <UART_SetConfig+0x2d4>)
 80097c4:	fba2 2303 	umull	r2, r3, r2, r3
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	f003 0207 	and.w	r2, r3, #7
 80097ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4422      	add	r2, r4
 80097d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097d8:	e105      	b.n	80099e6 <UART_SetConfig+0x4d6>
 80097da:	bf00      	nop
 80097dc:	40011000 	.word	0x40011000
 80097e0:	40011400 	.word	0x40011400
 80097e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097fa:	4642      	mov	r2, r8
 80097fc:	464b      	mov	r3, r9
 80097fe:	1891      	adds	r1, r2, r2
 8009800:	6239      	str	r1, [r7, #32]
 8009802:	415b      	adcs	r3, r3
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
 8009806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800980a:	4641      	mov	r1, r8
 800980c:	1854      	adds	r4, r2, r1
 800980e:	4649      	mov	r1, r9
 8009810:	eb43 0501 	adc.w	r5, r3, r1
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	00eb      	lsls	r3, r5, #3
 800981e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009822:	00e2      	lsls	r2, r4, #3
 8009824:	4614      	mov	r4, r2
 8009826:	461d      	mov	r5, r3
 8009828:	4643      	mov	r3, r8
 800982a:	18e3      	adds	r3, r4, r3
 800982c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009830:	464b      	mov	r3, r9
 8009832:	eb45 0303 	adc.w	r3, r5, r3
 8009836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009856:	4629      	mov	r1, r5
 8009858:	008b      	lsls	r3, r1, #2
 800985a:	4621      	mov	r1, r4
 800985c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009860:	4621      	mov	r1, r4
 8009862:	008a      	lsls	r2, r1, #2
 8009864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009868:	f7f7 f8d4 	bl	8000a14 <__aeabi_uldivmod>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4b60      	ldr	r3, [pc, #384]	; (80099f4 <UART_SetConfig+0x4e4>)
 8009872:	fba3 2302 	umull	r2, r3, r3, r2
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	011c      	lsls	r4, r3, #4
 800987a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800987e:	2200      	movs	r2, #0
 8009880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	1891      	adds	r1, r2, r2
 8009892:	61b9      	str	r1, [r7, #24]
 8009894:	415b      	adcs	r3, r3
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800989c:	4641      	mov	r1, r8
 800989e:	1851      	adds	r1, r2, r1
 80098a0:	6139      	str	r1, [r7, #16]
 80098a2:	4649      	mov	r1, r9
 80098a4:	414b      	adcs	r3, r1
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	f04f 0200 	mov.w	r2, #0
 80098ac:	f04f 0300 	mov.w	r3, #0
 80098b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098b4:	4659      	mov	r1, fp
 80098b6:	00cb      	lsls	r3, r1, #3
 80098b8:	4651      	mov	r1, sl
 80098ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098be:	4651      	mov	r1, sl
 80098c0:	00ca      	lsls	r2, r1, #3
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	4642      	mov	r2, r8
 80098ca:	189b      	adds	r3, r3, r2
 80098cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098d0:	464b      	mov	r3, r9
 80098d2:	460a      	mov	r2, r1
 80098d4:	eb42 0303 	adc.w	r3, r2, r3
 80098d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80098e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098e8:	f04f 0200 	mov.w	r2, #0
 80098ec:	f04f 0300 	mov.w	r3, #0
 80098f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098f4:	4649      	mov	r1, r9
 80098f6:	008b      	lsls	r3, r1, #2
 80098f8:	4641      	mov	r1, r8
 80098fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098fe:	4641      	mov	r1, r8
 8009900:	008a      	lsls	r2, r1, #2
 8009902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009906:	f7f7 f885 	bl	8000a14 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4b39      	ldr	r3, [pc, #228]	; (80099f4 <UART_SetConfig+0x4e4>)
 8009910:	fba3 1302 	umull	r1, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	2164      	movs	r1, #100	; 0x64
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	3332      	adds	r3, #50	; 0x32
 8009922:	4a34      	ldr	r2, [pc, #208]	; (80099f4 <UART_SetConfig+0x4e4>)
 8009924:	fba2 2303 	umull	r2, r3, r2, r3
 8009928:	095b      	lsrs	r3, r3, #5
 800992a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800992e:	441c      	add	r4, r3
 8009930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009934:	2200      	movs	r2, #0
 8009936:	673b      	str	r3, [r7, #112]	; 0x70
 8009938:	677a      	str	r2, [r7, #116]	; 0x74
 800993a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800993e:	4642      	mov	r2, r8
 8009940:	464b      	mov	r3, r9
 8009942:	1891      	adds	r1, r2, r2
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	415b      	adcs	r3, r3
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800994e:	4641      	mov	r1, r8
 8009950:	1851      	adds	r1, r2, r1
 8009952:	6039      	str	r1, [r7, #0]
 8009954:	4649      	mov	r1, r9
 8009956:	414b      	adcs	r3, r1
 8009958:	607b      	str	r3, [r7, #4]
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009966:	4659      	mov	r1, fp
 8009968:	00cb      	lsls	r3, r1, #3
 800996a:	4651      	mov	r1, sl
 800996c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009970:	4651      	mov	r1, sl
 8009972:	00ca      	lsls	r2, r1, #3
 8009974:	4610      	mov	r0, r2
 8009976:	4619      	mov	r1, r3
 8009978:	4603      	mov	r3, r0
 800997a:	4642      	mov	r2, r8
 800997c:	189b      	adds	r3, r3, r2
 800997e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009980:	464b      	mov	r3, r9
 8009982:	460a      	mov	r2, r1
 8009984:	eb42 0303 	adc.w	r3, r2, r3
 8009988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800998a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	663b      	str	r3, [r7, #96]	; 0x60
 8009994:	667a      	str	r2, [r7, #100]	; 0x64
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80099a2:	4649      	mov	r1, r9
 80099a4:	008b      	lsls	r3, r1, #2
 80099a6:	4641      	mov	r1, r8
 80099a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ac:	4641      	mov	r1, r8
 80099ae:	008a      	lsls	r2, r1, #2
 80099b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099b4:	f7f7 f82e 	bl	8000a14 <__aeabi_uldivmod>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <UART_SetConfig+0x4e4>)
 80099be:	fba3 1302 	umull	r1, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2164      	movs	r1, #100	; 0x64
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	3332      	adds	r3, #50	; 0x32
 80099d0:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <UART_SetConfig+0x4e4>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4422      	add	r2, r4
 80099e4:	609a      	str	r2, [r3, #8]
}
 80099e6:	bf00      	nop
 80099e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099ec:	46bd      	mov	sp, r7
 80099ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099f2:	bf00      	nop
 80099f4:	51eb851f 	.word	0x51eb851f

080099f8 <arm_mat_trans_f32>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	8802      	ldrh	r2, [r0, #0]
 80099fe:	884b      	ldrh	r3, [r1, #2]
 8009a00:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009a04:	684f      	ldr	r7, [r1, #4]
 8009a06:	8840      	ldrh	r0, [r0, #2]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	d14c      	bne.n	8009aa8 <arm_mat_trans_f32+0xb0>
 8009a0e:	f8b1 e000 	ldrh.w	lr, [r1]
 8009a12:	4586      	cmp	lr, r0
 8009a14:	d148      	bne.n	8009aa8 <arm_mat_trans_f32+0xb0>
 8009a16:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8009a1a:	009c      	lsls	r4, r3, #2
 8009a1c:	f00e 0e03 	and.w	lr, lr, #3
 8009a20:	fb08 f904 	mul.w	r9, r8, r4
 8009a24:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8009a28:	011d      	lsls	r5, r3, #4
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009a30:	eb07 0a04 	add.w	sl, r7, r4
 8009a34:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009a38:	9201      	str	r2, [sp, #4]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	d01d      	beq.n	8009a80 <arm_mat_trans_f32+0x88>
 8009a44:	9900      	ldr	r1, [sp, #0]
 8009a46:	f10c 0210 	add.w	r2, ip, #16
 8009a4a:	4439      	add	r1, r7
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8009a52:	601e      	str	r6, [r3, #0]
 8009a54:	ed52 7a03 	vldr	s15, [r2, #-12]
 8009a58:	191e      	adds	r6, r3, r4
 8009a5a:	edc6 7a00 	vstr	s15, [r6]
 8009a5e:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8009a62:	600e      	str	r6, [r1, #0]
 8009a64:	ed52 7a01 	vldr	s15, [r2, #-4]
 8009a68:	190e      	adds	r6, r1, r4
 8009a6a:	3801      	subs	r0, #1
 8009a6c:	442b      	add	r3, r5
 8009a6e:	f102 0210 	add.w	r2, r2, #16
 8009a72:	edc6 7a00 	vstr	s15, [r6]
 8009a76:	4429      	add	r1, r5
 8009a78:	d1e9      	bne.n	8009a4e <arm_mat_trans_f32+0x56>
 8009a7a:	44dc      	add	ip, fp
 8009a7c:	eb09 0307 	add.w	r3, r9, r7
 8009a80:	f1be 0f00 	cmp.w	lr, #0
 8009a84:	d009      	beq.n	8009a9a <arm_mat_trans_f32+0xa2>
 8009a86:	4672      	mov	r2, lr
 8009a88:	4661      	mov	r1, ip
 8009a8a:	f851 0b04 	ldr.w	r0, [r1], #4
 8009a8e:	6018      	str	r0, [r3, #0]
 8009a90:	3a01      	subs	r2, #1
 8009a92:	4423      	add	r3, r4
 8009a94:	d1f9      	bne.n	8009a8a <arm_mat_trans_f32+0x92>
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	449c      	add	ip, r3
 8009a9a:	3704      	adds	r7, #4
 8009a9c:	4557      	cmp	r7, sl
 8009a9e:	d1cd      	bne.n	8009a3c <arm_mat_trans_f32+0x44>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	b003      	add	sp, #12
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	f06f 0002 	mvn.w	r0, #2
 8009aac:	e7f9      	b.n	8009aa2 <arm_mat_trans_f32+0xaa>
 8009aae:	bf00      	nop

08009ab0 <arm_mat_sub_f32>:
 8009ab0:	b4f0      	push	{r4, r5, r6, r7}
 8009ab2:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009abc:	6856      	ldr	r6, [r2, #4]
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	d15d      	bne.n	8009b7e <arm_mat_sub_f32+0xce>
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d15a      	bne.n	8009b7e <arm_mat_sub_f32+0xce>
 8009ac8:	8803      	ldrh	r3, [r0, #0]
 8009aca:	8844      	ldrh	r4, [r0, #2]
 8009acc:	fb04 f403 	mul.w	r4, r4, r3
 8009ad0:	08a5      	lsrs	r5, r4, #2
 8009ad2:	d032      	beq.n	8009b3a <arm_mat_sub_f32+0x8a>
 8009ad4:	f10c 0110 	add.w	r1, ip, #16
 8009ad8:	f107 0210 	add.w	r2, r7, #16
 8009adc:	f106 0310 	add.w	r3, r6, #16
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	ed12 7a04 	vldr	s14, [r2, #-16]
 8009ae6:	ed51 7a04 	vldr	s15, [r1, #-16]
 8009aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009aee:	3801      	subs	r0, #1
 8009af0:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009af4:	ed12 7a03 	vldr	s14, [r2, #-12]
 8009af8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b00:	f101 0110 	add.w	r1, r1, #16
 8009b04:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009b08:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009b0c:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8009b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b14:	f102 0210 	add.w	r2, r2, #16
 8009b18:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009b1c:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8009b20:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b28:	f103 0310 	add.w	r3, r3, #16
 8009b2c:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009b30:	d1d7      	bne.n	8009ae2 <arm_mat_sub_f32+0x32>
 8009b32:	012b      	lsls	r3, r5, #4
 8009b34:	449c      	add	ip, r3
 8009b36:	441f      	add	r7, r3
 8009b38:	441e      	add	r6, r3
 8009b3a:	f014 0403 	ands.w	r4, r4, #3
 8009b3e:	d01b      	beq.n	8009b78 <arm_mat_sub_f32+0xc8>
 8009b40:	eddc 7a00 	vldr	s15, [ip]
 8009b44:	ed97 7a00 	vldr	s14, [r7]
 8009b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b4c:	3c01      	subs	r4, #1
 8009b4e:	edc6 7a00 	vstr	s15, [r6]
 8009b52:	d011      	beq.n	8009b78 <arm_mat_sub_f32+0xc8>
 8009b54:	eddc 7a01 	vldr	s15, [ip, #4]
 8009b58:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b60:	2c01      	cmp	r4, #1
 8009b62:	edc6 7a01 	vstr	s15, [r6, #4]
 8009b66:	d007      	beq.n	8009b78 <arm_mat_sub_f32+0xc8>
 8009b68:	eddc 7a02 	vldr	s15, [ip, #8]
 8009b6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b74:	edc6 7a02 	vstr	s15, [r6, #8]
 8009b78:	2000      	movs	r0, #0
 8009b7a:	bcf0      	pop	{r4, r5, r6, r7}
 8009b7c:	4770      	bx	lr
 8009b7e:	f06f 0002 	mvn.w	r0, #2
 8009b82:	e7fa      	b.n	8009b7a <arm_mat_sub_f32+0xca>

08009b84 <arm_mat_mult_f32>:
 8009b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	8845      	ldrh	r5, [r0, #2]
 8009b8a:	880b      	ldrh	r3, [r1, #0]
 8009b8c:	8806      	ldrh	r6, [r0, #0]
 8009b8e:	6847      	ldr	r7, [r0, #4]
 8009b90:	6854      	ldr	r4, [r2, #4]
 8009b92:	6848      	ldr	r0, [r1, #4]
 8009b94:	b08b      	sub	sp, #44	; 0x2c
 8009b96:	42ab      	cmp	r3, r5
 8009b98:	9109      	str	r1, [sp, #36]	; 0x24
 8009b9a:	9604      	str	r6, [sp, #16]
 8009b9c:	8849      	ldrh	r1, [r1, #2]
 8009b9e:	f040 808a 	bne.w	8009cb6 <arm_mat_mult_f32+0x132>
 8009ba2:	8815      	ldrh	r5, [r2, #0]
 8009ba4:	42b5      	cmp	r5, r6
 8009ba6:	f040 8086 	bne.w	8009cb6 <arm_mat_mult_f32+0x132>
 8009baa:	8852      	ldrh	r2, [r2, #2]
 8009bac:	428a      	cmp	r2, r1
 8009bae:	f040 8082 	bne.w	8009cb6 <arm_mat_mult_f32+0x132>
 8009bb2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8009bb6:	1d01      	adds	r1, r0, #4
 8009bb8:	0116      	lsls	r6, r2, #4
 8009bba:	9108      	str	r1, [sp, #32]
 8009bbc:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8009bc0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8009bc4:	9101      	str	r1, [sp, #4]
 8009bc6:	fb06 f108 	mul.w	r1, r6, r8
 8009bca:	0095      	lsls	r5, r2, #2
 8009bcc:	9103      	str	r1, [sp, #12]
 8009bce:	00d2      	lsls	r2, r2, #3
 8009bd0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8009bd4:	f003 0903 	and.w	r9, r3, #3
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	f107 0b10 	add.w	fp, r7, #16
 8009bde:	eb04 0a05 	add.w	sl, r4, r5
 8009be2:	9107      	str	r1, [sp, #28]
 8009be4:	9202      	str	r2, [sp, #8]
 8009be6:	9306      	str	r3, [sp, #24]
 8009be8:	f1ab 0310 	sub.w	r3, fp, #16
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	9b07      	ldr	r3, [sp, #28]
 8009bf0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8009bf4:	eb03 0c0a 	add.w	ip, r3, sl
 8009bf8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009cc0 <arm_mat_mult_f32+0x13c>
 8009bfc:	f1b8 0f00 	cmp.w	r8, #0
 8009c00:	d053      	beq.n	8009caa <arm_mat_mult_f32+0x126>
 8009c02:	9b02      	ldr	r3, [sp, #8]
 8009c04:	4644      	mov	r4, r8
 8009c06:	18c1      	adds	r1, r0, r3
 8009c08:	4602      	mov	r2, r0
 8009c0a:	465b      	mov	r3, fp
 8009c0c:	ed92 6a00 	vldr	s12, [r2]
 8009c10:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009c14:	ed53 4a03 	vldr	s9, [r3, #-12]
 8009c18:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009c1c:	ed91 5a00 	vldr	s10, [r1]
 8009c20:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009c24:	1957      	adds	r7, r2, r5
 8009c26:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009c2a:	ed97 6a00 	vldr	s12, [r7]
 8009c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c32:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009c36:	194f      	adds	r7, r1, r5
 8009c38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009c3c:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009c40:	edd7 7a00 	vldr	s15, [r7]
 8009c44:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c4c:	3c01      	subs	r4, #1
 8009c4e:	4432      	add	r2, r6
 8009c50:	4431      	add	r1, r6
 8009c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c56:	f103 0310 	add.w	r3, r3, #16
 8009c5a:	d1d7      	bne.n	8009c0c <arm_mat_mult_f32+0x88>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	9a01      	ldr	r2, [sp, #4]
 8009c60:	4418      	add	r0, r3
 8009c62:	f1b9 0f00 	cmp.w	r9, #0
 8009c66:	d00b      	beq.n	8009c80 <arm_mat_mult_f32+0xfc>
 8009c68:	464b      	mov	r3, r9
 8009c6a:	edd0 6a00 	vldr	s13, [r0]
 8009c6e:	ecb2 7a01 	vldmia	r2!, {s14}
 8009c72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4428      	add	r0, r5
 8009c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c7e:	d1f4      	bne.n	8009c6a <arm_mat_mult_f32+0xe6>
 8009c80:	ecec 7a01 	vstmia	ip!, {s15}
 8009c84:	45d4      	cmp	ip, sl
 8009c86:	4670      	mov	r0, lr
 8009c88:	f10e 0e04 	add.w	lr, lr, #4
 8009c8c:	d1b4      	bne.n	8009bf8 <arm_mat_mult_f32+0x74>
 8009c8e:	9a01      	ldr	r2, [sp, #4]
 8009c90:	9b06      	ldr	r3, [sp, #24]
 8009c92:	4611      	mov	r1, r2
 8009c94:	4419      	add	r1, r3
 8009c96:	449b      	add	fp, r3
 8009c98:	9b04      	ldr	r3, [sp, #16]
 8009c9a:	9101      	str	r1, [sp, #4]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	44aa      	add	sl, r5
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	d004      	beq.n	8009cae <arm_mat_mult_f32+0x12a>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca6:	6858      	ldr	r0, [r3, #4]
 8009ca8:	e79e      	b.n	8009be8 <arm_mat_mult_f32+0x64>
 8009caa:	9a05      	ldr	r2, [sp, #20]
 8009cac:	e7d9      	b.n	8009c62 <arm_mat_mult_f32+0xde>
 8009cae:	4618      	mov	r0, r3
 8009cb0:	b00b      	add	sp, #44	; 0x2c
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	f06f 0002 	mvn.w	r0, #2
 8009cba:	b00b      	add	sp, #44	; 0x2c
 8009cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc0:	00000000 	.word	0x00000000

08009cc4 <arm_mat_inverse_f32>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	8843      	ldrh	r3, [r0, #2]
 8009cca:	8804      	ldrh	r4, [r0, #0]
 8009ccc:	684e      	ldr	r6, [r1, #4]
 8009cce:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	9603      	str	r6, [sp, #12]
 8009cda:	f040 80ea 	bne.w	8009eb2 <arm_mat_inverse_f32+0x1ee>
 8009cde:	880a      	ldrh	r2, [r1, #0]
 8009ce0:	884b      	ldrh	r3, [r1, #2]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	f040 80e5 	bne.w	8009eb2 <arm_mat_inverse_f32+0x1ee>
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	f040 80e2 	bne.w	8009eb2 <arm_mat_inverse_f32+0x1ee>
 8009cee:	9005      	str	r0, [sp, #20]
 8009cf0:	b30c      	cbz	r4, 8009d36 <arm_mat_inverse_f32+0x72>
 8009cf2:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8009cf6:	1e67      	subs	r7, r4, #1
 8009cf8:	f846 bb04 	str.w	fp, [r6], #4
 8009cfc:	d01b      	beq.n	8009d36 <arm_mat_inverse_f32+0x72>
 8009cfe:	f04f 0801 	mov.w	r8, #1
 8009d02:	00ba      	lsls	r2, r7, #2
 8009d04:	eb06 0a02 	add.w	sl, r6, r2
 8009d08:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f000 f97e 	bl	800a010 <memset>
 8009d14:	eb0a 0605 	add.w	r6, sl, r5
 8009d18:	462a      	mov	r2, r5
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f1b8 0f00 	cmp.w	r8, #0
 8009d22:	f000 80cb 	beq.w	8009ebc <arm_mat_inverse_f32+0x1f8>
 8009d26:	f000 f973 	bl	800a010 <memset>
 8009d2a:	3f01      	subs	r7, #1
 8009d2c:	f108 0801 	add.w	r8, r8, #1
 8009d30:	f846 bb04 	str.w	fp, [r6], #4
 8009d34:	d1e5      	bne.n	8009d02 <arm_mat_inverse_f32+0x3e>
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80b5 	beq.w	8009ea8 <arm_mat_inverse_f32+0x1e4>
 8009d3e:	009d      	lsls	r5, r3, #2
 8009d40:	eb09 0205 	add.w	r2, r9, r5
 8009d44:	46cc      	mov	ip, r9
 8009d46:	9202      	str	r2, [sp, #8]
 8009d48:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009d4c:	1d2a      	adds	r2, r5, #4
 8009d4e:	9204      	str	r2, [sp, #16]
 8009d50:	462f      	mov	r7, r5
 8009d52:	469e      	mov	lr, r3
 8009d54:	2600      	movs	r6, #0
 8009d56:	9b02      	ldr	r3, [sp, #8]
 8009d58:	eddc 6a00 	vldr	s13, [ip]
 8009d5c:	42b4      	cmp	r4, r6
 8009d5e:	eba3 0b07 	sub.w	fp, r3, r7
 8009d62:	f000 80a1 	beq.w	8009ea8 <arm_mat_inverse_f32+0x1e4>
 8009d66:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8009ecc <arm_mat_inverse_f32+0x208>
 8009d6a:	4632      	mov	r2, r6
 8009d6c:	4663      	mov	r3, ip
 8009d6e:	e00b      	b.n	8009d88 <arm_mat_inverse_f32+0xc4>
 8009d70:	eef4 7a47 	vcmp.f32	s15, s14
 8009d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d78:	f102 0201 	add.w	r2, r2, #1
 8009d7c:	bfc8      	it	gt
 8009d7e:	eeb0 7a67 	vmovgt.f32	s14, s15
 8009d82:	42a2      	cmp	r2, r4
 8009d84:	442b      	add	r3, r5
 8009d86:	d014      	beq.n	8009db2 <arm_mat_inverse_f32+0xee>
 8009d88:	edd3 7a00 	vldr	s15, [r3]
 8009d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	eeb1 6a67 	vneg.f32	s12, s15
 8009d98:	dcea      	bgt.n	8009d70 <arm_mat_inverse_f32+0xac>
 8009d9a:	eeb4 6a47 	vcmp.f32	s12, s14
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	f102 0201 	add.w	r2, r2, #1
 8009da6:	bfc8      	it	gt
 8009da8:	eeb0 7a46 	vmovgt.f32	s14, s12
 8009dac:	42a2      	cmp	r2, r4
 8009dae:	442b      	add	r3, r5
 8009db0:	d1ea      	bne.n	8009d88 <arm_mat_inverse_f32+0xc4>
 8009db2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dba:	d075      	beq.n	8009ea8 <arm_mat_inverse_f32+0x1e4>
 8009dbc:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc4:	d070      	beq.n	8009ea8 <arm_mat_inverse_f32+0x1e4>
 8009dc6:	4672      	mov	r2, lr
 8009dc8:	4663      	mov	r3, ip
 8009dca:	ed93 7a00 	vldr	s14, [r3]
 8009dce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dd2:	3a01      	subs	r2, #1
 8009dd4:	ece3 7a01 	vstmia	r3!, {s15}
 8009dd8:	d1f7      	bne.n	8009dca <arm_mat_inverse_f32+0x106>
 8009dda:	9901      	ldr	r1, [sp, #4]
 8009ddc:	464b      	mov	r3, r9
 8009dde:	ed93 7a00 	vldr	s14, [r3]
 8009de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009de6:	3901      	subs	r1, #1
 8009de8:	ece3 7a01 	vstmia	r3!, {s15}
 8009dec:	d1f7      	bne.n	8009dde <arm_mat_inverse_f32+0x11a>
 8009dee:	9803      	ldr	r0, [sp, #12]
 8009df0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8009df4:	42b1      	cmp	r1, r6
 8009df6:	d039      	beq.n	8009e6c <arm_mat_inverse_f32+0x1a8>
 8009df8:	eddb 6a00 	vldr	s13, [fp]
 8009dfc:	465a      	mov	r2, fp
 8009dfe:	4673      	mov	r3, lr
 8009e00:	46e2      	mov	sl, ip
 8009e02:	ecba 7a01 	vldmia	sl!, {s14}
 8009e06:	edd2 7a00 	vldr	s15, [r2]
 8009e0a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e14:	ece2 7a01 	vstmia	r2!, {s15}
 8009e18:	d1f3      	bne.n	8009e02 <arm_mat_inverse_f32+0x13e>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	44bb      	add	fp, r7
 8009e1e:	4602      	mov	r2, r0
 8009e20:	46ca      	mov	sl, r9
 8009e22:	ecba 7a01 	vldmia	sl!, {s14}
 8009e26:	edd2 7a00 	vldr	s15, [r2]
 8009e2a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e34:	ece2 7a01 	vstmia	r2!, {s15}
 8009e38:	d1f3      	bne.n	8009e22 <arm_mat_inverse_f32+0x15e>
 8009e3a:	4428      	add	r0, r5
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	428c      	cmp	r4, r1
 8009e40:	44c3      	add	fp, r8
 8009e42:	d1d7      	bne.n	8009df4 <arm_mat_inverse_f32+0x130>
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	f1be 0e01 	subs.w	lr, lr, #1
 8009e4a:	f106 0601 	add.w	r6, r6, #1
 8009e4e:	449c      	add	ip, r3
 8009e50:	f1a7 0704 	sub.w	r7, r7, #4
 8009e54:	44a9      	add	r9, r5
 8009e56:	f47f af7e 	bne.w	8009d56 <arm_mat_inverse_f32+0x92>
 8009e5a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	d006      	beq.n	8009e72 <arm_mat_inverse_f32+0x1ae>
 8009e64:	2000      	movs	r0, #0
 8009e66:	b007      	add	sp, #28
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	44bb      	add	fp, r7
 8009e6e:	4428      	add	r0, r5
 8009e70:	e7e4      	b.n	8009e3c <arm_mat_inverse_f32+0x178>
 8009e72:	9b05      	ldr	r3, [sp, #20]
 8009e74:	9a01      	ldr	r2, [sp, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	edd3 7a00 	vldr	s15, [r3]
 8009e7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e80:	fb02 f204 	mul.w	r2, r2, r4
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	4614      	mov	r4, r2
 8009e8a:	bf08      	it	eq
 8009e8c:	3304      	addeq	r3, #4
 8009e8e:	d007      	beq.n	8009ea0 <arm_mat_inverse_f32+0x1dc>
 8009e90:	e7e8      	b.n	8009e64 <arm_mat_inverse_f32+0x1a0>
 8009e92:	ecf3 7a01 	vldmia	r3!, {s15}
 8009e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9e:	d1e1      	bne.n	8009e64 <arm_mat_inverse_f32+0x1a0>
 8009ea0:	f10e 0e01 	add.w	lr, lr, #1
 8009ea4:	4574      	cmp	r4, lr
 8009ea6:	d1f4      	bne.n	8009e92 <arm_mat_inverse_f32+0x1ce>
 8009ea8:	f06f 0004 	mvn.w	r0, #4
 8009eac:	b007      	add	sp, #28
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	f06f 0002 	mvn.w	r0, #2
 8009eb6:	b007      	add	sp, #28
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	4656      	mov	r6, sl
 8009ebe:	3f01      	subs	r7, #1
 8009ec0:	f846 bb04 	str.w	fp, [r6], #4
 8009ec4:	f47f af1b 	bne.w	8009cfe <arm_mat_inverse_f32+0x3a>
 8009ec8:	e735      	b.n	8009d36 <arm_mat_inverse_f32+0x72>
 8009eca:	bf00      	nop
 8009ecc:	00000000 	.word	0x00000000

08009ed0 <arm_mat_init_f32>:
 8009ed0:	8001      	strh	r1, [r0, #0]
 8009ed2:	8042      	strh	r2, [r0, #2]
 8009ed4:	6043      	str	r3, [r0, #4]
 8009ed6:	4770      	bx	lr

08009ed8 <arm_mat_add_f32>:
 8009ed8:	b4f0      	push	{r4, r5, r6, r7}
 8009eda:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009ede:	6803      	ldr	r3, [r0, #0]
 8009ee0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009ee4:	6856      	ldr	r6, [r2, #4]
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	d15d      	bne.n	8009fa6 <arm_mat_add_f32+0xce>
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d15a      	bne.n	8009fa6 <arm_mat_add_f32+0xce>
 8009ef0:	8803      	ldrh	r3, [r0, #0]
 8009ef2:	8844      	ldrh	r4, [r0, #2]
 8009ef4:	fb04 f403 	mul.w	r4, r4, r3
 8009ef8:	08a5      	lsrs	r5, r4, #2
 8009efa:	d032      	beq.n	8009f62 <arm_mat_add_f32+0x8a>
 8009efc:	f10c 0110 	add.w	r1, ip, #16
 8009f00:	f107 0210 	add.w	r2, r7, #16
 8009f04:	f106 0310 	add.w	r3, r6, #16
 8009f08:	4628      	mov	r0, r5
 8009f0a:	ed12 7a04 	vldr	s14, [r2, #-16]
 8009f0e:	ed51 7a04 	vldr	s15, [r1, #-16]
 8009f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f16:	3801      	subs	r0, #1
 8009f18:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009f1c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8009f20:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f28:	f101 0110 	add.w	r1, r1, #16
 8009f2c:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009f30:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009f34:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8009f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f3c:	f102 0210 	add.w	r2, r2, #16
 8009f40:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009f44:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8009f48:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f50:	f103 0310 	add.w	r3, r3, #16
 8009f54:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009f58:	d1d7      	bne.n	8009f0a <arm_mat_add_f32+0x32>
 8009f5a:	012b      	lsls	r3, r5, #4
 8009f5c:	449c      	add	ip, r3
 8009f5e:	441f      	add	r7, r3
 8009f60:	441e      	add	r6, r3
 8009f62:	f014 0403 	ands.w	r4, r4, #3
 8009f66:	d01b      	beq.n	8009fa0 <arm_mat_add_f32+0xc8>
 8009f68:	edd7 7a00 	vldr	s15, [r7]
 8009f6c:	ed9c 7a00 	vldr	s14, [ip]
 8009f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f74:	3c01      	subs	r4, #1
 8009f76:	edc6 7a00 	vstr	s15, [r6]
 8009f7a:	d011      	beq.n	8009fa0 <arm_mat_add_f32+0xc8>
 8009f7c:	eddc 7a01 	vldr	s15, [ip, #4]
 8009f80:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f88:	2c01      	cmp	r4, #1
 8009f8a:	edc6 7a01 	vstr	s15, [r6, #4]
 8009f8e:	d007      	beq.n	8009fa0 <arm_mat_add_f32+0xc8>
 8009f90:	eddc 7a02 	vldr	s15, [ip, #8]
 8009f94:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f9c:	edc6 7a02 	vstr	s15, [r6, #8]
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8009fa4:	4770      	bx	lr
 8009fa6:	f06f 0002 	mvn.w	r0, #2
 8009faa:	e7fa      	b.n	8009fa2 <arm_mat_add_f32+0xca>

08009fac <__libc_init_array>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	4d0d      	ldr	r5, [pc, #52]	; (8009fe4 <__libc_init_array+0x38>)
 8009fb0:	4c0d      	ldr	r4, [pc, #52]	; (8009fe8 <__libc_init_array+0x3c>)
 8009fb2:	1b64      	subs	r4, r4, r5
 8009fb4:	10a4      	asrs	r4, r4, #2
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	42a6      	cmp	r6, r4
 8009fba:	d109      	bne.n	8009fd0 <__libc_init_array+0x24>
 8009fbc:	4d0b      	ldr	r5, [pc, #44]	; (8009fec <__libc_init_array+0x40>)
 8009fbe:	4c0c      	ldr	r4, [pc, #48]	; (8009ff0 <__libc_init_array+0x44>)
 8009fc0:	f000 f82e 	bl	800a020 <_init>
 8009fc4:	1b64      	subs	r4, r4, r5
 8009fc6:	10a4      	asrs	r4, r4, #2
 8009fc8:	2600      	movs	r6, #0
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	d105      	bne.n	8009fda <__libc_init_array+0x2e>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd4:	4798      	blx	r3
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	e7ee      	b.n	8009fb8 <__libc_init_array+0xc>
 8009fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fde:	4798      	blx	r3
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	e7f2      	b.n	8009fca <__libc_init_array+0x1e>
 8009fe4:	0800a060 	.word	0x0800a060
 8009fe8:	0800a060 	.word	0x0800a060
 8009fec:	0800a060 	.word	0x0800a060
 8009ff0:	0800a064 	.word	0x0800a064

08009ff4 <memcpy>:
 8009ff4:	440a      	add	r2, r1
 8009ff6:	4291      	cmp	r1, r2
 8009ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ffc:	d100      	bne.n	800a000 <memcpy+0xc>
 8009ffe:	4770      	bx	lr
 800a000:	b510      	push	{r4, lr}
 800a002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a00a:	4291      	cmp	r1, r2
 800a00c:	d1f9      	bne.n	800a002 <memcpy+0xe>
 800a00e:	bd10      	pop	{r4, pc}

0800a010 <memset>:
 800a010:	4402      	add	r2, r0
 800a012:	4603      	mov	r3, r0
 800a014:	4293      	cmp	r3, r2
 800a016:	d100      	bne.n	800a01a <memset+0xa>
 800a018:	4770      	bx	lr
 800a01a:	f803 1b01 	strb.w	r1, [r3], #1
 800a01e:	e7f9      	b.n	800a014 <memset+0x4>

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
