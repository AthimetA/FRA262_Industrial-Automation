
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad8c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af44  0800af44  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af4c  0800af4c  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800af54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000408  0800b358  00020408  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0800b358  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171bd  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f54  00000000  00000000  000375f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003b678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769c  00000000  00000000  0003c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015722  00000000  00000000  00053d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ebc  00000000  00000000  00069446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fc302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  000fc3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00100c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000408 	.word	0x20000408
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800af0c 	.word	0x0800af0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000040c 	.word	0x2000040c
 80001d4:	0800af0c 	.word	0x0800af0c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a f826 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a f81d 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a f814 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a f80b 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a f802 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f009 fff9 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f009 fff0 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f009 ffe7 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f009 ffde 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f009 ffd5 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f009 ffcc 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f009 ffc3 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f009 ffba 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f009 ffb1 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f009 ffa8 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f009 ff9e 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f009 ff94 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f009 ff8a 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f009 ff80 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f009 ff76 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f009 ff6c 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f009 ff62 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f009 ff58 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f009 ff4e 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f009 ff44 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f009 ff3a 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f009 ff30 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f009 ff26 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f009 ff1c 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f009 ff12 	bl	800adbc <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f009 ff08 	bl	800adbc <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 fc92 	bl	800a8e4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 fc88 	bl	800a8e4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 fc7e 	bl	800a8e4 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f009 fd38 	bl	800aa70 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f009 fd2c 	bl	800aa70 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 fc9c 	bl	800aa70 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 fc8b 	bl	800aa70 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 fc7a 	bl	800aa70 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f009 fe13 	bl	800adc4 <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 fc54 	bl	800aa70 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 fbd9 	bl	800a99c <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 fc32 	bl	800aa70 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 fc21 	bl	800aa70 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f009 fdba 	bl	800adc4 <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 fca1 	bl	800abb0 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 fbf0 	bl	800aa70 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 fbdf 	bl	800aa70 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 fbce 	bl	800aa70 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f009 fd67 	bl	800adc4 <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fbac 	bl	800aa70 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fb31 	bl	800a99c <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 fb8a 	bl	800aa70 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <PIDVelocityController_Init>:
 */

#include "PIDVelocity.h"
#include "Trajectory.h"

void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 80013ba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
//    	pidVelocity->KpUse = pidVelocity->Kp;
//    }

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*errorDZ) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 6a00 	vldr	s13, [r3]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * errorDZ);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 7a01 	vldr	s14, [r3, #4]
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = pidVelocity->Kd *(errorDZ -(2.0* pidVelocity->Last1Error) + pidVelocity->Last2Error)	;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f83d 	bl	80004a0 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f7ff f838 	bl	80004a0 <__aeabi_f2d>
 8001430:	4680      	mov	r8, r0
 8001432:	4689      	mov	r9, r1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f831 	bl	80004a0 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	f7fe fecf 	bl	80001e4 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4640      	mov	r0, r8
 800144c:	4649      	mov	r1, r9
 800144e:	f7fe fec7 	bl	80001e0 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4690      	mov	r8, r2
 8001458:	4699      	mov	r9, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f81e 	bl	80004a0 <__aeabi_f2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7ff f86a 	bl	8000550 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fa96 	bl	80009b4 <__aeabi_d2f>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ed93 7a07 	vldr	s14, [r3, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edd3 7a05 	vldr	s15, [r3, #20]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a4:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	dd04      	ble.n	80014d8 <PIDVelocityController_Update+0x11e>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	e00e      	b.n	80014f6 <PIDVelocityController_Update+0x13c>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d503      	bpl.n	80014f6 <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last1Error = errorDZ;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	621a      	str	r2, [r3, #32]

	return pidVelocity->ControllerOut;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001520 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	61da      	str	r2, [r3, #28]

	  Robot -> flagSethome = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  Robot -> flagStartTime = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  Robot -> RunningFlag = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	  Robot -> MotorIsOn = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001594:	edd7 7a01 	vldr	s15, [r7, #4]
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d50e      	bpl.n	80015c0 <AbsVal+0x36>
  {
    return number*-1.0;
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe ff7c 	bl	80004a0 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa00 	bl	80009b4 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef1 7a67 	vneg.f32	s15, s15
 80015be:	e001      	b.n	80015c4 <AbsVal+0x3a>
  }
  else
  {
    return number;
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015dc:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	traject -> Amax = 0.0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 0.0;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d502      	bpl.n	800163a <CoefficientAndTimeCalculation+0x6a>
	{
		gain = -1.0;
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <CoefficientAndTimeCalculation+0x19c>)
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e002      	b.n	8001640 <CoefficientAndTimeCalculation+0x70>
	}
	else
	{
		gain = 1.0;
 800163a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800163e:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float Vcheck = AbsVal(traject -> QRelative);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f7ff ff9e 	bl	800158a <AbsVal>
 800164e:	ed87 0a04 	vstr	s0, [r7, #16]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800165a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	db12      	blt.n	800168a <CoefficientAndTimeCalculation+0xba>
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d509      	bpl.n	800168a <CoefficientAndTimeCalculation+0xba>
	{
		traject -> Amax =  5.73;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 800167a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a3d      	ldr	r2, [pc, #244]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001680:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  3.0;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <CoefficientAndTimeCalculation+0x1a8>)
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e0a6      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 20.0  && Vcheck < 40.0)
 800168a:	edd7 7a04 	vldr	s15, [r7, #16]
 800168e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	db12      	blt.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d509      	bpl.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
	{
		traject -> Amax =  5.73;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016b2:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016b8:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  6.0;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a30      	ldr	r2, [pc, #192]	; (8001780 <CoefficientAndTimeCalculation+0x1b0>)
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e08a      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 40.0  && Vcheck < 60.0)
 80016c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	db12      	blt.n	80016fa <CoefficientAndTimeCalculation+0x12a>
 80016d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d509      	bpl.n	80016fa <CoefficientAndTimeCalculation+0x12a>
	{
		traject -> Amax =  5.73;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016ea:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016f0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  9.0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <CoefficientAndTimeCalculation+0x1b8>)
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e06e      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 80016fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 8001702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	db12      	blt.n	8001732 <CoefficientAndTimeCalculation+0x162>
 800170c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001710:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 8001714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d509      	bpl.n	8001732 <CoefficientAndTimeCalculation+0x162>
	{
		traject -> Amax =  5.73;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 8001722:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001728:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  15.0;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <CoefficientAndTimeCalculation+0x1c0>)
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e052      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	db2f      	blt.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
 8001744:	edd7 7a04 	vldr	s15, [r7, #16]
 8001748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d526      	bpl.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
	{
		traject -> Amax =  17.9;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <CoefficientAndTimeCalculation+0x1c4>)
 800175a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  286.5;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <CoefficientAndTimeCalculation+0x1c8>)
 8001760:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  24;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <CoefficientAndTimeCalculation+0x1cc>)
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e036      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 800176a:	bf00      	nop
 800176c:	bf800000 	.word	0xbf800000
 8001770:	40b75c29 	.word	0x40b75c29
 8001774:	42e53333 	.word	0x42e53333
 8001778:	40400000 	.word	0x40400000
 800177c:	42200000 	.word	0x42200000
 8001780:	40c00000 	.word	0x40c00000
 8001784:	42700000 	.word	0x42700000
 8001788:	41100000 	.word	0x41100000
 800178c:	42c80000 	.word	0x42c80000
 8001790:	41700000 	.word	0x41700000
 8001794:	418f3333 	.word	0x418f3333
 8001798:	438f4000 	.word	0x438f4000
 800179c:	41c00000 	.word	0x41c00000
 80017a0:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 80017a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a8:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	db10      	blt.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	{
		traject -> Amax =  22.92;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <CoefficientAndTimeCalculation+0x1fc>)
 80017ba:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  573;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <CoefficientAndTimeCalculation+0x200>)
 80017c0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  54;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <CoefficientAndTimeCalculation+0x204>)
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 80017ca:	bf00      	nop
 80017cc:	41b75c29 	.word	0x41b75c29
 80017d0:	440f4000 	.word	0x440f4000
 80017d4:	42580000 	.word	0x42580000
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a02 	vldr	s14, [r3, #8]
 80017de:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	ed93 7a01 	vldr	s14, [r3, #4]
 8001806:	edd7 7a05 	vldr	s15, [r7, #20]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edd3 6a00 	vldr	s13, [r3]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ed93 6a02 	vldr	s12, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edd3 6a02 	vldr	s13, [r3, #8]
 8001844:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 6a00 	vldr	s13, [r3]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	ed93 7a01 	vldr	s14, [r3, #4]
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 6a02 	vldr	s13, [r3, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 7a01 	vldr	s15, [r3, #4]
 800188a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	ed93 6a02 	vldr	s12, [r3, #8]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edd3 6a00 	vldr	s13, [r3]
 800189a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f852 	bl	80009b4 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef1 7a67 	vneg.f32	s15, s15
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fdb7 	bl	80004a0 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f83b 	bl	80009b4 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	edd3 6a01 	vldr	s13, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd75 	bl	80004a0 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7fe fff9 	bl	80009b4 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef1 7a67 	vneg.f32	s15, s15
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fd51 	bl	80004a0 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fbeb 	bl	80001e0 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7fe ffcf 	bl	80009b4 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 6a07 	vldr	s13, [r3, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001c60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001d12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001db8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001dc4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001de2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ea4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ebe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f84:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800200a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800200e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002012:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002016:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002038:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800204e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002058:	ee66 7a27 	vmul.f32	s15, s12, s15
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002064:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800207a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800207e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002082:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800209a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800209e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800212e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002138:	ee66 7a27 	vmul.f32	s15, s12, s15
 800213c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002140:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002144:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800215a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800215e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002162:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800216a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800217a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800219e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800220e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002218:	ee66 7a27 	vmul.f32	s15, s12, s15
 800221c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002220:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002224:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800223a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800223e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002242:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800225a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	0000      	movs	r0, r0
	...

08002278 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228c:	1a84      	subs	r4, r0, r2
 800228e:	eb61 0503 	sbc.w	r5, r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe f925 	bl	80004e4 <__aeabi_ul2d>
 800229a:	a396      	add	r3, pc, #600	; (adr r3, 80024f4 <TrajectoryEvaluation+0x27c>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa80 	bl	80007a4 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fb82 	bl	80009b4 <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a8f      	ldr	r2, [pc, #572]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	f2c0 8084 	blt.w	80023d0 <TrajectoryEvaluation+0x158>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd78      	ble.n	80023d0 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80022ee:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	ed93 7a03 	vldr	s14, [r3, #12]
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002310:	edd3 6a00 	vldr	s13, [r3]
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	edd3 6a03 	vldr	s13, [r3, #12]
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800235c:	ed93 6a00 	vldr	s12, [r3]
 8002360:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002378:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800237c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800238c:	ed93 6a00 	vldr	s12, [r3]
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800239e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80023ce:	e37e      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	f200 808a 	bhi.w	80024fc <TrajectoryEvaluation+0x284>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	dd7e      	ble.n	80024fc <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	ed93 7a04 	vldr	s14, [r3, #16]
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	ed93 7a04 	vldr	s14, [r3, #16]
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edd3 6a04 	vldr	s13, [r3, #16]
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800247c:	ed93 6a00 	vldr	s12, [r3]
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee26 6a27 	vmul.f32	s12, s12, s15
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002498:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800249c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024ac:	ed93 6a00 	vldr	s12, [r3]
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80024ee:	e2ee      	b.n	8002ace <TrajectoryEvaluation+0x856>
 80024f0:	20000424 	.word	0x20000424
 80024f4:	00000000 	.word	0x00000000
 80024f8:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	f200 8084 	bhi.w	800261c <TrajectoryEvaluation+0x3a4>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd78      	ble.n	800261c <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ed93 7a05 	vldr	s14, [r3, #20]
 800253a:	4b80      	ldr	r3, [pc, #512]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	ed93 7a05 	vldr	s14, [r3, #20]
 800255a:	4b78      	ldr	r3, [pc, #480]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025a8:	ed93 6a00 	vldr	s12, [r3]
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025c4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025d8:	ed93 6a00 	vldr	s12, [r3]
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80025ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800261a:	e258      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	f200 8086 	bhi.w	8002740 <TrajectoryEvaluation+0x4c8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	dd7a      	ble.n	8002740 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	ed93 7a06 	vldr	s14, [r3, #24]
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	ed93 7a06 	vldr	s14, [r3, #24]
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800267c:	edd3 6a00 	vldr	s13, [r3]
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	edd3 6a06 	vldr	s13, [r3, #24]
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026c8:	ed93 6a00 	vldr	s12, [r3]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80026e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026f8:	ed93 6a00 	vldr	s12, [r3]
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800270e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800273a:	e1c8      	b.n	8002ace <TrajectoryEvaluation+0x856>
 800273c:	20000424 	.word	0x20000424
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002746:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	f200 8084 	bhi.w	8002860 <TrajectoryEvaluation+0x5e8>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	dd78      	ble.n	8002860 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	ed93 7a07 	vldr	s14, [r3, #28]
 800277e:	4b80      	ldr	r3, [pc, #512]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	ed93 7a07 	vldr	s14, [r3, #28]
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a0:	edd3 6a00 	vldr	s13, [r3]
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027ec:	ed93 6a00 	vldr	s12, [r3]
 80027f0:	4b63      	ldr	r3, [pc, #396]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002808:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800280c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <TrajectoryEvaluation+0x708>)
 800281c:	ed93 6a00 	vldr	s12, [r3]
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee66 7a27 	vmul.f32	s15, s12, s15
 800282a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002832:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800285e:	e136      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	f200 8086 	bhi.w	8002984 <TrajectoryEvaluation+0x70c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800287e:	4b40      	ldr	r3, [pc, #256]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	dd7a      	ble.n	8002984 <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ed93 7a08 	vldr	s14, [r3, #32]
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	ed93 7a08 	vldr	s14, [r3, #32]
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c0:	edd3 6a00 	vldr	s13, [r3]
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	edd3 6a08 	vldr	s13, [r3, #32]
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <TrajectoryEvaluation+0x708>)
 800290c:	ed93 6a00 	vldr	s12, [r3]
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <TrajectoryEvaluation+0x708>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002928:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800292c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <TrajectoryEvaluation+0x708>)
 800293c:	ed93 6a00 	vldr	s12, [r3]
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800294a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800294e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002952:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800297e:	e0a6      	b.n	8002ace <TrajectoryEvaluation+0x856>
 8002980:	20000424 	.word	0x20000424
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	f200 8084 	bhi.w	8002aa4 <TrajectoryEvaluation+0x82c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd78      	ble.n	8002aa4 <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a30:	ed93 6a00 	vldr	s12, [r3]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a4c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002aa2:	e014      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 8002ace:	bf00      	nop
}
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000424 	.word	0x20000424

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae2:	f002 f835 	bl	8004b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae6:	f000 f8ad 	bl	8002c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aea:	f000 fb2d 	bl	8003148 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aee:	f000 fb03 	bl	80030f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002af2:	f000 fad5 	bl	80030a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002af6:	f000 f90d 	bl	8002d14 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002afa:	f000 f939 	bl	8002d70 <MX_TIM1_Init>
  MX_TIM11_Init();
 8002afe:	f000 faab 	bl	8003058 <MX_TIM11_Init>
  MX_TIM2_Init();
 8002b02:	f000 f9b9 	bl	8002e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b06:	f000 fa0b 	bl	8002f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b0a:	f000 fa57 	bl	8002fbc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //----UART-----//
  Ringbuf_Init();
 8002b0e:	f000 fda1 	bl	8003654 <Ringbuf_Init>
  //  HAL_UART_Receive_DMA(&huart2, RxDataBuffer, 32);
  //----UART-----//
  KalmanMatrixInit(&KalmanVar);
 8002b12:	483c      	ldr	r0, [pc, #240]	; (8002c04 <main+0x128>)
 8002b14:	f7fe f920 	bl	8000d58 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	483b      	ldr	r0, [pc, #236]	; (8002c08 <main+0x12c>)
 8002b1c:	f005 fc8a 	bl	8008434 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002b20:	483a      	ldr	r0, [pc, #232]	; (8002c0c <main+0x130>)
 8002b22:	f005 fbd5 	bl	80082d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b26:	213c      	movs	r1, #60	; 0x3c
 8002b28:	4839      	ldr	r0, [pc, #228]	; (8002c10 <main+0x134>)
 8002b2a:	f005 fdd9 	bl	80086e0 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <main+0x138>)
 8002b38:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <main+0x138>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <main+0x138>)
 8002b40:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <main+0x138>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <main+0x13c>)
 8002b48:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002b4a:	4834      	ldr	r0, [pc, #208]	; (8002c1c <main+0x140>)
 8002b4c:	f7fe fc0f 	bl	800136e <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 8002b50:	4833      	ldr	r0, [pc, #204]	; (8002c20 <main+0x144>)
 8002b52:	f7fe fc0c 	bl	800136e <PIDVelocityController_Init>

  UARTState = normOperation;
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <main+0x148>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
  RobotState = NormM;
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <main+0x14c>)
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RobotstateManagement();
 8002b62:	f001 fa6f 	bl	8004044 <RobotstateManagement>
	  EndEffstateManagement();
 8002b66:	f001 fb69 	bl	800423c <EndEffstateManagement>
	  if(Micros() - ControlLoopTime >= 1000)
 8002b6a:	f000 fd5b 	bl	8003624 <Micros>
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <main+0x150>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	1a84      	subs	r4, r0, r2
 8002b76:	eb61 0503 	sbc.w	r5, r1, r3
 8002b7a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002b7e:	f175 0300 	sbcs.w	r3, r5, #0
 8002b82:	d3ee      	bcc.n	8002b62 <main+0x86>
	  {
		ControlLoopTime  = Micros();
 8002b84:	f000 fd4e 	bl	8003624 <Micros>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4927      	ldr	r1, [pc, #156]	; (8002c2c <main+0x150>)
 8002b8e:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002b92:	f000 fd47 	bl	8003624 <Micros>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4925      	ldr	r1, [pc, #148]	; (8002c30 <main+0x154>)
 8002b9c:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8002ba0:	f000 fb82 	bl	80032a8 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <main+0x158>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	4815      	ldr	r0, [pc, #84]	; (8002c04 <main+0x128>)
 8002bb0:	f7fe fab0 	bl	8001114 <KalmanFilterFunction>
//		KalmanFilterFunction(&KalmanVar,VelocityDeg);
		Robot.Position = PositionDeg[0];
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <main+0x158>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <main+0x15c>)
 8002bba:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <main+0x128>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <main+0x15c>)
 8002bc4:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8002bc6:	f000 fc57 	bl	8003478 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8002bca:	f000 fd2b 	bl	8003624 <Micros>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	491a      	ldr	r1, [pc, #104]	; (8002c3c <main+0x160>)
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStopTime = Micros();
 8002bd8:	f000 fd24 	bl	8003624 <Micros>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <main+0x160>)
 8002be2:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <main+0x160>)
 8002be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <main+0x154>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	ebb0 0802 	subs.w	r8, r0, r2
 8002bf6:	eb61 0903 	sbc.w	r9, r1, r3
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <main+0x164>)
 8002bfc:	e9c3 8900 	strd	r8, r9, [r3]
	  RobotstateManagement();
 8002c00:	e7af      	b.n	8002b62 <main+0x86>
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	2000047c 	.word	0x2000047c
 8002c0c:	2000059c 	.word	0x2000059c
 8002c10:	200004c4 	.word	0x200004c4
 8002c14:	200007a0 	.word	0x200007a0
 8002c18:	200007ac 	.word	0x200007ac
 8002c1c:	2000038c 	.word	0x2000038c
 8002c20:	200003c0 	.word	0x200003c0
 8002c24:	20000718 	.word	0x20000718
 8002c28:	20000719 	.word	0x20000719
 8002c2c:	20000790 	.word	0x20000790
 8002c30:	20000888 	.word	0x20000888
 8002c34:	200007b0 	.word	0x200007b0
 8002c38:	200006e8 	.word	0x200006e8
 8002c3c:	20000890 	.word	0x20000890
 8002c40:	20000898 	.word	0x20000898

08002c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	; 0x50
 8002c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	2230      	movs	r2, #48	; 0x30
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 f952 	bl	800aefc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	; 0x40
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002caa:	2302      	movs	r3, #2
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002cb8:	2364      	movs	r3, #100	; 0x64
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc4:	f107 0320 	add.w	r3, r7, #32
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fe19 	bl	8007900 <HAL_RCC_OscConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cd4:	f001 fc21 	bl	800451a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd8:	230f      	movs	r3, #15
 8002cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 f87b 	bl	8007df0 <HAL_RCC_ClockConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d00:	f001 fc0b 	bl	800451a <Error_Handler>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3750      	adds	r7, #80	; 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000

08002d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <MX_I2C1_Init+0x54>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <MX_I2C1_Init+0x58>)
 8002d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d52:	f002 fe61 	bl	8005a18 <HAL_I2C_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d5c:	f001 fbdd 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000428 	.word	0x20000428
 8002d68:	40005400 	.word	0x40005400
 8002d6c:	00061a80 	.word	0x00061a80

08002d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	615a      	str	r2, [r3, #20]
 8002d92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	2220      	movs	r2, #32
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f008 f8ae 	bl	800aefc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <MX_TIM1_Init+0x104>)
 8002da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002db4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dcc:	4828      	ldr	r0, [pc, #160]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dce:	f005 fae1 	bl	8008394 <HAL_TIM_PWM_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002dd8:	f001 fb9f 	bl	800451a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002de4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de8:	4619      	mov	r1, r3
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dec:	f006 fa8c 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002df6:	f001 fb90 	bl	800451a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dfa:	2360      	movs	r3, #96	; 0x60
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e06:	2300      	movs	r3, #0
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4814      	ldr	r0, [pc, #80]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e20:	f005 fdf4 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002e2a:	f001 fb76 	bl	800451a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e52:	f006 fac7 	bl	80093e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002e5c:	f001 fb5d 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e62:	f001 fcb1 	bl	80047c8 <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3748      	adds	r7, #72	; 0x48
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000047c 	.word	0x2000047c
 8002e74:	40010000 	.word	0x40010000

08002e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f008 f838 	bl	800aefc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eaa:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480d      	ldr	r0, [pc, #52]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002ee8:	f005 fb54 	bl	8008594 <HAL_TIM_Encoder_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ef2:	f001 fb12 	bl	800451a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002f04:	f006 fa00 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f0e:	f001 fb04 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	; 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200004c4 	.word	0x200004c4

08002f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f34:	463b      	mov	r3, r7
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <MX_TIM3_Init+0x98>)
 8002f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f44:	2209      	movs	r2, #9
 8002f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f50:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f64:	f005 f964 	bl	8008230 <HAL_TIM_Base_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f6e:	f001 fad4 	bl	800451a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f80:	f005 fe06 	bl	8008b90 <HAL_TIM_ConfigClockSource>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f8a:	f001 fac6 	bl	800451a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f96:	463b      	mov	r3, r7
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f9c:	f006 f9b4 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fa6:	f001 fab8 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000050c 	.word	0x2000050c
 8002fb8:	40000400 	.word	0x40000400

08002fbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd0:	463b      	mov	r3, r7
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <MX_TIM4_Init+0x98>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fe0:	2209      	movs	r2, #9
 8002fe2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fec:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ff0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <MX_TIM4_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <MX_TIM4_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <MX_TIM4_Init+0x94>)
 8003000:	f005 f916 	bl	8008230 <HAL_TIM_Base_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800300a:	f001 fa86 	bl	800451a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4619      	mov	r1, r3
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <MX_TIM4_Init+0x94>)
 800301c:	f005 fdb8 	bl	8008b90 <HAL_TIM_ConfigClockSource>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003026:	f001 fa78 	bl	800451a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003032:	463b      	mov	r3, r7
 8003034:	4619      	mov	r1, r3
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <MX_TIM4_Init+0x94>)
 8003038:	f006 f966 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003042:	f001 fa6a 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000554 	.word	0x20000554
 8003054:	40000800 	.word	0x40000800

08003058 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_TIM11_Init+0x40>)
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <MX_TIM11_Init+0x44>)
 8003060:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <MX_TIM11_Init+0x40>)
 8003064:	2263      	movs	r2, #99	; 0x63
 8003066:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_TIM11_Init+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <MX_TIM11_Init+0x40>)
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_TIM11_Init+0x40>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_TIM11_Init+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_TIM11_Init+0x40>)
 8003084:	f005 f8d4 	bl	8008230 <HAL_TIM_Base_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800308e:	f001 fa44 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000059c 	.word	0x2000059c
 800309c:	40014800 	.word	0x40014800

080030a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <MX_USART2_UART_Init+0x54>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030ac:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80030b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030ca:	220c      	movs	r2, #12
 80030cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030dc:	f006 f9e8 	bl	80094b0 <HAL_UART_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80030e6:	f001 fa18 	bl	800451a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200005e4 	.word	0x200005e4
 80030f4:	40004400 	.word	0x40004400

080030f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <MX_DMA_Init+0x4c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <MX_DMA_Init+0x4c>)
 8003108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <MX_DMA_Init+0x4c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2010      	movs	r0, #16
 8003120:	f001 fe63 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003124:	2010      	movs	r0, #16
 8003126:	f001 fe7c 	bl	8004e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2011      	movs	r0, #17
 8003130:	f001 fe5b 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003134:	2011      	movs	r0, #17
 8003136:	f001 fe74 	bl	8004e22 <HAL_NVIC_EnableIRQ>

}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <MX_GPIO_Init+0x150>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <MX_GPIO_Init+0x150>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <MX_GPIO_Init+0x150>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <MX_GPIO_Init+0x150>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <MX_GPIO_Init+0x150>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <MX_GPIO_Init+0x150>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <MX_GPIO_Init+0x150>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a3e      	ldr	r2, [pc, #248]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <MX_GPIO_Init+0x150>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a37      	ldr	r2, [pc, #220]	; (8003298 <MX_GPIO_Init+0x150>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <MX_GPIO_Init+0x150>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80031d4:	4831      	ldr	r0, [pc, #196]	; (800329c <MX_GPIO_Init+0x154>)
 80031d6:	f002 fbd3 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	2118      	movs	r1, #24
 80031de:	4830      	ldr	r0, [pc, #192]	; (80032a0 <MX_GPIO_Init+0x158>)
 80031e0:	f002 fbce 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	482a      	ldr	r0, [pc, #168]	; (80032a4 <MX_GPIO_Init+0x15c>)
 80031fc:	f002 fa3c 	bl	8005678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8003200:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4820      	ldr	r0, [pc, #128]	; (800329c <MX_GPIO_Init+0x154>)
 800321a:	f002 fa2d 	bl	8005678 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003224:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4819      	ldr	r0, [pc, #100]	; (800329c <MX_GPIO_Init+0x154>)
 8003236:	f002 fa1f 	bl	8005678 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 800323a:	2318      	movs	r3, #24
 800323c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323e:	2301      	movs	r3, #1
 8003240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4813      	ldr	r0, [pc, #76]	; (80032a0 <MX_GPIO_Init+0x158>)
 8003252:	f002 fa11 	bl	8005678 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8003256:	2320      	movs	r3, #32
 8003258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800325a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800325e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_GPIO_Init+0x158>)
 800326c:	f002 fa04 	bl	8005678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2017      	movs	r0, #23
 8003276:	f001 fdb8 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800327a:	2017      	movs	r0, #23
 800327c:	f001 fdd1 	bl	8004e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2028      	movs	r0, #40	; 0x28
 8003286:	f001 fdb0 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800328a:	2028      	movs	r0, #40	; 0x28
 800328c:	f001 fdc9 	bl	8004e22 <HAL_NVIC_EnableIRQ>

}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800

080032a8 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80032ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <EncoderRead+0xd8>)
 80032b6:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <EncoderRead+0xd8>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <EncoderRead+0xd8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <EncoderRead+0xdc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	425b      	negs	r3, r3
 80032c8:	429a      	cmp	r2, r3
 80032ca:	da07      	bge.n	80032dc <EncoderRead+0x34>
		WrappingStep+=12000;
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <EncoderRead+0xe0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80032d4:	3320      	adds	r3, #32
 80032d6:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <EncoderRead+0xe0>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00f      	b.n	80032fc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <EncoderRead+0xd8>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <EncoderRead+0xd8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <EncoderRead+0xdc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	db06      	blt.n	80032fc <EncoderRead+0x54>
		WrappingStep-=12000;
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <EncoderRead+0xe0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80032f6:	3b20      	subs	r3, #32
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <EncoderRead+0xe0>)
 80032fa:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <EncoderRead+0xd8>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <EncoderRead+0xe0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4413      	add	r3, r2
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <EncoderRead+0xe4>)
 8003308:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <EncoderRead+0xe4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f8b4 	bl	800047c <__aeabi_i2d>
 8003314:	a318      	add	r3, pc, #96	; (adr r3, 8003378 <EncoderRead+0xd0>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd fa43 	bl	80007a4 <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <EncoderRead+0xe8>)
 800332c:	f7fd f910 	bl	8000550 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fb3c 	bl	80009b4 <__aeabi_d2f>
 800333c:	4603      	mov	r3, r0
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <EncoderRead+0xec>)
 8003340:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <EncoderRead+0xec>)
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <EncoderRead+0xec>)
 800334a:	edd3 7a01 	vldr	s15, [r3, #4]
 800334e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003352:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003398 <EncoderRead+0xf0>
 8003356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <EncoderRead+0xf4>)
 800335c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <EncoderRead+0xd8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <EncoderRead+0xd8>)
 8003366:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <EncoderRead+0xec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <EncoderRead+0xec>)
 800336e:	6053      	str	r3, [r2, #4]
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	f3af 8000 	nop.w
 8003378:	00000000 	.word	0x00000000
 800337c:	40c77000 	.word	0x40c77000
 8003380:	200007a0 	.word	0x200007a0
 8003384:	200003f4 	.word	0x200003f4
 8003388:	200007a8 	.word	0x200007a8
 800338c:	200007ac 	.word	0x200007ac
 8003390:	40768000 	.word	0x40768000
 8003394:	200007b0 	.word	0x200007b0
 8003398:	3a83126f 	.word	0x3a83126f
 800339c:	200007b8 	.word	0x200007b8

080033a0 <Int32Abs>:

uint32_t Int32Abs(int32_t PWM)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da02      	bge.n	80033b4 <Int32Abs+0x14>
		return PWM*-1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	425b      	negs	r3, r3
 80033b2:	e000      	b.n	80033b6 <Int32Abs+0x16>
	}else{
		return PWM;
 80033b4:	687b      	ldr	r3, [r7, #4]
	}
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dc11      	bgt.n	80033f6 <Drivemotor+0x32>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <Drivemotor+0xa8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	db0d      	blt.n	80033f6 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <Drivemotor+0xac>)
 80033dc:	681c      	ldr	r4, [r3, #0]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffde 	bl	80033a0 <Int32Abs>
 80033e4:	4603      	mov	r3, r0
 80033e6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ee:	4821      	ldr	r0, [pc, #132]	; (8003474 <Drivemotor+0xb0>)
 80033f0:	f002 fac6 	bl	8005980 <HAL_GPIO_WritePin>
 80033f4:	e036      	b.n	8003464 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <Drivemotor+0xa8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	da0b      	bge.n	8003416 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <Drivemotor+0xac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f242 7210 	movw	r2, #10000	; 0x2710
 8003406:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800340e:	4819      	ldr	r0, [pc, #100]	; (8003474 <Drivemotor+0xb0>)
 8003410:	f002 fab6 	bl	8005980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003414:	e026      	b.n	8003464 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db12      	blt.n	8003442 <Drivemotor+0x7e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003422:	4293      	cmp	r3, r2
 8003424:	dc0d      	bgt.n	8003442 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <Drivemotor+0xac>)
 8003428:	681c      	ldr	r4, [r3, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffb8 	bl	80033a0 <Int32Abs>
 8003430:	4603      	mov	r3, r0
 8003432:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800343a:	480e      	ldr	r0, [pc, #56]	; (8003474 <Drivemotor+0xb0>)
 800343c:	f002 faa0 	bl	8005980 <HAL_GPIO_WritePin>
 8003440:	e010      	b.n	8003464 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f242 7210 	movw	r2, #10000	; 0x2710
 8003448:	4293      	cmp	r3, r2
 800344a:	dd0b      	ble.n	8003464 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <Drivemotor+0xac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f242 7210 	movw	r2, #10000	; 0x2710
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800345c:	4805      	ldr	r0, [pc, #20]	; (8003474 <Drivemotor+0xb0>)
 800345e:	f002 fa8f 	bl	8005980 <HAL_GPIO_WritePin>
}
 8003462:	e7ff      	b.n	8003464 <Drivemotor+0xa0>
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	ffffd8f0 	.word	0xffffd8f0
 8003470:	2000047c 	.word	0x2000047c
 8003474:	40020000 	.word	0x40020000

08003478 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af02      	add	r7, sp, #8
//	setpoint = 40.0;
//	PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	PWMCHECKER = PidVelo.ControllerOut;
//	Drivemotor(PWMCHECKER);
	if(Robot.MotorIsOn == 1)
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 8003480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 8092 	bne.w	80035ae <ControllLoopAndErrorHandler+0x136>
	{
		if (Robot.flagStartTime == 1)
 800348a:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 800348c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10a      	bne.n	80034aa <ControllLoopAndErrorHandler+0x32>
		{
			StartTime = Micros();
 8003494:	f000 f8c6 	bl	8003624 <Micros>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	494d      	ldr	r1, [pc, #308]	; (80035d4 <ControllLoopAndErrorHandler+0x15c>)
 800349e:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 80034a2:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
		CurrentTime = Micros();
 80034aa:	f000 f8bb 	bl	8003624 <Micros>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4949      	ldr	r1, [pc, #292]	; (80035d8 <ControllLoopAndErrorHandler+0x160>)
 80034b4:	e9c1 2300 	strd	r2, r3, [r1]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <ControllLoopAndErrorHandler+0x15c>)
 80034ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034be:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <ControllLoopAndErrorHandler+0x160>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	e9cd 2300 	strd	r2, r3, [sp]
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4843      	ldr	r0, [pc, #268]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034ce:	f7fe fed3 	bl	8002278 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034d8:	4a3d      	ldr	r2, [pc, #244]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 80034da:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 80034dc:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 80034e4:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 80034e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80034ec:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	f7fe f846 	bl	800158a <AbsVal>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	d521      	bpl.n	8003554 <ControllLoopAndErrorHandler+0xdc>
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 8003512:	edd3 7a01 	vldr	s15, [r3, #4]
 8003516:	eeb0 0a67 	vmov.f32	s0, s15
 800351a:	f7fe f836 	bl	800158a <AbsVal>
 800351e:	eef0 7a40 	vmov.f32	s15, s0
 8003522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	d511      	bpl.n	8003554 <ControllLoopAndErrorHandler+0xdc>
		{
			PWMCHECKER = 0.0;
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003542:	ee17 0a90 	vmov	r0, s15
 8003546:	f7ff ff3d 	bl	80033c4 <Drivemotor>
			Robot.RunningFlag = 0;
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003552:	e039      	b.n	80035c8 <ControllLoopAndErrorHandler+0x150>
			PIDVelocityController_Update(&PidPos, Robot.QX , Robot.Position);
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 8003556:	edd3 7a06 	vldr	s15, [r3, #24]
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	eef0 0a47 	vmov.f32	s1, s14
 8003564:	eeb0 0a67 	vmov.f32	s0, s15
 8003568:	481e      	ldr	r0, [pc, #120]	; (80035e4 <ControllLoopAndErrorHandler+0x16c>)
 800356a:	f7fd ff26 	bl	80013ba <PIDVelocityController_Update>
			PIDVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut  , Robot.Velocity);
 800356e:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 8003570:	ed93 7a07 	vldr	s14, [r3, #28]
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <ControllLoopAndErrorHandler+0x16c>)
 8003576:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800357a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <ControllLoopAndErrorHandler+0x158>)
 8003580:	ed93 7a01 	vldr	s14, [r3, #4]
 8003584:	eef0 0a47 	vmov.f32	s1, s14
 8003588:	eeb0 0a67 	vmov.f32	s0, s15
 800358c:	4816      	ldr	r0, [pc, #88]	; (80035e8 <ControllLoopAndErrorHandler+0x170>)
 800358e:	f7fd ff14 	bl	80013ba <PIDVelocityController_Update>
			PWMCHECKER = PidVelo.ControllerOut;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <ControllLoopAndErrorHandler+0x170>)
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 8003598:	6013      	str	r3, [r2, #0]
			Drivemotor(PWMCHECKER);
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a4:	ee17 0a90 	vmov	r0, s15
 80035a8:	f7ff ff0c 	bl	80033c4 <Drivemotor>
}
 80035ac:	e00c      	b.n	80035c8 <ControllLoopAndErrorHandler+0x150>
		PWMCHECKER = 0.0;
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c0:	ee17 0a90 	vmov	r0, s15
 80035c4:	f7ff fefe 	bl	80033c4 <Drivemotor>
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200006e8 	.word	0x200006e8
 80035d4:	20000878 	.word	0x20000878
 80035d8:	20000880 	.word	0x20000880
 80035dc:	200007c0 	.word	0x200007c0
 80035e0:	200007bc 	.word	0x200007bc
 80035e4:	200003c0 	.word	0x200003c0
 80035e8:	2000038c 	.word	0x2000038c

080035ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035ec:	b4b0      	push	{r4, r5, r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10a      	bne.n	8003612 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003606:	1854      	adds	r4, r2, r1
 8003608:	f143 0500 	adc.w	r5, r3, #0
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800360e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bcb0      	pop	{r4, r5, r7}
 800361a:	4770      	bx	lr
 800361c:	2000059c 	.word	0x2000059c
 8003620:	20000798 	.word	0x20000798

08003624 <Micros>:

uint64_t Micros(){
 8003624:	b4b0      	push	{r4, r5, r7}
 8003626:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <Micros+0x28>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	2200      	movs	r2, #0
 800362e:	4618      	mov	r0, r3
 8003630:	4611      	mov	r1, r2
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <Micros+0x2c>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	1884      	adds	r4, r0, r2
 800363a:	eb41 0503 	adc.w	r5, r1, r3
 800363e:	4622      	mov	r2, r4
 8003640:	462b      	mov	r3, r5
}
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bcb0      	pop	{r4, r5, r7}
 800364a:	4770      	bx	lr
 800364c:	40014800 	.word	0x40014800
 8003650:	20000798 	.word	0x20000798

08003654 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003658:	2214      	movs	r2, #20
 800365a:	2100      	movs	r1, #0
 800365c:	4811      	ldr	r0, [pc, #68]	; (80036a4 <Ringbuf_Init+0x50>)
 800365e:	f007 fc4d 	bl	800aefc <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003662:	2228      	movs	r2, #40	; 0x28
 8003664:	2100      	movs	r1, #0
 8003666:	4810      	ldr	r0, [pc, #64]	; (80036a8 <Ringbuf_Init+0x54>)
 8003668:	f007 fc48 	bl	800aefc <memset>

	Head = Tail = 0;
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <Ringbuf_Init+0x58>)
 800366e:	2200      	movs	r2, #0
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <Ringbuf_Init+0x58>)
 8003674:	881a      	ldrh	r2, [r3, #0]
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <Ringbuf_Init+0x5c>)
 8003678:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <Ringbuf_Init+0x60>)
 800367c:	2200      	movs	r2, #0
 800367e:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <Ringbuf_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003686:	2214      	movs	r2, #20
 8003688:	4906      	ldr	r1, [pc, #24]	; (80036a4 <Ringbuf_Init+0x50>)
 800368a:	480c      	ldr	r0, [pc, #48]	; (80036bc <Ringbuf_Init+0x68>)
 800368c:	f005 ffdc 	bl	8009648 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <Ringbuf_Init+0x6c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <Ringbuf_Init+0x6c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0208 	bic.w	r2, r2, #8
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000071c 	.word	0x2000071c
 80036a8:	20000730 	.word	0x20000730
 80036ac:	20000760 	.word	0x20000760
 80036b0:	2000075e 	.word	0x2000075e
 80036b4:	2000075a 	.word	0x2000075a
 80036b8:	2000075c 	.word	0x2000075c
 80036bc:	200005e4 	.word	0x200005e4
 80036c0:	20000628 	.word	0x20000628

080036c4 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <checkSum+0x15c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	3b01      	subs	r3, #1
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d84f      	bhi.n	8003782 <checkSum+0xbe>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <checkSum+0x24>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	080037d9 	.word	0x080037d9
 80036ec:	080036f9 	.word	0x080036f9
 80036f0:	080037d9 	.word	0x080037d9
 80036f4:	0800371f 	.word	0x0800371f
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f897 	bl	8003830 <checkAck>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d169      	bne.n	80037dc <checkSum+0x118>
 8003708:	4b46      	ldr	r3, [pc, #280]	; (8003824 <checkSum+0x160>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	4a42      	ldr	r2, [pc, #264]	; (8003820 <checkSum+0x15c>)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	7013      	strb	r3, [r2, #0]
		break;
 800371c:	e05e      	b.n	80037dc <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	4619      	mov	r1, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f884 	bl	8003830 <checkAck>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <checkSum+0x80>
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <checkSum+0x160>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	3302      	adds	r3, #2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <checkSum+0x15c>)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003742:	e04c      	b.n	80037de <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <checkSum+0x160>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	4b34      	ldr	r3, [pc, #208]	; (8003824 <checkSum+0x160>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	440b      	add	r3, r1
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4413      	add	r3, r2
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b30      	ldr	r3, [pc, #192]	; (8003824 <checkSum+0x160>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	3302      	adds	r3, #2
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	440b      	add	r3, r1
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4413      	add	r3, r2
 800376e:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003770:	4b2c      	ldr	r3, [pc, #176]	; (8003824 <checkSum+0x160>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <checkSum+0x15c>)
 800377e:	701a      	strb	r2, [r3, #0]
		break;
 8003780:	e02d      	b.n	80037de <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <checkSum+0x160>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <checkSum+0x15c>)
 8003790:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	e019      	b.n	80037cc <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <checkSum+0x160>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <checkSum+0x164>)
 80037a2:	fb83 2301 	smull	r2, r3, r3, r1
 80037a6:	111a      	asrs	r2, r3, #4
 80037a8:	17cb      	asrs	r3, r1, #31
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1aca      	subs	r2, r1, r3
 80037b6:	1883      	adds	r3, r0, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	4413      	add	r3, r2
 80037c4:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	dbe0      	blt.n	8003798 <checkSum+0xd4>
 80037d6:	e002      	b.n	80037de <checkSum+0x11a>
		break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <checkSum+0x11a>
		break;
 80037dc:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <checkSum+0x160>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	1e59      	subs	r1, r3, #1
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <checkSum+0x164>)
 80037ea:	fb83 2301 	smull	r2, r3, r3, r1
 80037ee:	111a      	asrs	r2, r3, #4
 80037f0:	17cb      	asrs	r3, r1, #31
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1aca      	subs	r2, r1, r3
 80037fe:	1883      	adds	r3, r0, r2
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	43db      	mvns	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	429a      	cmp	r2, r3
 8003810:	d102      	bne.n	8003818 <checkSum+0x154>
 8003812:	4806      	ldr	r0, [pc, #24]	; (800382c <checkSum+0x168>)
 8003814:	f000 f898 	bl	8003948 <UARTstateManagement>
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000078b 	.word	0x2000078b
 8003824:	2000075a 	.word	0x2000075a
 8003828:	66666667 	.word	0x66666667
 800382c:	20000730 	.word	0x20000730

08003830 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <checkAck+0x40>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b58      	cmp	r3, #88	; 0x58
 800384a:	d109      	bne.n	8003860 <checkAck+0x30>
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <checkAck+0x40>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b75      	cmp	r3, #117	; 0x75
 800385a:	d101      	bne.n	8003860 <checkAck+0x30>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <checkAck+0x32>
	else return 0;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000075a 	.word	0x2000075a

08003874 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d14a      	bne.n	8003920 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_UARTEx_RxEventCallback+0xb8>)
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003890:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003892:	4a28      	ldr	r2, [pc, #160]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003894:	887b      	ldrh	r3, [r7, #2]
 8003896:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	4413      	add	r3, r2
 80038a4:	2b28      	cmp	r3, #40	; 0x28
 80038a6:	dd16      	ble.n	80038d6 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_UARTEx_RxEventCallback+0xc4>)
 80038b6:	4413      	add	r3, r2
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038ba:	8812      	ldrh	r2, [r2, #0]
 80038bc:	491f      	ldr	r1, [pc, #124]	; (800393c <HAL_UARTEx_RxEventCallback+0xc8>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f007 fb0e 	bl	800aee0 <memcpy>
                        newPos = dataSize+oldPos;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_UARTEx_RxEventCallback+0xb8>)
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	e012      	b.n	80038fc <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_UARTEx_RxEventCallback+0xc4>)
 80038de:	4413      	add	r3, r2
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	4915      	ldr	r1, [pc, #84]	; (800393c <HAL_UARTEx_RxEventCallback+0xc8>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f007 fafa 	bl	800aee0 <memcpy>
                        newPos = dataSize+oldPos;
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_UARTEx_RxEventCallback+0xb8>)
 80038fa:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	4619      	mov	r1, r3
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003902:	f7ff fedf 	bl	80036c4 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003906:	2214      	movs	r2, #20
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <HAL_UARTEx_RxEventCallback+0xc8>)
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <HAL_UARTEx_RxEventCallback+0xcc>)
 800390c:	f005 fe9c 	bl	8009648 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0208 	bic.w	r2, r2, #8
 800391e:	601a      	str	r2, [r3, #0]
        }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40004400 	.word	0x40004400
 800392c:	2000075c 	.word	0x2000075c
 8003930:	2000075a 	.word	0x2000075a
 8003934:	20000762 	.word	0x20000762
 8003938:	20000730 	.word	0x20000730
 800393c:	2000071c 	.word	0x2000071c
 8003940:	200005e4 	.word	0x200005e4
 8003944:	20000628 	.word	0x20000628

08003948 <UARTstateManagement>:
//		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
//		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
//	}
//}
void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	uint16_t rxDatalen = newPos - oldPos;
 8003950:	4ba7      	ldr	r3, [pc, #668]	; (8003bf0 <UARTstateManagement+0x2a8>)
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	4ba7      	ldr	r3, [pc, #668]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	817b      	strh	r3, [r7, #10]
	switch (UARTState)
 800395c:	4ba6      	ldr	r3, [pc, #664]	; (8003bf8 <UARTstateManagement+0x2b0>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d01d      	beq.n	80039a0 <UARTstateManagement+0x58>
 8003964:	2b02      	cmp	r3, #2
 8003966:	f300 8345 	bgt.w	8003ff4 <UARTstateManagement+0x6ac>
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 833f 	beq.w	8003fee <UARTstateManagement+0x6a6>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d000      	beq.n	8003976 <UARTstateManagement+0x2e>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003974:	e33e      	b.n	8003ff4 <UARTstateManagement+0x6ac>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003976:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b92      	cmp	r3, #146	; 0x92
 8003984:	f040 8335 	bne.w	8003ff2 <UARTstateManagement+0x6aa>
				modeNo = 2;
 8003988:	4b9c      	ldr	r3, [pc, #624]	; (8003bfc <UARTstateManagement+0x2b4>)
 800398a:	2202      	movs	r2, #2
 800398c:	701a      	strb	r2, [r3, #0]
				UARTState = normOperation;
 800398e:	4b9a      	ldr	r3, [pc, #616]	; (8003bf8 <UARTstateManagement+0x2b0>)
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003994:	2202      	movs	r2, #2
 8003996:	499a      	ldr	r1, [pc, #616]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003998:	489a      	ldr	r0, [pc, #616]	; (8003c04 <UARTstateManagement+0x2bc>)
 800399a:	f005 fdd7 	bl	800954c <HAL_UART_Transmit_DMA>
			break;
 800399e:	e328      	b.n	8003ff2 <UARTstateManagement+0x6aa>
			stateSwitch = modeByte;
 80039a0:	4b99      	ldr	r3, [pc, #612]	; (8003c08 <UARTstateManagement+0x2c0>)
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	4b99      	ldr	r3, [pc, #612]	; (8003c0c <UARTstateManagement+0x2c4>)
 80039a6:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 80039a8:	4b98      	ldr	r3, [pc, #608]	; (8003c0c <UARTstateManagement+0x2c4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3b91      	subs	r3, #145	; 0x91
 80039ae:	2b0d      	cmp	r3, #13
 80039b0:	f200 8320 	bhi.w	8003ff4 <UARTstateManagement+0x6ac>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UARTstateManagement+0x74>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	08003a07 	.word	0x08003a07
 80039c4:	08003a1f 	.word	0x08003a1f
 80039c8:	08003a37 	.word	0x08003a37
 80039cc:	08003a8b 	.word	0x08003a8b
 80039d0:	08003aef 	.word	0x08003aef
 80039d4:	08003b21 	.word	0x08003b21
 80039d8:	08003c2d 	.word	0x08003c2d
 80039dc:	08003c85 	.word	0x08003c85
 80039e0:	08003d29 	.word	0x08003d29
 80039e4:	08003e95 	.word	0x08003e95
 80039e8:	08003f99 	.word	0x08003f99
 80039ec:	08003fb1 	.word	0x08003fb1
 80039f0:	08003fc9 	.word	0x08003fc9
					modeNo = 1;
 80039f4:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <UARTstateManagement+0x2b4>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80039fa:	2202      	movs	r2, #2
 80039fc:	4980      	ldr	r1, [pc, #512]	; (8003c00 <UARTstateManagement+0x2b8>)
 80039fe:	4881      	ldr	r0, [pc, #516]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003a00:	f005 fda4 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003a04:	e2f6      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 2;
 8003a06:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8003a0c:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <UARTstateManagement+0x2b0>)
 8003a0e:	2202      	movs	r2, #2
 8003a10:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a12:	2202      	movs	r2, #2
 8003a14:	497a      	ldr	r1, [pc, #488]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003a16:	487b      	ldr	r0, [pc, #492]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003a18:	f005 fd98 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003a1c:	e2ea      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 3;
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003a20:	2203      	movs	r2, #3
 8003a22:	701a      	strb	r2, [r3, #0]
					UARTState = MCDisCon;
 8003a24:	4b74      	ldr	r3, [pc, #464]	; (8003bf8 <UARTstateManagement+0x2b0>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4974      	ldr	r1, [pc, #464]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003a2e:	4875      	ldr	r0, [pc, #468]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003a30:	f005 fd8c 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003a34:	e2de      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 4;
 8003a36:	4b71      	ldr	r3, [pc, #452]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003a38:	2204      	movs	r2, #4
 8003a3a:	701a      	strb	r2, [r3, #0]
					uartVelo = ((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003a3c:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	3302      	adds	r3, #2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd17 	bl	800047c <__aeabi_i2d>
 8003a4e:	a364      	add	r3, pc, #400	; (adr r3, 8003be0 <UARTstateManagement+0x298>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fea6 	bl	80007a4 <__aeabi_ddiv>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <UARTstateManagement+0x2c8>)
 8003a66:	f7fc fd73 	bl	8000550 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fc ff7f 	bl	8000974 <__aeabi_d2uiz>
 8003a76:	4603      	mov	r3, r0
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <UARTstateManagement+0x2cc>)
 8003a7c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a7e:	2202      	movs	r2, #2
 8003a80:	495f      	ldr	r1, [pc, #380]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003a82:	4860      	ldr	r0, [pc, #384]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003a84:	f005 fd62 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003a88:	e2b4      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 5;
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	701a      	strb	r2, [r3, #0]
					uartPos = (uint16_t)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8003a90:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	4a55      	ldr	r2, [pc, #340]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	3202      	adds	r2, #2
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	7812      	ldrb	r2, [r2, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fce5 	bl	800047c <__aeabi_i2d>
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <UARTstateManagement+0x2d0>)
 8003ab8:	f7fc fd4a 	bl	8000550 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	a348      	add	r3, pc, #288	; (adr r3, 8003be8 <UARTstateManagement+0x2a0>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fe6b 	bl	80007a4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fc ff4d 	bl	8000974 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <UARTstateManagement+0x2d4>)
 8003ae0:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4946      	ldr	r1, [pc, #280]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003ae6:	4847      	ldr	r0, [pc, #284]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003ae8:	f005 fd30 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003aec:	e282      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 6;
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003af0:	2206      	movs	r2, #6
 8003af2:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, 0, 15);
 8003af4:	220f      	movs	r2, #15
 8003af6:	2100      	movs	r1, #0
 8003af8:	4849      	ldr	r0, [pc, #292]	; (8003c20 <UARTstateManagement+0x2d8>)
 8003afa:	f007 f9ff 	bl	800aefc <memset>
					goalAmount = 1;
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <UARTstateManagement+0x2dc>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8003b04:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <UARTstateManagement+0x2d8>)
 8003b12:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003b14:	2202      	movs	r2, #2
 8003b16:	493a      	ldr	r1, [pc, #232]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003b18:	483a      	ldr	r0, [pc, #232]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003b1a:	f005 fd17 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003b1e:	e269      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 7;
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <UARTstateManagement+0x2b4>)
 8003b22:	2207      	movs	r2, #7
 8003b24:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, 0, 15);
 8003b26:	220f      	movs	r2, #15
 8003b28:	2100      	movs	r1, #0
 8003b2a:	483d      	ldr	r0, [pc, #244]	; (8003c20 <UARTstateManagement+0x2d8>)
 8003b2c:	f007 f9e6 	bl	800aefc <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <UARTstateManagement+0x2dc>)
 8003b3e:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e03a      	b.n	8003bbc <UARTstateManagement+0x274>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8003b46:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1c99      	adds	r1, r3, #2
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <UARTstateManagement+0x2e0>)
 8003b52:	fb83 2301 	smull	r2, r3, r3, r1
 8003b56:	111a      	asrs	r2, r3, #4
 8003b58:	17cb      	asrs	r3, r1, #31
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1aca      	subs	r2, r1, r3
 8003b66:	1883      	adds	r3, r0, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	f002 020f 	and.w	r2, r2, #15
 8003b78:	b2d1      	uxtb	r1, r2
 8003b7a:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <UARTstateManagement+0x2d8>)
 8003b7c:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <UARTstateManagement+0x2ac>)
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1c99      	adds	r1, r3, #2
 8003b88:	4b27      	ldr	r3, [pc, #156]	; (8003c28 <UARTstateManagement+0x2e0>)
 8003b8a:	fb83 2301 	smull	r2, r3, r3, r1
 8003b8e:	111a      	asrs	r2, r3, #4
 8003b90:	17cb      	asrs	r3, r1, #31
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1aca      	subs	r2, r1, r3
 8003b9e:	1883      	adds	r3, r0, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	3301      	adds	r3, #1
 8003bae:	0912      	lsrs	r2, r2, #4
 8003bb0:	b2d1      	uxtb	r1, r2
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <UARTstateManagement+0x2d8>)
 8003bb4:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <UARTstateManagement+0x2dc>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	0fda      	lsrs	r2, r3, #31
 8003bc4:	4413      	add	r3, r2
 8003bc6:	105b      	asrs	r3, r3, #1
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	dbba      	blt.n	8003b46 <UARTstateManagement+0x1fe>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	490b      	ldr	r1, [pc, #44]	; (8003c00 <UARTstateManagement+0x2b8>)
 8003bd4:	480b      	ldr	r0, [pc, #44]	; (8003c04 <UARTstateManagement+0x2bc>)
 8003bd6:	f005 fcb9 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003bda:	e20b      	b.n	8003ff4 <UARTstateManagement+0x6ac>
 8003bdc:	f3af 8000 	nop.w
 8003be0:	00000000 	.word	0x00000000
 8003be4:	406fe000 	.word	0x406fe000
 8003be8:	00000000 	.word	0x00000000
 8003bec:	40eeaa00 	.word	0x40eeaa00
 8003bf0:	2000075c 	.word	0x2000075c
 8003bf4:	2000075a 	.word	0x2000075a
 8003bf8:	20000718 	.word	0x20000718
 8003bfc:	2000078a 	.word	0x2000078a
 8003c00:	20000004 	.word	0x20000004
 8003c04:	200005e4 	.word	0x200005e4
 8003c08:	2000078b 	.word	0x2000078b
 8003c0c:	20000759 	.word	0x20000759
 8003c10:	40240000 	.word	0x40240000
 8003c14:	20000774 	.word	0x20000774
 8003c18:	40768000 	.word	0x40768000
 8003c1c:	20000776 	.word	0x20000776
 8003c20:	20000778 	.word	0x20000778
 8003c24:	20000787 	.word	0x20000787
 8003c28:	66666667 	.word	0x66666667
					modeNo = 8;
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <UARTstateManagement+0x518>)
 8003c2e:	2208      	movs	r2, #8
 8003c30:	701a      	strb	r2, [r3, #0]
					if(Robot.RunningFlag == 0)
 8003c32:	4b8c      	ldr	r3, [pc, #560]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c34:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d11d      	bne.n	8003c78 <UARTstateManagement+0x330>
					Robot.GoalPositon = uartPos;
 8003c3c:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <UARTstateManagement+0x520>)
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c4a:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 8003c4e:	4b85      	ldr	r3, [pc, #532]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	4b83      	ldr	r3, [pc, #524]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c56:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c5a:	eef0 0a47 	vmov.f32	s1, s14
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	4882      	ldr	r0, [pc, #520]	; (8003e6c <UARTstateManagement+0x524>)
 8003c64:	f7fd fcb4 	bl	80015d0 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 8003c68:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					Robot.RunningFlag = 1;
 8003c70:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003c78:	2202      	movs	r2, #2
 8003c7a:	497d      	ldr	r1, [pc, #500]	; (8003e70 <UARTstateManagement+0x528>)
 8003c7c:	487d      	ldr	r0, [pc, #500]	; (8003e74 <UARTstateManagement+0x52c>)
 8003c7e:	f005 fc65 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003c82:	e1b7      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 9;
 8003c84:	4b76      	ldr	r3, [pc, #472]	; (8003e60 <UARTstateManagement+0x518>)
 8003c86:	2209      	movs	r2, #9
 8003c88:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003c8a:	4b7b      	ldr	r3, [pc, #492]	; (8003e78 <UARTstateManagement+0x530>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8003c90:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	811a      	strh	r2, [r3, #8]
					if(Robot.RunningFlag == 1){
 8003c96:	4b73      	ldr	r3, [pc, #460]	; (8003e64 <UARTstateManagement+0x51c>)
 8003c98:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d11f      	bne.n	8003ce0 <UARTstateManagement+0x398>
 8003ca0:	4b73      	ldr	r3, [pc, #460]	; (8003e70 <UARTstateManagement+0x528>)
 8003ca2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <UARTstateManagement+0x534>)
 8003ca6:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 8003ca8:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <UARTstateManagement+0x534>)
 8003caa:	2299      	movs	r2, #153	; 0x99
 8003cac:	709a      	strb	r2, [r3, #2]
						sendData[4] = Robot.CurrentStation; // set currentStation
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <UARTstateManagement+0x51c>)
 8003cb0:	891b      	ldrh	r3, [r3, #8]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b71      	ldr	r3, [pc, #452]	; (8003e7c <UARTstateManagement+0x534>)
 8003cb6:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003cb8:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <UARTstateManagement+0x534>)
 8003cba:	789a      	ldrb	r2, [r3, #2]
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <UARTstateManagement+0x534>)
 8003cbe:	78db      	ldrb	r3, [r3, #3]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <UARTstateManagement+0x534>)
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <UARTstateManagement+0x534>)
 8003cd2:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	4969      	ldr	r1, [pc, #420]	; (8003e7c <UARTstateManagement+0x534>)
 8003cd8:	4866      	ldr	r0, [pc, #408]	; (8003e74 <UARTstateManagement+0x52c>)
 8003cda:	f005 fc37 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003cde:	e189      	b.n	8003ff4 <UARTstateManagement+0x6ac>
 8003ce0:	4b67      	ldr	r3, [pc, #412]	; (8003e80 <UARTstateManagement+0x538>)
 8003ce2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003ce4:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <UARTstateManagement+0x534>)
 8003ce6:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003ce8:	4a66      	ldr	r2, [pc, #408]	; (8003e84 <UARTstateManagement+0x53c>)
 8003cea:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <UARTstateManagement+0x528>)
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	8013      	strh	r3, [r2, #0]
						sendData[4] = 153; // start-mode
 8003cf0:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <UARTstateManagement+0x534>)
 8003cf2:	2299      	movs	r2, #153	; 0x99
 8003cf4:	711a      	strb	r2, [r3, #4]
						sendData[6] = Robot.CurrentStation; // set currentStation
 8003cf6:	4b5b      	ldr	r3, [pc, #364]	; (8003e64 <UARTstateManagement+0x51c>)
 8003cf8:	891b      	ldrh	r3, [r3, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <UARTstateManagement+0x534>)
 8003cfe:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <UARTstateManagement+0x534>)
 8003d02:	789a      	ldrb	r2, [r3, #2]
 8003d04:	4b5d      	ldr	r3, [pc, #372]	; (8003e7c <UARTstateManagement+0x534>)
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	4413      	add	r3, r2
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <UARTstateManagement+0x534>)
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <UARTstateManagement+0x534>)
 8003d1a:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	4957      	ldr	r1, [pc, #348]	; (8003e7c <UARTstateManagement+0x534>)
 8003d20:	4854      	ldr	r0, [pc, #336]	; (8003e74 <UARTstateManagement+0x52c>)
 8003d22:	f005 fc13 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003d26:	e165      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 10;
 8003d28:	4b4d      	ldr	r3, [pc, #308]	; (8003e60 <UARTstateManagement+0x518>)
 8003d2a:	220a      	movs	r2, #10
 8003d2c:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003d2e:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <UARTstateManagement+0x530>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((pos)*10000.0)*M_PI)/180.0));
 8003d34:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <UARTstateManagement+0x540>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fb9f 	bl	800047c <__aeabi_i2d>
 8003d3e:	a344      	add	r3, pc, #272	; (adr r3, 8003e50 <UARTstateManagement+0x508>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fc04 	bl	8000550 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	a341      	add	r3, pc, #260	; (adr r3, 8003e58 <UARTstateManagement+0x510>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fbfb 	bl	8000550 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <UARTstateManagement+0x544>)
 8003d68:	f7fc fd1c 	bl	80007a4 <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fc fdfe 	bl	8000974 <__aeabi_d2uiz>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <UARTstateManagement+0x548>)
 8003d7e:	801a      	strh	r2, [r3, #0]
					if(Robot.RunningFlag == 1){
 8003d80:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <UARTstateManagement+0x51c>)
 8003d82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d126      	bne.n	8003dd8 <UARTstateManagement+0x490>
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <UARTstateManagement+0x528>)
 8003d8c:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <UARTstateManagement+0x534>)
 8003d90:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <UARTstateManagement+0x534>)
 8003d94:	229a      	movs	r2, #154	; 0x9a
 8003d96:	709a      	strb	r2, [r3, #2]
						sendData[3] = (posData) >> 8 ; // set high byte posData
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <UARTstateManagement+0x548>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <UARTstateManagement+0x534>)
 8003da4:	70da      	strb	r2, [r3, #3]
						sendData[4] = (posData) & 0xff; // set low byte posData
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <UARTstateManagement+0x548>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <UARTstateManagement+0x534>)
 8003dae:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <UARTstateManagement+0x534>)
 8003db2:	789a      	ldrb	r2, [r3, #2]
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <UARTstateManagement+0x534>)
 8003db6:	78db      	ldrb	r3, [r3, #3]
 8003db8:	4413      	add	r3, r2
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <UARTstateManagement+0x534>)
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <UARTstateManagement+0x534>)
 8003dca:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003dcc:	2206      	movs	r2, #6
 8003dce:	492b      	ldr	r1, [pc, #172]	; (8003e7c <UARTstateManagement+0x534>)
 8003dd0:	4828      	ldr	r0, [pc, #160]	; (8003e74 <UARTstateManagement+0x52c>)
 8003dd2:	f005 fbbb 	bl	800954c <HAL_UART_Transmit_DMA>
 8003dd6:	e029      	b.n	8003e2c <UARTstateManagement+0x4e4>
 8003dd8:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <UARTstateManagement+0x538>)
 8003dda:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <UARTstateManagement+0x534>)
 8003dde:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <UARTstateManagement+0x53c>)
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <UARTstateManagement+0x528>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	8013      	strh	r3, [r2, #0]
						sendData[4] = 154; // start-mode
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <UARTstateManagement+0x534>)
 8003dea:	229a      	movs	r2, #154	; 0x9a
 8003dec:	711a      	strb	r2, [r3, #4]
						sendData[5] = (posData) >> 8 ; // set high byte posData
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <UARTstateManagement+0x548>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <UARTstateManagement+0x534>)
 8003dfa:	715a      	strb	r2, [r3, #5]
						sendData[6] = (posData) & 0xff; // set low byte posData
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <UARTstateManagement+0x548>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <UARTstateManagement+0x534>)
 8003e04:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <UARTstateManagement+0x534>)
 8003e08:	789a      	ldrb	r2, [r3, #2]
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <UARTstateManagement+0x534>)
 8003e0c:	78db      	ldrb	r3, [r3, #3]
 8003e0e:	4413      	add	r3, r2
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <UARTstateManagement+0x534>)
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <UARTstateManagement+0x534>)
 8003e20:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003e22:	2208      	movs	r2, #8
 8003e24:	4915      	ldr	r1, [pc, #84]	; (8003e7c <UARTstateManagement+0x534>)
 8003e26:	4813      	ldr	r0, [pc, #76]	; (8003e74 <UARTstateManagement+0x52c>)
 8003e28:	f005 fb90 	bl	800954c <HAL_UART_Transmit_DMA>
					if(pos != uartPos) pos++;
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <UARTstateManagement+0x540>)
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <UARTstateManagement+0x520>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d006      	beq.n	8003e46 <UARTstateManagement+0x4fe>
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <UARTstateManagement+0x540>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <UARTstateManagement+0x540>)
 8003e42:	801a      	strh	r2, [r3, #0]
					break;
 8003e44:	e0d6      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					else Robot.RunningFlag = 0;
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <UARTstateManagement+0x51c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					break;
 8003e4e:	e0d1      	b.n	8003ff4 <UARTstateManagement+0x6ac>
 8003e50:	00000000 	.word	0x00000000
 8003e54:	40c38800 	.word	0x40c38800
 8003e58:	54442d18 	.word	0x54442d18
 8003e5c:	400921fb 	.word	0x400921fb
 8003e60:	2000078a 	.word	0x2000078a
 8003e64:	200006e8 	.word	0x200006e8
 8003e68:	20000776 	.word	0x20000776
 8003e6c:	200007c0 	.word	0x200007c0
 8003e70:	20000004 	.word	0x20000004
 8003e74:	200005e4 	.word	0x200005e4
 8003e78:	20000758 	.word	0x20000758
 8003e7c:	20000768 	.word	0x20000768
 8003e80:	20000008 	.word	0x20000008
 8003e84:	2000076a 	.word	0x2000076a
 8003e88:	200008aa 	.word	0x200008aa
 8003e8c:	40668000 	.word	0x40668000
 8003e90:	20000770 	.word	0x20000770
					modeNo = 11;
 8003e94:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <UARTstateManagement+0x6c8>)
 8003e96:	220b      	movs	r2, #11
 8003e98:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003e9a:	4b5e      	ldr	r3, [pc, #376]	; (8004014 <UARTstateManagement+0x6cc>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
					veloData = (uint16_t)((((Robot.Velocity*30.0)/M_PI)/10.0)*255.0);
 8003ea0:	4b5d      	ldr	r3, [pc, #372]	; (8004018 <UARTstateManagement+0x6d0>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fc fafb 	bl	80004a0 <__aeabi_f2d>
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <UARTstateManagement+0x6d4>)
 8003eb0:	f7fc fb4e 	bl	8000550 <__aeabi_dmul>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	a350      	add	r3, pc, #320	; (adr r3, 8004000 <UARTstateManagement+0x6b8>)
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f7fc fc6f 	bl	80007a4 <__aeabi_ddiv>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	4b53      	ldr	r3, [pc, #332]	; (8004020 <UARTstateManagement+0x6d8>)
 8003ed4:	f7fc fc66 	bl	80007a4 <__aeabi_ddiv>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	a349      	add	r3, pc, #292	; (adr r3, 8004008 <UARTstateManagement+0x6c0>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc fb33 	bl	8000550 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fd3f 	bl	8000974 <__aeabi_d2uiz>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <UARTstateManagement+0x6dc>)
 8003efc:	801a      	strh	r2, [r3, #0]
					if(Robot.RunningFlag == 1){
 8003efe:	4b46      	ldr	r3, [pc, #280]	; (8004018 <UARTstateManagement+0x6d0>)
 8003f00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d121      	bne.n	8003f4c <UARTstateManagement+0x604>
 8003f08:	4b47      	ldr	r3, [pc, #284]	; (8004028 <UARTstateManagement+0x6e0>)
 8003f0a:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003f0c:	4b47      	ldr	r3, [pc, #284]	; (800402c <UARTstateManagement+0x6e4>)
 8003f0e:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155; // start-mode
 8003f10:	4b46      	ldr	r3, [pc, #280]	; (800402c <UARTstateManagement+0x6e4>)
 8003f12:	229b      	movs	r2, #155	; 0x9b
 8003f14:	709a      	strb	r2, [r3, #2]
						sendData[4] = (veloData) >> 8; // set low byte posData
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <UARTstateManagement+0x6dc>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <UARTstateManagement+0x6e4>)
 8003f22:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <UARTstateManagement+0x6e4>)
 8003f26:	789a      	ldrb	r2, [r3, #2]
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <UARTstateManagement+0x6e4>)
 8003f2a:	78db      	ldrb	r3, [r3, #3]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <UARTstateManagement+0x6e4>)
 8003f32:	791b      	ldrb	r3, [r3, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <UARTstateManagement+0x6e4>)
 8003f3e:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003f40:	2206      	movs	r2, #6
 8003f42:	493a      	ldr	r1, [pc, #232]	; (800402c <UARTstateManagement+0x6e4>)
 8003f44:	483a      	ldr	r0, [pc, #232]	; (8004030 <UARTstateManagement+0x6e8>)
 8003f46:	f005 fb01 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003f4a:	e053      	b.n	8003ff4 <UARTstateManagement+0x6ac>
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <UARTstateManagement+0x6ec>)
 8003f4e:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003f50:	4b36      	ldr	r3, [pc, #216]	; (800402c <UARTstateManagement+0x6e4>)
 8003f52:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003f54:	4a38      	ldr	r2, [pc, #224]	; (8004038 <UARTstateManagement+0x6f0>)
 8003f56:	4b34      	ldr	r3, [pc, #208]	; (8004028 <UARTstateManagement+0x6e0>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	8013      	strh	r3, [r2, #0]
						sendData[4] = 155; // start-mode
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <UARTstateManagement+0x6e4>)
 8003f5e:	229b      	movs	r2, #155	; 0x9b
 8003f60:	711a      	strb	r2, [r3, #4]
						sendData[6] = (veloData) >> 8; // set low byte posData
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <UARTstateManagement+0x6dc>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <UARTstateManagement+0x6e4>)
 8003f6e:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003f70:	4b2e      	ldr	r3, [pc, #184]	; (800402c <UARTstateManagement+0x6e4>)
 8003f72:	789a      	ldrb	r2, [r3, #2]
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <UARTstateManagement+0x6e4>)
 8003f76:	78db      	ldrb	r3, [r3, #3]
 8003f78:	4413      	add	r3, r2
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <UARTstateManagement+0x6e4>)
 8003f7e:	791b      	ldrb	r3, [r3, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b28      	ldr	r3, [pc, #160]	; (800402c <UARTstateManagement+0x6e4>)
 8003f8a:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4927      	ldr	r1, [pc, #156]	; (800402c <UARTstateManagement+0x6e4>)
 8003f90:	4827      	ldr	r0, [pc, #156]	; (8004030 <UARTstateManagement+0x6e8>)
 8003f92:	f005 fadb 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003f96:	e02d      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 12;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <UARTstateManagement+0x6c8>)
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <UARTstateManagement+0x6f4>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4920      	ldr	r1, [pc, #128]	; (8004028 <UARTstateManagement+0x6e0>)
 8003fa8:	4821      	ldr	r0, [pc, #132]	; (8004030 <UARTstateManagement+0x6e8>)
 8003faa:	f005 facf 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003fae:	e021      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 13;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <UARTstateManagement+0x6c8>)
 8003fb2:	220d      	movs	r2, #13
 8003fb4:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <UARTstateManagement+0x6f4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	491a      	ldr	r1, [pc, #104]	; (8004028 <UARTstateManagement+0x6e0>)
 8003fc0:	481b      	ldr	r0, [pc, #108]	; (8004030 <UARTstateManagement+0x6e8>)
 8003fc2:	f005 fac3 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003fc6:	e015      	b.n	8003ff4 <UARTstateManagement+0x6ac>
					modeNo = 14;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <UARTstateManagement+0x6c8>)
 8003fca:	220e      	movs	r2, #14
 8003fcc:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon);
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <UARTstateManagement+0x6d0>)
 8003fd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd8:	f000 fa6c 	bl	80044b4 <RobotRunToPositon>
					homingFlag = 1;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <UARTstateManagement+0x6f8>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4910      	ldr	r1, [pc, #64]	; (8004028 <UARTstateManagement+0x6e0>)
 8003fe6:	4812      	ldr	r0, [pc, #72]	; (8004030 <UARTstateManagement+0x6e8>)
 8003fe8:	f005 fab0 	bl	800954c <HAL_UART_Transmit_DMA>
					break;
 8003fec:	e002      	b.n	8003ff4 <UARTstateManagement+0x6ac>
			break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <UARTstateManagement+0x6ac>
			break;
 8003ff2:	bf00      	nop
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	f3af 8000 	nop.w
 8004000:	54442d18 	.word	0x54442d18
 8004004:	400921fb 	.word	0x400921fb
 8004008:	00000000 	.word	0x00000000
 800400c:	406fe000 	.word	0x406fe000
 8004010:	2000078a 	.word	0x2000078a
 8004014:	20000758 	.word	0x20000758
 8004018:	200006e8 	.word	0x200006e8
 800401c:	403e0000 	.word	0x403e0000
 8004020:	40240000 	.word	0x40240000
 8004024:	20000772 	.word	0x20000772
 8004028:	20000004 	.word	0x20000004
 800402c:	20000768 	.word	0x20000768
 8004030:	200005e4 	.word	0x200005e4
 8004034:	20000008 	.word	0x20000008
 8004038:	2000076a 	.word	0x2000076a
 800403c:	20000789 	.word	0x20000789
 8004040:	20000788 	.word	0x20000788

08004044 <RobotstateManagement>:

void RobotstateManagement()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	switch (RobotState)
 8004048:	4b49      	ldr	r3, [pc, #292]	; (8004170 <RobotstateManagement+0x12c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	f200 808c 	bhi.w	800416a <RobotstateManagement+0x126>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <RobotstateManagement+0x14>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800406d 	.word	0x0800406d
 800405c:	08004093 	.word	0x08004093
 8004060:	08004165 	.word	0x08004165
 8004064:	08004165 	.word	0x08004165
 8004068:	08004165 	.word	0x08004165
	{
		case init:
			// Reset all Parameter
			Robotinit(&Robot);
 800406c:	4841      	ldr	r0, [pc, #260]	; (8004174 <RobotstateManagement+0x130>)
 800406e:	f7fd fa57 	bl	8001520 <Robotinit>
			Robot.MotorIsOn = 1;
 8004072:	4b40      	ldr	r3, [pc, #256]	; (8004174 <RobotstateManagement+0x130>)
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2020 	strb.w	r2, [r3, #32]
			// Start Finding home Position
			Robot.flagSethome = 1;
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <RobotstateManagement+0x130>)
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			// Turn 360 Deg
			RobotRunToPositon(360.0);
 8004082:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004178 <RobotstateManagement+0x134>
 8004086:	f000 fa15 	bl	80044b4 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 800408a:	4b39      	ldr	r3, [pc, #228]	; (8004170 <RobotstateManagement+0x12c>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
			break;
 8004090:	e06b      	b.n	800416a <RobotstateManagement+0x126>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <RobotstateManagement+0x130>)
 8004094:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004098:	2b00      	cmp	r3, #0
 800409a:	d165      	bne.n	8004168 <RobotstateManagement+0x124>
			{
				if(Robot.flagSethome == 2)
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <RobotstateManagement+0x130>)
 800409e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d10f      	bne.n	80040c6 <RobotstateManagement+0x82>
				{
					RobotRunToPositon(Robot.HomePositon);
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <RobotstateManagement+0x130>)
 80040a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80040ac:	eeb0 0a67 	vmov.f32	s0, s15
 80040b0:	f000 fa00 	bl	80044b4 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <RobotstateManagement+0x130>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					Robot.flagSethome = 3;
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <RobotstateManagement+0x130>)
 80040be:	2203      	movs	r2, #3
 80040c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					FlagAckFromUART = 1;
					UARTState = normOperation;
					RobotState = NormM;
				}
			}
			break;
 80040c4:	e050      	b.n	8004168 <RobotstateManagement+0x124>
				else if(Robot.flagSethome == 3)
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <RobotstateManagement+0x130>)
 80040c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d14b      	bne.n	8004168 <RobotstateManagement+0x124>
					TIM_ResetCounter(TIM2);
 80040d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80040d4:	f000 fa14 	bl	8004500 <TIM_ResetCounter>
					EncoderRawData[0] = 0;
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <RobotstateManagement+0x138>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
					EncoderRawData[1] = 0;
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <RobotstateManagement+0x138>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
					WrappingStep = 0;
 80040e4:	4b26      	ldr	r3, [pc, #152]	; (8004180 <RobotstateManagement+0x13c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
					CoefficientAndTimeCalculation(&traject,0.0,0.0);
 80040ea:	eddf 0a26 	vldr	s1, [pc, #152]	; 8004184 <RobotstateManagement+0x140>
 80040ee:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8004184 <RobotstateManagement+0x140>
 80040f2:	4825      	ldr	r0, [pc, #148]	; (8004188 <RobotstateManagement+0x144>)
 80040f4:	f7fd fa6c 	bl	80015d0 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <RobotstateManagement+0x130>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					StartTime = 0;
 8004100:	4922      	ldr	r1, [pc, #136]	; (800418c <RobotstateManagement+0x148>)
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9c1 2300 	strd	r2, r3, [r1]
					CurrentTime = 0;
 800410e:	4920      	ldr	r1, [pc, #128]	; (8004190 <RobotstateManagement+0x14c>)
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9c1 2300 	strd	r2, r3, [r1]
					PositionDeg[0] = 0;
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <RobotstateManagement+0x150>)
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
					PositionDeg[1] = 0;
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <RobotstateManagement+0x150>)
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	605a      	str	r2, [r3, #4]
					KalmanMatrixReset(&KalmanVar, Pvar);
 800412c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8004198 <RobotstateManagement+0x154>
 8004130:	481a      	ldr	r0, [pc, #104]	; (800419c <RobotstateManagement+0x158>)
 8004132:	f7fc ff75 	bl	8001020 <KalmanMatrixReset>
					Robotinit(&Robot);
 8004136:	480f      	ldr	r0, [pc, #60]	; (8004174 <RobotstateManagement+0x130>)
 8004138:	f7fd f9f2 	bl	8001520 <Robotinit>
					PIDVelocityController_Init(&PidVelo);
 800413c:	4818      	ldr	r0, [pc, #96]	; (80041a0 <RobotstateManagement+0x15c>)
 800413e:	f7fd f916 	bl	800136e <PIDVelocityController_Init>
					PIDVelocityController_Init(&PidPos);
 8004142:	4818      	ldr	r0, [pc, #96]	; (80041a4 <RobotstateManagement+0x160>)
 8004144:	f7fd f913 	bl	800136e <PIDVelocityController_Init>
					Robot.MotorIsOn = 1;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <RobotstateManagement+0x130>)
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2020 	strb.w	r2, [r3, #32]
					FlagAckFromUART = 1;
 8004150:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <RobotstateManagement+0x164>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <RobotstateManagement+0x168>)
 8004158:	2202      	movs	r2, #2
 800415a:	701a      	strb	r2, [r3, #0]
					RobotState = NormM;
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <RobotstateManagement+0x12c>)
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
			break;
 8004162:	e001      	b.n	8004168 <RobotstateManagement+0x124>
		case NormM:
			break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <RobotstateManagement+0x126>
			break;
 8004168:	bf00      	nop
		case EndEff:
			break;
		case emergency:
			break;
	}
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000719 	.word	0x20000719
 8004174:	200006e8 	.word	0x200006e8
 8004178:	43b40000 	.word	0x43b40000
 800417c:	200007a0 	.word	0x200007a0
 8004180:	200007a8 	.word	0x200007a8
 8004184:	00000000 	.word	0x00000000
 8004188:	200007c0 	.word	0x200007c0
 800418c:	20000878 	.word	0x20000878
 8004190:	20000880 	.word	0x20000880
 8004194:	200007b0 	.word	0x200007b0
 8004198:	447a0000 	.word	0x447a0000
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	2000038c 	.word	0x2000038c
 80041a4:	200003c0 	.word	0x200003c0
 80041a8:	20000758 	.word	0x20000758
 80041ac:	20000718 	.word	0x20000718

080041b0 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <I2CWriteFcn+0x40>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d112      	bne.n	80041e6 <I2CWriteFcn+0x36>
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <I2CWriteFcn+0x44>)
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d10c      	bne.n	80041e6 <I2CWriteFcn+0x36>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <I2CWriteFcn+0x48>)
 80041d2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 80041d4:	2301      	movs	r3, #1
 80041d6:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <I2CWriteFcn+0x48>)
 80041d8:	2146      	movs	r1, #70	; 0x46
 80041da:	4806      	ldr	r0, [pc, #24]	; (80041f4 <I2CWriteFcn+0x44>)
 80041dc:	f001 fd60 	bl	8005ca0 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <I2CWriteFcn+0x40>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
	}
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200008a2 	.word	0x200008a2
 80041f4:	20000428 	.word	0x20000428
 80041f8:	200008ac 	.word	0x200008ac

080041fc <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <I2CReadFcn+0x38>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10e      	bne.n	800422a <I2CReadFcn+0x2e>
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <I2CReadFcn+0x3c>)
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	d108      	bne.n	800422a <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004218:	2301      	movs	r3, #1
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	2146      	movs	r1, #70	; 0x46
 800421e:	4806      	ldr	r0, [pc, #24]	; (8004238 <I2CReadFcn+0x3c>)
 8004220:	f001 fde4 	bl	8005dec <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <I2CReadFcn+0x38>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
	}
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200008a1 	.word	0x200008a1
 8004238:	20000428 	.word	0x20000428

0800423c <EndEffstateManagement>:

void EndEffstateManagement()
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8004240:	4b56      	ldr	r3, [pc, #344]	; (800439c <EndEffstateManagement+0x160>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	f200 80a7 	bhi.w	8004398 <EndEffstateManagement+0x15c>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <EndEffstateManagement+0x14>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004265 	.word	0x08004265
 8004254:	0800426d 	.word	0x0800426d
 8004258:	080042bd 	.word	0x080042bd
 800425c:	080042e3 	.word	0x080042e3
 8004260:	08004309 	.word	0x08004309
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8004264:	4b4e      	ldr	r3, [pc, #312]	; (80043a0 <EndEffstateManagement+0x164>)
 8004266:	2203      	movs	r2, #3
 8004268:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800426a:	e095      	b.n	8004398 <EndEffstateManagement+0x15c>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800426c:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <EndEffstateManagement+0x168>)
 800426e:	2223      	movs	r2, #35	; 0x23
 8004270:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004272:	484c      	ldr	r0, [pc, #304]	; (80043a4 <EndEffstateManagement+0x168>)
 8004274:	f7ff ff9c 	bl	80041b0 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004278:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <EndEffstateManagement+0x16c>)
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 8082 	bne.w	800438a <EndEffstateManagement+0x14e>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8004286:	4849      	ldr	r0, [pc, #292]	; (80043ac <EndEffstateManagement+0x170>)
 8004288:	f7ff ffb8 	bl	80041fc <I2CReadFcn>
				if(hi2c1.State == HAL_I2C_STATE_READY)
 800428c:	4b46      	ldr	r3, [pc, #280]	; (80043a8 <EndEffstateManagement+0x16c>)
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	d178      	bne.n	800438a <EndEffstateManagement+0x14e>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8004298:	4b44      	ldr	r3, [pc, #272]	; (80043ac <EndEffstateManagement+0x170>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b78      	cmp	r3, #120	; 0x78
 800429e:	d109      	bne.n	80042b4 <EndEffstateManagement+0x78>
					{
						EndEffState = OpenLaser;
 80042a0:	4b3e      	ldr	r3, [pc, #248]	; (800439c <EndEffstateManagement+0x160>)
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <EndEffstateManagement+0x174>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80042ac:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <EndEffstateManagement+0x178>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80042b2:	e06a      	b.n	800438a <EndEffstateManagement+0x14e>
						EndEffState = idle;
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <EndEffstateManagement+0x160>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
		break;
 80042ba:	e066      	b.n	800438a <EndEffstateManagement+0x14e>
		case OpenLaser:
			// Open Laser
			I2CTxDataBuffer[0] = 0x45;
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <EndEffstateManagement+0x168>)
 80042be:	2245      	movs	r2, #69	; 0x45
 80042c0:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80042c2:	4838      	ldr	r0, [pc, #224]	; (80043a4 <EndEffstateManagement+0x168>)
 80042c4:	f7ff ff74 	bl	80041b0 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80042c8:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <EndEffstateManagement+0x16c>)
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d15c      	bne.n	800438e <EndEffstateManagement+0x152>
			{
				EndEffState = SetupReadStatus;
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <EndEffstateManagement+0x160>)
 80042d6:	2203      	movs	r2, #3
 80042d8:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80042da:	4b35      	ldr	r3, [pc, #212]	; (80043b0 <EndEffstateManagement+0x174>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
			}
			break;
 80042e0:	e055      	b.n	800438e <EndEffstateManagement+0x152>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80042e2:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <EndEffstateManagement+0x168>)
 80042e4:	2223      	movs	r2, #35	; 0x23
 80042e6:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80042e8:	482e      	ldr	r0, [pc, #184]	; (80043a4 <EndEffstateManagement+0x168>)
 80042ea:	f7ff ff61 	bl	80041b0 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <EndEffstateManagement+0x16c>)
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d14b      	bne.n	8004392 <EndEffstateManagement+0x156>
			{
				EndEffState = ReadStatus;
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <EndEffstateManagement+0x160>)
 80042fc:	2204      	movs	r2, #4
 80042fe:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004300:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <EndEffstateManagement+0x178>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004306:	e044      	b.n	8004392 <EndEffstateManagement+0x156>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8004308:	4828      	ldr	r0, [pc, #160]	; (80043ac <EndEffstateManagement+0x170>)
 800430a:	f7ff ff77 	bl	80041fc <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800430e:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <EndEffstateManagement+0x16c>)
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b20      	cmp	r3, #32
 8004318:	d13d      	bne.n	8004396 <EndEffstateManagement+0x15a>
			{
				I2CEndEffectorReadFlag =  1;
 800431a:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <EndEffstateManagement+0x178>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004320:	4b22      	ldr	r3, [pc, #136]	; (80043ac <EndEffstateManagement+0x170>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b78      	cmp	r3, #120	; 0x78
 8004326:	d106      	bne.n	8004336 <EndEffstateManagement+0xfa>
				{
					EndEffState = idle;
 8004328:	4b1c      	ldr	r3, [pc, #112]	; (800439c <EndEffstateManagement+0x160>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <EndEffstateManagement+0x164>)
 8004330:	2203      	movs	r2, #3
 8004332:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004334:	e02f      	b.n	8004396 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <EndEffstateManagement+0x170>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b12      	cmp	r3, #18
 800433c:	d109      	bne.n	8004352 <EndEffstateManagement+0x116>
					EndEffStatus = Opening;
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <EndEffstateManagement+0x164>)
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <EndEffstateManagement+0x160>)
 8004346:	2203      	movs	r2, #3
 8004348:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <EndEffstateManagement+0x174>)
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
			break;
 8004350:	e021      	b.n	8004396 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <EndEffstateManagement+0x170>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b34      	cmp	r3, #52	; 0x34
 8004358:	d109      	bne.n	800436e <EndEffstateManagement+0x132>
					EndEffStatus = Working;
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <EndEffstateManagement+0x164>)
 800435c:	2202      	movs	r2, #2
 800435e:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <EndEffstateManagement+0x160>)
 8004362:	2203      	movs	r2, #3
 8004364:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <EndEffstateManagement+0x174>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
			break;
 800436c:	e013      	b.n	8004396 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x56)
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <EndEffstateManagement+0x170>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b56      	cmp	r3, #86	; 0x56
 8004374:	d10f      	bne.n	8004396 <EndEffstateManagement+0x15a>
					EndEffStatus = Closing;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <EndEffstateManagement+0x164>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <EndEffstateManagement+0x160>)
 800437e:	2203      	movs	r2, #3
 8004380:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <EndEffstateManagement+0x174>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
			break;
 8004388:	e005      	b.n	8004396 <EndEffstateManagement+0x15a>
		break;
 800438a:	bf00      	nop
 800438c:	e004      	b.n	8004398 <EndEffstateManagement+0x15c>
			break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <EndEffstateManagement+0x15c>
			break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <EndEffstateManagement+0x15c>
			break;
 8004396:	bf00      	nop
	}
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000071a 	.word	0x2000071a
 80043a0:	20000000 	.word	0x20000000
 80043a4:	200008a8 	.word	0x200008a8
 80043a8:	20000428 	.word	0x20000428
 80043ac:	200008a4 	.word	0x200008a4
 80043b0:	200008a2 	.word	0x200008a2
 80043b4:	200008a1 	.word	0x200008a1

080043b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d108      	bne.n	80043dc <HAL_GPIO_EXTI_Callback+0x24>
	{
		I2CEndEffectorWriteFlag = 1;
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_GPIO_EXTI_Callback+0xd4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
		I2CEndEffectorReadFlag =  1;
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_GPIO_EXTI_Callback+0xd8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
		EndEffState = CheckBeforRun;
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_GPIO_EXTI_Callback+0xdc>)
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d142      	bne.n	800446a <HAL_GPIO_EXTI_Callback+0xb2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 80043e4:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_GPIO_EXTI_Callback+0xe0>)
 80043e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d139      	bne.n	8004462 <HAL_GPIO_EXTI_Callback+0xaa>
		{
			homePoint[homeFF] = PositionDeg[0];
 80043ee:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_GPIO_EXTI_Callback+0xe4>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_GPIO_EXTI_Callback+0xe8>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	492a      	ldr	r1, [pc, #168]	; (80044a4 <HAL_GPIO_EXTI_Callback+0xec>)
 80043fa:	0083      	lsls	r3, r0, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_GPIO_EXTI_Callback+0xe4>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_GPIO_EXTI_Callback+0xe4>)
 800440a:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <HAL_GPIO_EXTI_Callback+0xe4>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d126      	bne.n	8004462 <HAL_GPIO_EXTI_Callback+0xaa>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_GPIO_EXTI_Callback+0xec>)
 8004416:	ed93 7a01 	vldr	s14, [r3, #4]
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_GPIO_EXTI_Callback+0xec>)
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004424:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80044a8 <HAL_GPIO_EXTI_Callback+0xf0>
 8004428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	dd04      	ble.n	800443c <HAL_GPIO_EXTI_Callback+0x84>
				{
					Robot.HomePositon =  0;
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	615a      	str	r2, [r3, #20]
 800443a:	e00e      	b.n	800445a <HAL_GPIO_EXTI_Callback+0xa2>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 800443c:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_GPIO_EXTI_Callback+0xec>)
 800443e:	ed93 7a00 	vldr	s14, [r3]
 8004442:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <HAL_GPIO_EXTI_Callback+0xec>)
 8004444:	edd3 7a01 	vldr	s15, [r3, #4]
 8004448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800444c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004454:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004456:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <HAL_GPIO_EXTI_Callback+0xe0>)
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004462:	2108      	movs	r1, #8
 8004464:	4811      	ldr	r0, [pc, #68]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf4>)
 8004466:	f001 faa4 	bl	80059b2 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b20      	cmp	r3, #32
 800446e:	d109      	bne.n	8004484 <HAL_GPIO_EXTI_Callback+0xcc>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8004470:	2110      	movs	r1, #16
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf4>)
 8004474:	f001 fa9d 	bl	80059b2 <HAL_GPIO_TogglePin>
		btncheck++;
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf8>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	b2da      	uxtb	r2, r3
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004482:	701a      	strb	r2, [r3, #0]
	}
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200008a2 	.word	0x200008a2
 8004490:	200008a1 	.word	0x200008a1
 8004494:	2000071a 	.word	0x2000071a
 8004498:	200006e8 	.word	0x200006e8
 800449c:	2000070c 	.word	0x2000070c
 80044a0:	200007b0 	.word	0x200007b0
 80044a4:	20000710 	.word	0x20000710
 80044a8:	43340000 	.word	0x43340000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	200008a0 	.word	0x200008a0

080044b4 <RobotRunToPositon>:
void RobotRunToPositon(float Destination)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	ed87 0a01 	vstr	s0, [r7, #4]
	Robot.GoalPositon = Destination;
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <RobotRunToPositon+0x44>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60d3      	str	r3, [r2, #12]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <RobotRunToPositon+0x44>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <RobotRunToPositon+0x44>)
 80044cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80044d0:	eef0 0a47 	vmov.f32	s1, s14
 80044d4:	eeb0 0a67 	vmov.f32	s0, s15
 80044d8:	4808      	ldr	r0, [pc, #32]	; (80044fc <RobotRunToPositon+0x48>)
 80044da:	f7fd f879 	bl	80015d0 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.flagStartTime = 1;
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <RobotRunToPositon+0x44>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Robot.RunningFlag = 1;
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <RobotRunToPositon+0x44>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200006e8 	.word	0x200006e8
 80044fc:	200007c0 	.word	0x200007c0

08004500 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800451e:	b672      	cpsid	i
}
 8004520:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004522:	e7fe      	b.n	8004522 <Error_Handler+0x8>

08004524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_MspInit+0x4c>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_MspInit+0x4c>)
 8004534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004538:	6453      	str	r3, [r2, #68]	; 0x44
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_MspInit+0x4c>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_MspInit+0x4c>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <HAL_MspInit+0x4c>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_MspInit+0x4c>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004562:	2007      	movs	r0, #7
 8004564:	f000 fc36 	bl	8004dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <HAL_I2C_MspInit+0xa4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d13c      	bne.n	8004610 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_I2C_MspInit+0xa8>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_I2C_MspInit+0xa8>)
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_I2C_MspInit+0xa8>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045b8:	2312      	movs	r3, #18
 80045ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c0:	2303      	movs	r3, #3
 80045c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045c4:	2304      	movs	r3, #4
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	4619      	mov	r1, r3
 80045ce:	4814      	ldr	r0, [pc, #80]	; (8004620 <HAL_I2C_MspInit+0xac>)
 80045d0:	f001 f852 	bl	8005678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <HAL_I2C_MspInit+0xa8>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_I2C_MspInit+0xa8>)
 80045de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_I2C_MspInit+0xa8>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	201f      	movs	r0, #31
 80045f6:	f000 fbf8 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045fa:	201f      	movs	r0, #31
 80045fc:	f000 fc11 	bl	8004e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004600:	2200      	movs	r2, #0
 8004602:	2100      	movs	r1, #0
 8004604:	2020      	movs	r0, #32
 8004606:	f000 fbf0 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800460a:	2020      	movs	r0, #32
 800460c:	f000 fc09 	bl	8004e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004610:	bf00      	nop
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40005400 	.word	0x40005400
 800461c:	40023800 	.word	0x40023800
 8004620:	40020400 	.word	0x40020400

08004624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0e      	ldr	r2, [pc, #56]	; (800466c <HAL_TIM_PWM_MspInit+0x48>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d115      	bne.n	8004662 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_TIM_PWM_MspInit+0x4c>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <HAL_TIM_PWM_MspInit+0x4c>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6453      	str	r3, [r2, #68]	; 0x44
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_TIM_PWM_MspInit+0x4c>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	201a      	movs	r0, #26
 8004658:	f000 fbc7 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800465c:	201a      	movs	r0, #26
 800465e:	f000 fbe0 	bl	8004e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d12b      	bne.n	80046ee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046ce:	2303      	movs	r3, #3
 80046d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046de:	2301      	movs	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	4619      	mov	r1, r3
 80046e8:	4804      	ldr	r0, [pc, #16]	; (80046fc <HAL_TIM_Encoder_MspInit+0x88>)
 80046ea:	f000 ffc5 	bl	8005678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046ee:	bf00      	nop
 80046f0:	3728      	adds	r7, #40	; 0x28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40020000 	.word	0x40020000

08004700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <HAL_TIM_Base_MspInit+0xb8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d116      	bne.n	8004740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	6413      	str	r3, [r2, #64]	; 0x40
 8004722:	4b26      	ldr	r3, [pc, #152]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	201d      	movs	r0, #29
 8004734:	f000 fb59 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004738:	201d      	movs	r0, #29
 800473a:	f000 fb72 	bl	8004e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800473e:	e036      	b.n	80047ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_TIM_Base_MspInit+0xc0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d116      	bne.n	8004778 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	201e      	movs	r0, #30
 800476c:	f000 fb3d 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004770:	201e      	movs	r0, #30
 8004772:	f000 fb56 	bl	8004e22 <HAL_NVIC_EnableIRQ>
}
 8004776:	e01a      	b.n	80047ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <HAL_TIM_Base_MspInit+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d115      	bne.n	80047ae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6453      	str	r3, [r2, #68]	; 0x44
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_TIM_Base_MspInit+0xbc>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800479e:	2200      	movs	r2, #0
 80047a0:	2100      	movs	r1, #0
 80047a2:	201a      	movs	r0, #26
 80047a4:	f000 fb21 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047a8:	201a      	movs	r0, #26
 80047aa:	f000 fb3a 	bl	8004e22 <HAL_NVIC_EnableIRQ>
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40014800 	.word	0x40014800

080047c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 030c 	add.w	r3, r7, #12
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a12      	ldr	r2, [pc, #72]	; (8004830 <HAL_TIM_MspPostInit+0x68>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d11e      	bne.n	8004828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_TIM_MspPostInit+0x6c>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_TIM_MspPostInit+0x6c>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_TIM_MspPostInit+0x6c>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004818:	2301      	movs	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	4619      	mov	r1, r3
 8004822:	4805      	ldr	r0, [pc, #20]	; (8004838 <HAL_TIM_MspPostInit+0x70>)
 8004824:	f000 ff28 	bl	8005678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004828:	bf00      	nop
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40010000 	.word	0x40010000
 8004834:	40023800 	.word	0x40023800
 8004838:	40020000 	.word	0x40020000

0800483c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <HAL_UART_MspInit+0x14c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f040 8090 	bne.w	8004980 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	4b49      	ldr	r3, [pc, #292]	; (800498c <HAL_UART_MspInit+0x150>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	4a48      	ldr	r2, [pc, #288]	; (800498c <HAL_UART_MspInit+0x150>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486e:	6413      	str	r3, [r2, #64]	; 0x40
 8004870:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_UART_MspInit+0x150>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	4b42      	ldr	r3, [pc, #264]	; (800498c <HAL_UART_MspInit+0x150>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	4a41      	ldr	r2, [pc, #260]	; (800498c <HAL_UART_MspInit+0x150>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6313      	str	r3, [r2, #48]	; 0x30
 800488c:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_UART_MspInit+0x150>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004898:	230c      	movs	r3, #12
 800489a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489c:	2302      	movs	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a4:	2303      	movs	r3, #3
 80048a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048a8:	2307      	movs	r3, #7
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	4619      	mov	r1, r3
 80048b2:	4837      	ldr	r0, [pc, #220]	; (8004990 <HAL_UART_MspInit+0x154>)
 80048b4:	f000 fee0 	bl	8005678 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048ba:	4a37      	ldr	r2, [pc, #220]	; (8004998 <HAL_UART_MspInit+0x15c>)
 80048bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048f2:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048f8:	4826      	ldr	r0, [pc, #152]	; (8004994 <HAL_UART_MspInit+0x158>)
 80048fa:	f000 faad 	bl	8004e58 <HAL_DMA_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004904:	f7ff fe09 	bl	800451a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a22      	ldr	r2, [pc, #136]	; (8004994 <HAL_UART_MspInit+0x158>)
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <HAL_UART_MspInit+0x158>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <HAL_UART_MspInit+0x160>)
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_UART_MspInit+0x164>)
 8004918:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_UART_MspInit+0x160>)
 800491c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004920:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_UART_MspInit+0x160>)
 8004924:	2240      	movs	r2, #64	; 0x40
 8004926:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_UART_MspInit+0x160>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800492e:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_UART_MspInit+0x160>)
 8004930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004934:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004936:	4b19      	ldr	r3, [pc, #100]	; (800499c <HAL_UART_MspInit+0x160>)
 8004938:	2200      	movs	r2, #0
 800493a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_UART_MspInit+0x160>)
 800493e:	2200      	movs	r2, #0
 8004940:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <HAL_UART_MspInit+0x160>)
 8004944:	2200      	movs	r2, #0
 8004946:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <HAL_UART_MspInit+0x160>)
 800494a:	2200      	movs	r2, #0
 800494c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_UART_MspInit+0x160>)
 8004950:	2200      	movs	r2, #0
 8004952:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004954:	4811      	ldr	r0, [pc, #68]	; (800499c <HAL_UART_MspInit+0x160>)
 8004956:	f000 fa7f 	bl	8004e58 <HAL_DMA_Init>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004960:	f7ff fddb 	bl	800451a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_UART_MspInit+0x160>)
 8004968:	635a      	str	r2, [r3, #52]	; 0x34
 800496a:	4a0c      	ldr	r2, [pc, #48]	; (800499c <HAL_UART_MspInit+0x160>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	2026      	movs	r0, #38	; 0x26
 8004976:	f000 fa38 	bl	8004dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800497a:	2026      	movs	r0, #38	; 0x26
 800497c:	f000 fa51 	bl	8004e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004980:	bf00      	nop
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40004400 	.word	0x40004400
 800498c:	40023800 	.word	0x40023800
 8004990:	40020000 	.word	0x40020000
 8004994:	20000628 	.word	0x20000628
 8004998:	40026088 	.word	0x40026088
 800499c:	20000688 	.word	0x20000688
 80049a0:	400260a0 	.word	0x400260a0

080049a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <NMI_Handler+0x4>

080049aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <HardFault_Handler+0x4>

080049b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <MemManage_Handler+0x4>

080049b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ba:	e7fe      	b.n	80049ba <BusFault_Handler+0x4>

080049bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c0:	e7fe      	b.n	80049c0 <UsageFault_Handler+0x4>

080049c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049c2:	b480      	push	{r7}
 80049c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f0:	f000 f900 	bl	8004bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <SysTick_Handler+0x18>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	4a02      	ldr	r2, [pc, #8]	; (8004a04 <SysTick_Handler+0x18>)
 80049fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000764 	.word	0x20000764

08004a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <DMA1_Stream5_IRQHandler+0x10>)
 8004a0e:	f000 fbbb 	bl	8005188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000628 	.word	0x20000628

08004a1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <DMA1_Stream6_IRQHandler+0x10>)
 8004a22:	f000 fbb1 	bl	8005188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000688 	.word	0x20000688

08004a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8004a34:	2020      	movs	r0, #32
 8004a36:	f000 ffd7 	bl	80059e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004a46:	f003 fed9 	bl	80087fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004a4a:	4803      	ldr	r0, [pc, #12]	; (8004a58 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004a4c:	f003 fed6 	bl	80087fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	2000047c 	.word	0x2000047c
 8004a58:	2000059c 	.word	0x2000059c

08004a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <TIM3_IRQHandler+0x10>)
 8004a62:	f003 fecb 	bl	80087fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000050c 	.word	0x2000050c

08004a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <TIM4_IRQHandler+0x10>)
 8004a76:	f003 fec1 	bl	80087fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000554 	.word	0x20000554

08004a84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <I2C1_EV_IRQHandler+0x10>)
 8004a8a:	f001 fa5d 	bl	8005f48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000428 	.word	0x20000428

08004a98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <I2C1_ER_IRQHandler+0x10>)
 8004a9e:	f001 fbc4 	bl	800622a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000428 	.word	0x20000428

08004aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <USART2_IRQHandler+0x10>)
 8004ab2:	f004 fe2f 	bl	8009714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200005e4 	.word	0x200005e4

08004ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8004ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004ac8:	f000 ff8e 	bl	80059e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ad0:	f000 ff8a 	bl	80059e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <SystemInit+0x20>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <SystemInit+0x20>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <Reset_Handler>:
 8004afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b34 <LoopFillZerobss+0x12>
 8004b00:	480d      	ldr	r0, [pc, #52]	; (8004b38 <LoopFillZerobss+0x16>)
 8004b02:	490e      	ldr	r1, [pc, #56]	; (8004b3c <LoopFillZerobss+0x1a>)
 8004b04:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <LoopFillZerobss+0x1e>)
 8004b06:	2300      	movs	r3, #0
 8004b08:	e002      	b.n	8004b10 <LoopCopyDataInit>

08004b0a <CopyDataInit>:
 8004b0a:	58d4      	ldr	r4, [r2, r3]
 8004b0c:	50c4      	str	r4, [r0, r3]
 8004b0e:	3304      	adds	r3, #4

08004b10 <LoopCopyDataInit>:
 8004b10:	18c4      	adds	r4, r0, r3
 8004b12:	428c      	cmp	r4, r1
 8004b14:	d3f9      	bcc.n	8004b0a <CopyDataInit>
 8004b16:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <LoopFillZerobss+0x22>)
 8004b18:	4c0b      	ldr	r4, [pc, #44]	; (8004b48 <LoopFillZerobss+0x26>)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e001      	b.n	8004b22 <LoopFillZerobss>

08004b1e <FillZerobss>:
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	3204      	adds	r2, #4

08004b22 <LoopFillZerobss>:
 8004b22:	42a2      	cmp	r2, r4
 8004b24:	d3fb      	bcc.n	8004b1e <FillZerobss>
 8004b26:	f7ff ffd7 	bl	8004ad8 <SystemInit>
 8004b2a:	f006 f9b5 	bl	800ae98 <__libc_init_array>
 8004b2e:	f7fd ffd5 	bl	8002adc <main>
 8004b32:	4770      	bx	lr
 8004b34:	20020000 	.word	0x20020000
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20000404 	.word	0x20000404
 8004b40:	0800af54 	.word	0x0800af54
 8004b44:	20000408 	.word	0x20000408
 8004b48:	200008b4 	.word	0x200008b4

08004b4c <ADC_IRQHandler>:
 8004b4c:	e7fe      	b.n	8004b4c <ADC_IRQHandler>
	...

08004b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_Init+0x40>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0d      	ldr	r2, [pc, #52]	; (8004b90 <HAL_Init+0x40>)
 8004b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_Init+0x40>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <HAL_Init+0x40>)
 8004b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_Init+0x40>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <HAL_Init+0x40>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b78:	2003      	movs	r0, #3
 8004b7a:	f000 f92b 	bl	8004dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f000 f808 	bl	8004b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b84:	f7ff fcce 	bl	8004524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023c00 	.word	0x40023c00

08004b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_InitTick+0x54>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_InitTick+0x58>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f943 	bl	8004e3e <HAL_SYSTICK_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00e      	b.n	8004be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d80a      	bhi.n	8004bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	f000 f90b 	bl	8004dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <HAL_InitTick+0x5c>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200003f8 	.word	0x200003f8
 8004bec:	20000400 	.word	0x20000400
 8004bf0:	200003fc 	.word	0x200003fc

08004bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_IncTick+0x20>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x24>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <HAL_IncTick+0x24>)
 8004c06:	6013      	str	r3, [r2, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000400 	.word	0x20000400
 8004c18:	200008b0 	.word	0x200008b0

08004c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <HAL_GetTick+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	200008b0 	.word	0x200008b0

08004c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <__NVIC_SetPriorityGrouping+0x44>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <__NVIC_SetPriorityGrouping+0x44>)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	60d3      	str	r3, [r2, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <__NVIC_GetPriorityGrouping+0x18>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	f003 0307 	and.w	r3, r3, #7
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	db0b      	blt.n	8004cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	f003 021f 	and.w	r2, r3, #31
 8004cb0:	4907      	ldr	r1, [pc, #28]	; (8004cd0 <__NVIC_EnableIRQ+0x38>)
 8004cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2001      	movs	r0, #1
 8004cba:	fa00 f202 	lsl.w	r2, r0, r2
 8004cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000e100 	.word	0xe000e100

08004cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	db0a      	blt.n	8004cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	490c      	ldr	r1, [pc, #48]	; (8004d20 <__NVIC_SetPriority+0x4c>)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	0112      	lsls	r2, r2, #4
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cfc:	e00a      	b.n	8004d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4908      	ldr	r1, [pc, #32]	; (8004d24 <__NVIC_SetPriority+0x50>)
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	3b04      	subs	r3, #4
 8004d0c:	0112      	lsls	r2, r2, #4
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	440b      	add	r3, r1
 8004d12:	761a      	strb	r2, [r3, #24]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	e000e100 	.word	0xe000e100
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f1c3 0307 	rsb	r3, r3, #7
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	bf28      	it	cs
 8004d46:	2304      	movcs	r3, #4
 8004d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d902      	bls.n	8004d58 <NVIC_EncodePriority+0x30>
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3b03      	subs	r3, #3
 8004d56:	e000      	b.n	8004d5a <NVIC_EncodePriority+0x32>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43da      	mvns	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d70:	f04f 31ff 	mov.w	r1, #4294967295
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	43d9      	mvns	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	4313      	orrs	r3, r2
         );
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da0:	d301      	bcc.n	8004da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00f      	b.n	8004dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <SysTick_Config+0x40>)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dae:	210f      	movs	r1, #15
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	f7ff ff8e 	bl	8004cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <SysTick_Config+0x40>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <SysTick_Config+0x40>)
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000e010 	.word	0xe000e010

08004dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff29 	bl	8004c34 <__NVIC_SetPriorityGrouping>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dfc:	f7ff ff3e 	bl	8004c7c <__NVIC_GetPriorityGrouping>
 8004e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f7ff ff8e 	bl	8004d28 <NVIC_EncodePriority>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff5d 	bl	8004cd4 <__NVIC_SetPriority>
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ff31 	bl	8004c98 <__NVIC_EnableIRQ>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ffa2 	bl	8004d90 <SysTick_Config>
 8004e4c:	4603      	mov	r3, r0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7ff feda 	bl	8004c1c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e099      	b.n	8004fa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e94:	e00f      	b.n	8004eb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e96:	f7ff fec1 	bl	8004c1c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d908      	bls.n	8004eb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2203      	movs	r2, #3
 8004eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e078      	b.n	8004fa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e8      	bne.n	8004e96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_DMA_Init+0x158>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d107      	bne.n	8004f20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d117      	bne.n	8004f7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb0f 	bl	8005580 <DMA_CheckFifoParam>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f76:	2301      	movs	r3, #1
 8004f78:	e016      	b.n	8004fa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fac6 	bl	8005514 <DMA_CalcBaseAndBitshift>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	223f      	movs	r2, #63	; 0x3f
 8004f92:	409a      	lsls	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	f010803f 	.word	0xf010803f

08004fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Start_IT+0x26>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e040      	b.n	800505c <HAL_DMA_Start_IT+0xa8>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d12f      	bne.n	800504e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fa58 	bl	80054b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	223f      	movs	r2, #63	; 0x3f
 800500e:	409a      	lsls	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0216 	orr.w	r2, r2, #22
 8005022:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0208 	orr.w	r2, r2, #8
 800503a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e005      	b.n	800505a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005072:	f7ff fdd3 	bl	8004c1c <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d008      	beq.n	8005096 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e052      	b.n	800513c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0216 	bic.w	r2, r2, #22
 80050a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <HAL_DMA_Abort+0x62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0208 	bic.w	r2, r2, #8
 80050d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e6:	e013      	b.n	8005110 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050e8:	f7ff fd98 	bl	8004c1c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d90c      	bls.n	8005110 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2203      	movs	r2, #3
 8005100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e015      	b.n	800513c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e4      	bne.n	80050e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005122:	223f      	movs	r2, #63	; 0x3f
 8005124:	409a      	lsls	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d004      	beq.n	8005162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e00c      	b.n	800517c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2205      	movs	r2, #5
 8005166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005194:	4b8e      	ldr	r3, [pc, #568]	; (80053d0 <HAL_DMA_IRQHandler+0x248>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a8e      	ldr	r2, [pc, #568]	; (80053d4 <HAL_DMA_IRQHandler+0x24c>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	0a9b      	lsrs	r3, r3, #10
 80051a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	2208      	movs	r2, #8
 80051b4:	409a      	lsls	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01a      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2208      	movs	r2, #8
 80051e2:	409a      	lsls	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0201 	orr.w	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	2201      	movs	r2, #1
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2201      	movs	r2, #1
 8005218:	409a      	lsls	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f043 0202 	orr.w	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	2204      	movs	r2, #4
 8005230:	409a      	lsls	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d012      	beq.n	8005260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	2204      	movs	r2, #4
 800524e:	409a      	lsls	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	2210      	movs	r2, #16
 8005266:	409a      	lsls	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d043      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d03c      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	2210      	movs	r2, #16
 8005284:	409a      	lsls	r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d024      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
 80052b6:	e01f      	b.n	80052f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
 80052c8:	e016      	b.n	80052f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0208 	bic.w	r2, r2, #8
 80052e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	2220      	movs	r2, #32
 80052fe:	409a      	lsls	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 808f 	beq.w	8005428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8087 	beq.w	8005428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531e:	2220      	movs	r2, #32
 8005320:	409a      	lsls	r2, r3
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b05      	cmp	r3, #5
 8005330:	d136      	bne.n	80053a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0216 	bic.w	r2, r2, #22
 8005340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <HAL_DMA_IRQHandler+0x1da>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0208 	bic.w	r2, r2, #8
 8005370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	223f      	movs	r2, #63	; 0x3f
 8005378:	409a      	lsls	r2, r3
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	2b00      	cmp	r3, #0
 8005394:	d07e      	beq.n	8005494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
        }
        return;
 800539e:	e079      	b.n	8005494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01d      	beq.n	80053ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10d      	bne.n	80053d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d031      	beq.n	8005428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
 80053cc:	e02c      	b.n	8005428 <HAL_DMA_IRQHandler+0x2a0>
 80053ce:	bf00      	nop
 80053d0:	200003f8 	.word	0x200003f8
 80053d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d023      	beq.n	8005428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
 80053e8:	e01e      	b.n	8005428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0210 	bic.w	r2, r2, #16
 8005406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d022      	beq.n	8005482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2205      	movs	r2, #5
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	3301      	adds	r3, #1
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	d307      	bcc.n	8005470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f2      	bne.n	8005454 <HAL_DMA_IRQHandler+0x2cc>
 800546e:	e000      	b.n	8005472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
 8005492:	e000      	b.n	8005496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005494:	bf00      	nop
    }
  }
}
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054aa:	b2db      	uxtb	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d108      	bne.n	80054f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054f6:	e007      	b.n	8005508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	3b10      	subs	r3, #16
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <DMA_CalcBaseAndBitshift+0x64>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <DMA_CalcBaseAndBitshift+0x68>)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d909      	bls.n	8005556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	659a      	str	r2, [r3, #88]	; 0x58
 8005554:	e007      	b.n	8005566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	aaaaaaab 	.word	0xaaaaaaab
 800557c:	0800af3c 	.word	0x0800af3c

08005580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11f      	bne.n	80055da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d856      	bhi.n	800564e <DMA_CheckFifoParam+0xce>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <DMA_CheckFifoParam+0x28>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055cb 	.word	0x080055cb
 80055b0:	080055b9 	.word	0x080055b9
 80055b4:	0800564f 	.word	0x0800564f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d046      	beq.n	8005652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c8:	e043      	b.n	8005652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d2:	d140      	bne.n	8005656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e03d      	b.n	8005656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d121      	bne.n	8005628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d837      	bhi.n	800565a <DMA_CheckFifoParam+0xda>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <DMA_CheckFifoParam+0x70>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005607 	.word	0x08005607
 80055f8:	08005601 	.word	0x08005601
 80055fc:	08005619 	.word	0x08005619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e030      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d025      	beq.n	800565e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005616:	e022      	b.n	800565e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005620:	d11f      	bne.n	8005662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005626:	e01c      	b.n	8005662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d903      	bls.n	8005636 <DMA_CheckFifoParam+0xb6>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d003      	beq.n	800563c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005634:	e018      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e015      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e00b      	b.n	8005666 <DMA_CheckFifoParam+0xe6>
      break;
 800564e:	bf00      	nop
 8005650:	e00a      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;
 8005652:	bf00      	nop
 8005654:	e008      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;
 8005656:	bf00      	nop
 8005658:	e006      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;
 800565a:	bf00      	nop
 800565c:	e004      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;
 800565e:	bf00      	nop
 8005660:	e002      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;   
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <DMA_CheckFifoParam+0xe8>
      break;
 8005666:	bf00      	nop
    }
  } 
  
  return status; 
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop

08005678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	e159      	b.n	8005948 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005694:	2201      	movs	r2, #1
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4013      	ands	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	f040 8148 	bne.w	8005942 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d005      	beq.n	80056ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d130      	bne.n	800572c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	2203      	movs	r2, #3
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005700:	2201      	movs	r2, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	43db      	mvns	r3, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 0201 	and.w	r2, r3, #1
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b03      	cmp	r3, #3
 8005736:	d017      	beq.n	8005768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2203      	movs	r2, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d123      	bne.n	80057bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3208      	adds	r2, #8
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	220f      	movs	r2, #15
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	08da      	lsrs	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3208      	adds	r2, #8
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 0203 	and.w	r2, r3, #3
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80a2 	beq.w	8005942 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4b57      	ldr	r3, [pc, #348]	; (8005960 <HAL_GPIO_Init+0x2e8>)
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	4a56      	ldr	r2, [pc, #344]	; (8005960 <HAL_GPIO_Init+0x2e8>)
 8005808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800580c:	6453      	str	r3, [r2, #68]	; 0x44
 800580e:	4b54      	ldr	r3, [pc, #336]	; (8005960 <HAL_GPIO_Init+0x2e8>)
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800581a:	4a52      	ldr	r2, [pc, #328]	; (8005964 <HAL_GPIO_Init+0x2ec>)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	3302      	adds	r3, #2
 8005822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4013      	ands	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a49      	ldr	r2, [pc, #292]	; (8005968 <HAL_GPIO_Init+0x2f0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d019      	beq.n	800587a <HAL_GPIO_Init+0x202>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a48      	ldr	r2, [pc, #288]	; (800596c <HAL_GPIO_Init+0x2f4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_GPIO_Init+0x1fe>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a47      	ldr	r2, [pc, #284]	; (8005970 <HAL_GPIO_Init+0x2f8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00d      	beq.n	8005872 <HAL_GPIO_Init+0x1fa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a46      	ldr	r2, [pc, #280]	; (8005974 <HAL_GPIO_Init+0x2fc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <HAL_GPIO_Init+0x1f6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a45      	ldr	r2, [pc, #276]	; (8005978 <HAL_GPIO_Init+0x300>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_GPIO_Init+0x1f2>
 8005866:	2304      	movs	r3, #4
 8005868:	e008      	b.n	800587c <HAL_GPIO_Init+0x204>
 800586a:	2307      	movs	r3, #7
 800586c:	e006      	b.n	800587c <HAL_GPIO_Init+0x204>
 800586e:	2303      	movs	r3, #3
 8005870:	e004      	b.n	800587c <HAL_GPIO_Init+0x204>
 8005872:	2302      	movs	r3, #2
 8005874:	e002      	b.n	800587c <HAL_GPIO_Init+0x204>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_GPIO_Init+0x204>
 800587a:	2300      	movs	r3, #0
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	f002 0203 	and.w	r2, r2, #3
 8005882:	0092      	lsls	r2, r2, #2
 8005884:	4093      	lsls	r3, r2
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800588c:	4935      	ldr	r1, [pc, #212]	; (8005964 <HAL_GPIO_Init+0x2ec>)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	3302      	adds	r3, #2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800589a:	4b38      	ldr	r3, [pc, #224]	; (800597c <HAL_GPIO_Init+0x304>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058be:	4a2f      	ldr	r2, [pc, #188]	; (800597c <HAL_GPIO_Init+0x304>)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_GPIO_Init+0x304>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_GPIO_Init+0x304>)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_GPIO_Init+0x304>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005912:	4a1a      	ldr	r2, [pc, #104]	; (800597c <HAL_GPIO_Init+0x304>)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <HAL_GPIO_Init+0x304>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800593c:	4a0f      	ldr	r2, [pc, #60]	; (800597c <HAL_GPIO_Init+0x304>)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	3301      	adds	r3, #1
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b0f      	cmp	r3, #15
 800594c:	f67f aea2 	bls.w	8005694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800
 8005964:	40013800 	.word	0x40013800
 8005968:	40020000 	.word	0x40020000
 800596c:	40020400 	.word	0x40020400
 8005970:	40020800 	.word	0x40020800
 8005974:	40020c00 	.word	0x40020c00
 8005978:	40021000 	.word	0x40021000
 800597c:	40013c00 	.word	0x40013c00

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	400b      	ands	r3, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fcd6 	bl	80043b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40013c00 	.word	0x40013c00

08005a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e12b      	b.n	8005c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe fd98 	bl	8004574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a7c:	f002 fbb0 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 8005a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4a81      	ldr	r2, [pc, #516]	; (8005c8c <HAL_I2C_Init+0x274>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d807      	bhi.n	8005a9c <HAL_I2C_Init+0x84>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a80      	ldr	r2, [pc, #512]	; (8005c90 <HAL_I2C_Init+0x278>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	bf94      	ite	ls
 8005a94:	2301      	movls	r3, #1
 8005a96:	2300      	movhi	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e006      	b.n	8005aaa <HAL_I2C_Init+0x92>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a7d      	ldr	r2, [pc, #500]	; (8005c94 <HAL_I2C_Init+0x27c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	bf94      	ite	ls
 8005aa4:	2301      	movls	r3, #1
 8005aa6:	2300      	movhi	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0e7      	b.n	8005c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a78      	ldr	r2, [pc, #480]	; (8005c98 <HAL_I2C_Init+0x280>)
 8005ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aba:	0c9b      	lsrs	r3, r3, #18
 8005abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a6a      	ldr	r2, [pc, #424]	; (8005c8c <HAL_I2C_Init+0x274>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d802      	bhi.n	8005aec <HAL_I2C_Init+0xd4>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	e009      	b.n	8005b00 <HAL_I2C_Init+0xe8>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	4a69      	ldr	r2, [pc, #420]	; (8005c9c <HAL_I2C_Init+0x284>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	099b      	lsrs	r3, r3, #6
 8005afe:	3301      	adds	r3, #1
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	495c      	ldr	r1, [pc, #368]	; (8005c8c <HAL_I2C_Init+0x274>)
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	d819      	bhi.n	8005b54 <HAL_I2C_Init+0x13c>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1e59      	subs	r1, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b34:	400b      	ands	r3, r1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_I2C_Init+0x138>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1e59      	subs	r1, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	e051      	b.n	8005bf4 <HAL_I2C_Init+0x1dc>
 8005b50:	2304      	movs	r3, #4
 8005b52:	e04f      	b.n	8005bf4 <HAL_I2C_Init+0x1dc>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d111      	bne.n	8005b80 <HAL_I2C_Init+0x168>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1e58      	subs	r0, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	440b      	add	r3, r1
 8005b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e012      	b.n	8005ba6 <HAL_I2C_Init+0x18e>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1e58      	subs	r0, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	0099      	lsls	r1, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Init+0x196>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e022      	b.n	8005bf4 <HAL_I2C_Init+0x1dc>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_I2C_Init+0x1bc>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1e58      	subs	r0, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	440b      	add	r3, r1
 8005bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	e00f      	b.n	8005bf4 <HAL_I2C_Init+0x1dc>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1e58      	subs	r0, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	0099      	lsls	r1, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bea:	3301      	adds	r3, #1
 8005bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	6809      	ldr	r1, [r1, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6911      	ldr	r1, [r2, #16]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68d2      	ldr	r2, [r2, #12]
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	000186a0 	.word	0x000186a0
 8005c90:	001e847f 	.word	0x001e847f
 8005c94:	003d08ff 	.word	0x003d08ff
 8005c98:	431bde83 	.word	0x431bde83
 8005c9c:	10624dd3 	.word	0x10624dd3

08005ca0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	461a      	mov	r2, r3
 8005cac:	460b      	mov	r3, r1
 8005cae:	817b      	strh	r3, [r7, #10]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	f040 8085 	bne.w	8005dd0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cc6:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	08db      	lsrs	r3, r3, #3
 8005ccc:	4a45      	ldr	r2, [pc, #276]	; (8005de4 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	0a1a      	lsrs	r2, r3, #8
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d116      	bne.n	8005d1a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e05b      	b.n	8005dd2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d0db      	beq.n	8005ce0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_I2C_Master_Transmit_IT+0x96>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e04d      	b.n	8005dd2 <HAL_I2C_Master_Transmit_IT+0x132>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d007      	beq.n	8005d5c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2221      	movs	r2, #33	; 0x21
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2210      	movs	r2, #16
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	893a      	ldrh	r2, [r7, #8]
 8005d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005d9e:	897a      	ldrh	r2, [r7, #10]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005dba:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	200003f8 	.word	0x200003f8
 8005de4:	14f8b589 	.word	0x14f8b589
 8005de8:	ffff0000 	.word	0xffff0000

08005dec <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	460b      	mov	r3, r1
 8005dfa:	817b      	strh	r3, [r7, #10]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	f040 808d 	bne.w	8005f2c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e12:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_I2C_Master_Receive_IT+0x150>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	4a49      	ldr	r2, [pc, #292]	; (8005f40 <HAL_I2C_Master_Receive_IT+0x154>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0a1a      	lsrs	r2, r3, #8
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009a      	lsls	r2, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d116      	bne.n	8005e66 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e063      	b.n	8005f2e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d0db      	beq.n	8005e2c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2C_Master_Receive_IT+0x96>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e055      	b.n	8005f2e <HAL_I2C_Master_Receive_IT+0x142>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d007      	beq.n	8005ea8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2222      	movs	r2, #34	; 0x22
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	893a      	ldrh	r2, [r7, #8]
 8005ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_I2C_Master_Receive_IT+0x158>)
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005eea:	897a      	ldrh	r2, [r7, #10]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005f06:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f16:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f26:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005f2c:	2302      	movs	r3, #2
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	200003f8 	.word	0x200003f8
 8005f40:	14f8b589 	.word	0x14f8b589
 8005f44:	ffff0000 	.word	0xffff0000

08005f48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d003      	beq.n	8005f80 <HAL_I2C_EV_IRQHandler+0x38>
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	f040 80c1 	bne.w	8006102 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10d      	bne.n	8005fb6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005fa0:	d003      	beq.n	8005faa <HAL_I2C_EV_IRQHandler+0x62>
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005fa8:	d101      	bne.n	8005fae <HAL_I2C_EV_IRQHandler+0x66>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_I2C_EV_IRQHandler+0x68>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	f000 8132 	beq.w	800621a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x92>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	0a5b      	lsrs	r3, r3, #9
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fc7b 	bl	80078c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fd83 	bl	8006ade <I2C_Master_SB>
 8005fd8:	e092      	b.n	8006100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_I2C_EV_IRQHandler+0xb2>
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	0a5b      	lsrs	r3, r3, #9
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fdf9 	bl	8006bea <I2C_Master_ADD10>
 8005ff8:	e082      	b.n	8006100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_I2C_EV_IRQHandler+0xd2>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	0a5b      	lsrs	r3, r3, #9
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fe13 	bl	8006c3e <I2C_Master_ADDR>
 8006018:	e072      	b.n	8006100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d03b      	beq.n	800609e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	f000 80f3 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00f      	beq.n	8006064 <HAL_I2C_EV_IRQHandler+0x11c>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <HAL_I2C_EV_IRQHandler+0x11c>
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f9f3 	bl	8006448 <I2C_MasterTransmit_TXE>
 8006062:	e04d      	b.n	8006100 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80d6 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	0a5b      	lsrs	r3, r3, #9
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80cf 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b21      	cmp	r3, #33	; 0x21
 8006084:	d103      	bne.n	800608e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa7a 	bl	8006580 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800608c:	e0c7      	b.n	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	f040 80c4 	bne.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fae8 	bl	800666c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800609c:	e0bf      	b.n	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	f000 80b7 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00f      	beq.n	80060dc <HAL_I2C_EV_IRQHandler+0x194>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	0a9b      	lsrs	r3, r3, #10
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <HAL_I2C_EV_IRQHandler+0x194>
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fb5d 	bl	8006794 <I2C_MasterReceive_RXNE>
 80060da:	e011      	b.n	8006100 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 809a 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	0a5b      	lsrs	r3, r3, #9
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8093 	beq.w	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fc06 	bl	800690a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060fe:	e08e      	b.n	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006100:	e08d      	b.n	800621e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	e007      	b.n	8006124 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <HAL_I2C_EV_IRQHandler+0x20e>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	0a5b      	lsrs	r3, r3, #9
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00c      	beq.n	8006156 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ffc4 	bl	80070dc <I2C_Slave_ADDR>
 8006154:	e066      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0x22e>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	0a5b      	lsrs	r3, r3, #9
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fffe 	bl	8007170 <I2C_Slave_STOPF>
 8006174:	e056      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b21      	cmp	r3, #33	; 0x21
 800617a:	d002      	beq.n	8006182 <HAL_I2C_EV_IRQHandler+0x23a>
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	2b29      	cmp	r3, #41	; 0x29
 8006180:	d125      	bne.n	80061ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	09db      	lsrs	r3, r3, #7
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00f      	beq.n	80061ae <HAL_I2C_EV_IRQHandler+0x266>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	0a9b      	lsrs	r3, r3, #10
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <HAL_I2C_EV_IRQHandler+0x266>
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 feda 	bl	8006f60 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061ac:	e039      	b.n	8006222 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d033      	beq.n	8006222 <HAL_I2C_EV_IRQHandler+0x2da>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	0a5b      	lsrs	r3, r3, #9
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d02d      	beq.n	8006222 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 ff07 	bl	8006fda <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061cc:	e029      	b.n	8006222 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	0a9b      	lsrs	r3, r3, #10
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 ff12 	bl	800701c <I2C_SlaveReceive_RXNE>
 80061f8:	e014      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	0a5b      	lsrs	r3, r3, #9
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 ff40 	bl	8007098 <I2C_SlaveReceive_BTF>
 8006218:	e004      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800621a:	bf00      	nop
 800621c:	e002      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006222:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b08a      	sub	sp, #40	; 0x28
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800624c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <HAL_I2C_ER_IRQHandler+0x4e>
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f043 0301 	orr.w	r3, r3, #1
 800626c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006276:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	0a5b      	lsrs	r3, r3, #9
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <HAL_I2C_ER_IRQHandler+0x78>
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80062a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	0a9b      	lsrs	r3, r3, #10
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d03f      	beq.n	800632e <HAL_I2C_ER_IRQHandler+0x104>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d039      	beq.n	800632e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80062ba:	7efb      	ldrb	r3, [r7, #27]
 80062bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80062d4:	7ebb      	ldrb	r3, [r7, #26]
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d112      	bne.n	8006300 <HAL_I2C_ER_IRQHandler+0xd6>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10f      	bne.n	8006300 <HAL_I2C_ER_IRQHandler+0xd6>
 80062e0:	7cfb      	ldrb	r3, [r7, #19]
 80062e2:	2b21      	cmp	r3, #33	; 0x21
 80062e4:	d008      	beq.n	80062f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80062e6:	7cfb      	ldrb	r3, [r7, #19]
 80062e8:	2b29      	cmp	r3, #41	; 0x29
 80062ea:	d005      	beq.n	80062f8 <HAL_I2C_ER_IRQHandler+0xce>
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	2b28      	cmp	r3, #40	; 0x28
 80062f0:	d106      	bne.n	8006300 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d103      	bne.n	8006300 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f869 	bl	80073d0 <I2C_Slave_AF>
 80062fe:	e016      	b.n	800632e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006308:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006312:	7efb      	ldrb	r3, [r7, #27]
 8006314:	2b10      	cmp	r3, #16
 8006316:	d002      	beq.n	800631e <HAL_I2C_ER_IRQHandler+0xf4>
 8006318:	7efb      	ldrb	r3, [r7, #27]
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d107      	bne.n	800632e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	0adb      	lsrs	r3, r3, #11
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <HAL_I2C_ER_IRQHandler+0x12e>
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	f043 0308 	orr.w	r3, r3, #8
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006356:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 f8a0 	bl	80074b0 <I2C_ITError>
  }
}
 8006370:	bf00      	nop
 8006372:	3728      	adds	r7, #40	; 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
 80063d4:	4613      	mov	r3, r2
 80063d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d150      	bne.n	8006510 <I2C_MasterTransmit_TXE+0xc8>
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b21      	cmp	r3, #33	; 0x21
 8006472:	d14d      	bne.n	8006510 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d01d      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b20      	cmp	r3, #32
 800647e:	d01a      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006486:	d016      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006496:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2211      	movs	r2, #17
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff ff62 	bl	8006378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064b4:	e060      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d107      	bne.n	8006500 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff7d 	bl	80063f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064fe:	e03b      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff ff35 	bl	8006378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800650e:	e033      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b21      	cmp	r3, #33	; 0x21
 8006514:	d005      	beq.n	8006522 <I2C_MasterTransmit_TXE+0xda>
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d12d      	bne.n	8006578 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b22      	cmp	r3, #34	; 0x22
 8006520:	d12a      	bne.n	8006578 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800653c:	e01c      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d103      	bne.n	8006552 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f88e 	bl	800666c <I2C_MemoryTransmit_TXE_BTF>
}
 8006550:	e012      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006576:	e7ff      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b21      	cmp	r3, #33	; 0x21
 8006598:	d164      	bne.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80065c8:	e04c      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d01d      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d01a      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065dc:	d016      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2211      	movs	r2, #17
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff feb7 	bl	8006378 <HAL_I2C_MasterTxCpltCallback>
}
 800660a:	e02b      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800661a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d107      	bne.n	8006656 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fed2 	bl	80063f8 <HAL_I2C_MemTxCpltCallback>
}
 8006654:	e006      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fe8a 	bl	8006378 <HAL_I2C_MasterTxCpltCallback>
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11d      	bne.n	80066c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10b      	bne.n	80066a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006690:	b2da      	uxtb	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80066a2:	e073      	b.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	121b      	asrs	r3, r3, #8
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066be:	e065      	b.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10b      	bne.n	80066e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066de:	e055      	b.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d151      	bne.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	d10d      	bne.n	800670a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006708:	e040      	b.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d015      	beq.n	8006740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b21      	cmp	r3, #33	; 0x21
 8006718:	d112      	bne.n	8006740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800673e:	e025      	b.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d120      	bne.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b21      	cmp	r3, #33	; 0x21
 800674e:	d11d      	bne.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800675e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fe36 	bl	80063f8 <HAL_I2C_MemTxCpltCallback>
}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b22      	cmp	r3, #34	; 0x22
 80067a6:	f040 80ac 	bne.w	8006902 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d921      	bls.n	80067fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	f040 808c 	bne.w	8006902 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80067fa:	e082      	b.n	8006902 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2b02      	cmp	r3, #2
 8006802:	d075      	beq.n	80068f0 <I2C_MasterReceive_RXNE+0x15c>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d002      	beq.n	8006810 <I2C_MasterReceive_RXNE+0x7c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d16f      	bne.n	80068f0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f827 	bl	8007864 <I2C_WaitOnSTOPRequestThroughIT>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d142      	bne.n	80068a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800683a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d10a      	bne.n	800688c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff fdc1 	bl	800640c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800688a:	e03a      	b.n	8006902 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2212      	movs	r2, #18
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fd76 	bl	800638c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068a0:	e02f      	b.n	8006902 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fd99 	bl	8006420 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068ee:	e008      	b.n	8006902 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fe:	605a      	str	r2, [r3, #4]
}
 8006900:	e7ff      	b.n	8006902 <I2C_MasterReceive_RXNE+0x16e>
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b04      	cmp	r3, #4
 8006920:	d11b      	bne.n	800695a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006930:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006958:	e0bd      	b.n	8006ad6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b03      	cmp	r3, #3
 8006962:	d129      	bne.n	80069b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b04      	cmp	r3, #4
 8006978:	d00a      	beq.n	8006990 <I2C_MasterReceive_BTF+0x86>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d007      	beq.n	8006990 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069b6:	e08e      	b.n	8006ad6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d176      	bne.n	8006ab0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d002      	beq.n	80069ce <I2C_MasterReceive_BTF+0xc4>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d108      	bne.n	80069e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e019      	b.n	8006a14 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d002      	beq.n	80069ec <I2C_MasterReceive_BTF+0xe2>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d108      	bne.n	80069fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e00a      	b.n	8006a14 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d007      	beq.n	8006a14 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a6e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d10a      	bne.n	8006a9a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fcba 	bl	800640c <HAL_I2C_MemRxCpltCallback>
}
 8006a98:	e01d      	b.n	8006ad6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2212      	movs	r2, #18
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fc6f 	bl	800638c <HAL_I2C_MasterRxCpltCallback>
}
 8006aae:	e012      	b.n	8006ad6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d117      	bne.n	8006b22 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b0a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b0c:	e067      	b.n	8006bde <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	611a      	str	r2, [r3, #16]
}
 8006b20:	e05d      	b.n	8006bde <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b2a:	d133      	bne.n	8006b94 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b21      	cmp	r3, #33	; 0x21
 8006b36:	d109      	bne.n	8006b4c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b48:	611a      	str	r2, [r3, #16]
 8006b4a:	e008      	b.n	8006b5e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <I2C_Master_SB+0x92>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d108      	bne.n	8006b82 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d032      	beq.n	8006bde <I2C_Master_SB+0x100>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02d      	beq.n	8006bde <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b90:	605a      	str	r2, [r3, #4]
}
 8006b92:	e024      	b.n	8006bde <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	11db      	asrs	r3, r3, #7
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0306 	and.w	r3, r3, #6
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f063 030f 	orn	r3, r3, #15
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	611a      	str	r2, [r3, #16]
}
 8006bb8:	e011      	b.n	8006bde <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10d      	bne.n	8006bde <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	11db      	asrs	r3, r3, #7
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 0306 	and.w	r3, r3, #6
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f063 030e 	orn	r3, r3, #14
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <I2C_Master_ADD10+0x26>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <I2C_Master_ADD10+0x48>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c30:	605a      	str	r2, [r3, #4]
  }
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b091      	sub	sp, #68	; 0x44
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b22      	cmp	r3, #34	; 0x22
 8006c66:	f040 8169 	bne.w	8006f3c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10f      	bne.n	8006c92 <I2C_Master_ADDR+0x54>
 8006c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d10b      	bne.n	8006c92 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	e160      	b.n	8006f54 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11d      	bne.n	8006cd6 <I2C_Master_ADDR+0x98>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ca2:	d118      	bne.n	8006cd6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50
 8006cd4:	e13e      	b.n	8006f54 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d113      	bne.n	8006d08 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e115      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	f040 808a 	bne.w	8006e28 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d1a:	d137      	bne.n	8006d8c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3a:	d113      	bne.n	8006d64 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	e0e7      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d64:	2300      	movs	r3, #0
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e0d3      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d02e      	beq.n	8006df0 <I2C_Master_ADDR+0x1b2>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d02b      	beq.n	8006df0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	2b12      	cmp	r3, #18
 8006d9c:	d102      	bne.n	8006da4 <I2C_Master_ADDR+0x166>
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d125      	bne.n	8006df0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d00e      	beq.n	8006dc8 <I2C_Master_ADDR+0x18a>
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d00b      	beq.n	8006dc8 <I2C_Master_ADDR+0x18a>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d008      	beq.n	8006dc8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e007      	b.n	8006dd8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dd6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	e0a1      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e085      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d14d      	bne.n	8006ece <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d016      	beq.n	8006e66 <I2C_Master_ADDR+0x228>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d013      	beq.n	8006e66 <I2C_Master_ADDR+0x228>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d010      	beq.n	8006e66 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e52:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e007      	b.n	8006e76 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e74:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e84:	d117      	bne.n	8006eb6 <I2C_Master_ADDR+0x278>
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e8c:	d00b      	beq.n	8006ea6 <I2C_Master_ADDR+0x268>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d008      	beq.n	8006ea6 <I2C_Master_ADDR+0x268>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d005      	beq.n	8006ea6 <I2C_Master_ADDR+0x268>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d002      	beq.n	8006ea6 <I2C_Master_ADDR+0x268>
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d107      	bne.n	8006eb6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	e032      	b.n	8006f34 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006edc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eec:	d117      	bne.n	8006f1e <I2C_Master_ADDR+0x2e0>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ef4:	d00b      	beq.n	8006f0e <I2C_Master_ADDR+0x2d0>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d008      	beq.n	8006f0e <I2C_Master_ADDR+0x2d0>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d005      	beq.n	8006f0e <I2C_Master_ADDR+0x2d0>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d002      	beq.n	8006f0e <I2C_Master_ADDR+0x2d0>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d107      	bne.n	8006f1e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f3a:	e00b      	b.n	8006f54 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	e7ff      	b.n	8006f54 <I2C_Master_ADDR+0x316>
 8006f54:	bf00      	nop
 8006f56:	3744      	adds	r7, #68	; 0x44
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02b      	beq.n	8006fd2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d114      	bne.n	8006fd2 <I2C_SlaveTransmit_TXE+0x72>
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b29      	cmp	r3, #41	; 0x29
 8006fac:	d111      	bne.n	8006fd2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2221      	movs	r2, #33	; 0x21
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2228      	movs	r2, #40	; 0x28
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff f9e7 	bl	80063a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d011      	beq.n	8007010 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d02c      	beq.n	8007090 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d114      	bne.n	8007090 <I2C_SlaveReceive_RXNE+0x74>
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b2a      	cmp	r3, #42	; 0x2a
 800706a:	d111      	bne.n	8007090 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2222      	movs	r2, #34	; 0x22
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2228      	movs	r2, #40	; 0x28
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff f992 	bl	80063b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070f6:	2b28      	cmp	r3, #40	; 0x28
 80070f8:	d127      	bne.n	800714a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007108:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	089b      	lsrs	r3, r3, #2
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007116:	2301      	movs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	81bb      	strh	r3, [r7, #12]
 800712c:	e002      	b.n	8007134 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800713c:	89ba      	ldrh	r2, [r7, #12]
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f940 	bl	80063c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007148:	e00e      	b.n	8007168 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714a:	2300      	movs	r3, #0
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800718e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071cc:	d172      	bne.n	80072b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b22      	cmp	r3, #34	; 0x22
 80071d2:	d002      	beq.n	80071da <I2C_Slave_STOPF+0x6a>
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	2b2a      	cmp	r3, #42	; 0x2a
 80071d8:	d135      	bne.n	8007246 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f043 0204 	orr.w	r2, r3, #4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800720c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe f942 	bl	800549c <HAL_DMA_GetState>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d049      	beq.n	80072b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	4a69      	ldr	r2, [pc, #420]	; (80073c8 <I2C_Slave_STOPF+0x258>)
 8007224:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	4618      	mov	r0, r3
 800722c:	f7fd ff8a 	bl	8005144 <HAL_DMA_Abort_IT>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03d      	beq.n	80072b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007244:	e035      	b.n	80072b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0204 	orr.w	r2, r3, #4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007278:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe f90c 	bl	800549c <HAL_DMA_GetState>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d014      	beq.n	80072b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	4a4e      	ldr	r2, [pc, #312]	; (80073c8 <I2C_Slave_STOPF+0x258>)
 8007290:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	4618      	mov	r0, r3
 8007298:	f7fd ff54 	bl	8005144 <HAL_DMA_Abort_IT>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	e000      	b.n	80072b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03e      	beq.n	800733c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d112      	bne.n	80072f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	d112      	bne.n	8007326 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f043 0204 	orr.w	r2, r3, #4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8b3 	bl	80074b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800734a:	e039      	b.n	80073c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b2a      	cmp	r3, #42	; 0x2a
 8007350:	d109      	bne.n	8007366 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2228      	movs	r2, #40	; 0x28
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff f827 	bl	80063b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b28      	cmp	r3, #40	; 0x28
 8007370:	d111      	bne.n	8007396 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a15      	ldr	r2, [pc, #84]	; (80073cc <I2C_Slave_STOPF+0x25c>)
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff f828 	bl	80063e4 <HAL_I2C_ListenCpltCallback>
}
 8007394:	e014      	b.n	80073c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	2b22      	cmp	r3, #34	; 0x22
 800739c:	d002      	beq.n	80073a4 <I2C_Slave_STOPF+0x234>
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b22      	cmp	r3, #34	; 0x22
 80073a2:	d10d      	bne.n	80073c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fe fffa 	bl	80063b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08007715 	.word	0x08007715
 80073cc:	ffff0000 	.word	0xffff0000

080073d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d002      	beq.n	80073f2 <I2C_Slave_AF+0x22>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d129      	bne.n	8007446 <I2C_Slave_AF+0x76>
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b28      	cmp	r3, #40	; 0x28
 80073f6:	d126      	bne.n	8007446 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	; (80074ac <I2C_Slave_AF+0xdc>)
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800740c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007416:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fe ffd0 	bl	80063e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007444:	e02e      	b.n	80074a4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b21      	cmp	r3, #33	; 0x21
 800744a:	d126      	bne.n	800749a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <I2C_Slave_AF+0xdc>)
 8007450:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2221      	movs	r2, #33	; 0x21
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007476:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007480:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007490:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fe ff84 	bl	80063a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007498:	e004      	b.n	80074a4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074a2:	615a      	str	r2, [r3, #20]
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	ffff0000 	.word	0xffff0000

080074b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d002      	beq.n	80074d4 <I2C_ITError+0x24>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d10a      	bne.n	80074ea <I2C_ITError+0x3a>
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	2b22      	cmp	r3, #34	; 0x22
 80074d8:	d107      	bne.n	80074ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074f0:	2b28      	cmp	r3, #40	; 0x28
 80074f2:	d107      	bne.n	8007504 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2228      	movs	r2, #40	; 0x28
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007502:	e015      	b.n	8007530 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007512:	d00a      	beq.n	800752a <I2C_ITError+0x7a>
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b60      	cmp	r3, #96	; 0x60
 8007518:	d007      	beq.n	800752a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800753a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753e:	d162      	bne.n	8007606 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d020      	beq.n	80075a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	4a6a      	ldr	r2, [pc, #424]	; (800770c <I2C_ITError+0x25c>)
 8007564:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd fdea 	bl	8005144 <HAL_DMA_Abort_IT>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8089 	beq.w	800768a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800759a:	4610      	mov	r0, r2
 800759c:	4798      	blx	r3
 800759e:	e074      	b.n	800768a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	4a59      	ldr	r2, [pc, #356]	; (800770c <I2C_ITError+0x25c>)
 80075a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fd fdc9 	bl	8005144 <HAL_DMA_Abort_IT>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d068      	beq.n	800768a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d10b      	bne.n	80075de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	e041      	b.n	800768a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b60      	cmp	r3, #96	; 0x60
 8007610:	d125      	bne.n	800765e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d10b      	bne.n	8007646 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fe feec 	bl	8006434 <HAL_I2C_AbortCpltCallback>
 800765c:	e015      	b.n	800768a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d10b      	bne.n	8007684 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fe fecb 	bl	8006420 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10e      	bne.n	80076b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d113      	bne.n	8007704 <I2C_ITError+0x254>
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b28      	cmp	r3, #40	; 0x28
 80076e0:	d110      	bne.n	8007704 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <I2C_ITError+0x260>)
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fe fe70 	bl	80063e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	08007715 	.word	0x08007715
 8007710:	ffff0000 	.word	0xffff0000

08007714 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800772e:	4b4b      	ldr	r3, [pc, #300]	; (800785c <I2C_DMAAbort+0x148>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	08db      	lsrs	r3, r3, #3
 8007734:	4a4a      	ldr	r2, [pc, #296]	; (8007860 <I2C_DMAAbort+0x14c>)
 8007736:	fba2 2303 	umull	r2, r3, r2, r3
 800773a:	0a1a      	lsrs	r2, r3, #8
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	00da      	lsls	r2, r3, #3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800775a:	e00a      	b.n	8007772 <I2C_DMAAbort+0x5e>
    }
    count--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b01      	subs	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800776c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007770:	d0ea      	beq.n	8007748 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	2200      	movs	r2, #0
 8007780:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	2200      	movs	r2, #0
 8007790:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2200      	movs	r2, #0
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	2200      	movs	r2, #0
 80077b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	2200      	movs	r2, #0
 80077c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0201 	bic.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b60      	cmp	r3, #96	; 0x60
 80077e2:	d10e      	bne.n	8007802 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2200      	movs	r2, #0
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077fa:	6978      	ldr	r0, [r7, #20]
 80077fc:	f7fe fe1a 	bl	8006434 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007800:	e027      	b.n	8007852 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007802:	7cfb      	ldrb	r3, [r7, #19]
 8007804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007808:	2b28      	cmp	r3, #40	; 0x28
 800780a:	d117      	bne.n	800783c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800782a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2200      	movs	r2, #0
 8007830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2228      	movs	r2, #40	; 0x28
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800783a:	e007      	b.n	800784c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f7fe fde7 	bl	8006420 <HAL_I2C_ErrorCallback>
}
 8007852:	bf00      	nop
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200003f8 	.word	0x200003f8
 8007860:	14f8b589 	.word	0x14f8b589

08007864 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007870:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	08db      	lsrs	r3, r3, #3
 8007876:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	0a1a      	lsrs	r2, r3, #8
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b01      	subs	r3, #1
 800788a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d107      	bne.n	80078a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e008      	b.n	80078b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b0:	d0e9      	beq.n	8007886 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	200003f8 	.word	0x200003f8
 80078c4:	14f8b589 	.word	0x14f8b589

080078c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80078d8:	d103      	bne.n	80078e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80078e0:	e007      	b.n	80078f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80078ea:	d102      	bne.n	80078f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2208      	movs	r2, #8
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e267      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d075      	beq.n	8007a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800791e:	4b88      	ldr	r3, [pc, #544]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b04      	cmp	r3, #4
 8007928:	d00c      	beq.n	8007944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800792a:	4b85      	ldr	r3, [pc, #532]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007932:	2b08      	cmp	r3, #8
 8007934:	d112      	bne.n	800795c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007936:	4b82      	ldr	r3, [pc, #520]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007942:	d10b      	bne.n	800795c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007944:	4b7e      	ldr	r3, [pc, #504]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d05b      	beq.n	8007a08 <HAL_RCC_OscConfig+0x108>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d157      	bne.n	8007a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e242      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007964:	d106      	bne.n	8007974 <HAL_RCC_OscConfig+0x74>
 8007966:	4b76      	ldr	r3, [pc, #472]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a75      	ldr	r2, [pc, #468]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 800796c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e01d      	b.n	80079b0 <HAL_RCC_OscConfig+0xb0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x98>
 800797e:	4b70      	ldr	r3, [pc, #448]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a6f      	ldr	r2, [pc, #444]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4b6d      	ldr	r3, [pc, #436]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a6c      	ldr	r2, [pc, #432]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	e00b      	b.n	80079b0 <HAL_RCC_OscConfig+0xb0>
 8007998:	4b69      	ldr	r3, [pc, #420]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a68      	ldr	r2, [pc, #416]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 800799e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4b66      	ldr	r3, [pc, #408]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a65      	ldr	r2, [pc, #404]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d013      	beq.n	80079e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b8:	f7fd f930 	bl	8004c1c <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079c0:	f7fd f92c 	bl	8004c1c <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e207      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	4b5b      	ldr	r3, [pc, #364]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0xc0>
 80079de:	e014      	b.n	8007a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fd f91c 	bl	8004c1c <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079e8:	f7fd f918 	bl	8004c1c <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	; 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e1f3      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	4b51      	ldr	r3, [pc, #324]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0xe8>
 8007a06:	e000      	b.n	8007a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d063      	beq.n	8007ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a16:	4b4a      	ldr	r3, [pc, #296]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a22:	4b47      	ldr	r3, [pc, #284]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d11c      	bne.n	8007a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a2e:	4b44      	ldr	r3, [pc, #272]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d116      	bne.n	8007a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3a:	4b41      	ldr	r3, [pc, #260]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_RCC_OscConfig+0x152>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e1c7      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a52:	4b3b      	ldr	r3, [pc, #236]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4937      	ldr	r1, [pc, #220]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a66:	e03a      	b.n	8007ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d020      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a70:	4b34      	ldr	r3, [pc, #208]	; (8007b44 <HAL_RCC_OscConfig+0x244>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7fd f8d1 	bl	8004c1c <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a7e:	f7fd f8cd 	bl	8004c1c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e1a8      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a90:	4b2b      	ldr	r3, [pc, #172]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9c:	4b28      	ldr	r3, [pc, #160]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4925      	ldr	r1, [pc, #148]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	600b      	str	r3, [r1, #0]
 8007ab0:	e015      	b.n	8007ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <HAL_RCC_OscConfig+0x244>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fd f8b0 	bl	8004c1c <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ac0:	f7fd f8ac 	bl	8004c1c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e187      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d036      	beq.n	8007b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007af2:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <HAL_RCC_OscConfig+0x248>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af8:	f7fd f890 	bl	8004c1c <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b00:	f7fd f88c 	bl	8004c1c <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e167      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <HAL_RCC_OscConfig+0x240>)
 8007b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x200>
 8007b1e:	e01b      	b.n	8007b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b20:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <HAL_RCC_OscConfig+0x248>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b26:	f7fd f879 	bl	8004c1c <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b2c:	e00e      	b.n	8007b4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b2e:	f7fd f875 	bl	8004c1c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d907      	bls.n	8007b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e150      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
 8007b40:	40023800 	.word	0x40023800
 8007b44:	42470000 	.word	0x42470000
 8007b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b4c:	4b88      	ldr	r3, [pc, #544]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1ea      	bne.n	8007b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8097 	beq.w	8007c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b6a:	4b81      	ldr	r3, [pc, #516]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10f      	bne.n	8007b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	4b7d      	ldr	r3, [pc, #500]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	4a7c      	ldr	r2, [pc, #496]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b84:	6413      	str	r3, [r2, #64]	; 0x40
 8007b86:	4b7a      	ldr	r3, [pc, #488]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b92:	2301      	movs	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b96:	4b77      	ldr	r3, [pc, #476]	; (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d118      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ba2:	4b74      	ldr	r3, [pc, #464]	; (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a73      	ldr	r2, [pc, #460]	; (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bae:	f7fd f835 	bl	8004c1c <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb6:	f7fd f831 	bl	8004c1c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e10c      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc8:	4b6a      	ldr	r3, [pc, #424]	; (8007d74 <HAL_RCC_OscConfig+0x474>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d106      	bne.n	8007bea <HAL_RCC_OscConfig+0x2ea>
 8007bdc:	4b64      	ldr	r3, [pc, #400]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4a63      	ldr	r2, [pc, #396]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	6713      	str	r3, [r2, #112]	; 0x70
 8007be8:	e01c      	b.n	8007c24 <HAL_RCC_OscConfig+0x324>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x30c>
 8007bf2:	4b5f      	ldr	r3, [pc, #380]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	4a5e      	ldr	r2, [pc, #376]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007bf8:	f043 0304 	orr.w	r3, r3, #4
 8007bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bfe:	4b5c      	ldr	r3, [pc, #368]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c02:	4a5b      	ldr	r2, [pc, #364]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0a:	e00b      	b.n	8007c24 <HAL_RCC_OscConfig+0x324>
 8007c0c:	4b58      	ldr	r3, [pc, #352]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c10:	4a57      	ldr	r2, [pc, #348]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	6713      	str	r3, [r2, #112]	; 0x70
 8007c18:	4b55      	ldr	r3, [pc, #340]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1c:	4a54      	ldr	r2, [pc, #336]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c1e:	f023 0304 	bic.w	r3, r3, #4
 8007c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d015      	beq.n	8007c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2c:	f7fc fff6 	bl	8004c1c <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c32:	e00a      	b.n	8007c4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c34:	f7fc fff2 	bl	8004c1c <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e0cb      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4a:	4b49      	ldr	r3, [pc, #292]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ee      	beq.n	8007c34 <HAL_RCC_OscConfig+0x334>
 8007c56:	e014      	b.n	8007c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c58:	f7fc ffe0 	bl	8004c1c <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c5e:	e00a      	b.n	8007c76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c60:	f7fc ffdc 	bl	8004c1c <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e0b5      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c76:	4b3e      	ldr	r3, [pc, #248]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1ee      	bne.n	8007c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d105      	bne.n	8007c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c88:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	4a38      	ldr	r2, [pc, #224]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80a1 	beq.w	8007de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c9e:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 030c 	and.w	r3, r3, #12
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d05c      	beq.n	8007d64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d141      	bne.n	8007d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb2:	4b31      	ldr	r3, [pc, #196]	; (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb8:	f7fc ffb0 	bl	8004c1c <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fc ffac 	bl	8004c1c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e087      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd2:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	019b      	lsls	r3, r3, #6
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	491b      	ldr	r1, [pc, #108]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d08:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fc ff85 	bl	8004c1c <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d16:	f7fc ff81 	bl	8004c1c <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e05c      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x416>
 8007d34:	e054      	b.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <HAL_RCC_OscConfig+0x478>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3c:	f7fc ff6e 	bl	8004c1c <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fc ff6a 	bl	8004c1c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e045      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <HAL_RCC_OscConfig+0x470>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x444>
 8007d62:	e03d      	b.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d107      	bne.n	8007d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e038      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40007000 	.word	0x40007000
 8007d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d7c:	4b1b      	ldr	r3, [pc, #108]	; (8007dec <HAL_RCC_OscConfig+0x4ec>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d028      	beq.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d121      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d11a      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dac:	4013      	ands	r3, r2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d111      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d001      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800

08007df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0cc      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e04:	4b68      	ldr	r3, [pc, #416]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90c      	bls.n	8007e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e12:	4b65      	ldr	r3, [pc, #404]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1a:	4b63      	ldr	r3, [pc, #396]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0b8      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e44:	4b59      	ldr	r3, [pc, #356]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4a58      	ldr	r2, [pc, #352]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e5c:	4b53      	ldr	r3, [pc, #332]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a52      	ldr	r2, [pc, #328]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e68:	4b50      	ldr	r3, [pc, #320]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	494d      	ldr	r1, [pc, #308]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d044      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8e:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d119      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e07f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d003      	beq.n	8007eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d107      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eae:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e06f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ebe:	4b3b      	ldr	r3, [pc, #236]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e067      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ece:	4b37      	ldr	r3, [pc, #220]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f023 0203 	bic.w	r2, r3, #3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4934      	ldr	r1, [pc, #208]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ee0:	f7fc fe9c 	bl	8004c1c <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee6:	e00a      	b.n	8007efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee8:	f7fc fe98 	bl	8004c1c <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e04f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007efe:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 020c 	and.w	r2, r3, #12
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d1eb      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f10:	4b25      	ldr	r3, [pc, #148]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20c      	bcs.n	8007f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f1e:	4b22      	ldr	r3, [pc, #136]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e032      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f44:	4b19      	ldr	r3, [pc, #100]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4916      	ldr	r1, [pc, #88]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	490e      	ldr	r1, [pc, #56]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f76:	f000 f821 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	490a      	ldr	r1, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f88:	5ccb      	ldrb	r3, [r1, r3]
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fc fdfc 	bl	8004b94 <HAL_InitTick>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40023c00 	.word	0x40023c00
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	0800af24 	.word	0x0800af24
 8007fb4:	200003f8 	.word	0x200003f8
 8007fb8:	200003fc 	.word	0x200003fc

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b094      	sub	sp, #80	; 0x50
 8007fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc8:	2300      	movs	r3, #0
 8007fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fcc:	2300      	movs	r3, #0
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd4:	4b79      	ldr	r3, [pc, #484]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d00d      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x40>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f200 80e1 	bhi.w	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d003      	beq.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fee:	e0db      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b73      	ldr	r3, [pc, #460]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ff4:	e0db      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ff6:	4b73      	ldr	r3, [pc, #460]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ffa:	e0d8      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008006:	4b6d      	ldr	r3, [pc, #436]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d063      	beq.n	80080da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008012:	4b6a      	ldr	r3, [pc, #424]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	2200      	movs	r2, #0
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
 800801c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	0159      	lsls	r1, r3, #5
 800803c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008040:	0150      	lsls	r0, r2, #5
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4621      	mov	r1, r4
 8008048:	1a51      	subs	r1, r2, r1
 800804a:	6139      	str	r1, [r7, #16]
 800804c:	4629      	mov	r1, r5
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008060:	4659      	mov	r1, fp
 8008062:	018b      	lsls	r3, r1, #6
 8008064:	4651      	mov	r1, sl
 8008066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806a:	4651      	mov	r1, sl
 800806c:	018a      	lsls	r2, r1, #6
 800806e:	4651      	mov	r1, sl
 8008070:	ebb2 0801 	subs.w	r8, r2, r1
 8008074:	4659      	mov	r1, fp
 8008076:	eb63 0901 	sbc.w	r9, r3, r1
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800808a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808e:	4690      	mov	r8, r2
 8008090:	4699      	mov	r9, r3
 8008092:	4623      	mov	r3, r4
 8008094:	eb18 0303 	adds.w	r3, r8, r3
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	462b      	mov	r3, r5
 800809c:	eb49 0303 	adc.w	r3, r9, r3
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080ae:	4629      	mov	r1, r5
 80080b0:	024b      	lsls	r3, r1, #9
 80080b2:	4621      	mov	r1, r4
 80080b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080b8:	4621      	mov	r1, r4
 80080ba:	024a      	lsls	r2, r1, #9
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c2:	2200      	movs	r2, #0
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080cc:	f7f8 fcc2 	bl	8000a54 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4613      	mov	r3, r2
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	e058      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080da:	4b38      	ldr	r3, [pc, #224]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	099b      	lsrs	r3, r3, #6
 80080e0:	2200      	movs	r2, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	4611      	mov	r1, r2
 80080e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	2300      	movs	r3, #0
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
 80080f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	f04f 0000 	mov.w	r0, #0
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008106:	0150      	lsls	r0, r2, #5
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4641      	mov	r1, r8
 800810e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008112:	4649      	mov	r1, r9
 8008114:	eb63 0b01 	sbc.w	fp, r3, r1
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800812c:	ebb2 040a 	subs.w	r4, r2, sl
 8008130:	eb63 050b 	sbc.w	r5, r3, fp
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	00eb      	lsls	r3, r5, #3
 800813e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008142:	00e2      	lsls	r2, r4, #3
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	4643      	mov	r3, r8
 800814a:	18e3      	adds	r3, r4, r3
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	464b      	mov	r3, r9
 8008150:	eb45 0303 	adc.w	r3, r5, r3
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008162:	4629      	mov	r1, r5
 8008164:	028b      	lsls	r3, r1, #10
 8008166:	4621      	mov	r1, r4
 8008168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800816c:	4621      	mov	r1, r4
 800816e:	028a      	lsls	r2, r1, #10
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	2200      	movs	r2, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	61fa      	str	r2, [r7, #28]
 800817c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008180:	f7f8 fc68 	bl	8000a54 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4613      	mov	r3, r2
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	3301      	adds	r3, #1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800819c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081a6:	e002      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3750      	adds	r7, #80	; 0x50
 80081b4:	46bd      	mov	sp, r7
 80081b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	00f42400 	.word	0x00f42400
 80081c4:	007a1200 	.word	0x007a1200

080081c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	200003f8 	.word	0x200003f8

080081e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081e4:	f7ff fff0 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0a9b      	lsrs	r3, r3, #10
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	; (8008204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	0800af34 	.word	0x0800af34

08008208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800820c:	f7ff ffdc 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	; (800822c <HAL_RCC_GetPCLK2Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	0800af34 	.word	0x0800af34

08008230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e041      	b.n	80082c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fc fa52 	bl	8004700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3304      	adds	r3, #4
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f000 fd7e 	bl	8008d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d001      	beq.n	80082e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e044      	b.n	8008372 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <HAL_TIM_Base_Start_IT+0xb0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x6c>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008312:	d013      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x6c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_TIM_Base_Start_IT+0xb4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x6c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_TIM_Base_Start_IT+0xb8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x6c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_TIM_Base_Start_IT+0xbc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x6c>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_TIM_Base_Start_IT+0xc0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d111      	bne.n	8008360 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b06      	cmp	r3, #6
 800834c:	d010      	beq.n	8008370 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0201 	orr.w	r2, r2, #1
 800835c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835e:	e007      	b.n	8008370 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40010000 	.word	0x40010000
 8008384:	40000400 	.word	0x40000400
 8008388:	40000800 	.word	0x40000800
 800838c:	40000c00 	.word	0x40000c00
 8008390:	40014000 	.word	0x40014000

08008394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e041      	b.n	800842a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fc f932 	bl	8004624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f000 fccc 	bl	8008d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start+0x24>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e022      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d109      	bne.n	8008472 <HAL_TIM_PWM_Start+0x3e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	e015      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b08      	cmp	r3, #8
 8008476:	d109      	bne.n	800848c <HAL_TIM_PWM_Start+0x58>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e008      	b.n	800849e <HAL_TIM_PWM_Start+0x6a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	bf14      	ite	ne
 8008498:	2301      	movne	r3, #1
 800849a:	2300      	moveq	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e068      	b.n	8008578 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0x82>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b4:	e013      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start+0x92>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c4:	e00b      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_PWM_Start+0xa2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d4:	e003      	b.n	80084de <HAL_TIM_PWM_Start+0xaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2201      	movs	r2, #1
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fee8 	bl	80092bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a23      	ldr	r2, [pc, #140]	; (8008580 <HAL_TIM_PWM_Start+0x14c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d107      	bne.n	8008506 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008504:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1d      	ldr	r2, [pc, #116]	; (8008580 <HAL_TIM_PWM_Start+0x14c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008518:	d013      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a19      	ldr	r2, [pc, #100]	; (8008584 <HAL_TIM_PWM_Start+0x150>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <HAL_TIM_PWM_Start+0x154>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a16      	ldr	r2, [pc, #88]	; (800858c <HAL_TIM_PWM_Start+0x158>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_TIM_PWM_Start+0x10e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a14      	ldr	r2, [pc, #80]	; (8008590 <HAL_TIM_PWM_Start+0x15c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d111      	bne.n	8008566 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b06      	cmp	r3, #6
 8008552:	d010      	beq.n	8008576 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008564:	e007      	b.n	8008576 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0201 	orr.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40014000 	.word	0x40014000

08008594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e097      	b.n	80086d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fc f859 	bl	8004674 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f000 fbc1 	bl	8008d70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	4313      	orrs	r3, r2
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008634:	f023 030c 	bic.w	r3, r3, #12
 8008638:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	4313      	orrs	r3, r2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	011a      	lsls	r2, r3, #4
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	031b      	lsls	r3, r3, #12
 8008664:	4313      	orrs	r3, r2
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008672:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	4313      	orrs	r3, r2
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008700:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008708:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d110      	bne.n	8008732 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d102      	bne.n	800871c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008716:	7b7b      	ldrb	r3, [r7, #13]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d001      	beq.n	8008720 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e069      	b.n	80087f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008730:	e031      	b.n	8008796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d110      	bne.n	800875a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d102      	bne.n	8008744 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800873e:	7b3b      	ldrb	r3, [r7, #12]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d001      	beq.n	8008748 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e055      	b.n	80087f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008758:	e01d      	b.n	8008796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d108      	bne.n	8008772 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d105      	bne.n	8008772 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008766:	7b7b      	ldrb	r3, [r7, #13]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d102      	bne.n	8008772 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800876c:	7b3b      	ldrb	r3, [r7, #12]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d001      	beq.n	8008776 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e03e      	b.n	80087f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <HAL_TIM_Encoder_Start+0xc4>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d008      	beq.n	80087b4 <HAL_TIM_Encoder_Start+0xd4>
 80087a2:	e00f      	b.n	80087c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2201      	movs	r2, #1
 80087aa:	2100      	movs	r1, #0
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fd85 	bl	80092bc <TIM_CCxChannelCmd>
      break;
 80087b2:	e016      	b.n	80087e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2201      	movs	r2, #1
 80087ba:	2104      	movs	r1, #4
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fd7d 	bl	80092bc <TIM_CCxChannelCmd>
      break;
 80087c2:	e00e      	b.n	80087e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2201      	movs	r2, #1
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fd75 	bl	80092bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2201      	movs	r2, #1
 80087d8:	2104      	movs	r1, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fd6e 	bl	80092bc <TIM_CCxChannelCmd>
      break;
 80087e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f042 0201 	orr.w	r2, r2, #1
 80087f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b02      	cmp	r3, #2
 8008810:	d122      	bne.n	8008858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b02      	cmp	r3, #2
 800881e:	d11b      	bne.n	8008858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0202 	mvn.w	r2, #2
 8008828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fa77 	bl	8008d32 <HAL_TIM_IC_CaptureCallback>
 8008844:	e005      	b.n	8008852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa69 	bl	8008d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa7a 	bl	8008d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b04      	cmp	r3, #4
 8008864:	d122      	bne.n	80088ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b04      	cmp	r3, #4
 8008872:	d11b      	bne.n	80088ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f06f 0204 	mvn.w	r2, #4
 800887c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2202      	movs	r2, #2
 8008882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa4d 	bl	8008d32 <HAL_TIM_IC_CaptureCallback>
 8008898:	e005      	b.n	80088a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa3f 	bl	8008d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fa50 	bl	8008d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d122      	bne.n	8008900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d11b      	bne.n	8008900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0208 	mvn.w	r2, #8
 80088d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2204      	movs	r2, #4
 80088d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fa23 	bl	8008d32 <HAL_TIM_IC_CaptureCallback>
 80088ec:	e005      	b.n	80088fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa15 	bl	8008d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fa26 	bl	8008d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0310 	and.w	r3, r3, #16
 800890a:	2b10      	cmp	r3, #16
 800890c:	d122      	bne.n	8008954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b10      	cmp	r3, #16
 800891a:	d11b      	bne.n	8008954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0210 	mvn.w	r2, #16
 8008924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2208      	movs	r2, #8
 800892a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9f9 	bl	8008d32 <HAL_TIM_IC_CaptureCallback>
 8008940:	e005      	b.n	800894e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9eb 	bl	8008d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f9fc 	bl	8008d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10e      	bne.n	8008980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b01      	cmp	r3, #1
 800896e:	d107      	bne.n	8008980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0201 	mvn.w	r2, #1
 8008978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fa fe36 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d10e      	bne.n	80089ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008998:	2b80      	cmp	r3, #128	; 0x80
 800899a:	d107      	bne.n	80089ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fd78 	bl	800949c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d10e      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d107      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f9c1 	bl	8008d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d10e      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d107      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0220 	mvn.w	r2, #32
 80089fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fd42 	bl	8009488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e0ae      	b.n	8008b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b0c      	cmp	r3, #12
 8008a36:	f200 809f 	bhi.w	8008b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a75 	.word	0x08008a75
 8008a44:	08008b79 	.word	0x08008b79
 8008a48:	08008b79 	.word	0x08008b79
 8008a4c:	08008b79 	.word	0x08008b79
 8008a50:	08008ab5 	.word	0x08008ab5
 8008a54:	08008b79 	.word	0x08008b79
 8008a58:	08008b79 	.word	0x08008b79
 8008a5c:	08008b79 	.word	0x08008b79
 8008a60:	08008af7 	.word	0x08008af7
 8008a64:	08008b79 	.word	0x08008b79
 8008a68:	08008b79 	.word	0x08008b79
 8008a6c:	08008b79 	.word	0x08008b79
 8008a70:	08008b37 	.word	0x08008b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f9f8 	bl	8008e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0208 	orr.w	r2, r2, #8
 8008a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0204 	bic.w	r2, r2, #4
 8008a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6999      	ldr	r1, [r3, #24]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	619a      	str	r2, [r3, #24]
      break;
 8008ab2:	e064      	b.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fa3e 	bl	8008f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6999      	ldr	r1, [r3, #24]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	021a      	lsls	r2, r3, #8
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	619a      	str	r2, [r3, #24]
      break;
 8008af4:	e043      	b.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 fa89 	bl	8009014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69da      	ldr	r2, [r3, #28]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0208 	orr.w	r2, r2, #8
 8008b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0204 	bic.w	r2, r2, #4
 8008b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69d9      	ldr	r1, [r3, #28]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	61da      	str	r2, [r3, #28]
      break;
 8008b34:	e023      	b.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fad3 	bl	80090e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69da      	ldr	r2, [r3, #28]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69d9      	ldr	r1, [r3, #28]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	021a      	lsls	r2, r3, #8
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	61da      	str	r2, [r3, #28]
      break;
 8008b76:	e002      	b.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_TIM_ConfigClockSource+0x1c>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e0b4      	b.n	8008d16 <HAL_TIM_ConfigClockSource+0x186>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be4:	d03e      	beq.n	8008c64 <HAL_TIM_ConfigClockSource+0xd4>
 8008be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bea:	f200 8087 	bhi.w	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf2:	f000 8086 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x172>
 8008bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfa:	d87f      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008bfc:	2b70      	cmp	r3, #112	; 0x70
 8008bfe:	d01a      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0xa6>
 8008c00:	2b70      	cmp	r3, #112	; 0x70
 8008c02:	d87b      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c04:	2b60      	cmp	r3, #96	; 0x60
 8008c06:	d050      	beq.n	8008caa <HAL_TIM_ConfigClockSource+0x11a>
 8008c08:	2b60      	cmp	r3, #96	; 0x60
 8008c0a:	d877      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c0c:	2b50      	cmp	r3, #80	; 0x50
 8008c0e:	d03c      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0xfa>
 8008c10:	2b50      	cmp	r3, #80	; 0x50
 8008c12:	d873      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	d058      	beq.n	8008cca <HAL_TIM_ConfigClockSource+0x13a>
 8008c18:	2b40      	cmp	r3, #64	; 0x40
 8008c1a:	d86f      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c1c:	2b30      	cmp	r3, #48	; 0x30
 8008c1e:	d064      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x15a>
 8008c20:	2b30      	cmp	r3, #48	; 0x30
 8008c22:	d86b      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	d060      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x15a>
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d867      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d05c      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x15a>
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d05a      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x15a>
 8008c34:	e062      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6899      	ldr	r1, [r3, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f000 fb19 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	609a      	str	r2, [r3, #8]
      break;
 8008c62:	e04f      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	6899      	ldr	r1, [r3, #8]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f000 fb02 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c86:	609a      	str	r2, [r3, #8]
      break;
 8008c88:	e03c      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6859      	ldr	r1, [r3, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f000 fa76 	bl	8009188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2150      	movs	r1, #80	; 0x50
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 facf 	bl	8009246 <TIM_ITRx_SetConfig>
      break;
 8008ca8:	e02c      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6859      	ldr	r1, [r3, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f000 fa95 	bl	80091e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2160      	movs	r1, #96	; 0x60
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fabf 	bl	8009246 <TIM_ITRx_SetConfig>
      break;
 8008cc8:	e01c      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6859      	ldr	r1, [r3, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f000 fa56 	bl	8009188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2140      	movs	r1, #64	; 0x40
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 faaf 	bl	8009246 <TIM_ITRx_SetConfig>
      break;
 8008ce8:	e00c      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f000 faa6 	bl	8009246 <TIM_ITRx_SetConfig>
      break;
 8008cfa:	e003      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008d00:	e000      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
	...

08008d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a34      	ldr	r2, [pc, #208]	; (8008e54 <TIM_Base_SetConfig+0xe4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00f      	beq.n	8008da8 <TIM_Base_SetConfig+0x38>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8e:	d00b      	beq.n	8008da8 <TIM_Base_SetConfig+0x38>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a31      	ldr	r2, [pc, #196]	; (8008e58 <TIM_Base_SetConfig+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_Base_SetConfig+0x38>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a30      	ldr	r2, [pc, #192]	; (8008e5c <TIM_Base_SetConfig+0xec>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_Base_SetConfig+0x38>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a2f      	ldr	r2, [pc, #188]	; (8008e60 <TIM_Base_SetConfig+0xf0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d108      	bne.n	8008dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a25      	ldr	r2, [pc, #148]	; (8008e54 <TIM_Base_SetConfig+0xe4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01b      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc8:	d017      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a22      	ldr	r2, [pc, #136]	; (8008e58 <TIM_Base_SetConfig+0xe8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d013      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a21      	ldr	r2, [pc, #132]	; (8008e5c <TIM_Base_SetConfig+0xec>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00f      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a20      	ldr	r2, [pc, #128]	; (8008e60 <TIM_Base_SetConfig+0xf0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00b      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1f      	ldr	r2, [pc, #124]	; (8008e64 <TIM_Base_SetConfig+0xf4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d007      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <TIM_Base_SetConfig+0xf8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d003      	beq.n	8008dfa <TIM_Base_SetConfig+0x8a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <TIM_Base_SetConfig+0xfc>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d108      	bne.n	8008e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a08      	ldr	r2, [pc, #32]	; (8008e54 <TIM_Base_SetConfig+0xe4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d103      	bne.n	8008e40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	615a      	str	r2, [r3, #20]
}
 8008e46:	bf00      	nop
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40010000 	.word	0x40010000
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	40000800 	.word	0x40000800
 8008e60:	40000c00 	.word	0x40000c00
 8008e64:	40014000 	.word	0x40014000
 8008e68:	40014400 	.word	0x40014400
 8008e6c:	40014800 	.word	0x40014800

08008e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	f023 0201 	bic.w	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f023 0302 	bic.w	r3, r3, #2
 8008eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <TIM_OC1_SetConfig+0xc8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d10c      	bne.n	8008ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f023 0308 	bic.w	r3, r3, #8
 8008ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f023 0304 	bic.w	r3, r3, #4
 8008ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a13      	ldr	r2, [pc, #76]	; (8008f38 <TIM_OC1_SetConfig+0xc8>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d111      	bne.n	8008f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40010000 	.word	0x40010000

08008f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f023 0210 	bic.w	r2, r3, #16
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f023 0320 	bic.w	r3, r3, #32
 8008f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <TIM_OC2_SetConfig+0xd4>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d10d      	bne.n	8008fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a15      	ldr	r2, [pc, #84]	; (8009010 <TIM_OC2_SetConfig+0xd4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d113      	bne.n	8008fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40010000 	.word	0x40010000

08009014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800905c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <TIM_OC3_SetConfig+0xd0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d10d      	bne.n	800908e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800908c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a14      	ldr	r2, [pc, #80]	; (80090e4 <TIM_OC3_SetConfig+0xd0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d113      	bne.n	80090be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800909c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	40010000 	.word	0x40010000

080090e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800911e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	031b      	lsls	r3, r3, #12
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a10      	ldr	r2, [pc, #64]	; (8009184 <TIM_OC4_SetConfig+0x9c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d109      	bne.n	800915c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800914e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	019b      	lsls	r3, r3, #6
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4313      	orrs	r3, r2
 800915a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	621a      	str	r2, [r3, #32]
}
 8009176:	bf00      	nop
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	40010000 	.word	0x40010000

08009188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0201 	bic.w	r2, r3, #1
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f023 030a 	bic.w	r3, r3, #10
 80091c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	f023 0210 	bic.w	r2, r3, #16
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	031b      	lsls	r3, r3, #12
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	f043 0307 	orr.w	r3, r3, #7
 8009268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	609a      	str	r2, [r3, #8]
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	431a      	orrs	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	609a      	str	r2, [r3, #8]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	2201      	movs	r2, #1
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1a      	ldr	r2, [r3, #32]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	43db      	mvns	r3, r3
 80092de:	401a      	ands	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	fa01 f303 	lsl.w	r3, r1, r3
 80092f4:	431a      	orrs	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800931c:	2302      	movs	r3, #2
 800931e:	e050      	b.n	80093c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d018      	beq.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d013      	beq.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a18      	ldr	r2, [pc, #96]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00e      	beq.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a16      	ldr	r2, [pc, #88]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d009      	beq.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a15      	ldr	r2, [pc, #84]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d004      	beq.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a13      	ldr	r2, [pc, #76]	; (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d10c      	bne.n	80093b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	40010000 	.word	0x40010000
 80093d4:	40000400 	.word	0x40000400
 80093d8:	40000800 	.word	0x40000800
 80093dc:	40000c00 	.word	0x40000c00
 80093e0:	40014000 	.word	0x40014000

080093e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093fc:	2302      	movs	r3, #2
 80093fe:	e03d      	b.n	800947c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e03f      	b.n	8009542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fb f9b0 	bl	800483c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 ff81 	bl	800a3fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	695a      	ldr	r2, [r3, #20]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08c      	sub	sp, #48	; 0x30
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b20      	cmp	r3, #32
 8009564:	d165      	bne.n	8009632 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <HAL_UART_Transmit_DMA+0x26>
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e05e      	b.n	8009634 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_UART_Transmit_DMA+0x38>
 8009580:	2302      	movs	r3, #2
 8009582:	e057      	b.n	8009634 <HAL_UART_Transmit_DMA+0xe8>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	88fa      	ldrh	r2, [r7, #6]
 8009596:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	88fa      	ldrh	r2, [r7, #6]
 800959c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2221      	movs	r2, #33	; 0x21
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b0:	4a22      	ldr	r2, [pc, #136]	; (800963c <HAL_UART_Transmit_DMA+0xf0>)
 80095b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b8:	4a21      	ldr	r2, [pc, #132]	; (8009640 <HAL_UART_Transmit_DMA+0xf4>)
 80095ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	4a20      	ldr	r2, [pc, #128]	; (8009644 <HAL_UART_Transmit_DMA+0xf8>)
 80095c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	2200      	movs	r2, #0
 80095ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	6819      	ldr	r1, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3304      	adds	r3, #4
 80095e0:	461a      	mov	r2, r3
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	f7fb fce6 	bl	8004fb4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	617b      	str	r3, [r7, #20]
   return(result);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3314      	adds	r3, #20
 8009618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800961a:	627a      	str	r2, [r7, #36]	; 0x24
 800961c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	6a39      	ldr	r1, [r7, #32]
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	61fb      	str	r3, [r7, #28]
   return(result);
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e5      	bne.n	80095fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	e000      	b.n	8009634 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009632:	2302      	movs	r3, #2
  }
}
 8009634:	4618      	mov	r0, r3
 8009636:	3730      	adds	r7, #48	; 0x30
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	08009c95 	.word	0x08009c95
 8009640:	08009d2f 	.word	0x08009d2f
 8009644:	08009ea7 	.word	0x08009ea7

08009648 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	; 0x30
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b20      	cmp	r3, #32
 8009660:	d152      	bne.n	8009708 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e04b      	b.n	800970a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800967c:	2302      	movs	r3, #2
 800967e:	e044      	b.n	800970a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	461a      	mov	r2, r3
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fc51 	bl	8009f3c <UART_Start_Receive_DMA>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d12c      	bne.n	8009702 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d125      	bne.n	80096fc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096b0:	2300      	movs	r3, #0
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	617b      	str	r3, [r7, #20]
   return(result);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f043 0310 	orr.w	r3, r3, #16
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	330c      	adds	r3, #12
 80096e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e6:	627a      	str	r2, [r7, #36]	; 0x24
 80096e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6a39      	ldr	r1, [r7, #32]
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e5      	bne.n	80096c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80096fa:	e002      	b.n	8009702 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009706:	e000      	b.n	800970a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009708:	2302      	movs	r3, #2
  }
}
 800970a:	4618      	mov	r0, r3
 800970c:	3730      	adds	r7, #48	; 0x30
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b0ba      	sub	sp, #232	; 0xe8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800973a:	2300      	movs	r3, #0
 800973c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009740:	2300      	movs	r3, #0
 8009742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10f      	bne.n	800977a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <HAL_UART_IRQHandler+0x66>
 8009766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800976a:	f003 0320 	and.w	r3, r3, #32
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fd87 	bl	800a286 <UART_Receive_IT>
      return;
 8009778:	e256      	b.n	8009c28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800977a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 80de 	beq.w	8009940 <HAL_UART_IRQHandler+0x22c>
 8009784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80d1 	beq.w	8009940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800979e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00b      	beq.n	80097c2 <HAL_UART_IRQHandler+0xae>
 80097aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <HAL_UART_IRQHandler+0xd2>
 80097ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	f043 0202 	orr.w	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <HAL_UART_IRQHandler+0xf6>
 80097f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	f043 0204 	orr.w	r2, r3, #4
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980e:	f003 0308 	and.w	r3, r3, #8
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <HAL_UART_IRQHandler+0x126>
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f043 0208 	orr.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 81ed 	beq.w	8009c1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b00      	cmp	r3, #0
 800984e:	d008      	beq.n	8009862 <HAL_UART_IRQHandler+0x14e>
 8009850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fd12 	bl	800a286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b40      	cmp	r3, #64	; 0x40
 800986e:	bf0c      	ite	eq
 8009870:	2301      	moveq	r3, #1
 8009872:	2300      	movne	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	f003 0308 	and.w	r3, r3, #8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <HAL_UART_IRQHandler+0x17a>
 8009886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800988a:	2b00      	cmp	r3, #0
 800988c:	d04f      	beq.n	800992e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fc1a 	bl	800a0c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989e:	2b40      	cmp	r3, #64	; 0x40
 80098a0:	d141      	bne.n	8009926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3314      	adds	r3, #20
 80098a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3314      	adds	r3, #20
 80098ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1d9      	bne.n	80098a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d013      	beq.n	800991e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	4a7d      	ldr	r2, [pc, #500]	; (8009af0 <HAL_UART_IRQHandler+0x3dc>)
 80098fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	4618      	mov	r0, r3
 8009904:	f7fb fc1e 	bl	8005144 <HAL_DMA_Abort_IT>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d016      	beq.n	800993c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991c:	e00e      	b.n	800993c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9ae 	bl	8009c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009924:	e00a      	b.n	800993c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9aa 	bl	8009c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992c:	e006      	b.n	800993c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f9a6 	bl	8009c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800993a:	e170      	b.n	8009c1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	bf00      	nop
    return;
 800993e:	e16e      	b.n	8009c1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	2b01      	cmp	r3, #1
 8009946:	f040 814a 	bne.w	8009bde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800994a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8143 	beq.w	8009bde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 813c 	beq.w	8009bde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009966:	2300      	movs	r3, #0
 8009968:	60bb      	str	r3, [r7, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	2b40      	cmp	r3, #64	; 0x40
 8009988:	f040 80b4 	bne.w	8009af4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8140 	beq.w	8009c22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099aa:	429a      	cmp	r2, r3
 80099ac:	f080 8139 	bcs.w	8009c22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c2:	f000 8088 	beq.w	8009ad6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	330c      	adds	r3, #12
 80099cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	330c      	adds	r3, #12
 80099ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80099f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80099f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1d9      	bne.n	80099c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3314      	adds	r3, #20
 8009a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3314      	adds	r3, #20
 8009a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e1      	bne.n	8009a12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3314      	adds	r3, #20
 8009a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3314      	adds	r3, #20
 8009a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e3      	bne.n	8009a4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	330c      	adds	r3, #12
 8009a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa6:	f023 0310 	bic.w	r3, r3, #16
 8009aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	330c      	adds	r3, #12
 8009ab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e3      	bne.n	8009a94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fb fac7 	bl	8005064 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7f9 fec4 	bl	8003874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009aec:	e099      	b.n	8009c22 <HAL_UART_IRQHandler+0x50e>
 8009aee:	bf00      	nop
 8009af0:	0800a18f 	.word	0x0800a18f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 808b 	beq.w	8009c26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 8086 	beq.w	8009c26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	330c      	adds	r3, #12
 8009b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8009b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e3      	bne.n	8009b1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3314      	adds	r3, #20
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	623b      	str	r3, [r7, #32]
   return(result);
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	f023 0301 	bic.w	r3, r3, #1
 8009b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3314      	adds	r3, #20
 8009b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b76:	633a      	str	r2, [r7, #48]	; 0x30
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e3      	bne.n	8009b52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0310 	bic.w	r3, r3, #16
 8009bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	330c      	adds	r3, #12
 8009bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009bbc:	61fa      	str	r2, [r7, #28]
 8009bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e3      	bne.n	8009b98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7f9 fe4c 	bl	8003874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bdc:	e023      	b.n	8009c26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <HAL_UART_IRQHandler+0x4ea>
 8009bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fadd 	bl	800a1b6 <UART_Transmit_IT>
    return;
 8009bfc:	e014      	b.n	8009c28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00e      	beq.n	8009c28 <HAL_UART_IRQHandler+0x514>
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fb1d 	bl	800a256 <UART_EndTransmit_IT>
    return;
 8009c1c:	e004      	b.n	8009c28 <HAL_UART_IRQHandler+0x514>
    return;
 8009c1e:	bf00      	nop
 8009c20:	e002      	b.n	8009c28 <HAL_UART_IRQHandler+0x514>
      return;
 8009c22:	bf00      	nop
 8009c24:	e000      	b.n	8009c28 <HAL_UART_IRQHandler+0x514>
      return;
 8009c26:	bf00      	nop
  }
}
 8009c28:	37e8      	adds	r7, #232	; 0xe8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop

08009c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b090      	sub	sp, #64	; 0x40
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d137      	bne.n	8009d20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3314      	adds	r3, #20
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3314      	adds	r3, #20
 8009cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	330c      	adds	r3, #12
 8009cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d00:	637b      	str	r3, [r7, #52]	; 0x34
 8009d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	330c      	adds	r3, #12
 8009d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d0a:	61fa      	str	r2, [r7, #28]
 8009d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	69b9      	ldr	r1, [r7, #24]
 8009d10:	69fa      	ldr	r2, [r7, #28]
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	617b      	str	r3, [r7, #20]
   return(result);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d1e:	e002      	b.n	8009d26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009d20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d22:	f7ff ff85 	bl	8009c30 <HAL_UART_TxCpltCallback>
}
 8009d26:	bf00      	nop
 8009d28:	3740      	adds	r7, #64	; 0x40
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7ff ff81 	bl	8009c44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b09c      	sub	sp, #112	; 0x70
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d172      	bne.n	8009e4c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d68:	2200      	movs	r2, #0
 8009d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	330c      	adds	r3, #12
 8009d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	330c      	adds	r3, #12
 8009d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e5      	bne.n	8009d6c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3314      	adds	r3, #20
 8009da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db2:	f023 0301 	bic.w	r3, r3, #1
 8009db6:	667b      	str	r3, [r7, #100]	; 0x64
 8009db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3314      	adds	r3, #20
 8009dbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dc0:	647a      	str	r2, [r7, #68]	; 0x44
 8009dc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e5      	bne.n	8009da0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3314      	adds	r3, #20
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	623b      	str	r3, [r7, #32]
   return(result);
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dea:	663b      	str	r3, [r7, #96]	; 0x60
 8009dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3314      	adds	r3, #20
 8009df2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009df4:	633a      	str	r2, [r7, #48]	; 0x30
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e5      	bne.n	8009dd4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d119      	bne.n	8009e4c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0310 	bic.w	r3, r3, #16
 8009e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e38:	61fa      	str	r2, [r7, #28]
 8009e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	69b9      	ldr	r1, [r7, #24]
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	617b      	str	r3, [r7, #20]
   return(result);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e5      	bne.n	8009e18 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d106      	bne.n	8009e62 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e5c:	f7f9 fd0a 	bl	8003874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e60:	e002      	b.n	8009e68 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009e62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e64:	f7ff fef8 	bl	8009c58 <HAL_UART_RxCpltCallback>
}
 8009e68:	bf00      	nop
 8009e6a:	3770      	adds	r7, #112	; 0x70
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d108      	bne.n	8009e98 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e8a:	085b      	lsrs	r3, r3, #1
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7f9 fcef 	bl	8003874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e96:	e002      	b.n	8009e9e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff fee7 	bl	8009c6c <HAL_UART_RxHalfCpltCallback>
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	2300      	movne	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b21      	cmp	r3, #33	; 0x21
 8009ed8:	d108      	bne.n	8009eec <UART_DMAError+0x46>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ee6:	68b8      	ldr	r0, [r7, #8]
 8009ee8:	f000 f8c6 	bl	800a078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef6:	2b40      	cmp	r3, #64	; 0x40
 8009ef8:	bf0c      	ite	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	2300      	movne	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b22      	cmp	r3, #34	; 0x22
 8009f0c:	d108      	bne.n	8009f20 <UART_DMAError+0x7a>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f1a:	68b8      	ldr	r0, [r7, #8]
 8009f1c:	f000 f8d4 	bl	800a0c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	f043 0210 	orr.w	r2, r3, #16
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f2c:	68b8      	ldr	r0, [r7, #8]
 8009f2e:	f7ff fea7 	bl	8009c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f32:	bf00      	nop
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b098      	sub	sp, #96	; 0x60
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	88fa      	ldrh	r2, [r7, #6]
 8009f54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2222      	movs	r2, #34	; 0x22
 8009f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f68:	4a40      	ldr	r2, [pc, #256]	; (800a06c <UART_Start_Receive_DMA+0x130>)
 8009f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	4a3f      	ldr	r2, [pc, #252]	; (800a070 <UART_Start_Receive_DMA+0x134>)
 8009f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	4a3e      	ldr	r2, [pc, #248]	; (800a074 <UART_Start_Receive_DMA+0x138>)
 8009f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f80:	2200      	movs	r2, #0
 8009f82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	f7fb f80a 	bl	8004fb4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	613b      	str	r3, [r7, #16]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d019      	beq.n	8009ffa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	330c      	adds	r3, #12
 8009fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fe6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e5      	bne.n	8009fc6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3314      	adds	r3, #20
 800a000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	f043 0301 	orr.w	r3, r3, #1
 800a010:	657b      	str	r3, [r7, #84]	; 0x54
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a01a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e5      	bne.n	8009ffa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3314      	adds	r3, #20
 800a034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	617b      	str	r3, [r7, #20]
   return(result);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a044:	653b      	str	r3, [r7, #80]	; 0x50
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3314      	adds	r3, #20
 800a04c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a04e:	627a      	str	r2, [r7, #36]	; 0x24
 800a050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6a39      	ldr	r1, [r7, #32]
 800a054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e5      	bne.n	800a02e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3760      	adds	r7, #96	; 0x60
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08009d4b 	.word	0x08009d4b
 800a070:	08009e71 	.word	0x08009e71
 800a074:	08009ea7 	.word	0x08009ea7

0800a078 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a078:	b480      	push	{r7}
 800a07a:	b089      	sub	sp, #36	; 0x24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	330c      	adds	r3, #12
 800a086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a096:	61fb      	str	r3, [r7, #28]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	330c      	adds	r3, #12
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	61ba      	str	r2, [r7, #24]
 800a0a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6979      	ldr	r1, [r7, #20]
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e5      	bne.n	800a080 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a0bc:	bf00      	nop
 800a0be:	3724      	adds	r7, #36	; 0x24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b095      	sub	sp, #84	; 0x54
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	330c      	adds	r3, #12
 800a0ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0f0:	643a      	str	r2, [r7, #64]	; 0x40
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e5      	bne.n	800a0d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3314      	adds	r3, #20
 800a10a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	61fb      	str	r3, [r7, #28]
   return(result);
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f023 0301 	bic.w	r3, r3, #1
 800a11a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3314      	adds	r3, #20
 800a122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a124:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e5      	bne.n	800a104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d119      	bne.n	800a174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	330c      	adds	r3, #12
 800a146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	647b      	str	r3, [r7, #68]	; 0x44
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a160:	61ba      	str	r2, [r7, #24]
 800a162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	613b      	str	r3, [r7, #16]
   return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e5      	bne.n	800a140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a182:	bf00      	nop
 800a184:	3754      	adds	r7, #84	; 0x54
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7ff fd69 	bl	8009c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ae:	bf00      	nop
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b21      	cmp	r3, #33	; 0x21
 800a1c8:	d13e      	bne.n	800a248 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d2:	d114      	bne.n	800a1fe <UART_Transmit_IT+0x48>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d110      	bne.n	800a1fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	1c9a      	adds	r2, r3, #2
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	621a      	str	r2, [r3, #32]
 800a1fc:	e008      	b.n	800a210 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	1c59      	adds	r1, r3, #1
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6211      	str	r1, [r2, #32]
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29b      	uxth	r3, r3
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4619      	mov	r1, r3
 800a21e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10f      	bne.n	800a244 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68da      	ldr	r2, [r3, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a232:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a242:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	e000      	b.n	800a24a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a248:	2302      	movs	r3, #2
  }
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68da      	ldr	r2, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a26c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff fcda 	bl	8009c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b08c      	sub	sp, #48	; 0x30
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b22      	cmp	r3, #34	; 0x22
 800a298:	f040 80ab 	bne.w	800a3f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a4:	d117      	bne.n	800a2d6 <UART_Receive_IT+0x50>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d113      	bne.n	800a2d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	629a      	str	r2, [r3, #40]	; 0x28
 800a2d4:	e026      	b.n	800a324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e8:	d007      	beq.n	800a2fa <UART_Receive_IT+0x74>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <UART_Receive_IT+0x82>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	b2da      	uxtb	r2, r3
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	e008      	b.n	800a31a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a314:	b2da      	uxtb	r2, r3
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	4619      	mov	r1, r3
 800a332:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a334:	2b00      	cmp	r3, #0
 800a336:	d15a      	bne.n	800a3ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0220 	bic.w	r2, r2, #32
 800a346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	695a      	ldr	r2, [r3, #20]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 0201 	bic.w	r2, r2, #1
 800a366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a374:	2b01      	cmp	r3, #1
 800a376:	d135      	bne.n	800a3e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	330c      	adds	r3, #12
 800a384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	613b      	str	r3, [r7, #16]
   return(result);
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f023 0310 	bic.w	r3, r3, #16
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	330c      	adds	r3, #12
 800a39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39e:	623a      	str	r2, [r7, #32]
 800a3a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	69f9      	ldr	r1, [r7, #28]
 800a3a4:	6a3a      	ldr	r2, [r7, #32]
 800a3a6:	e841 2300 	strex	r3, r2, [r1]
 800a3aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e5      	bne.n	800a37e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	d10a      	bne.n	800a3d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7f9 fa49 	bl	8003874 <HAL_UARTEx_RxEventCallback>
 800a3e2:	e002      	b.n	800a3ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fc37 	bl	8009c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e002      	b.n	800a3f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e000      	b.n	800a3f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a3f2:	2302      	movs	r3, #2
  }
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3730      	adds	r7, #48	; 0x30
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a400:	b0c0      	sub	sp, #256	; 0x100
 800a402:	af00      	add	r7, sp, #0
 800a404:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a418:	68d9      	ldr	r1, [r3, #12]
 800a41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	ea40 0301 	orr.w	r3, r0, r1
 800a424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	431a      	orrs	r2, r3
 800a434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	4313      	orrs	r3, r2
 800a444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a454:	f021 010c 	bic.w	r1, r1, #12
 800a458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a462:	430b      	orrs	r3, r1
 800a464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a476:	6999      	ldr	r1, [r3, #24]
 800a478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	ea40 0301 	orr.w	r3, r0, r1
 800a482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4b8f      	ldr	r3, [pc, #572]	; (800a6c8 <UART_SetConfig+0x2cc>)
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d005      	beq.n	800a49c <UART_SetConfig+0xa0>
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b8d      	ldr	r3, [pc, #564]	; (800a6cc <UART_SetConfig+0x2d0>)
 800a498:	429a      	cmp	r2, r3
 800a49a:	d104      	bne.n	800a4a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a49c:	f7fd feb4 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 800a4a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a4a4:	e003      	b.n	800a4ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4a6:	f7fd fe9b 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800a4aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b8:	f040 810c 	bne.w	800a6d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a4c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a4ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	1891      	adds	r1, r2, r2
 800a4d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4d6:	415b      	adcs	r3, r3
 800a4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4de:	4621      	mov	r1, r4
 800a4e0:	eb12 0801 	adds.w	r8, r2, r1
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	eb43 0901 	adc.w	r9, r3, r1
 800a4ea:	f04f 0200 	mov.w	r2, #0
 800a4ee:	f04f 0300 	mov.w	r3, #0
 800a4f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a4fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a4fe:	4690      	mov	r8, r2
 800a500:	4699      	mov	r9, r3
 800a502:	4623      	mov	r3, r4
 800a504:	eb18 0303 	adds.w	r3, r8, r3
 800a508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a50c:	462b      	mov	r3, r5
 800a50e:	eb49 0303 	adc.w	r3, r9, r3
 800a512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a522:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a52a:	460b      	mov	r3, r1
 800a52c:	18db      	adds	r3, r3, r3
 800a52e:	653b      	str	r3, [r7, #80]	; 0x50
 800a530:	4613      	mov	r3, r2
 800a532:	eb42 0303 	adc.w	r3, r2, r3
 800a536:	657b      	str	r3, [r7, #84]	; 0x54
 800a538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a53c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a540:	f7f6 fa88 	bl	8000a54 <__aeabi_uldivmod>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4b61      	ldr	r3, [pc, #388]	; (800a6d0 <UART_SetConfig+0x2d4>)
 800a54a:	fba3 2302 	umull	r2, r3, r3, r2
 800a54e:	095b      	lsrs	r3, r3, #5
 800a550:	011c      	lsls	r4, r3, #4
 800a552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a556:	2200      	movs	r2, #0
 800a558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a55c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a564:	4642      	mov	r2, r8
 800a566:	464b      	mov	r3, r9
 800a568:	1891      	adds	r1, r2, r2
 800a56a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a56c:	415b      	adcs	r3, r3
 800a56e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a574:	4641      	mov	r1, r8
 800a576:	eb12 0a01 	adds.w	sl, r2, r1
 800a57a:	4649      	mov	r1, r9
 800a57c:	eb43 0b01 	adc.w	fp, r3, r1
 800a580:	f04f 0200 	mov.w	r2, #0
 800a584:	f04f 0300 	mov.w	r3, #0
 800a588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a58c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a594:	4692      	mov	sl, r2
 800a596:	469b      	mov	fp, r3
 800a598:	4643      	mov	r3, r8
 800a59a:	eb1a 0303 	adds.w	r3, sl, r3
 800a59e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	eb4b 0303 	adc.w	r3, fp, r3
 800a5a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a5bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	18db      	adds	r3, r3, r3
 800a5c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	eb42 0303 	adc.w	r3, r2, r3
 800a5cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a5ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a5d6:	f7f6 fa3d 	bl	8000a54 <__aeabi_uldivmod>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4b3b      	ldr	r3, [pc, #236]	; (800a6d0 <UART_SetConfig+0x2d4>)
 800a5e2:	fba3 2301 	umull	r2, r3, r3, r1
 800a5e6:	095b      	lsrs	r3, r3, #5
 800a5e8:	2264      	movs	r2, #100	; 0x64
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
 800a5ee:	1acb      	subs	r3, r1, r3
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a5f6:	4b36      	ldr	r3, [pc, #216]	; (800a6d0 <UART_SetConfig+0x2d4>)
 800a5f8:	fba3 2302 	umull	r2, r3, r3, r2
 800a5fc:	095b      	lsrs	r3, r3, #5
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a604:	441c      	add	r4, r3
 800a606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a610:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	1891      	adds	r1, r2, r2
 800a61e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a620:	415b      	adcs	r3, r3
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a628:	4641      	mov	r1, r8
 800a62a:	1851      	adds	r1, r2, r1
 800a62c:	6339      	str	r1, [r7, #48]	; 0x30
 800a62e:	4649      	mov	r1, r9
 800a630:	414b      	adcs	r3, r1
 800a632:	637b      	str	r3, [r7, #52]	; 0x34
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a640:	4659      	mov	r1, fp
 800a642:	00cb      	lsls	r3, r1, #3
 800a644:	4651      	mov	r1, sl
 800a646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a64a:	4651      	mov	r1, sl
 800a64c:	00ca      	lsls	r2, r1, #3
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	4603      	mov	r3, r0
 800a654:	4642      	mov	r2, r8
 800a656:	189b      	adds	r3, r3, r2
 800a658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a65c:	464b      	mov	r3, r9
 800a65e:	460a      	mov	r2, r1
 800a660:	eb42 0303 	adc.w	r3, r2, r3
 800a664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a674:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a67c:	460b      	mov	r3, r1
 800a67e:	18db      	adds	r3, r3, r3
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
 800a682:	4613      	mov	r3, r2
 800a684:	eb42 0303 	adc.w	r3, r2, r3
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a68a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a68e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a692:	f7f6 f9df 	bl	8000a54 <__aeabi_uldivmod>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4b0d      	ldr	r3, [pc, #52]	; (800a6d0 <UART_SetConfig+0x2d4>)
 800a69c:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	2164      	movs	r1, #100	; 0x64
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	3332      	adds	r3, #50	; 0x32
 800a6ae:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <UART_SetConfig+0x2d4>)
 800a6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	f003 0207 	and.w	r2, r3, #7
 800a6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4422      	add	r2, r4
 800a6c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6c4:	e105      	b.n	800a8d2 <UART_SetConfig+0x4d6>
 800a6c6:	bf00      	nop
 800a6c8:	40011000 	.word	0x40011000
 800a6cc:	40011400 	.word	0x40011400
 800a6d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	1891      	adds	r1, r2, r2
 800a6ec:	6239      	str	r1, [r7, #32]
 800a6ee:	415b      	adcs	r3, r3
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6f6:	4641      	mov	r1, r8
 800a6f8:	1854      	adds	r4, r2, r1
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	eb43 0501 	adc.w	r5, r3, r1
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	00eb      	lsls	r3, r5, #3
 800a70a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a70e:	00e2      	lsls	r2, r4, #3
 800a710:	4614      	mov	r4, r2
 800a712:	461d      	mov	r5, r3
 800a714:	4643      	mov	r3, r8
 800a716:	18e3      	adds	r3, r4, r3
 800a718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a71c:	464b      	mov	r3, r9
 800a71e:	eb45 0303 	adc.w	r3, r5, r3
 800a722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	f04f 0300 	mov.w	r3, #0
 800a73e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a742:	4629      	mov	r1, r5
 800a744:	008b      	lsls	r3, r1, #2
 800a746:	4621      	mov	r1, r4
 800a748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a74c:	4621      	mov	r1, r4
 800a74e:	008a      	lsls	r2, r1, #2
 800a750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a754:	f7f6 f97e 	bl	8000a54 <__aeabi_uldivmod>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4b60      	ldr	r3, [pc, #384]	; (800a8e0 <UART_SetConfig+0x4e4>)
 800a75e:	fba3 2302 	umull	r2, r3, r3, r2
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	011c      	lsls	r4, r3, #4
 800a766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a770:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a778:	4642      	mov	r2, r8
 800a77a:	464b      	mov	r3, r9
 800a77c:	1891      	adds	r1, r2, r2
 800a77e:	61b9      	str	r1, [r7, #24]
 800a780:	415b      	adcs	r3, r3
 800a782:	61fb      	str	r3, [r7, #28]
 800a784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a788:	4641      	mov	r1, r8
 800a78a:	1851      	adds	r1, r2, r1
 800a78c:	6139      	str	r1, [r7, #16]
 800a78e:	4649      	mov	r1, r9
 800a790:	414b      	adcs	r3, r1
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7a0:	4659      	mov	r1, fp
 800a7a2:	00cb      	lsls	r3, r1, #3
 800a7a4:	4651      	mov	r1, sl
 800a7a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7aa:	4651      	mov	r1, sl
 800a7ac:	00ca      	lsls	r2, r1, #3
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	4642      	mov	r2, r8
 800a7b6:	189b      	adds	r3, r3, r2
 800a7b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7bc:	464b      	mov	r3, r9
 800a7be:	460a      	mov	r2, r1
 800a7c0:	eb42 0303 	adc.w	r3, r2, r3
 800a7c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	f04f 0300 	mov.w	r3, #0
 800a7dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	008b      	lsls	r3, r1, #2
 800a7e4:	4641      	mov	r1, r8
 800a7e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	008a      	lsls	r2, r1, #2
 800a7ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a7f2:	f7f6 f92f 	bl	8000a54 <__aeabi_uldivmod>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4b39      	ldr	r3, [pc, #228]	; (800a8e0 <UART_SetConfig+0x4e4>)
 800a7fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a800:	095b      	lsrs	r3, r3, #5
 800a802:	2164      	movs	r1, #100	; 0x64
 800a804:	fb01 f303 	mul.w	r3, r1, r3
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	011b      	lsls	r3, r3, #4
 800a80c:	3332      	adds	r3, #50	; 0x32
 800a80e:	4a34      	ldr	r2, [pc, #208]	; (800a8e0 <UART_SetConfig+0x4e4>)
 800a810:	fba2 2303 	umull	r2, r3, r2, r3
 800a814:	095b      	lsrs	r3, r3, #5
 800a816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a81a:	441c      	add	r4, r3
 800a81c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a820:	2200      	movs	r2, #0
 800a822:	673b      	str	r3, [r7, #112]	; 0x70
 800a824:	677a      	str	r2, [r7, #116]	; 0x74
 800a826:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	1891      	adds	r1, r2, r2
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	415b      	adcs	r3, r3
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a83a:	4641      	mov	r1, r8
 800a83c:	1851      	adds	r1, r2, r1
 800a83e:	6039      	str	r1, [r7, #0]
 800a840:	4649      	mov	r1, r9
 800a842:	414b      	adcs	r3, r1
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a852:	4659      	mov	r1, fp
 800a854:	00cb      	lsls	r3, r1, #3
 800a856:	4651      	mov	r1, sl
 800a858:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a85c:	4651      	mov	r1, sl
 800a85e:	00ca      	lsls	r2, r1, #3
 800a860:	4610      	mov	r0, r2
 800a862:	4619      	mov	r1, r3
 800a864:	4603      	mov	r3, r0
 800a866:	4642      	mov	r2, r8
 800a868:	189b      	adds	r3, r3, r2
 800a86a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a86c:	464b      	mov	r3, r9
 800a86e:	460a      	mov	r2, r1
 800a870:	eb42 0303 	adc.w	r3, r2, r3
 800a874:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	663b      	str	r3, [r7, #96]	; 0x60
 800a880:	667a      	str	r2, [r7, #100]	; 0x64
 800a882:	f04f 0200 	mov.w	r2, #0
 800a886:	f04f 0300 	mov.w	r3, #0
 800a88a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a88e:	4649      	mov	r1, r9
 800a890:	008b      	lsls	r3, r1, #2
 800a892:	4641      	mov	r1, r8
 800a894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a898:	4641      	mov	r1, r8
 800a89a:	008a      	lsls	r2, r1, #2
 800a89c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8a0:	f7f6 f8d8 	bl	8000a54 <__aeabi_uldivmod>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <UART_SetConfig+0x4e4>)
 800a8aa:	fba3 1302 	umull	r1, r3, r3, r2
 800a8ae:	095b      	lsrs	r3, r3, #5
 800a8b0:	2164      	movs	r1, #100	; 0x64
 800a8b2:	fb01 f303 	mul.w	r3, r1, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	3332      	adds	r3, #50	; 0x32
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <UART_SetConfig+0x4e4>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	f003 020f 	and.w	r2, r3, #15
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4422      	add	r2, r4
 800a8d0:	609a      	str	r2, [r3, #8]
}
 800a8d2:	bf00      	nop
 800a8d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8de:	bf00      	nop
 800a8e0:	51eb851f 	.word	0x51eb851f

0800a8e4 <arm_mat_trans_f32>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	8802      	ldrh	r2, [r0, #0]
 800a8ea:	884b      	ldrh	r3, [r1, #2]
 800a8ec:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a8f0:	684f      	ldr	r7, [r1, #4]
 800a8f2:	8840      	ldrh	r0, [r0, #2]
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	d14c      	bne.n	800a994 <arm_mat_trans_f32+0xb0>
 800a8fa:	f8b1 e000 	ldrh.w	lr, [r1]
 800a8fe:	4586      	cmp	lr, r0
 800a900:	d148      	bne.n	800a994 <arm_mat_trans_f32+0xb0>
 800a902:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800a906:	009c      	lsls	r4, r3, #2
 800a908:	f00e 0e03 	and.w	lr, lr, #3
 800a90c:	fb08 f904 	mul.w	r9, r8, r4
 800a910:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800a914:	011d      	lsls	r5, r3, #4
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a91c:	eb07 0a04 	add.w	sl, r7, r4
 800a920:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800a924:	9201      	str	r2, [sp, #4]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	463b      	mov	r3, r7
 800a92a:	f1b8 0f00 	cmp.w	r8, #0
 800a92e:	d01d      	beq.n	800a96c <arm_mat_trans_f32+0x88>
 800a930:	9900      	ldr	r1, [sp, #0]
 800a932:	f10c 0210 	add.w	r2, ip, #16
 800a936:	4439      	add	r1, r7
 800a938:	4640      	mov	r0, r8
 800a93a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800a93e:	601e      	str	r6, [r3, #0]
 800a940:	ed52 7a03 	vldr	s15, [r2, #-12]
 800a944:	191e      	adds	r6, r3, r4
 800a946:	edc6 7a00 	vstr	s15, [r6]
 800a94a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800a94e:	600e      	str	r6, [r1, #0]
 800a950:	ed52 7a01 	vldr	s15, [r2, #-4]
 800a954:	190e      	adds	r6, r1, r4
 800a956:	3801      	subs	r0, #1
 800a958:	442b      	add	r3, r5
 800a95a:	f102 0210 	add.w	r2, r2, #16
 800a95e:	edc6 7a00 	vstr	s15, [r6]
 800a962:	4429      	add	r1, r5
 800a964:	d1e9      	bne.n	800a93a <arm_mat_trans_f32+0x56>
 800a966:	44dc      	add	ip, fp
 800a968:	eb09 0307 	add.w	r3, r9, r7
 800a96c:	f1be 0f00 	cmp.w	lr, #0
 800a970:	d009      	beq.n	800a986 <arm_mat_trans_f32+0xa2>
 800a972:	4672      	mov	r2, lr
 800a974:	4661      	mov	r1, ip
 800a976:	f851 0b04 	ldr.w	r0, [r1], #4
 800a97a:	6018      	str	r0, [r3, #0]
 800a97c:	3a01      	subs	r2, #1
 800a97e:	4423      	add	r3, r4
 800a980:	d1f9      	bne.n	800a976 <arm_mat_trans_f32+0x92>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	449c      	add	ip, r3
 800a986:	3704      	adds	r7, #4
 800a988:	4557      	cmp	r7, sl
 800a98a:	d1cd      	bne.n	800a928 <arm_mat_trans_f32+0x44>
 800a98c:	2000      	movs	r0, #0
 800a98e:	b003      	add	sp, #12
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	f06f 0002 	mvn.w	r0, #2
 800a998:	e7f9      	b.n	800a98e <arm_mat_trans_f32+0xaa>
 800a99a:	bf00      	nop

0800a99c <arm_mat_sub_f32>:
 800a99c:	b4f0      	push	{r4, r5, r6, r7}
 800a99e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800a9a2:	6803      	ldr	r3, [r0, #0]
 800a9a4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a9a8:	6856      	ldr	r6, [r2, #4]
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	d15d      	bne.n	800aa6a <arm_mat_sub_f32+0xce>
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d15a      	bne.n	800aa6a <arm_mat_sub_f32+0xce>
 800a9b4:	8803      	ldrh	r3, [r0, #0]
 800a9b6:	8844      	ldrh	r4, [r0, #2]
 800a9b8:	fb04 f403 	mul.w	r4, r4, r3
 800a9bc:	08a5      	lsrs	r5, r4, #2
 800a9be:	d032      	beq.n	800aa26 <arm_mat_sub_f32+0x8a>
 800a9c0:	f10c 0110 	add.w	r1, ip, #16
 800a9c4:	f107 0210 	add.w	r2, r7, #16
 800a9c8:	f106 0310 	add.w	r3, r6, #16
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a9d2:	ed51 7a04 	vldr	s15, [r1, #-16]
 800a9d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9da:	3801      	subs	r0, #1
 800a9dc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a9e0:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a9e4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a9e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9ec:	f101 0110 	add.w	r1, r1, #16
 800a9f0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a9f4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a9f8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800a9fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa00:	f102 0210 	add.w	r2, r2, #16
 800aa04:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aa08:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800aa0c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800aa10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa14:	f103 0310 	add.w	r3, r3, #16
 800aa18:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800aa1c:	d1d7      	bne.n	800a9ce <arm_mat_sub_f32+0x32>
 800aa1e:	012b      	lsls	r3, r5, #4
 800aa20:	449c      	add	ip, r3
 800aa22:	441f      	add	r7, r3
 800aa24:	441e      	add	r6, r3
 800aa26:	f014 0403 	ands.w	r4, r4, #3
 800aa2a:	d01b      	beq.n	800aa64 <arm_mat_sub_f32+0xc8>
 800aa2c:	eddc 7a00 	vldr	s15, [ip]
 800aa30:	ed97 7a00 	vldr	s14, [r7]
 800aa34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa38:	3c01      	subs	r4, #1
 800aa3a:	edc6 7a00 	vstr	s15, [r6]
 800aa3e:	d011      	beq.n	800aa64 <arm_mat_sub_f32+0xc8>
 800aa40:	eddc 7a01 	vldr	s15, [ip, #4]
 800aa44:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa4c:	2c01      	cmp	r4, #1
 800aa4e:	edc6 7a01 	vstr	s15, [r6, #4]
 800aa52:	d007      	beq.n	800aa64 <arm_mat_sub_f32+0xc8>
 800aa54:	eddc 7a02 	vldr	s15, [ip, #8]
 800aa58:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa60:	edc6 7a02 	vstr	s15, [r6, #8]
 800aa64:	2000      	movs	r0, #0
 800aa66:	bcf0      	pop	{r4, r5, r6, r7}
 800aa68:	4770      	bx	lr
 800aa6a:	f06f 0002 	mvn.w	r0, #2
 800aa6e:	e7fa      	b.n	800aa66 <arm_mat_sub_f32+0xca>

0800aa70 <arm_mat_mult_f32>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	8845      	ldrh	r5, [r0, #2]
 800aa76:	880b      	ldrh	r3, [r1, #0]
 800aa78:	8806      	ldrh	r6, [r0, #0]
 800aa7a:	6847      	ldr	r7, [r0, #4]
 800aa7c:	6854      	ldr	r4, [r2, #4]
 800aa7e:	6848      	ldr	r0, [r1, #4]
 800aa80:	b08b      	sub	sp, #44	; 0x2c
 800aa82:	42ab      	cmp	r3, r5
 800aa84:	9109      	str	r1, [sp, #36]	; 0x24
 800aa86:	9604      	str	r6, [sp, #16]
 800aa88:	8849      	ldrh	r1, [r1, #2]
 800aa8a:	f040 808a 	bne.w	800aba2 <arm_mat_mult_f32+0x132>
 800aa8e:	8815      	ldrh	r5, [r2, #0]
 800aa90:	42b5      	cmp	r5, r6
 800aa92:	f040 8086 	bne.w	800aba2 <arm_mat_mult_f32+0x132>
 800aa96:	8852      	ldrh	r2, [r2, #2]
 800aa98:	428a      	cmp	r2, r1
 800aa9a:	f040 8082 	bne.w	800aba2 <arm_mat_mult_f32+0x132>
 800aa9e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800aaa2:	1d01      	adds	r1, r0, #4
 800aaa4:	0116      	lsls	r6, r2, #4
 800aaa6:	9108      	str	r1, [sp, #32]
 800aaa8:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800aaac:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800aab0:	9101      	str	r1, [sp, #4]
 800aab2:	fb06 f108 	mul.w	r1, r6, r8
 800aab6:	0095      	lsls	r5, r2, #2
 800aab8:	9103      	str	r1, [sp, #12]
 800aaba:	00d2      	lsls	r2, r2, #3
 800aabc:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800aac0:	f003 0903 	and.w	r9, r3, #3
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	f107 0b10 	add.w	fp, r7, #16
 800aaca:	eb04 0a05 	add.w	sl, r4, r5
 800aace:	9107      	str	r1, [sp, #28]
 800aad0:	9202      	str	r2, [sp, #8]
 800aad2:	9306      	str	r3, [sp, #24]
 800aad4:	f1ab 0310 	sub.w	r3, fp, #16
 800aad8:	9305      	str	r3, [sp, #20]
 800aada:	9b07      	ldr	r3, [sp, #28]
 800aadc:	f8dd e020 	ldr.w	lr, [sp, #32]
 800aae0:	eb03 0c0a 	add.w	ip, r3, sl
 800aae4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800abac <arm_mat_mult_f32+0x13c>
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	d053      	beq.n	800ab96 <arm_mat_mult_f32+0x126>
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	4644      	mov	r4, r8
 800aaf2:	18c1      	adds	r1, r0, r3
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	ed92 6a00 	vldr	s12, [r2]
 800aafc:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ab00:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ab04:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ab08:	ed91 5a00 	vldr	s10, [r1]
 800ab0c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ab10:	1957      	adds	r7, r2, r5
 800ab12:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ab16:	ed97 6a00 	vldr	s12, [r7]
 800ab1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab1e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ab22:	194f      	adds	r7, r1, r5
 800ab24:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ab28:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ab2c:	edd7 7a00 	vldr	s15, [r7]
 800ab30:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ab34:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ab38:	3c01      	subs	r4, #1
 800ab3a:	4432      	add	r2, r6
 800ab3c:	4431      	add	r1, r6
 800ab3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab42:	f103 0310 	add.w	r3, r3, #16
 800ab46:	d1d7      	bne.n	800aaf8 <arm_mat_mult_f32+0x88>
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	4418      	add	r0, r3
 800ab4e:	f1b9 0f00 	cmp.w	r9, #0
 800ab52:	d00b      	beq.n	800ab6c <arm_mat_mult_f32+0xfc>
 800ab54:	464b      	mov	r3, r9
 800ab56:	edd0 6a00 	vldr	s13, [r0]
 800ab5a:	ecb2 7a01 	vldmia	r2!, {s14}
 800ab5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab62:	3b01      	subs	r3, #1
 800ab64:	4428      	add	r0, r5
 800ab66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab6a:	d1f4      	bne.n	800ab56 <arm_mat_mult_f32+0xe6>
 800ab6c:	ecec 7a01 	vstmia	ip!, {s15}
 800ab70:	45d4      	cmp	ip, sl
 800ab72:	4670      	mov	r0, lr
 800ab74:	f10e 0e04 	add.w	lr, lr, #4
 800ab78:	d1b4      	bne.n	800aae4 <arm_mat_mult_f32+0x74>
 800ab7a:	9a01      	ldr	r2, [sp, #4]
 800ab7c:	9b06      	ldr	r3, [sp, #24]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4419      	add	r1, r3
 800ab82:	449b      	add	fp, r3
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	9101      	str	r1, [sp, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	44aa      	add	sl, r5
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	d004      	beq.n	800ab9a <arm_mat_mult_f32+0x12a>
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	6858      	ldr	r0, [r3, #4]
 800ab94:	e79e      	b.n	800aad4 <arm_mat_mult_f32+0x64>
 800ab96:	9a05      	ldr	r2, [sp, #20]
 800ab98:	e7d9      	b.n	800ab4e <arm_mat_mult_f32+0xde>
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	b00b      	add	sp, #44	; 0x2c
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba2:	f06f 0002 	mvn.w	r0, #2
 800aba6:	b00b      	add	sp, #44	; 0x2c
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	00000000 	.word	0x00000000

0800abb0 <arm_mat_inverse_f32>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	8843      	ldrh	r3, [r0, #2]
 800abb6:	8804      	ldrh	r4, [r0, #0]
 800abb8:	684e      	ldr	r6, [r1, #4]
 800abba:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800abbe:	b087      	sub	sp, #28
 800abc0:	429c      	cmp	r4, r3
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	9603      	str	r6, [sp, #12]
 800abc6:	f040 80ea 	bne.w	800ad9e <arm_mat_inverse_f32+0x1ee>
 800abca:	880a      	ldrh	r2, [r1, #0]
 800abcc:	884b      	ldrh	r3, [r1, #2]
 800abce:	4293      	cmp	r3, r2
 800abd0:	f040 80e5 	bne.w	800ad9e <arm_mat_inverse_f32+0x1ee>
 800abd4:	429c      	cmp	r4, r3
 800abd6:	f040 80e2 	bne.w	800ad9e <arm_mat_inverse_f32+0x1ee>
 800abda:	9005      	str	r0, [sp, #20]
 800abdc:	b30c      	cbz	r4, 800ac22 <arm_mat_inverse_f32+0x72>
 800abde:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800abe2:	1e67      	subs	r7, r4, #1
 800abe4:	f846 bb04 	str.w	fp, [r6], #4
 800abe8:	d01b      	beq.n	800ac22 <arm_mat_inverse_f32+0x72>
 800abea:	f04f 0801 	mov.w	r8, #1
 800abee:	00ba      	lsls	r2, r7, #2
 800abf0:	eb06 0a02 	add.w	sl, r6, r2
 800abf4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800abf8:	4630      	mov	r0, r6
 800abfa:	2100      	movs	r1, #0
 800abfc:	f000 f97e 	bl	800aefc <memset>
 800ac00:	eb0a 0605 	add.w	r6, sl, r5
 800ac04:	462a      	mov	r2, r5
 800ac06:	2100      	movs	r1, #0
 800ac08:	4650      	mov	r0, sl
 800ac0a:	f1b8 0f00 	cmp.w	r8, #0
 800ac0e:	f000 80cb 	beq.w	800ada8 <arm_mat_inverse_f32+0x1f8>
 800ac12:	f000 f973 	bl	800aefc <memset>
 800ac16:	3f01      	subs	r7, #1
 800ac18:	f108 0801 	add.w	r8, r8, #1
 800ac1c:	f846 bb04 	str.w	fp, [r6], #4
 800ac20:	d1e5      	bne.n	800abee <arm_mat_inverse_f32+0x3e>
 800ac22:	9b01      	ldr	r3, [sp, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80b5 	beq.w	800ad94 <arm_mat_inverse_f32+0x1e4>
 800ac2a:	009d      	lsls	r5, r3, #2
 800ac2c:	eb09 0205 	add.w	r2, r9, r5
 800ac30:	46cc      	mov	ip, r9
 800ac32:	9202      	str	r2, [sp, #8]
 800ac34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ac38:	1d2a      	adds	r2, r5, #4
 800ac3a:	9204      	str	r2, [sp, #16]
 800ac3c:	462f      	mov	r7, r5
 800ac3e:	469e      	mov	lr, r3
 800ac40:	2600      	movs	r6, #0
 800ac42:	9b02      	ldr	r3, [sp, #8]
 800ac44:	eddc 6a00 	vldr	s13, [ip]
 800ac48:	42b4      	cmp	r4, r6
 800ac4a:	eba3 0b07 	sub.w	fp, r3, r7
 800ac4e:	f000 80a1 	beq.w	800ad94 <arm_mat_inverse_f32+0x1e4>
 800ac52:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800adb8 <arm_mat_inverse_f32+0x208>
 800ac56:	4632      	mov	r2, r6
 800ac58:	4663      	mov	r3, ip
 800ac5a:	e00b      	b.n	800ac74 <arm_mat_inverse_f32+0xc4>
 800ac5c:	eef4 7a47 	vcmp.f32	s15, s14
 800ac60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac64:	f102 0201 	add.w	r2, r2, #1
 800ac68:	bfc8      	it	gt
 800ac6a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800ac6e:	42a2      	cmp	r2, r4
 800ac70:	442b      	add	r3, r5
 800ac72:	d014      	beq.n	800ac9e <arm_mat_inverse_f32+0xee>
 800ac74:	edd3 7a00 	vldr	s15, [r3]
 800ac78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac80:	eeb1 6a67 	vneg.f32	s12, s15
 800ac84:	dcea      	bgt.n	800ac5c <arm_mat_inverse_f32+0xac>
 800ac86:	eeb4 6a47 	vcmp.f32	s12, s14
 800ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8e:	f102 0201 	add.w	r2, r2, #1
 800ac92:	bfc8      	it	gt
 800ac94:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ac98:	42a2      	cmp	r2, r4
 800ac9a:	442b      	add	r3, r5
 800ac9c:	d1ea      	bne.n	800ac74 <arm_mat_inverse_f32+0xc4>
 800ac9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca6:	d075      	beq.n	800ad94 <arm_mat_inverse_f32+0x1e4>
 800aca8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	d070      	beq.n	800ad94 <arm_mat_inverse_f32+0x1e4>
 800acb2:	4672      	mov	r2, lr
 800acb4:	4663      	mov	r3, ip
 800acb6:	ed93 7a00 	vldr	s14, [r3]
 800acba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acbe:	3a01      	subs	r2, #1
 800acc0:	ece3 7a01 	vstmia	r3!, {s15}
 800acc4:	d1f7      	bne.n	800acb6 <arm_mat_inverse_f32+0x106>
 800acc6:	9901      	ldr	r1, [sp, #4]
 800acc8:	464b      	mov	r3, r9
 800acca:	ed93 7a00 	vldr	s14, [r3]
 800acce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acd2:	3901      	subs	r1, #1
 800acd4:	ece3 7a01 	vstmia	r3!, {s15}
 800acd8:	d1f7      	bne.n	800acca <arm_mat_inverse_f32+0x11a>
 800acda:	9803      	ldr	r0, [sp, #12]
 800acdc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800ace0:	42b1      	cmp	r1, r6
 800ace2:	d039      	beq.n	800ad58 <arm_mat_inverse_f32+0x1a8>
 800ace4:	eddb 6a00 	vldr	s13, [fp]
 800ace8:	465a      	mov	r2, fp
 800acea:	4673      	mov	r3, lr
 800acec:	46e2      	mov	sl, ip
 800acee:	ecba 7a01 	vldmia	sl!, {s14}
 800acf2:	edd2 7a00 	vldr	s15, [r2]
 800acf6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800acfa:	3b01      	subs	r3, #1
 800acfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad00:	ece2 7a01 	vstmia	r2!, {s15}
 800ad04:	d1f3      	bne.n	800acee <arm_mat_inverse_f32+0x13e>
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	44bb      	add	fp, r7
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	46ca      	mov	sl, r9
 800ad0e:	ecba 7a01 	vldmia	sl!, {s14}
 800ad12:	edd2 7a00 	vldr	s15, [r2]
 800ad16:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad20:	ece2 7a01 	vstmia	r2!, {s15}
 800ad24:	d1f3      	bne.n	800ad0e <arm_mat_inverse_f32+0x15e>
 800ad26:	4428      	add	r0, r5
 800ad28:	3101      	adds	r1, #1
 800ad2a:	428c      	cmp	r4, r1
 800ad2c:	44c3      	add	fp, r8
 800ad2e:	d1d7      	bne.n	800ace0 <arm_mat_inverse_f32+0x130>
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	f1be 0e01 	subs.w	lr, lr, #1
 800ad36:	f106 0601 	add.w	r6, r6, #1
 800ad3a:	449c      	add	ip, r3
 800ad3c:	f1a7 0704 	sub.w	r7, r7, #4
 800ad40:	44a9      	add	r9, r5
 800ad42:	f47f af7e 	bne.w	800ac42 <arm_mat_inverse_f32+0x92>
 800ad46:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	d006      	beq.n	800ad5e <arm_mat_inverse_f32+0x1ae>
 800ad50:	2000      	movs	r0, #0
 800ad52:	b007      	add	sp, #28
 800ad54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad58:	44bb      	add	fp, r7
 800ad5a:	4428      	add	r0, r5
 800ad5c:	e7e4      	b.n	800ad28 <arm_mat_inverse_f32+0x178>
 800ad5e:	9b05      	ldr	r3, [sp, #20]
 800ad60:	9a01      	ldr	r2, [sp, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	edd3 7a00 	vldr	s15, [r3]
 800ad68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad6c:	fb02 f204 	mul.w	r2, r2, r4
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	4614      	mov	r4, r2
 800ad76:	bf08      	it	eq
 800ad78:	3304      	addeq	r3, #4
 800ad7a:	d007      	beq.n	800ad8c <arm_mat_inverse_f32+0x1dc>
 800ad7c:	e7e8      	b.n	800ad50 <arm_mat_inverse_f32+0x1a0>
 800ad7e:	ecf3 7a01 	vldmia	r3!, {s15}
 800ad82:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8a:	d1e1      	bne.n	800ad50 <arm_mat_inverse_f32+0x1a0>
 800ad8c:	f10e 0e01 	add.w	lr, lr, #1
 800ad90:	4574      	cmp	r4, lr
 800ad92:	d1f4      	bne.n	800ad7e <arm_mat_inverse_f32+0x1ce>
 800ad94:	f06f 0004 	mvn.w	r0, #4
 800ad98:	b007      	add	sp, #28
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	f06f 0002 	mvn.w	r0, #2
 800ada2:	b007      	add	sp, #28
 800ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada8:	4656      	mov	r6, sl
 800adaa:	3f01      	subs	r7, #1
 800adac:	f846 bb04 	str.w	fp, [r6], #4
 800adb0:	f47f af1b 	bne.w	800abea <arm_mat_inverse_f32+0x3a>
 800adb4:	e735      	b.n	800ac22 <arm_mat_inverse_f32+0x72>
 800adb6:	bf00      	nop
 800adb8:	00000000 	.word	0x00000000

0800adbc <arm_mat_init_f32>:
 800adbc:	8001      	strh	r1, [r0, #0]
 800adbe:	8042      	strh	r2, [r0, #2]
 800adc0:	6043      	str	r3, [r0, #4]
 800adc2:	4770      	bx	lr

0800adc4 <arm_mat_add_f32>:
 800adc4:	b4f0      	push	{r4, r5, r6, r7}
 800adc6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800adca:	6803      	ldr	r3, [r0, #0]
 800adcc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800add0:	6856      	ldr	r6, [r2, #4]
 800add2:	42a3      	cmp	r3, r4
 800add4:	d15d      	bne.n	800ae92 <arm_mat_add_f32+0xce>
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	4293      	cmp	r3, r2
 800adda:	d15a      	bne.n	800ae92 <arm_mat_add_f32+0xce>
 800addc:	8803      	ldrh	r3, [r0, #0]
 800adde:	8844      	ldrh	r4, [r0, #2]
 800ade0:	fb04 f403 	mul.w	r4, r4, r3
 800ade4:	08a5      	lsrs	r5, r4, #2
 800ade6:	d032      	beq.n	800ae4e <arm_mat_add_f32+0x8a>
 800ade8:	f10c 0110 	add.w	r1, ip, #16
 800adec:	f107 0210 	add.w	r2, r7, #16
 800adf0:	f106 0310 	add.w	r3, r6, #16
 800adf4:	4628      	mov	r0, r5
 800adf6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800adfa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800adfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae02:	3801      	subs	r0, #1
 800ae04:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ae08:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ae0c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ae10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae14:	f101 0110 	add.w	r1, r1, #16
 800ae18:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ae1c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800ae20:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800ae24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae28:	f102 0210 	add.w	r2, r2, #16
 800ae2c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ae30:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800ae34:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ae38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae3c:	f103 0310 	add.w	r3, r3, #16
 800ae40:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ae44:	d1d7      	bne.n	800adf6 <arm_mat_add_f32+0x32>
 800ae46:	012b      	lsls	r3, r5, #4
 800ae48:	449c      	add	ip, r3
 800ae4a:	441f      	add	r7, r3
 800ae4c:	441e      	add	r6, r3
 800ae4e:	f014 0403 	ands.w	r4, r4, #3
 800ae52:	d01b      	beq.n	800ae8c <arm_mat_add_f32+0xc8>
 800ae54:	edd7 7a00 	vldr	s15, [r7]
 800ae58:	ed9c 7a00 	vldr	s14, [ip]
 800ae5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae60:	3c01      	subs	r4, #1
 800ae62:	edc6 7a00 	vstr	s15, [r6]
 800ae66:	d011      	beq.n	800ae8c <arm_mat_add_f32+0xc8>
 800ae68:	eddc 7a01 	vldr	s15, [ip, #4]
 800ae6c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ae70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae74:	2c01      	cmp	r4, #1
 800ae76:	edc6 7a01 	vstr	s15, [r6, #4]
 800ae7a:	d007      	beq.n	800ae8c <arm_mat_add_f32+0xc8>
 800ae7c:	eddc 7a02 	vldr	s15, [ip, #8]
 800ae80:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae88:	edc6 7a02 	vstr	s15, [r6, #8]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	bcf0      	pop	{r4, r5, r6, r7}
 800ae90:	4770      	bx	lr
 800ae92:	f06f 0002 	mvn.w	r0, #2
 800ae96:	e7fa      	b.n	800ae8e <arm_mat_add_f32+0xca>

0800ae98 <__libc_init_array>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4d0d      	ldr	r5, [pc, #52]	; (800aed0 <__libc_init_array+0x38>)
 800ae9c:	4c0d      	ldr	r4, [pc, #52]	; (800aed4 <__libc_init_array+0x3c>)
 800ae9e:	1b64      	subs	r4, r4, r5
 800aea0:	10a4      	asrs	r4, r4, #2
 800aea2:	2600      	movs	r6, #0
 800aea4:	42a6      	cmp	r6, r4
 800aea6:	d109      	bne.n	800aebc <__libc_init_array+0x24>
 800aea8:	4d0b      	ldr	r5, [pc, #44]	; (800aed8 <__libc_init_array+0x40>)
 800aeaa:	4c0c      	ldr	r4, [pc, #48]	; (800aedc <__libc_init_array+0x44>)
 800aeac:	f000 f82e 	bl	800af0c <_init>
 800aeb0:	1b64      	subs	r4, r4, r5
 800aeb2:	10a4      	asrs	r4, r4, #2
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	42a6      	cmp	r6, r4
 800aeb8:	d105      	bne.n	800aec6 <__libc_init_array+0x2e>
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec0:	4798      	blx	r3
 800aec2:	3601      	adds	r6, #1
 800aec4:	e7ee      	b.n	800aea4 <__libc_init_array+0xc>
 800aec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeca:	4798      	blx	r3
 800aecc:	3601      	adds	r6, #1
 800aece:	e7f2      	b.n	800aeb6 <__libc_init_array+0x1e>
 800aed0:	0800af4c 	.word	0x0800af4c
 800aed4:	0800af4c 	.word	0x0800af4c
 800aed8:	0800af4c 	.word	0x0800af4c
 800aedc:	0800af50 	.word	0x0800af50

0800aee0 <memcpy>:
 800aee0:	440a      	add	r2, r1
 800aee2:	4291      	cmp	r1, r2
 800aee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aee8:	d100      	bne.n	800aeec <memcpy+0xc>
 800aeea:	4770      	bx	lr
 800aeec:	b510      	push	{r4, lr}
 800aeee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aef6:	4291      	cmp	r1, r2
 800aef8:	d1f9      	bne.n	800aeee <memcpy+0xe>
 800aefa:	bd10      	pop	{r4, pc}

0800aefc <memset>:
 800aefc:	4402      	add	r2, r0
 800aefe:	4603      	mov	r3, r0
 800af00:	4293      	cmp	r3, r2
 800af02:	d100      	bne.n	800af06 <memset+0xa>
 800af04:	4770      	bx	lr
 800af06:	f803 1b01 	strb.w	r1, [r3], #1
 800af0a:	e7f9      	b.n	800af00 <memset+0x4>

0800af0c <_init>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr

0800af18 <_fini>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	bf00      	nop
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr
