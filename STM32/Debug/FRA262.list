
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f6c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800411c  0800411c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004124  08004124  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000130  0800425c  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800425c  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e76  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  00031fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a93  00000000  00000000  00035f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e083  00000000  00000000  000379cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb38  00000000  00000000  00045a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000d5586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  000d564c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000d8a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040ec 	.word	0x080040ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	080040ec 	.word	0x080040ec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f04f 0200 	mov.w	r2, #0
 80004ea:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f04f 0200 	mov.w	r2, #0
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f04f 0200 	mov.w	r2, #0
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f04f 0200 	mov.w	r2, #0
 8000502:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f04f 0200 	mov.w	r2, #0
 800050a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 ff23 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f94f 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fb29 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 fafd 	bl	8000b28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800052e:	f000 f9b1 	bl	8000894 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000532:	f000 fa33 	bl	800099c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000536:	f000 fa85 	bl	8000a44 <MX_TIM3_Init>
  MX_TIM11_Init();
 800053a:	f000 fad1 	bl	8000ae0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  //////////////////////////
  arm_mat_init_f32(&MatA, 3, 3, MatA_Data);
 800053e:	4b6d      	ldr	r3, [pc, #436]	; (80006f4 <main+0x1dc>)
 8000540:	2203      	movs	r2, #3
 8000542:	2103      	movs	r1, #3
 8000544:	486c      	ldr	r0, [pc, #432]	; (80006f8 <main+0x1e0>)
 8000546:	f003 fd37 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatB, 3, 1, MatB_Data);
 800054a:	4b6c      	ldr	r3, [pc, #432]	; (80006fc <main+0x1e4>)
 800054c:	2201      	movs	r2, #1
 800054e:	2103      	movs	r1, #3
 8000550:	486b      	ldr	r0, [pc, #428]	; (8000700 <main+0x1e8>)
 8000552:	f003 fd31 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatC, 1, 3, MatC_Data);
 8000556:	4b6b      	ldr	r3, [pc, #428]	; (8000704 <main+0x1ec>)
 8000558:	2203      	movs	r2, #3
 800055a:	2101      	movs	r1, #1
 800055c:	486a      	ldr	r0, [pc, #424]	; (8000708 <main+0x1f0>)
 800055e:	f003 fd2b 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatD, 1, 1, MatD_Data);
 8000562:	4b6a      	ldr	r3, [pc, #424]	; (800070c <main+0x1f4>)
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	4869      	ldr	r0, [pc, #420]	; (8000710 <main+0x1f8>)
 800056a:	f003 fd25 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatQ, 3, 3, MatQ_Data);
 800056e:	4b69      	ldr	r3, [pc, #420]	; (8000714 <main+0x1fc>)
 8000570:	2203      	movs	r2, #3
 8000572:	2103      	movs	r1, #3
 8000574:	4868      	ldr	r0, [pc, #416]	; (8000718 <main+0x200>)
 8000576:	f003 fd1f 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatR, 1, 1, MatR_Data);
 800057a:	4b68      	ldr	r3, [pc, #416]	; (800071c <main+0x204>)
 800057c:	2201      	movs	r2, #1
 800057e:	2101      	movs	r1, #1
 8000580:	4867      	ldr	r0, [pc, #412]	; (8000720 <main+0x208>)
 8000582:	f003 fd19 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatG, 3, 3, MatG_Data);
 8000586:	4b67      	ldr	r3, [pc, #412]	; (8000724 <main+0x20c>)
 8000588:	2203      	movs	r2, #3
 800058a:	2103      	movs	r1, #3
 800058c:	4866      	ldr	r0, [pc, #408]	; (8000728 <main+0x210>)
 800058e:	f003 fd13 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatState, 3, 3, MatState_Data);
 8000592:	4b66      	ldr	r3, [pc, #408]	; (800072c <main+0x214>)
 8000594:	2203      	movs	r2, #3
 8000596:	2103      	movs	r1, #3
 8000598:	4865      	ldr	r0, [pc, #404]	; (8000730 <main+0x218>)
 800059a:	f003 fd0d 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatStateLast, 3, 3, MatStateLast_Data);
 800059e:	4b65      	ldr	r3, [pc, #404]	; (8000734 <main+0x21c>)
 80005a0:	2203      	movs	r2, #3
 80005a2:	2103      	movs	r1, #3
 80005a4:	4864      	ldr	r0, [pc, #400]	; (8000738 <main+0x220>)
 80005a6:	f003 fd07 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatPredict, 3, 3, MatPredict_Data);
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <main+0x224>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	2103      	movs	r1, #3
 80005b0:	4863      	ldr	r0, [pc, #396]	; (8000740 <main+0x228>)
 80005b2:	f003 fd01 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatPredictLast, 3, 3, MatPredictLast_Data);
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <main+0x22c>)
 80005b8:	2203      	movs	r2, #3
 80005ba:	2103      	movs	r1, #3
 80005bc:	4862      	ldr	r0, [pc, #392]	; (8000748 <main+0x230>)
 80005be:	f003 fcfb 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatY, 1, 1, MatY_Data);
 80005c2:	4b62      	ldr	r3, [pc, #392]	; (800074c <main+0x234>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4861      	ldr	r0, [pc, #388]	; (8000750 <main+0x238>)
 80005ca:	f003 fcf5 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatZ, 1, 1, MatZ_Data);
 80005ce:	4b61      	ldr	r3, [pc, #388]	; (8000754 <main+0x23c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	4860      	ldr	r0, [pc, #384]	; (8000758 <main+0x240>)
 80005d6:	f003 fcef 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatS, 1, 1, MatS_Data);
 80005da:	4b60      	ldr	r3, [pc, #384]	; (800075c <main+0x244>)
 80005dc:	2201      	movs	r2, #1
 80005de:	2101      	movs	r1, #1
 80005e0:	485f      	ldr	r0, [pc, #380]	; (8000760 <main+0x248>)
 80005e2:	f003 fce9 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatK, 3, 1, MatK_Data);
 80005e6:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <main+0x24c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	485e      	ldr	r0, [pc, #376]	; (8000768 <main+0x250>)
 80005ee:	f003 fce3 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatI, 3, 3, MatI_Data);
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <main+0x254>)
 80005f4:	2203      	movs	r2, #3
 80005f6:	2103      	movs	r1, #3
 80005f8:	485d      	ldr	r0, [pc, #372]	; (8000770 <main+0x258>)
 80005fa:	f003 fcdd 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatAt, 3, 3, MatAt_Data);
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <main+0x25c>)
 8000600:	2203      	movs	r2, #3
 8000602:	2103      	movs	r1, #3
 8000604:	485c      	ldr	r0, [pc, #368]	; (8000778 <main+0x260>)
 8000606:	f003 fcd7 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatGt, 3, 3, MatGt_Data);
 800060a:	4b5c      	ldr	r3, [pc, #368]	; (800077c <main+0x264>)
 800060c:	2203      	movs	r2, #3
 800060e:	2103      	movs	r1, #3
 8000610:	485b      	ldr	r0, [pc, #364]	; (8000780 <main+0x268>)
 8000612:	f003 fcd1 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatCt, 1, 3, MatCt_Data);
 8000616:	4b5b      	ldr	r3, [pc, #364]	; (8000784 <main+0x26c>)
 8000618:	2203      	movs	r2, #3
 800061a:	2101      	movs	r1, #1
 800061c:	485a      	ldr	r0, [pc, #360]	; (8000788 <main+0x270>)
 800061e:	f003 fccb 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatGQGt, 3, 3, MatGQGt_Data);
 8000622:	4b5a      	ldr	r3, [pc, #360]	; (800078c <main+0x274>)
 8000624:	2203      	movs	r2, #3
 8000626:	2103      	movs	r1, #3
 8000628:	4859      	ldr	r0, [pc, #356]	; (8000790 <main+0x278>)
 800062a:	f003 fcc5 	bl	8003fb8 <arm_mat_init_f32>
  arm_mat_init_f32(&MatSinv, 1, 1, MatSinv_Data);
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <main+0x27c>)
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <main+0x280>)
 8000636:	f003 fcbf 	bl	8003fb8 <arm_mat_init_f32>
  // Get Transpose
  arm_mat_trans_f32(&MatA, &MatAt);
 800063a:	494f      	ldr	r1, [pc, #316]	; (8000778 <main+0x260>)
 800063c:	482e      	ldr	r0, [pc, #184]	; (80006f8 <main+0x1e0>)
 800063e:	f003 fa4f 	bl	8003ae0 <arm_mat_trans_f32>
  arm_mat_trans_f32(&MatG, &MatGt);
 8000642:	494f      	ldr	r1, [pc, #316]	; (8000780 <main+0x268>)
 8000644:	4838      	ldr	r0, [pc, #224]	; (8000728 <main+0x210>)
 8000646:	f003 fa4b 	bl	8003ae0 <arm_mat_trans_f32>
  arm_mat_trans_f32(&MatC, &MatCt);
 800064a:	494f      	ldr	r1, [pc, #316]	; (8000788 <main+0x270>)
 800064c:	482e      	ldr	r0, [pc, #184]	; (8000708 <main+0x1f0>)
 800064e:	f003 fa47 	bl	8003ae0 <arm_mat_trans_f32>
  // Get GQGt
  arm_mat_mult_f32(&MatG, &MatQ, &MatGQGt);
 8000652:	4a4f      	ldr	r2, [pc, #316]	; (8000790 <main+0x278>)
 8000654:	4930      	ldr	r1, [pc, #192]	; (8000718 <main+0x200>)
 8000656:	4834      	ldr	r0, [pc, #208]	; (8000728 <main+0x210>)
 8000658:	f003 fb08 	bl	8003c6c <arm_mat_mult_f32>
  arm_mat_mult_f32(&MatGQGt, &MatGt, &MatGQGt);
 800065c:	4a4c      	ldr	r2, [pc, #304]	; (8000790 <main+0x278>)
 800065e:	4948      	ldr	r1, [pc, #288]	; (8000780 <main+0x268>)
 8000660:	484b      	ldr	r0, [pc, #300]	; (8000790 <main+0x278>)
 8000662:	f003 fb03 	bl	8003c6c <arm_mat_mult_f32>
  //////////////////////////

  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000666:	2100      	movs	r1, #0
 8000668:	484c      	ldr	r0, [pc, #304]	; (800079c <main+0x284>)
 800066a:	f001 ff39 	bl	80024e0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 800066e:	484c      	ldr	r0, [pc, #304]	; (80007a0 <main+0x288>)
 8000670:	f001 fe84 	bl	800237c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8000674:	484b      	ldr	r0, [pc, #300]	; (80007a4 <main+0x28c>)
 8000676:	f001 fe81 	bl	800237c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800067a:	213c      	movs	r1, #60	; 0x3c
 800067c:	484a      	ldr	r0, [pc, #296]	; (80007a8 <main+0x290>)
 800067e:	f002 f885 	bl	800278c <HAL_TIM_Encoder_Start>
	q[0]=TIM2->CNT;
 8000682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000688:	461a      	mov	r2, r3
 800068a:	4b48      	ldr	r3, [pc, #288]	; (80007ac <main+0x294>)
 800068c:	601a      	str	r2, [r3, #0]
	q[1]=q[0];
 800068e:	4b47      	ldr	r3, [pc, #284]	; (80007ac <main+0x294>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a46      	ldr	r2, [pc, #280]	; (80007ac <main+0x294>)
 8000694:	6053      	str	r3, [r2, #4]
	pos[0] =q[0];
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <main+0x294>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <main+0x298>)
 800069c:	6013      	str	r3, [r2, #0]
	pos[1] =q[1];
 800069e:	4b43      	ldr	r3, [pc, #268]	; (80007ac <main+0x294>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4a43      	ldr	r2, [pc, #268]	; (80007b0 <main+0x298>)
 80006a4:	6053      	str	r3, [r2, #4]
  PIDController_Init(&pid);
 80006a6:	4843      	ldr	r0, [pc, #268]	; (80007b4 <main+0x29c>)
 80006a8:	f7ff ff18 	bl	80004dc <PIDController_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Drivemotor(PWMC);
 80006ac:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <main+0x2a0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fbe5 	bl	8000e80 <Drivemotor>
	  static int timeStamp2 = 0;
	  if (Micros() - timeStamp2 > 2000000)
 80006b6:	f000 fc5d 	bl	8000f74 <Micros>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	493f      	ldr	r1, [pc, #252]	; (80007bc <main+0x2a4>)
 80006c0:	6809      	ldr	r1, [r1, #0]
 80006c2:	17c8      	asrs	r0, r1, #31
 80006c4:	4688      	mov	r8, r1
 80006c6:	4681      	mov	r9, r0
 80006c8:	ebb2 0408 	subs.w	r4, r2, r8
 80006cc:	eb63 0509 	sbc.w	r5, r3, r9
 80006d0:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <main+0x2a8>)
 80006d2:	429c      	cmp	r4, r3
 80006d4:	f175 0300 	sbcs.w	r3, r5, #0
 80006d8:	d3e8      	bcc.n	80006ac <main+0x194>
	  {
			timeStamp2 = Micros();
 80006da:	f000 fc4b 	bl	8000f74 <Micros>
 80006de:	4602      	mov	r2, r0
 80006e0:	460b      	mov	r3, r1
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <main+0x2a4>)
 80006e4:	601a      	str	r2, [r3, #0]
			PWMC = -1*PWMC;
 80006e6:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <main+0x2a0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	425b      	negs	r3, r3
 80006ec:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <main+0x2a0>)
 80006ee:	6013      	str	r3, [r2, #0]
  {
 80006f0:	e7dc      	b.n	80006ac <main+0x194>
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000
 80006f8:	200002b4 	.word	0x200002b4
 80006fc:	200002bc 	.word	0x200002bc
 8000700:	200002c8 	.word	0x200002c8
 8000704:	20000024 	.word	0x20000024
 8000708:	200002d0 	.word	0x200002d0
 800070c:	200002d8 	.word	0x200002d8
 8000710:	200002dc 	.word	0x200002dc
 8000714:	20000030 	.word	0x20000030
 8000718:	200002e4 	.word	0x200002e4
 800071c:	20000054 	.word	0x20000054
 8000720:	200002ec 	.word	0x200002ec
 8000724:	20000058 	.word	0x20000058
 8000728:	200002f4 	.word	0x200002f4
 800072c:	200002fc 	.word	0x200002fc
 8000730:	20000308 	.word	0x20000308
 8000734:	20000310 	.word	0x20000310
 8000738:	2000031c 	.word	0x2000031c
 800073c:	2000007c 	.word	0x2000007c
 8000740:	20000324 	.word	0x20000324
 8000744:	200000a0 	.word	0x200000a0
 8000748:	2000032c 	.word	0x2000032c
 800074c:	20000334 	.word	0x20000334
 8000750:	20000338 	.word	0x20000338
 8000754:	20000340 	.word	0x20000340
 8000758:	20000344 	.word	0x20000344
 800075c:	2000034c 	.word	0x2000034c
 8000760:	20000350 	.word	0x20000350
 8000764:	20000358 	.word	0x20000358
 8000768:	20000364 	.word	0x20000364
 800076c:	200000c4 	.word	0x200000c4
 8000770:	2000036c 	.word	0x2000036c
 8000774:	20000374 	.word	0x20000374
 8000778:	20000398 	.word	0x20000398
 800077c:	200003a0 	.word	0x200003a0
 8000780:	200003c4 	.word	0x200003c4
 8000784:	200003cc 	.word	0x200003cc
 8000788:	200003d8 	.word	0x200003d8
 800078c:	200003ec 	.word	0x200003ec
 8000790:	20000410 	.word	0x20000410
 8000794:	200003e0 	.word	0x200003e0
 8000798:	200003e4 	.word	0x200003e4
 800079c:	2000014c 	.word	0x2000014c
 80007a0:	20000224 	.word	0x20000224
 80007a4:	200001dc 	.word	0x200001dc
 80007a8:	20000194 	.word	0x20000194
 80007ac:	20000420 	.word	0x20000420
 80007b0:	2000042c 	.word	0x2000042c
 80007b4:	200000ec 	.word	0x200000ec
 80007b8:	200000e8 	.word	0x200000e8
 80007bc:	20000434 	.word	0x20000434
 80007c0:	001e8481 	.word	0x001e8481

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fc82 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xc8>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <SystemClock_Config+0xc8>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <SystemClock_Config+0xc8>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemClock_Config+0xcc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <SystemClock_Config+0xcc>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <SystemClock_Config+0xcc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000834:	2308      	movs	r3, #8
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 f8af 	bl	80019ac <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000854:	f000 fba6 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2103      	movs	r1, #3
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fb11 	bl	8001e9c <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000880:	f000 fb90 	bl	8000fa4 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	; 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fc0c 	bl	80040dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c4:	4b33      	ldr	r3, [pc, #204]	; (8000994 <MX_TIM1_Init+0x100>)
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <MX_TIM1_Init+0x104>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80008ca:	4b32      	ldr	r3, [pc, #200]	; (8000994 <MX_TIM1_Init+0x100>)
 80008cc:	2263      	movs	r2, #99	; 0x63
 80008ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <MX_TIM1_Init+0x100>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80008d6:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <MX_TIM1_Init+0x100>)
 80008d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_TIM1_Init+0x100>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_TIM1_Init+0x100>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_TIM1_Init+0x100>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f0:	4828      	ldr	r0, [pc, #160]	; (8000994 <MX_TIM1_Init+0x100>)
 80008f2:	f001 fda5 	bl	8002440 <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008fc:	f000 fb52 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000908:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800090c:	4619      	mov	r1, r3
 800090e:	4821      	ldr	r0, [pc, #132]	; (8000994 <MX_TIM1_Init+0x100>)
 8000910:	f002 fd50 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800091a:	f000 fb43 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	4814      	ldr	r0, [pc, #80]	; (8000994 <MX_TIM1_Init+0x100>)
 8000944:	f002 f8b8 	bl	8002ab8 <HAL_TIM_PWM_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800094e:	f000 fb29 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM1_Init+0x100>)
 8000976:	f002 fd8b 	bl	8003490 <HAL_TIMEx_ConfigBreakDeadTime>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000980:	f000 fb10 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM1_Init+0x100>)
 8000986:	f000 fbef 	bl	8001168 <HAL_TIM_MspPostInit>

}
 800098a:	bf00      	nop
 800098c:	3748      	adds	r7, #72	; 0x48
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000014c 	.word	0x2000014c
 8000998:	40010000 	.word	0x40010000

0800099c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2224      	movs	r2, #36	; 0x24
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fb96 	bl	80040dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009ce:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009e4:	2302      	movs	r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80009f4:	2302      	movs	r3, #2
 80009f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f8:	2301      	movs	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_TIM2_Init+0xa4>)
 8000a0c:	f001 fe18 	bl	8002640 <HAL_TIM_Encoder_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a16:	f000 fac5 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_TIM2_Init+0xa4>)
 8000a28:	f002 fcc4 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a32:	f000 fab7 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000194 	.word	0x20000194

08000a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a62:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <MX_TIM3_Init+0x98>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a68:	2209      	movs	r2, #9
 8000a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a74:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000a88:	f001 fc28 	bl	80022dc <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 fa87 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000aa4:	f002 f8ca 	bl	8002c3c <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fa79 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_TIM3_Init+0x94>)
 8000ac0:	f002 fc78 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000aca:	f000 fa6b 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001dc 	.word	0x200001dc
 8000adc:	40000400 	.word	0x40000400

08000ae0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <MX_TIM11_Init+0x44>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000aec:	2263      	movs	r2, #99	; 0x63
 8000aee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_TIM11_Init+0x40>)
 8000b0c:	f001 fbe6 	bl	80022dc <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000b16:	f000 fa45 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000224 	.word	0x20000224
 8000b24:	40014800 	.word	0x40014800

08000b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART2_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f002 fcfc 	bl	800355c <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 fa1b 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000026c 	.word	0x2000026c
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MX_GPIO_Init+0xd8>)
 8000c0a:	f000 feb5 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_GPIO_Init+0xdc>)
 8000c26:	f000 fd23 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8000c2a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_GPIO_Init+0xd8>)
 8000c44:	f000 fd14 	bl	8001670 <HAL_GPIO_Init>

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020800 	.word	0x40020800

08000c5c <KalmanFilterFunction>:

/* USER CODE BEGIN 4 */
void KalmanFilterFunction()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	q[0] = TIM2->CNT;
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000c6a:	601a      	str	r2, [r3, #0]
	if(q[0]-q[1]<-7200){
 8000c6c:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b65      	ldr	r3, [pc, #404]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8000c7a:	da07      	bge.n	8000c8c <KalmanFilterFunction+0x30>
		step+=12000;
 8000c7c:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <KalmanFilterFunction+0x1b0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8000c84:	3320      	adds	r3, #32
 8000c86:	4a61      	ldr	r2, [pc, #388]	; (8000e0c <KalmanFilterFunction+0x1b0>)
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e00e      	b.n	8000caa <KalmanFilterFunction+0x4e>
	}
	else if(q[0]-q[1]>=7200){
 8000c8c:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000c9a:	db06      	blt.n	8000caa <KalmanFilterFunction+0x4e>
		step-=12000;
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	; (8000e0c <KalmanFilterFunction+0x1b0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8000ca4:	3b20      	subs	r3, #32
 8000ca6:	4a59      	ldr	r2, [pc, #356]	; (8000e0c <KalmanFilterFunction+0x1b0>)
 8000ca8:	6013      	str	r3, [r2, #0]
	}
	pos[0] = q[0] + step;
 8000caa:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <KalmanFilterFunction+0x1b0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a56      	ldr	r2, [pc, #344]	; (8000e10 <KalmanFilterFunction+0x1b4>)
 8000cb6:	6013      	str	r3, [r2, #0]
	// 1.Prediction
	// Predicted State Estimate
	Kalmanstatus = arm_mat_mult_f32(&MatA, &MatStateLast, &MatState); // A*Xk-1 ,No B*u
 8000cb8:	4a56      	ldr	r2, [pc, #344]	; (8000e14 <KalmanFilterFunction+0x1b8>)
 8000cba:	4957      	ldr	r1, [pc, #348]	; (8000e18 <KalmanFilterFunction+0x1bc>)
 8000cbc:	4857      	ldr	r0, [pc, #348]	; (8000e1c <KalmanFilterFunction+0x1c0>)
 8000cbe:	f002 ffd5 	bl	8003c6c <arm_mat_mult_f32>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000cc8:	701a      	strb	r2, [r3, #0]
	// Predicted error covariance
	Kalmanstatus = arm_mat_mult_f32(&MatA, &MatPredictLast, &MatPredict); // A*Pk-1
 8000cca:	4a56      	ldr	r2, [pc, #344]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000ccc:	4956      	ldr	r1, [pc, #344]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000cce:	4853      	ldr	r0, [pc, #332]	; (8000e1c <KalmanFilterFunction+0x1c0>)
 8000cd0:	f002 ffcc 	bl	8003c6c <arm_mat_mult_f32>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000cda:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_mult_f32(&MatPredict, &MatAt, &MatPredict); // A*Pk-1*At
 8000cdc:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000cde:	4953      	ldr	r1, [pc, #332]	; (8000e2c <KalmanFilterFunction+0x1d0>)
 8000ce0:	4850      	ldr	r0, [pc, #320]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000ce2:	f002 ffc3 	bl	8003c6c <arm_mat_mult_f32>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000cec:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_add_f32(&MatPredict, &MatGQGt, &MatPredict); // A*Pk-1*At + GQGt
 8000cee:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000cf0:	494f      	ldr	r1, [pc, #316]	; (8000e30 <KalmanFilterFunction+0x1d4>)
 8000cf2:	484c      	ldr	r0, [pc, #304]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000cf4:	f003 f964 	bl	8003fc0 <arm_mat_add_f32>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	// 2.Correction
	// Innovation residual
	MatZ_Data[0] = pos[0]; // Sensor Input
 8000d00:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <KalmanFilterFunction+0x1b4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0c:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <KalmanFilterFunction+0x1d8>)
 8000d0e:	edc3 7a00 	vstr	s15, [r3]
	Kalmanstatus = arm_mat_mult_f32(&MatC, &MatState, &MatY); // C*Xk
 8000d12:	4a49      	ldr	r2, [pc, #292]	; (8000e38 <KalmanFilterFunction+0x1dc>)
 8000d14:	493f      	ldr	r1, [pc, #252]	; (8000e14 <KalmanFilterFunction+0x1b8>)
 8000d16:	4849      	ldr	r0, [pc, #292]	; (8000e3c <KalmanFilterFunction+0x1e0>)
 8000d18:	f002 ffa8 	bl	8003c6c <arm_mat_mult_f32>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d22:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_sub_f32(&MatZ, &MatY, &MatY); // Zk - C*Xk
 8000d24:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <KalmanFilterFunction+0x1dc>)
 8000d26:	4944      	ldr	r1, [pc, #272]	; (8000e38 <KalmanFilterFunction+0x1dc>)
 8000d28:	4845      	ldr	r0, [pc, #276]	; (8000e40 <KalmanFilterFunction+0x1e4>)
 8000d2a:	f002 ff35 	bl	8003b98 <arm_mat_sub_f32>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d34:	701a      	strb	r2, [r3, #0]
	// Innovation covariance
	Kalmanstatus = arm_mat_mult_f32(&MatC, &MatPredict, &MatS); // C*Pk
 8000d36:	4a43      	ldr	r2, [pc, #268]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d38:	493a      	ldr	r1, [pc, #232]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000d3a:	4840      	ldr	r0, [pc, #256]	; (8000e3c <KalmanFilterFunction+0x1e0>)
 8000d3c:	f002 ff96 	bl	8003c6c <arm_mat_mult_f32>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d46:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_mult_f32(&MatS, &MatCt, &MatS); // C*Pk*Ct
 8000d48:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d4a:	493f      	ldr	r1, [pc, #252]	; (8000e48 <KalmanFilterFunction+0x1ec>)
 8000d4c:	483d      	ldr	r0, [pc, #244]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d4e:	f002 ff8d 	bl	8003c6c <arm_mat_mult_f32>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d58:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_add_f32(&MatS, &MatR, &MatS); // C*Pk*Ct + R
 8000d5a:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d5c:	493b      	ldr	r1, [pc, #236]	; (8000e4c <KalmanFilterFunction+0x1f0>)
 8000d5e:	4839      	ldr	r0, [pc, #228]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d60:	f003 f92e 	bl	8003fc0 <arm_mat_add_f32>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d6a:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_inverse_f32(&MatS, &MatSinv); // S inverse
 8000d6c:	4938      	ldr	r1, [pc, #224]	; (8000e50 <KalmanFilterFunction+0x1f4>)
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <KalmanFilterFunction+0x1e8>)
 8000d70:	f003 f81c 	bl	8003dac <arm_mat_inverse_f32>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	// Optimal Kalman gain
	Kalmanstatus = arm_mat_mult_f32(&MatPredict, &MatCt, &MatK); // Pk*Ct
 8000d7c:	4a35      	ldr	r2, [pc, #212]	; (8000e54 <KalmanFilterFunction+0x1f8>)
 8000d7e:	4932      	ldr	r1, [pc, #200]	; (8000e48 <KalmanFilterFunction+0x1ec>)
 8000d80:	4828      	ldr	r0, [pc, #160]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000d82:	f002 ff73 	bl	8003c6c <arm_mat_mult_f32>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d8c:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_mult_f32(&MatK, &MatSinv, &MatK); // Pk*Ct*Sinv
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <KalmanFilterFunction+0x1f8>)
 8000d90:	492f      	ldr	r1, [pc, #188]	; (8000e50 <KalmanFilterFunction+0x1f4>)
 8000d92:	4830      	ldr	r0, [pc, #192]	; (8000e54 <KalmanFilterFunction+0x1f8>)
 8000d94:	f002 ff6a 	bl	8003c6c <arm_mat_mult_f32>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000d9e:	701a      	strb	r2, [r3, #0]
	// Corrected state estimate
	Kalmanstatus = arm_mat_mult_f32(&MatK, &MatY, &MatStateLast); // K*Yk
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <KalmanFilterFunction+0x1bc>)
 8000da2:	4925      	ldr	r1, [pc, #148]	; (8000e38 <KalmanFilterFunction+0x1dc>)
 8000da4:	482b      	ldr	r0, [pc, #172]	; (8000e54 <KalmanFilterFunction+0x1f8>)
 8000da6:	f002 ff61 	bl	8003c6c <arm_mat_mult_f32>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000db0:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_add_f32(&MatStateLast, &MatState, &MatStateLast); // Xk+K*Yk
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <KalmanFilterFunction+0x1bc>)
 8000db4:	4917      	ldr	r1, [pc, #92]	; (8000e14 <KalmanFilterFunction+0x1b8>)
 8000db6:	4818      	ldr	r0, [pc, #96]	; (8000e18 <KalmanFilterFunction+0x1bc>)
 8000db8:	f003 f902 	bl	8003fc0 <arm_mat_add_f32>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000dc2:	701a      	strb	r2, [r3, #0]
	// Corrected estimate covariance
	Kalmanstatus = arm_mat_mult_f32(&MatK, &MatC, &MatPredictLast); //K*C
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000dc6:	491d      	ldr	r1, [pc, #116]	; (8000e3c <KalmanFilterFunction+0x1e0>)
 8000dc8:	4822      	ldr	r0, [pc, #136]	; (8000e54 <KalmanFilterFunction+0x1f8>)
 8000dca:	f002 ff4f 	bl	8003c6c <arm_mat_mult_f32>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_sub_f32(&MatI, &MatPredictLast, &MatPredictLast); // I-K*C
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <KalmanFilterFunction+0x1fc>)
 8000ddc:	f002 fedc 	bl	8003b98 <arm_mat_sub_f32>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000de6:	701a      	strb	r2, [r3, #0]
	Kalmanstatus = arm_mat_mult_f32(&MatPredictLast, &MatPredict, &MatPredictLast); // (I-K*C)*Pk
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <KalmanFilterFunction+0x1c8>)
 8000dec:	480e      	ldr	r0, [pc, #56]	; (8000e28 <KalmanFilterFunction+0x1cc>)
 8000dee:	f002 ff3d 	bl	8003c6c <arm_mat_mult_f32>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <KalmanFilterFunction+0x1c4>)
 8000df8:	701a      	strb	r2, [r3, #0]
	// Sensor Save
	q[1] = q[0];
 8000dfa:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a02      	ldr	r2, [pc, #8]	; (8000e08 <KalmanFilterFunction+0x1ac>)
 8000e00:	6053      	str	r3, [r2, #4]
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000420 	.word	0x20000420
 8000e0c:	20000428 	.word	0x20000428
 8000e10:	2000042c 	.word	0x2000042c
 8000e14:	20000308 	.word	0x20000308
 8000e18:	2000031c 	.word	0x2000031c
 8000e1c:	200002b4 	.word	0x200002b4
 8000e20:	200002b0 	.word	0x200002b0
 8000e24:	20000324 	.word	0x20000324
 8000e28:	2000032c 	.word	0x2000032c
 8000e2c:	20000398 	.word	0x20000398
 8000e30:	20000410 	.word	0x20000410
 8000e34:	20000340 	.word	0x20000340
 8000e38:	20000338 	.word	0x20000338
 8000e3c:	200002d0 	.word	0x200002d0
 8000e40:	20000344 	.word	0x20000344
 8000e44:	20000350 	.word	0x20000350
 8000e48:	200003d8 	.word	0x200003d8
 8000e4c:	200002ec 	.word	0x200002ec
 8000e50:	200003e4 	.word	0x200003e4
 8000e54:	20000364 	.word	0x20000364
 8000e58:	2000036c 	.word	0x2000036c

08000e5c <aaabs>:
//		P_l[2][2] = P[2][2] - (P[1][2] * P[2][1]) / (P[1][1] + R);
//		q[1] = q[0];
//		pos[1] = pos[0];
//}

uint32_t aaabs(int x){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	if(x<0){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da02      	bge.n	8000e70 <aaabs+0x14>
		return x*-1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	e000      	b.n	8000e72 <aaabs+0x16>
	}else{
		return x;
 8000e70:	687b      	ldr	r3, [r7, #4]
	}
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <Drivemotor>:


void Drivemotor(int PWM){
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-500){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	dc11      	bgt.n	8000eb2 <Drivemotor+0x32>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000e94:	db0d      	blt.n	8000eb2 <Drivemotor+0x32>
		htim1.Instance->CCR1=aaabs(PWM);
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <Drivemotor+0xa4>)
 8000e98:	681c      	ldr	r4, [r3, #0]
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffde 	bl	8000e5c <aaabs>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	481f      	ldr	r0, [pc, #124]	; (8000f28 <Drivemotor+0xa8>)
 8000eac:	f000 fd64 	bl	8001978 <HAL_GPIO_WritePin>
 8000eb0:	e034      	b.n	8000f1c <Drivemotor+0x9c>
	}else if (PWM<-500){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000eb8:	da0b      	bge.n	8000ed2 <Drivemotor+0x52>
		htim1.Instance->CCR1=500;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <Drivemotor+0xa4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <Drivemotor+0xa8>)
 8000ecc:	f000 fd54 	bl	8001978 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}else if(PWM>500){
		htim1.Instance->CCR1=500;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}
}
 8000ed0:	e024      	b.n	8000f1c <Drivemotor+0x9c>
	}else if(PWM>=0 && PWM<=500){
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db11      	blt.n	8000efc <Drivemotor+0x7c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ede:	dc0d      	bgt.n	8000efc <Drivemotor+0x7c>
		htim1.Instance->CCR1=aaabs(PWM);
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <Drivemotor+0xa4>)
 8000ee2:	681c      	ldr	r4, [r3, #0]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffb9 	bl	8000e5c <aaabs>
 8000eea:	4603      	mov	r3, r0
 8000eec:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <Drivemotor+0xa8>)
 8000ef6:	f000 fd3f 	bl	8001978 <HAL_GPIO_WritePin>
 8000efa:	e00f      	b.n	8000f1c <Drivemotor+0x9c>
	}else if(PWM>500){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f02:	dd0b      	ble.n	8000f1c <Drivemotor+0x9c>
		htim1.Instance->CCR1=500;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <Drivemotor+0xa4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <Drivemotor+0xa8>)
 8000f16:	f000 fd2f 	bl	8001978 <HAL_GPIO_WritePin>
}
 8000f1a:	e7ff      	b.n	8000f1c <Drivemotor+0x9c>
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	2000014c 	.word	0x2000014c
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d10a      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f46:	1854      	adds	r4, r2, r1
 8000f48:	f143 0500 	adc.w	r5, r3, #0
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f4e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim3) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x32>
		KalmanFilterFunction();
 8000f5a:	f7ff fe7f 	bl	8000c5c <KalmanFilterFunction>
		}
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000224 	.word	0x20000224
 8000f6c:	20000418 	.word	0x20000418
 8000f70:	200001dc 	.word	0x200001dc

08000f74 <Micros>:

uint64_t Micros(){
 8000f74:	b4b0      	push	{r4, r5, r7}
 8000f76:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <Micros+0x28>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	4611      	mov	r1, r2
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <Micros+0x2c>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	1884      	adds	r4, r0, r2
 8000f8a:	eb41 0503 	adc.w	r5, r1, r3
 8000f8e:	4622      	mov	r2, r4
 8000f90:	462b      	mov	r3, r5
}
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bcb0      	pop	{r4, r5, r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40014800 	.word	0x40014800
 8000fa0:	20000418 	.word	0x20000418

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fafc 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_TIM_PWM_MspInit+0x48>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d115      	bne.n	800103e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_PWM_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_TIM_PWM_MspInit+0x4c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_PWM_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	201a      	movs	r0, #26
 8001034:	f000 fae5 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001038:	201a      	movs	r0, #26
 800103a:	f000 fafe 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010000 	.word	0x40010000
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001070:	d12b      	bne.n	80010ca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x84>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010aa:	2303      	movs	r3, #3
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ba:	2301      	movs	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010c6:	f000 fad3 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_TIM_Base_MspInit+0x80>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d116      	bne.n	800111c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201d      	movs	r0, #29
 8001110:	f000 fa77 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001114:	201d      	movs	r0, #29
 8001116:	f000 fa90 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800111a:	e01a      	b.n	8001152 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_Base_MspInit+0x88>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d115      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201a      	movs	r0, #26
 8001148:	f000 fa5b 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800114c:	201a      	movs	r0, #26
 800114e:	f000 fa74 	bl	800163a <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40000400 	.word	0x40000400
 8001160:	40023800 	.word	0x40023800
 8001164:	40014800 	.word	0x40014800

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_TIM_MspPostInit+0x68>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d11e      	bne.n	80011c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_TIM_MspPostInit+0x6c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_TIM_MspPostInit+0x6c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_TIM_MspPostInit+0x6c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_TIM_MspPostInit+0x70>)
 80011c4:	f000 fa54 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010000 	.word	0x40010000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_UART_MspInit+0x8c>)
 8001252:	f000 fa0d 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8a8 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80012c6:	f001 faef 	bl	80028a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80012cc:	f001 faec 	bl	80028a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000014c 	.word	0x2000014c
 80012d8:	20000224 	.word	0x20000224

080012dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM3_IRQHandler+0x10>)
 80012e2:	f001 fae1 	bl	80028a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001dc 	.word	0x200001dc

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133e:	f7ff ffd7 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f002 fea7 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff f8e7 	bl	8000518 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001358:	0800412c 	.word	0x0800412c
  ldr r2, =_sbss
 800135c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001360:	2000043c 	.word	0x2000043c

08001364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f92b 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fe08 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f943 	bl	8001656 <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 f90b 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000124 	.word	0x20000124
 8001404:	2000012c 	.word	0x2000012c
 8001408:	20000128 	.word	0x20000128

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000012c 	.word	0x2000012c
 8001430:	20000438 	.word	0x20000438

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000438 	.word	0x20000438

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e159      	b.n	8001940 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8148 	bne.w	800193a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b03      	cmp	r3, #3
 800172e:	d017      	beq.n	8001760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80a2 	beq.w	800193a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_GPIO_Init+0x2e8>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x2e8>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <HAL_GPIO_Init+0x2e8>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001812:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_GPIO_Init+0x2ec>)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a49      	ldr	r2, [pc, #292]	; (8001960 <HAL_GPIO_Init+0x2f0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x202>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2f4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x1fe>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a47      	ldr	r2, [pc, #284]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x1fa>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a46      	ldr	r2, [pc, #280]	; (800196c <HAL_GPIO_Init+0x2fc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x1f6>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a45      	ldr	r2, [pc, #276]	; (8001970 <HAL_GPIO_Init+0x300>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x1f2>
 800185e:	2304      	movs	r3, #4
 8001860:	e008      	b.n	8001874 <HAL_GPIO_Init+0x204>
 8001862:	2307      	movs	r3, #7
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x204>
 8001866:	2303      	movs	r3, #3
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x204>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x204>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x204>
 8001872:	2300      	movs	r3, #0
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <HAL_GPIO_Init+0x2ec>)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_GPIO_Init+0x304>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b6:	4a2f      	ldr	r2, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x304>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_GPIO_Init+0x304>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x304>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_GPIO_Init+0x304>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190a:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x304>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_GPIO_Init+0x304>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_GPIO_Init+0x304>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	f67f aea2 	bls.w	800168c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40013800 	.word	0x40013800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e267      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d075      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d00c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	4b7e      	ldr	r3, [pc, #504]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x108>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d157      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e242      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x74>
 8001a12:	4b76      	ldr	r3, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a75      	ldr	r2, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xb0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6f      	ldr	r2, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6c      	ldr	r2, [pc, #432]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xb0>
 8001a44:	4b69      	ldr	r3, [pc, #420]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a68      	ldr	r2, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a65      	ldr	r2, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fce6 	bl	8001434 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fce2 	bl	8001434 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e207      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xc0>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fcd2 	bl	8001434 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fcce 	bl	8001434 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1f3      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0xe8>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ada:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x152>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1c7      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4937      	ldr	r1, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_RCC_OscConfig+0x244>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc87 	bl	8001434 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc83 	bl	8001434 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1a8      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4925      	ldr	r1, [pc, #148]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x244>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc66 	bl	8001434 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc62 	bl	8001434 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e187      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d036      	beq.n	8001c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x248>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fc46 	bl	8001434 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc42 	bl	8001434 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e167      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_OscConfig+0x240>)
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x200>
 8001bca:	e01b      	b.n	8001c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x248>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fc2f 	bl	8001434 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	e00e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fc2b 	bl	8001434 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d907      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e150      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470000 	.word	0x42470000
 8001bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ea      	bne.n	8001bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8097 	beq.w	8001d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a7c      	ldr	r2, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b7a      	ldr	r3, [pc, #488]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x474>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_RCC_OscConfig+0x474>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x474>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fbeb 	bl	8001434 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff fbe7 	bl	8001434 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e10c      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x474>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2ea>
 8001c88:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x324>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x30c>
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x324>
 8001cb8:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a57      	ldr	r2, [pc, #348]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a54      	ldr	r2, [pc, #336]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d015      	beq.n	8001d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fbac 	bl	8001434 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fba8 	bl	8001434 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0cb      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fb96 	bl	8001434 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fb92 	bl	8001434 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0b5      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ee      	bne.n	8001d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a1 	beq.w	8001e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d05c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d141      	bne.n	8001de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_RCC_OscConfig+0x478>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fb66 	bl	8001434 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff fb62 	bl	8001434 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e087      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	3b01      	subs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	491b      	ldr	r1, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x478>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fb3b 	bl	8001434 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff fb37 	bl	8001434 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e05c      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x416>
 8001de0:	e054      	b.n	8001e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_OscConfig+0x478>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fb24 	bl	8001434 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff fb20 	bl	8001434 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e045      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_OscConfig+0x470>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
 8001e0e:	e03d      	b.n	8001e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e038      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x4ec>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d028      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d121      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d11a      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d111      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	3b01      	subs	r3, #1
 8001e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cc      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e067      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4934      	ldr	r1, [pc, #208]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fa52 	bl	8001434 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fa4e 	bl	8001434 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d20c      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f821 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f9b2 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00
 8002058:	40023800 	.word	0x40023800
 800205c:	08004104 	.word	0x08004104
 8002060:	20000124 	.word	0x20000124
 8002064:	20000128 	.word	0x20000128

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800206c:	b094      	sub	sp, #80	; 0x50
 800206e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
 8002074:	2300      	movs	r3, #0
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002078:	2300      	movs	r3, #0
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002080:	4b79      	ldr	r3, [pc, #484]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d00d      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x40>
 800208c:	2b08      	cmp	r3, #8
 800208e:	f200 80e1 	bhi.w	8002254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x34>
 8002096:	2b04      	cmp	r3, #4
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800209a:	e0db      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_GetSysClockFreq+0x204>)
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020a0:	e0db      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a2:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_GetSysClockFreq+0x208>)
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020a6:	e0d8      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a8:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d063      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020be:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	2200      	movs	r2, #0
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
 80020d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4621      	mov	r1, r4
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	6139      	str	r1, [r7, #16]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb63 0301 	sbc.w	r3, r3, r1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800210c:	4659      	mov	r1, fp
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002116:	4651      	mov	r1, sl
 8002118:	018a      	lsls	r2, r1, #6
 800211a:	4651      	mov	r1, sl
 800211c:	ebb2 0801 	subs.w	r8, r2, r1
 8002120:	4659      	mov	r1, fp
 8002122:	eb63 0901 	sbc.w	r9, r3, r1
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213a:	4690      	mov	r8, r2
 800213c:	4699      	mov	r9, r3
 800213e:	4623      	mov	r3, r4
 8002140:	eb18 0303 	adds.w	r3, r8, r3
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	462b      	mov	r3, r5
 8002148:	eb49 0303 	adc.w	r3, r9, r3
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800215a:	4629      	mov	r1, r5
 800215c:	024b      	lsls	r3, r1, #9
 800215e:	4621      	mov	r1, r4
 8002160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002164:	4621      	mov	r1, r4
 8002166:	024a      	lsls	r2, r1, #9
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216e:	2200      	movs	r2, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
 8002172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002178:	f7fe f82e 	bl	80001d8 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002184:	e058      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	2200      	movs	r2, #0
 800218e:	4618      	mov	r0, r3
 8002190:	4611      	mov	r1, r2
 8002192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021a0:	4642      	mov	r2, r8
 80021a2:	464b      	mov	r3, r9
 80021a4:	f04f 0000 	mov.w	r0, #0
 80021a8:	f04f 0100 	mov.w	r1, #0
 80021ac:	0159      	lsls	r1, r3, #5
 80021ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b2:	0150      	lsls	r0, r2, #5
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4641      	mov	r1, r8
 80021ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80021be:	4649      	mov	r1, r9
 80021c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d8:	ebb2 040a 	subs.w	r4, r2, sl
 80021dc:	eb63 050b 	sbc.w	r5, r3, fp
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	00eb      	lsls	r3, r5, #3
 80021ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ee:	00e2      	lsls	r2, r4, #3
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	18e3      	adds	r3, r4, r3
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	464b      	mov	r3, r9
 80021fc:	eb45 0303 	adc.w	r3, r5, r3
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220e:	4629      	mov	r1, r5
 8002210:	028b      	lsls	r3, r1, #10
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002218:	4621      	mov	r1, r4
 800221a:	028a      	lsls	r2, r1, #10
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002222:	2200      	movs	r2, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	61fa      	str	r2, [r7, #28]
 8002228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222c:	f7fd ffd4 	bl	80001d8 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4613      	mov	r3, r2
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetSysClockFreq+0x200>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002252:	e002      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetSysClockFreq+0x204>)
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800225c:	4618      	mov	r0, r3
 800225e:	3750      	adds	r7, #80	; 0x50
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200

08002274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000124 	.word	0x20000124

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08004114 	.word	0x08004114

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022b8:	f7ff ffdc 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0b5b      	lsrs	r3, r3, #13
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08004114 	.word	0x08004114

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e041      	b.n	8002372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe feea 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fd7e 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e044      	b.n	800241e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_TIM_Base_Start_IT+0xb0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x6c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d013      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x6c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_TIM_Base_Start_IT+0xb4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x6c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_TIM_Base_Start_IT+0xb8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x6c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_TIM_Base_Start_IT+0xbc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x6c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_TIM_Base_Start_IT+0xc0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d010      	beq.n	800241c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	e007      	b.n	800241c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40014000 	.word	0x40014000

08002440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fdca 	bl	8001000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fccc 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_TIM_PWM_Start+0x24>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e022      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d109      	bne.n	800251e <HAL_TIM_PWM_Start+0x3e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e015      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d109      	bne.n	8002538 <HAL_TIM_PWM_Start+0x58>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e008      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e068      	b.n	8002624 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0x82>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	e013      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0x92>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002570:	e00b      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0xa2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	e003      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fee8 	bl	8003368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_TIM_PWM_Start+0x14c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_TIM_PWM_Start+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d013      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_TIM_PWM_Start+0x150>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_TIM_PWM_Start+0x154>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIM_PWM_Start+0x158>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_PWM_Start+0x15c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d010      	beq.n	8002622 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	e007      	b.n	8002622 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40010000 	.word	0x40010000
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800
 8002638:	40000c00 	.word	0x40000c00
 800263c:	40014000 	.word	0x40014000

08002640 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e097      	b.n	8002784 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fcf1 	bl	8001050 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f000 fbc1 	bl	8002e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026e0:	f023 030c 	bic.w	r3, r3, #12
 80026e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	4313      	orrs	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	011a      	lsls	r2, r3, #4
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	031b      	lsls	r3, r3, #12
 8002710:	4313      	orrs	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4313      	orrs	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800279c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d110      	bne.n	80027de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80027c2:	7b7b      	ldrb	r3, [r7, #13]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e069      	b.n	80028a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027dc:	e031      	b.n	8002842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d110      	bne.n	8002806 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e055      	b.n	80028a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002804:	e01d      	b.n	8002842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002818:	7b3b      	ldrb	r3, [r7, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e03e      	b.n	80028a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_TIM_Encoder_Start+0xc4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d008      	beq.n	8002860 <HAL_TIM_Encoder_Start+0xd4>
 800284e:	e00f      	b.n	8002870 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd85 	bl	8003368 <TIM_CCxChannelCmd>
      break;
 800285e:	e016      	b.n	800288e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	2104      	movs	r1, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fd7d 	bl	8003368 <TIM_CCxChannelCmd>
      break;
 800286e:	e00e      	b.n	800288e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd75 	bl	8003368 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	2104      	movs	r1, #4
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fd6e 	bl	8003368 <TIM_CCxChannelCmd>
      break;
 800288c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d122      	bne.n	8002904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa77 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa69 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fa7a 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0204 	mvn.w	r2, #4
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa4d 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa3f 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fa50 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b08      	cmp	r3, #8
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0208 	mvn.w	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa23 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa15 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa26 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0210 	mvn.w	r2, #16
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2208      	movs	r2, #8
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9f9 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9eb 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9fc 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0201 	mvn.w	r2, #1
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe fa80 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fd78 	bl	8003548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9c1 	bl	8002e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0220 	mvn.w	r2, #32
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fd42 	bl	8003534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0ae      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	f200 809f 	bhi.w	8002c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002c25 	.word	0x08002c25
 8002af4:	08002c25 	.word	0x08002c25
 8002af8:	08002c25 	.word	0x08002c25
 8002afc:	08002b61 	.word	0x08002b61
 8002b00:	08002c25 	.word	0x08002c25
 8002b04:	08002c25 	.word	0x08002c25
 8002b08:	08002c25 	.word	0x08002c25
 8002b0c:	08002ba3 	.word	0x08002ba3
 8002b10:	08002c25 	.word	0x08002c25
 8002b14:	08002c25 	.word	0x08002c25
 8002b18:	08002c25 	.word	0x08002c25
 8002b1c:	08002be3 	.word	0x08002be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9f8 	bl	8002f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6999      	ldr	r1, [r3, #24]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	619a      	str	r2, [r3, #24]
      break;
 8002b5e:	e064      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa3e 	bl	8002fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	021a      	lsls	r2, r3, #8
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
      break;
 8002ba0:	e043      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fa89 	bl	80030c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0208 	orr.w	r2, r2, #8
 8002bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0204 	bic.w	r2, r2, #4
 8002bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]
      break;
 8002be0:	e023      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fad3 	bl	8003194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69d9      	ldr	r1, [r3, #28]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	021a      	lsls	r2, r3, #8
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	61da      	str	r2, [r3, #28]
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0b4      	b.n	8002dc2 <HAL_TIM_ConfigClockSource+0x186>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d03e      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xd4>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	f200 8087 	bhi.w	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	f000 8086 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x172>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d87f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d01a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d87b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d050      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x11a>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d877      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d03c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xfa>
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d873      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d058      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x13a>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d86f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d064      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	d86b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d060      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d867      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d05a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce0:	e062      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 fb19 	bl	8003328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04f      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 fb02 	bl	8003328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e03c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 fa76 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 facf 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e02c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 fa95 	bl	8003292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fabf 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e01c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 fa56 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 faaf 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 8002d94:	e00c      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 faa6 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 8002da6:	e003      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e000      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00f      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d00b      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <TIM_Base_SetConfig+0xf4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <TIM_Base_SetConfig+0xf8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <TIM_Base_SetConfig+0xfc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800

08002f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <TIM_OC1_SetConfig+0xc8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10c      	bne.n	8002f92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 0308 	bic.w	r3, r3, #8
 8002f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <TIM_OC1_SetConfig+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d111      	bne.n	8002fbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40010000 	.word	0x40010000

08002fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0320 	bic.w	r3, r3, #32
 8003032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <TIM_OC2_SetConfig+0xd4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d10d      	bne.n	8003064 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <TIM_OC2_SetConfig+0xd4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d113      	bne.n	8003094 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000

080030c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <TIM_OC3_SetConfig+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10d      	bne.n	800313a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <TIM_OC3_SetConfig+0xd0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d113      	bne.n	800316a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40010000 	.word	0x40010000

08003194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	031b      	lsls	r3, r3, #12
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <TIM_OC4_SetConfig+0x9c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000

08003234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 030a 	bic.w	r3, r3, #10
 8003270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0210 	bic.w	r2, r3, #16
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	031b      	lsls	r3, r3, #12
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	f043 0307 	orr.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	021a      	lsls	r2, r3, #8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	431a      	orrs	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2201      	movs	r2, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e050      	b.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d013      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10c      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4313      	orrs	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40014000 	.word	0x40014000

08003490 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e03d      	b.n	8003528 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e03f      	b.n	80035ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fe2a 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	; 0x24
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800359e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f829 	bl	80035f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b0c0      	sub	sp, #256	; 0x100
 80035fe:	af00      	add	r7, sp, #0
 8003600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	ea40 0301 	orr.w	r3, r0, r1
 8003620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003650:	f021 010c 	bic.w	r1, r1, #12
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800365e:	430b      	orrs	r3, r1
 8003660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	6999      	ldr	r1, [r3, #24]
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	ea40 0301 	orr.w	r3, r0, r1
 800367e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003688:	429a      	cmp	r2, r3
 800368a:	d005      	beq.n	8003698 <UART_SetConfig+0xa0>
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <UART_SetConfig+0x2d0>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d104      	bne.n	80036a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7fe fe0c 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 800369c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036a0:	e003      	b.n	80036aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036a2:	f7fe fdf3 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 80036a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	f040 810c 	bne.w	80038d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036ca:	4622      	mov	r2, r4
 80036cc:	462b      	mov	r3, r5
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80036d2:	415b      	adcs	r3, r3
 80036d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036da:	4621      	mov	r1, r4
 80036dc:	eb12 0801 	adds.w	r8, r2, r1
 80036e0:	4629      	mov	r1, r5
 80036e2:	eb43 0901 	adc.w	r9, r3, r1
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036fa:	4690      	mov	r8, r2
 80036fc:	4699      	mov	r9, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	eb18 0303 	adds.w	r3, r8, r3
 8003704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003708:	462b      	mov	r3, r5
 800370a:	eb49 0303 	adc.w	r3, r9, r3
 800370e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800371e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003726:	460b      	mov	r3, r1
 8003728:	18db      	adds	r3, r3, r3
 800372a:	653b      	str	r3, [r7, #80]	; 0x50
 800372c:	4613      	mov	r3, r2
 800372e:	eb42 0303 	adc.w	r3, r2, r3
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
 8003734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800373c:	f7fc fd4c 	bl	80001d8 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4b61      	ldr	r3, [pc, #388]	; (80038cc <UART_SetConfig+0x2d4>)
 8003746:	fba3 2302 	umull	r2, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	011c      	lsls	r4, r3, #4
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800375c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003760:	4642      	mov	r2, r8
 8003762:	464b      	mov	r3, r9
 8003764:	1891      	adds	r1, r2, r2
 8003766:	64b9      	str	r1, [r7, #72]	; 0x48
 8003768:	415b      	adcs	r3, r3
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003770:	4641      	mov	r1, r8
 8003772:	eb12 0a01 	adds.w	sl, r2, r1
 8003776:	4649      	mov	r1, r9
 8003778:	eb43 0b01 	adc.w	fp, r3, r1
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800378c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003790:	4692      	mov	sl, r2
 8003792:	469b      	mov	fp, r3
 8003794:	4643      	mov	r3, r8
 8003796:	eb1a 0303 	adds.w	r3, sl, r3
 800379a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800379e:	464b      	mov	r3, r9
 80037a0:	eb4b 0303 	adc.w	r3, fp, r3
 80037a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037bc:	460b      	mov	r3, r1
 80037be:	18db      	adds	r3, r3, r3
 80037c0:	643b      	str	r3, [r7, #64]	; 0x40
 80037c2:	4613      	mov	r3, r2
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037d2:	f7fc fd01 	bl	80001d8 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <UART_SetConfig+0x2d4>)
 80037de:	fba3 2301 	umull	r2, r3, r3, r1
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2264      	movs	r2, #100	; 0x64
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	1acb      	subs	r3, r1, r3
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <UART_SetConfig+0x2d4>)
 80037f4:	fba3 2302 	umull	r2, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003800:	441c      	add	r4, r3
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800380c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	63b9      	str	r1, [r7, #56]	; 0x38
 800381c:	415b      	adcs	r3, r3
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6339      	str	r1, [r7, #48]	; 0x30
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003858:	464b      	mov	r3, r9
 800385a:	460a      	mov	r2, r1
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003878:	460b      	mov	r3, r1
 800387a:	18db      	adds	r3, r3, r3
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
 800387e:	4613      	mov	r3, r2
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800388a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800388e:	f7fc fca3 	bl	80001d8 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <UART_SetConfig+0x2d4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	; 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	3332      	adds	r3, #50	; 0x32
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <UART_SetConfig+0x2d4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 0207 	and.w	r2, r3, #7
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4422      	add	r2, r4
 80038be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038c0:	e105      	b.n	8003ace <UART_SetConfig+0x4d6>
 80038c2:	bf00      	nop
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038e2:	4642      	mov	r2, r8
 80038e4:	464b      	mov	r3, r9
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	6239      	str	r1, [r7, #32]
 80038ea:	415b      	adcs	r3, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038f2:	4641      	mov	r1, r8
 80038f4:	1854      	adds	r4, r2, r1
 80038f6:	4649      	mov	r1, r9
 80038f8:	eb43 0501 	adc.w	r5, r3, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003918:	464b      	mov	r3, r9
 800391a:	eb45 0303 	adc.w	r3, r5, r3
 800391e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800392e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800393e:	4629      	mov	r1, r5
 8003940:	008b      	lsls	r3, r1, #2
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003948:	4621      	mov	r1, r4
 800394a:	008a      	lsls	r2, r1, #2
 800394c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003950:	f7fc fc42 	bl	80001d8 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4b60      	ldr	r3, [pc, #384]	; (8003adc <UART_SetConfig+0x4e4>)
 800395a:	fba3 2302 	umull	r2, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	011c      	lsls	r4, r3, #4
 8003962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800396c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	61b9      	str	r1, [r7, #24]
 800397c:	415b      	adcs	r3, r3
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003984:	4641      	mov	r1, r8
 8003986:	1851      	adds	r1, r2, r1
 8003988:	6139      	str	r1, [r7, #16]
 800398a:	4649      	mov	r1, r9
 800398c:	414b      	adcs	r3, r1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800399c:	4659      	mov	r1, fp
 800399e:	00cb      	lsls	r3, r1, #3
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a6:	4651      	mov	r1, sl
 80039a8:	00ca      	lsls	r2, r1, #3
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	4642      	mov	r2, r8
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039b8:	464b      	mov	r3, r9
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039dc:	4649      	mov	r1, r9
 80039de:	008b      	lsls	r3, r1, #2
 80039e0:	4641      	mov	r1, r8
 80039e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e6:	4641      	mov	r1, r8
 80039e8:	008a      	lsls	r2, r1, #2
 80039ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039ee:	f7fc fbf3 	bl	80001d8 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <UART_SetConfig+0x4e4>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2164      	movs	r1, #100	; 0x64
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	3332      	adds	r3, #50	; 0x32
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <UART_SetConfig+0x4e4>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a16:	441c      	add	r4, r3
 8003a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a20:	677a      	str	r2, [r7, #116]	; 0x74
 8003a22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a36:	4641      	mov	r1, r8
 8003a38:	1851      	adds	r1, r2, r1
 8003a3a:	6039      	str	r1, [r7, #0]
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	414b      	adcs	r3, r1
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a4e:	4659      	mov	r1, fp
 8003a50:	00cb      	lsls	r3, r1, #3
 8003a52:	4651      	mov	r1, sl
 8003a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a58:	4651      	mov	r1, sl
 8003a5a:	00ca      	lsls	r2, r1, #3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4603      	mov	r3, r0
 8003a62:	4642      	mov	r2, r8
 8003a64:	189b      	adds	r3, r3, r2
 8003a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a68:	464b      	mov	r3, r9
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	008b      	lsls	r3, r1, #2
 8003a8e:	4641      	mov	r1, r8
 8003a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a94:	4641      	mov	r1, r8
 8003a96:	008a      	lsls	r2, r1, #2
 8003a98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a9c:	f7fc fb9c 	bl	80001d8 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <UART_SetConfig+0x4e4>)
 8003aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2164      	movs	r1, #100	; 0x64
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	3332      	adds	r3, #50	; 0x32
 8003ab8:	4a08      	ldr	r2, [pc, #32]	; (8003adc <UART_SetConfig+0x4e4>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4422      	add	r2, r4
 8003acc:	609a      	str	r2, [r3, #8]
}
 8003ace:	bf00      	nop
 8003ad0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <arm_mat_trans_f32>:
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae4:	8802      	ldrh	r2, [r0, #0]
 8003ae6:	884b      	ldrh	r3, [r1, #2]
 8003ae8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003aec:	684f      	ldr	r7, [r1, #4]
 8003aee:	8840      	ldrh	r0, [r0, #2]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	b083      	sub	sp, #12
 8003af4:	d14c      	bne.n	8003b90 <arm_mat_trans_f32+0xb0>
 8003af6:	f8b1 e000 	ldrh.w	lr, [r1]
 8003afa:	4586      	cmp	lr, r0
 8003afc:	d148      	bne.n	8003b90 <arm_mat_trans_f32+0xb0>
 8003afe:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8003b02:	009c      	lsls	r4, r3, #2
 8003b04:	f00e 0e03 	and.w	lr, lr, #3
 8003b08:	fb08 f904 	mul.w	r9, r8, r4
 8003b0c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8003b10:	011d      	lsls	r5, r3, #4
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003b18:	eb07 0a04 	add.w	sl, r7, r4
 8003b1c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	463b      	mov	r3, r7
 8003b26:	f1b8 0f00 	cmp.w	r8, #0
 8003b2a:	d01d      	beq.n	8003b68 <arm_mat_trans_f32+0x88>
 8003b2c:	9900      	ldr	r1, [sp, #0]
 8003b2e:	f10c 0210 	add.w	r2, ip, #16
 8003b32:	4439      	add	r1, r7
 8003b34:	4640      	mov	r0, r8
 8003b36:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8003b3a:	601e      	str	r6, [r3, #0]
 8003b3c:	ed52 7a03 	vldr	s15, [r2, #-12]
 8003b40:	191e      	adds	r6, r3, r4
 8003b42:	edc6 7a00 	vstr	s15, [r6]
 8003b46:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8003b4a:	600e      	str	r6, [r1, #0]
 8003b4c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8003b50:	190e      	adds	r6, r1, r4
 8003b52:	3801      	subs	r0, #1
 8003b54:	442b      	add	r3, r5
 8003b56:	f102 0210 	add.w	r2, r2, #16
 8003b5a:	edc6 7a00 	vstr	s15, [r6]
 8003b5e:	4429      	add	r1, r5
 8003b60:	d1e9      	bne.n	8003b36 <arm_mat_trans_f32+0x56>
 8003b62:	44dc      	add	ip, fp
 8003b64:	eb09 0307 	add.w	r3, r9, r7
 8003b68:	f1be 0f00 	cmp.w	lr, #0
 8003b6c:	d009      	beq.n	8003b82 <arm_mat_trans_f32+0xa2>
 8003b6e:	4672      	mov	r2, lr
 8003b70:	4661      	mov	r1, ip
 8003b72:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b76:	6018      	str	r0, [r3, #0]
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	4423      	add	r3, r4
 8003b7c:	d1f9      	bne.n	8003b72 <arm_mat_trans_f32+0x92>
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	449c      	add	ip, r3
 8003b82:	3704      	adds	r7, #4
 8003b84:	4557      	cmp	r7, sl
 8003b86:	d1cd      	bne.n	8003b24 <arm_mat_trans_f32+0x44>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	b003      	add	sp, #12
 8003b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b90:	f06f 0002 	mvn.w	r0, #2
 8003b94:	e7f9      	b.n	8003b8a <arm_mat_trans_f32+0xaa>
 8003b96:	bf00      	nop

08003b98 <arm_mat_sub_f32>:
 8003b98:	b4f0      	push	{r4, r5, r6, r7}
 8003b9a:	e9d1 4700 	ldrd	r4, r7, [r1]
 8003b9e:	6803      	ldr	r3, [r0, #0]
 8003ba0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003ba4:	6856      	ldr	r6, [r2, #4]
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d15d      	bne.n	8003c66 <arm_mat_sub_f32+0xce>
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d15a      	bne.n	8003c66 <arm_mat_sub_f32+0xce>
 8003bb0:	8803      	ldrh	r3, [r0, #0]
 8003bb2:	8844      	ldrh	r4, [r0, #2]
 8003bb4:	fb04 f403 	mul.w	r4, r4, r3
 8003bb8:	08a5      	lsrs	r5, r4, #2
 8003bba:	d032      	beq.n	8003c22 <arm_mat_sub_f32+0x8a>
 8003bbc:	f10c 0110 	add.w	r1, ip, #16
 8003bc0:	f107 0210 	add.w	r2, r7, #16
 8003bc4:	f106 0310 	add.w	r3, r6, #16
 8003bc8:	4628      	mov	r0, r5
 8003bca:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003bce:	ed51 7a04 	vldr	s15, [r1, #-16]
 8003bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd6:	3801      	subs	r0, #1
 8003bd8:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003bdc:	ed12 7a03 	vldr	s14, [r2, #-12]
 8003be0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003be8:	f101 0110 	add.w	r1, r1, #16
 8003bec:	ed43 7a03 	vstr	s15, [r3, #-12]
 8003bf0:	ed12 7a02 	vldr	s14, [r2, #-8]
 8003bf4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8003bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bfc:	f102 0210 	add.w	r2, r2, #16
 8003c00:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003c04:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8003c08:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8003c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c10:	f103 0310 	add.w	r3, r3, #16
 8003c14:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8003c18:	d1d7      	bne.n	8003bca <arm_mat_sub_f32+0x32>
 8003c1a:	012b      	lsls	r3, r5, #4
 8003c1c:	449c      	add	ip, r3
 8003c1e:	441f      	add	r7, r3
 8003c20:	441e      	add	r6, r3
 8003c22:	f014 0403 	ands.w	r4, r4, #3
 8003c26:	d01b      	beq.n	8003c60 <arm_mat_sub_f32+0xc8>
 8003c28:	eddc 7a00 	vldr	s15, [ip]
 8003c2c:	ed97 7a00 	vldr	s14, [r7]
 8003c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c34:	3c01      	subs	r4, #1
 8003c36:	edc6 7a00 	vstr	s15, [r6]
 8003c3a:	d011      	beq.n	8003c60 <arm_mat_sub_f32+0xc8>
 8003c3c:	eddc 7a01 	vldr	s15, [ip, #4]
 8003c40:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c48:	2c01      	cmp	r4, #1
 8003c4a:	edc6 7a01 	vstr	s15, [r6, #4]
 8003c4e:	d007      	beq.n	8003c60 <arm_mat_sub_f32+0xc8>
 8003c50:	eddc 7a02 	vldr	s15, [ip, #8]
 8003c54:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c5c:	edc6 7a02 	vstr	s15, [r6, #8]
 8003c60:	2000      	movs	r0, #0
 8003c62:	bcf0      	pop	{r4, r5, r6, r7}
 8003c64:	4770      	bx	lr
 8003c66:	f06f 0002 	mvn.w	r0, #2
 8003c6a:	e7fa      	b.n	8003c62 <arm_mat_sub_f32+0xca>

08003c6c <arm_mat_mult_f32>:
 8003c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	8845      	ldrh	r5, [r0, #2]
 8003c72:	880b      	ldrh	r3, [r1, #0]
 8003c74:	8806      	ldrh	r6, [r0, #0]
 8003c76:	6847      	ldr	r7, [r0, #4]
 8003c78:	6854      	ldr	r4, [r2, #4]
 8003c7a:	6848      	ldr	r0, [r1, #4]
 8003c7c:	b08b      	sub	sp, #44	; 0x2c
 8003c7e:	42ab      	cmp	r3, r5
 8003c80:	9109      	str	r1, [sp, #36]	; 0x24
 8003c82:	9604      	str	r6, [sp, #16]
 8003c84:	8849      	ldrh	r1, [r1, #2]
 8003c86:	f040 808a 	bne.w	8003d9e <arm_mat_mult_f32+0x132>
 8003c8a:	8815      	ldrh	r5, [r2, #0]
 8003c8c:	42b5      	cmp	r5, r6
 8003c8e:	f040 8086 	bne.w	8003d9e <arm_mat_mult_f32+0x132>
 8003c92:	8852      	ldrh	r2, [r2, #2]
 8003c94:	428a      	cmp	r2, r1
 8003c96:	f040 8082 	bne.w	8003d9e <arm_mat_mult_f32+0x132>
 8003c9a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8003c9e:	1d01      	adds	r1, r0, #4
 8003ca0:	0116      	lsls	r6, r2, #4
 8003ca2:	9108      	str	r1, [sp, #32]
 8003ca4:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8003ca8:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8003cac:	9101      	str	r1, [sp, #4]
 8003cae:	fb06 f108 	mul.w	r1, r6, r8
 8003cb2:	0095      	lsls	r5, r2, #2
 8003cb4:	9103      	str	r1, [sp, #12]
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8003cbc:	f003 0903 	and.w	r9, r3, #3
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	f107 0b10 	add.w	fp, r7, #16
 8003cc6:	eb04 0a05 	add.w	sl, r4, r5
 8003cca:	9107      	str	r1, [sp, #28]
 8003ccc:	9202      	str	r2, [sp, #8]
 8003cce:	9306      	str	r3, [sp, #24]
 8003cd0:	f1ab 0310 	sub.w	r3, fp, #16
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8003cdc:	eb03 0c0a 	add.w	ip, r3, sl
 8003ce0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003da8 <arm_mat_mult_f32+0x13c>
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	d053      	beq.n	8003d92 <arm_mat_mult_f32+0x126>
 8003cea:	9b02      	ldr	r3, [sp, #8]
 8003cec:	4644      	mov	r4, r8
 8003cee:	18c1      	adds	r1, r0, r3
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	465b      	mov	r3, fp
 8003cf4:	ed92 6a00 	vldr	s12, [r2]
 8003cf8:	ed13 7a04 	vldr	s14, [r3, #-16]
 8003cfc:	ed53 4a03 	vldr	s9, [r3, #-12]
 8003d00:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003d04:	ed91 5a00 	vldr	s10, [r1]
 8003d08:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003d0c:	1957      	adds	r7, r2, r5
 8003d0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003d12:	ed97 6a00 	vldr	s12, [r7]
 8003d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003d1e:	194f      	adds	r7, r1, r5
 8003d20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003d24:	ee26 7a85 	vmul.f32	s14, s13, s10
 8003d28:	edd7 7a00 	vldr	s15, [r7]
 8003d2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d30:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d34:	3c01      	subs	r4, #1
 8003d36:	4432      	add	r2, r6
 8003d38:	4431      	add	r1, r6
 8003d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d3e:	f103 0310 	add.w	r3, r3, #16
 8003d42:	d1d7      	bne.n	8003cf4 <arm_mat_mult_f32+0x88>
 8003d44:	9b03      	ldr	r3, [sp, #12]
 8003d46:	9a01      	ldr	r2, [sp, #4]
 8003d48:	4418      	add	r0, r3
 8003d4a:	f1b9 0f00 	cmp.w	r9, #0
 8003d4e:	d00b      	beq.n	8003d68 <arm_mat_mult_f32+0xfc>
 8003d50:	464b      	mov	r3, r9
 8003d52:	edd0 6a00 	vldr	s13, [r0]
 8003d56:	ecb2 7a01 	vldmia	r2!, {s14}
 8003d5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4428      	add	r0, r5
 8003d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d66:	d1f4      	bne.n	8003d52 <arm_mat_mult_f32+0xe6>
 8003d68:	ecec 7a01 	vstmia	ip!, {s15}
 8003d6c:	45d4      	cmp	ip, sl
 8003d6e:	4670      	mov	r0, lr
 8003d70:	f10e 0e04 	add.w	lr, lr, #4
 8003d74:	d1b4      	bne.n	8003ce0 <arm_mat_mult_f32+0x74>
 8003d76:	9a01      	ldr	r2, [sp, #4]
 8003d78:	9b06      	ldr	r3, [sp, #24]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4419      	add	r1, r3
 8003d7e:	449b      	add	fp, r3
 8003d80:	9b04      	ldr	r3, [sp, #16]
 8003d82:	9101      	str	r1, [sp, #4]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	44aa      	add	sl, r5
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	d004      	beq.n	8003d96 <arm_mat_mult_f32+0x12a>
 8003d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d8e:	6858      	ldr	r0, [r3, #4]
 8003d90:	e79e      	b.n	8003cd0 <arm_mat_mult_f32+0x64>
 8003d92:	9a05      	ldr	r2, [sp, #20]
 8003d94:	e7d9      	b.n	8003d4a <arm_mat_mult_f32+0xde>
 8003d96:	4618      	mov	r0, r3
 8003d98:	b00b      	add	sp, #44	; 0x2c
 8003d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9e:	f06f 0002 	mvn.w	r0, #2
 8003da2:	b00b      	add	sp, #44	; 0x2c
 8003da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da8:	00000000 	.word	0x00000000

08003dac <arm_mat_inverse_f32>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	8843      	ldrh	r3, [r0, #2]
 8003db2:	8804      	ldrh	r4, [r0, #0]
 8003db4:	684e      	ldr	r6, [r1, #4]
 8003db6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8003dba:	b087      	sub	sp, #28
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	9603      	str	r6, [sp, #12]
 8003dc2:	f040 80ea 	bne.w	8003f9a <arm_mat_inverse_f32+0x1ee>
 8003dc6:	880a      	ldrh	r2, [r1, #0]
 8003dc8:	884b      	ldrh	r3, [r1, #2]
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f040 80e5 	bne.w	8003f9a <arm_mat_inverse_f32+0x1ee>
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	f040 80e2 	bne.w	8003f9a <arm_mat_inverse_f32+0x1ee>
 8003dd6:	9005      	str	r0, [sp, #20]
 8003dd8:	b30c      	cbz	r4, 8003e1e <arm_mat_inverse_f32+0x72>
 8003dda:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8003dde:	1e67      	subs	r7, r4, #1
 8003de0:	f846 bb04 	str.w	fp, [r6], #4
 8003de4:	d01b      	beq.n	8003e1e <arm_mat_inverse_f32+0x72>
 8003de6:	f04f 0801 	mov.w	r8, #1
 8003dea:	00ba      	lsls	r2, r7, #2
 8003dec:	eb06 0a02 	add.w	sl, r6, r2
 8003df0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8003df4:	4630      	mov	r0, r6
 8003df6:	2100      	movs	r1, #0
 8003df8:	f000 f970 	bl	80040dc <memset>
 8003dfc:	eb0a 0605 	add.w	r6, sl, r5
 8003e00:	462a      	mov	r2, r5
 8003e02:	2100      	movs	r1, #0
 8003e04:	4650      	mov	r0, sl
 8003e06:	f1b8 0f00 	cmp.w	r8, #0
 8003e0a:	f000 80cb 	beq.w	8003fa4 <arm_mat_inverse_f32+0x1f8>
 8003e0e:	f000 f965 	bl	80040dc <memset>
 8003e12:	3f01      	subs	r7, #1
 8003e14:	f108 0801 	add.w	r8, r8, #1
 8003e18:	f846 bb04 	str.w	fp, [r6], #4
 8003e1c:	d1e5      	bne.n	8003dea <arm_mat_inverse_f32+0x3e>
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80b5 	beq.w	8003f90 <arm_mat_inverse_f32+0x1e4>
 8003e26:	009d      	lsls	r5, r3, #2
 8003e28:	eb09 0205 	add.w	r2, r9, r5
 8003e2c:	46cc      	mov	ip, r9
 8003e2e:	9202      	str	r2, [sp, #8]
 8003e30:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003e34:	1d2a      	adds	r2, r5, #4
 8003e36:	9204      	str	r2, [sp, #16]
 8003e38:	462f      	mov	r7, r5
 8003e3a:	469e      	mov	lr, r3
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	9b02      	ldr	r3, [sp, #8]
 8003e40:	eddc 6a00 	vldr	s13, [ip]
 8003e44:	42b4      	cmp	r4, r6
 8003e46:	eba3 0b07 	sub.w	fp, r3, r7
 8003e4a:	f000 80a1 	beq.w	8003f90 <arm_mat_inverse_f32+0x1e4>
 8003e4e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003fb4 <arm_mat_inverse_f32+0x208>
 8003e52:	4632      	mov	r2, r6
 8003e54:	4663      	mov	r3, ip
 8003e56:	e00b      	b.n	8003e70 <arm_mat_inverse_f32+0xc4>
 8003e58:	eef4 7a47 	vcmp.f32	s15, s14
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	f102 0201 	add.w	r2, r2, #1
 8003e64:	bfc8      	it	gt
 8003e66:	eeb0 7a67 	vmovgt.f32	s14, s15
 8003e6a:	42a2      	cmp	r2, r4
 8003e6c:	442b      	add	r3, r5
 8003e6e:	d014      	beq.n	8003e9a <arm_mat_inverse_f32+0xee>
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	eeb1 6a67 	vneg.f32	s12, s15
 8003e80:	dcea      	bgt.n	8003e58 <arm_mat_inverse_f32+0xac>
 8003e82:	eeb4 6a47 	vcmp.f32	s12, s14
 8003e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8a:	f102 0201 	add.w	r2, r2, #1
 8003e8e:	bfc8      	it	gt
 8003e90:	eeb0 7a46 	vmovgt.f32	s14, s12
 8003e94:	42a2      	cmp	r2, r4
 8003e96:	442b      	add	r3, r5
 8003e98:	d1ea      	bne.n	8003e70 <arm_mat_inverse_f32+0xc4>
 8003e9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	d075      	beq.n	8003f90 <arm_mat_inverse_f32+0x1e4>
 8003ea4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	d070      	beq.n	8003f90 <arm_mat_inverse_f32+0x1e4>
 8003eae:	4672      	mov	r2, lr
 8003eb0:	4663      	mov	r3, ip
 8003eb2:	ed93 7a00 	vldr	s14, [r3]
 8003eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	ece3 7a01 	vstmia	r3!, {s15}
 8003ec0:	d1f7      	bne.n	8003eb2 <arm_mat_inverse_f32+0x106>
 8003ec2:	9901      	ldr	r1, [sp, #4]
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	ed93 7a00 	vldr	s14, [r3]
 8003eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ece:	3901      	subs	r1, #1
 8003ed0:	ece3 7a01 	vstmia	r3!, {s15}
 8003ed4:	d1f7      	bne.n	8003ec6 <arm_mat_inverse_f32+0x11a>
 8003ed6:	9803      	ldr	r0, [sp, #12]
 8003ed8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8003edc:	42b1      	cmp	r1, r6
 8003ede:	d039      	beq.n	8003f54 <arm_mat_inverse_f32+0x1a8>
 8003ee0:	eddb 6a00 	vldr	s13, [fp]
 8003ee4:	465a      	mov	r2, fp
 8003ee6:	4673      	mov	r3, lr
 8003ee8:	46e2      	mov	sl, ip
 8003eea:	ecba 7a01 	vldmia	sl!, {s14}
 8003eee:	edd2 7a00 	vldr	s15, [r2]
 8003ef2:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003efc:	ece2 7a01 	vstmia	r2!, {s15}
 8003f00:	d1f3      	bne.n	8003eea <arm_mat_inverse_f32+0x13e>
 8003f02:	9b01      	ldr	r3, [sp, #4]
 8003f04:	44bb      	add	fp, r7
 8003f06:	4602      	mov	r2, r0
 8003f08:	46ca      	mov	sl, r9
 8003f0a:	ecba 7a01 	vldmia	sl!, {s14}
 8003f0e:	edd2 7a00 	vldr	s15, [r2]
 8003f12:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003f16:	3b01      	subs	r3, #1
 8003f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f1c:	ece2 7a01 	vstmia	r2!, {s15}
 8003f20:	d1f3      	bne.n	8003f0a <arm_mat_inverse_f32+0x15e>
 8003f22:	4428      	add	r0, r5
 8003f24:	3101      	adds	r1, #1
 8003f26:	428c      	cmp	r4, r1
 8003f28:	44c3      	add	fp, r8
 8003f2a:	d1d7      	bne.n	8003edc <arm_mat_inverse_f32+0x130>
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	f1be 0e01 	subs.w	lr, lr, #1
 8003f32:	f106 0601 	add.w	r6, r6, #1
 8003f36:	449c      	add	ip, r3
 8003f38:	f1a7 0704 	sub.w	r7, r7, #4
 8003f3c:	44a9      	add	r9, r5
 8003f3e:	f47f af7e 	bne.w	8003e3e <arm_mat_inverse_f32+0x92>
 8003f42:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	d006      	beq.n	8003f5a <arm_mat_inverse_f32+0x1ae>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	b007      	add	sp, #28
 8003f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f54:	44bb      	add	fp, r7
 8003f56:	4428      	add	r0, r5
 8003f58:	e7e4      	b.n	8003f24 <arm_mat_inverse_f32+0x178>
 8003f5a:	9b05      	ldr	r3, [sp, #20]
 8003f5c:	9a01      	ldr	r2, [sp, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f68:	fb02 f204 	mul.w	r2, r2, r4
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	4614      	mov	r4, r2
 8003f72:	bf08      	it	eq
 8003f74:	3304      	addeq	r3, #4
 8003f76:	d007      	beq.n	8003f88 <arm_mat_inverse_f32+0x1dc>
 8003f78:	e7e8      	b.n	8003f4c <arm_mat_inverse_f32+0x1a0>
 8003f7a:	ecf3 7a01 	vldmia	r3!, {s15}
 8003f7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	d1e1      	bne.n	8003f4c <arm_mat_inverse_f32+0x1a0>
 8003f88:	f10e 0e01 	add.w	lr, lr, #1
 8003f8c:	4574      	cmp	r4, lr
 8003f8e:	d1f4      	bne.n	8003f7a <arm_mat_inverse_f32+0x1ce>
 8003f90:	f06f 0004 	mvn.w	r0, #4
 8003f94:	b007      	add	sp, #28
 8003f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9a:	f06f 0002 	mvn.w	r0, #2
 8003f9e:	b007      	add	sp, #28
 8003fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa4:	4656      	mov	r6, sl
 8003fa6:	3f01      	subs	r7, #1
 8003fa8:	f846 bb04 	str.w	fp, [r6], #4
 8003fac:	f47f af1b 	bne.w	8003de6 <arm_mat_inverse_f32+0x3a>
 8003fb0:	e735      	b.n	8003e1e <arm_mat_inverse_f32+0x72>
 8003fb2:	bf00      	nop
 8003fb4:	00000000 	.word	0x00000000

08003fb8 <arm_mat_init_f32>:
 8003fb8:	8001      	strh	r1, [r0, #0]
 8003fba:	8042      	strh	r2, [r0, #2]
 8003fbc:	6043      	str	r3, [r0, #4]
 8003fbe:	4770      	bx	lr

08003fc0 <arm_mat_add_f32>:
 8003fc0:	b4f0      	push	{r4, r5, r6, r7}
 8003fc2:	e9d1 4700 	ldrd	r4, r7, [r1]
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003fcc:	6856      	ldr	r6, [r2, #4]
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	d15d      	bne.n	800408e <arm_mat_add_f32+0xce>
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d15a      	bne.n	800408e <arm_mat_add_f32+0xce>
 8003fd8:	8803      	ldrh	r3, [r0, #0]
 8003fda:	8844      	ldrh	r4, [r0, #2]
 8003fdc:	fb04 f403 	mul.w	r4, r4, r3
 8003fe0:	08a5      	lsrs	r5, r4, #2
 8003fe2:	d032      	beq.n	800404a <arm_mat_add_f32+0x8a>
 8003fe4:	f10c 0110 	add.w	r1, ip, #16
 8003fe8:	f107 0210 	add.w	r2, r7, #16
 8003fec:	f106 0310 	add.w	r3, r6, #16
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003ff6:	ed51 7a04 	vldr	s15, [r1, #-16]
 8003ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ffe:	3801      	subs	r0, #1
 8004000:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004004:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004008:	ed51 7a03 	vldr	s15, [r1, #-12]
 800400c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004010:	f101 0110 	add.w	r1, r1, #16
 8004014:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004018:	ed12 7a02 	vldr	s14, [r2, #-8]
 800401c:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8004020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004024:	f102 0210 	add.w	r2, r2, #16
 8004028:	ed43 7a02 	vstr	s15, [r3, #-8]
 800402c:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8004030:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8004034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004038:	f103 0310 	add.w	r3, r3, #16
 800403c:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8004040:	d1d7      	bne.n	8003ff2 <arm_mat_add_f32+0x32>
 8004042:	012b      	lsls	r3, r5, #4
 8004044:	449c      	add	ip, r3
 8004046:	441f      	add	r7, r3
 8004048:	441e      	add	r6, r3
 800404a:	f014 0403 	ands.w	r4, r4, #3
 800404e:	d01b      	beq.n	8004088 <arm_mat_add_f32+0xc8>
 8004050:	edd7 7a00 	vldr	s15, [r7]
 8004054:	ed9c 7a00 	vldr	s14, [ip]
 8004058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405c:	3c01      	subs	r4, #1
 800405e:	edc6 7a00 	vstr	s15, [r6]
 8004062:	d011      	beq.n	8004088 <arm_mat_add_f32+0xc8>
 8004064:	eddc 7a01 	vldr	s15, [ip, #4]
 8004068:	ed97 7a01 	vldr	s14, [r7, #4]
 800406c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004070:	2c01      	cmp	r4, #1
 8004072:	edc6 7a01 	vstr	s15, [r6, #4]
 8004076:	d007      	beq.n	8004088 <arm_mat_add_f32+0xc8>
 8004078:	eddc 7a02 	vldr	s15, [ip, #8]
 800407c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004080:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004084:	edc6 7a02 	vstr	s15, [r6, #8]
 8004088:	2000      	movs	r0, #0
 800408a:	bcf0      	pop	{r4, r5, r6, r7}
 800408c:	4770      	bx	lr
 800408e:	f06f 0002 	mvn.w	r0, #2
 8004092:	e7fa      	b.n	800408a <arm_mat_add_f32+0xca>

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f000 f820 	bl	80040ec <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	08004124 	.word	0x08004124
 80040d0:	08004124 	.word	0x08004124
 80040d4:	08004124 	.word	0x08004124
 80040d8:	08004128 	.word	0x08004128

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
