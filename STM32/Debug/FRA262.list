
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007080  08007080  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007088  08007088  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08007090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000478  08007508  00020478  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08007508  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135f7  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c07  00000000  00000000  00033a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00037468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016def  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010afd  00000000  00000000  0004eeef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901bb  00000000  00000000  0005f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000efba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000397c  00000000  00000000  000efc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000f35e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000478 	.word	0x20000478
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007050 	.word	0x08007050

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000047c 	.word	0x2000047c
 80001d4:	08007050 	.word	0x08007050

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b974 	b.w	8000e24 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468e      	mov	lr, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14d      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4694      	mov	ip, r2
 8000b66:	d969      	bls.n	8000c3c <__udivmoddi4+0xe8>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b152      	cbz	r2, 8000b84 <__udivmoddi4+0x30>
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	f1c2 0120 	rsb	r1, r2, #32
 8000b76:	fa20 f101 	lsr.w	r1, r0, r1
 8000b7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b82:	4094      	lsls	r4, r2
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	0c21      	lsrs	r1, r4, #16
 8000b8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8e:	fa1f f78c 	uxth.w	r7, ip
 8000b92:	fb08 e316 	mls	r3, r8, r6, lr
 8000b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b9a:	fb06 f107 	mul.w	r1, r6, r7
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000baa:	f080 811f 	bcs.w	8000dec <__udivmoddi4+0x298>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 811c 	bls.w	8000dec <__udivmoddi4+0x298>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 f707 	mul.w	r7, r0, r7
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x92>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd8:	f080 810a 	bcs.w	8000df0 <__udivmoddi4+0x29c>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f240 8107 	bls.w	8000df0 <__udivmoddi4+0x29c>
 8000be2:	4464      	add	r4, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	1be4      	subs	r4, r4, r7
 8000bec:	2600      	movs	r6, #0
 8000bee:	b11d      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xc2>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	f000 80ef 	beq.w	8000de6 <__udivmoddi4+0x292>
 8000c08:	2600      	movs	r6, #0
 8000c0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f683 	clz	r6, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d14a      	bne.n	8000cb4 <__udivmoddi4+0x160>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd4>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80f9 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xec>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 8092 	bne.w	8000d6e <__udivmoddi4+0x21a>
 8000c4a:	eba1 010c 	sub.w	r1, r1, ip
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2601      	movs	r6, #1
 8000c58:	0c20      	lsrs	r0, r4, #16
 8000c5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c66:	fb0e f003 	mul.w	r0, lr, r3
 8000c6a:	4288      	cmp	r0, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x12c>
 8000c6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x12a>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c88:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x156>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x154>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2ca>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x9a>
 8000cb4:	f1c6 0720 	rsb	r7, r6, #32
 8000cb8:	40b3      	lsls	r3, r6
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	40f9      	lsrs	r1, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cda:	0c20      	lsrs	r0, r4, #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cec:	4288      	cmp	r0, r1
 8000cee:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2bc>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2bc>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d14:	fb09 1110 	mls	r1, r9, r0, r1
 8000d18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d20:	458e      	cmp	lr, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1e2>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2b4>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3e:	eba1 010e 	sub.w	r1, r1, lr
 8000d42:	42a1      	cmp	r1, r4
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46a6      	mov	lr, r4
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x2a4>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x2a0>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x212>
 8000d4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d52:	eb61 010e 	sbc.w	r1, r1, lr
 8000d56:	fa01 f707 	lsl.w	r7, r1, r7
 8000d5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5e:	40f1      	lsrs	r1, r6
 8000d60:	431f      	orrs	r7, r3
 8000d62:	e9c5 7100 	strd	r7, r1, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d90:	0c0b      	lsrs	r3, r1, #16
 8000d92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d96:	fb00 f60e 	mul.w	r6, r0, lr
 8000d9a:	429e      	cmp	r6, r3
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x260>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b8>
 8000dac:	429e      	cmp	r6, r3
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	b289      	uxth	r1, r1
 8000db8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x28a>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000dda:	3e02      	subs	r6, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0x104>
 8000de6:	462e      	mov	r6, r5
 8000de8:	4628      	mov	r0, r5
 8000dea:	e705      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000dec:	4606      	mov	r6, r0
 8000dee:	e6e3      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6f8      	b.n	8000be6 <__udivmoddi4+0x92>
 8000df4:	454b      	cmp	r3, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f8>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f8>
 8000e04:	4646      	mov	r6, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x28a>
 8000e08:	4620      	mov	r0, r4
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x260>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b8>
 8000e14:	3b02      	subs	r3, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x12c>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e709      	b.n	8000c32 <__udivmoddi4+0xde>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x156>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	f006 f86e 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3324      	adds	r3, #36	; 0x24
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	f006 f865 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3330      	adds	r3, #48	; 0x30
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	2101      	movs	r1, #1
 8000e60:	f006 f85c 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	333c      	adds	r3, #60	; 0x3c
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2101      	movs	r1, #1
 8000e72:	f006 f853 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3340      	adds	r3, #64	; 0x40
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f006 f84a 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3364      	adds	r3, #100	; 0x64
 8000e92:	2201      	movs	r2, #1
 8000e94:	2101      	movs	r1, #1
 8000e96:	f006 f841 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3368      	adds	r3, #104	; 0x68
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	f006 f838 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	338c      	adds	r3, #140	; 0x8c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2103      	movs	r1, #3
 8000eba:	f006 f82f 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3398      	adds	r3, #152	; 0x98
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f006 f826 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	33a4      	adds	r3, #164	; 0xa4
 8000eda:	2203      	movs	r2, #3
 8000edc:	2103      	movs	r1, #3
 8000ede:	f006 f81d 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	33c8      	adds	r3, #200	; 0xc8
 8000eec:	2203      	movs	r2, #3
 8000eee:	2103      	movs	r1, #3
 8000ef0:	f006 f814 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	33ec      	adds	r3, #236	; 0xec
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	f006 f80b 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	33f0      	adds	r3, #240	; 0xf0
 8000f10:	2201      	movs	r2, #1
 8000f12:	2101      	movs	r1, #1
 8000f14:	f006 f802 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	33f4      	adds	r3, #244	; 0xf4
 8000f22:	2201      	movs	r2, #1
 8000f24:	2101      	movs	r1, #1
 8000f26:	f005 fff9 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	33f8      	adds	r3, #248	; 0xf8
 8000f34:	2201      	movs	r2, #1
 8000f36:	2103      	movs	r1, #3
 8000f38:	f005 fff0 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000f48:	2203      	movs	r2, #3
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	f005 ffe6 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	2103      	movs	r1, #3
 8000f60:	f005 ffdc 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000f70:	2203      	movs	r2, #3
 8000f72:	2103      	movs	r1, #3
 8000f74:	f005 ffd2 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f005 ffc8 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f005 ffbe 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	f005 ffb4 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	f005 ffaa 	bl	8006f1c <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	f005 ffa0 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000fe8:	2203      	movs	r2, #3
 8000fea:	2103      	movs	r1, #3
 8000fec:	f005 ff96 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	f005 ff8c 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f503 704a 	add.w	r0, r3, #808	; 0x328
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001010:	2201      	movs	r2, #1
 8001012:	2101      	movs	r1, #1
 8001014:	f005 ff82 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001024:	2201      	movs	r2, #1
 8001026:	2103      	movs	r1, #3
 8001028:	f005 ff78 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001038:	2201      	movs	r2, #1
 800103a:	2103      	movs	r1, #3
 800103c:	f005 ff6e 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800104c:	2203      	movs	r2, #3
 800104e:	2103      	movs	r1, #3
 8001050:	f005 ff64 	bl	8006f1c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001060:	2203      	movs	r2, #3
 8001062:	2103      	movs	r1, #3
 8001064:	f005 ff5a 	bl	8006f1c <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f005 fce4 	bl	8006a44 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f005 fcda 	bl	8006a44 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f005 fcd0 	bl	8006a44 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQGt));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f503 7024 	add.w	r0, r3, #656	; 0x290
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f503 7120 	add.w	r1, r3, #640	; 0x280
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010b6:	461a      	mov	r2, r3
 80010b8:	f005 fd8a 	bl	8006bd0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQGt), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 7040 	add.w	r0, r3, #768	; 0x300
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010ce:	461a      	mov	r2, r3
 80010d0:	f005 fd7e 	bl	8006bd0 <arm_mat_mult_f32>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f503 7018 	add.w	r0, r3, #608	; 0x260
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f503 7128 	add.w	r1, r3, #672	; 0x2a0
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80010fa:	461a      	mov	r2, r3
 80010fc:	f005 fd68 	bl	8006bd0 <arm_mat_mult_f32>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800111c:	461a      	mov	r2, r3
 800111e:	f005 fd57 	bl	8006bd0 <arm_mat_mult_f32>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f503 7138 	add.w	r1, r3, #736	; 0x2e0
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800113e:	461a      	mov	r2, r3
 8001140:	f005 fd46 	bl	8006bd0 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f503 7140 	add.w	r1, r3, #768	; 0x300
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001160:	461a      	mov	r2, r3
 8001162:	f005 fedf 	bl	8006f24 <arm_mat_add_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800118a:	461a      	mov	r2, r3
 800118c:	f005 fd20 	bl	8006bd0 <arm_mat_mult_f32>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f503 7148 	add.w	r1, r3, #800	; 0x320
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80011ac:	461a      	mov	r2, r3
 80011ae:	f005 fca5 	bl	8006afc <arm_mat_sub_f32>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80011ce:	461a      	mov	r2, r3
 80011d0:	f005 fcfe 	bl	8006bd0 <arm_mat_mult_f32>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80011f0:	461a      	mov	r2, r3
 80011f2:	f005 fced 	bl	8006bd0 <arm_mat_mult_f32>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f503 7122 	add.w	r1, r3, #648	; 0x288
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001212:	461a      	mov	r2, r3
 8001214:	f005 fe86 	bl	8006f24 <arm_mat_add_f32>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800122e:	4619      	mov	r1, r3
 8001230:	4610      	mov	r0, r2
 8001232:	f005 fd6d 	bl	8006d10 <arm_mat_inverse_f32>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001252:	461a      	mov	r2, r3
 8001254:	f005 fcbc 	bl	8006bd0 <arm_mat_mult_f32>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001274:	461a      	mov	r2, r3
 8001276:	f005 fcab 	bl	8006bd0 <arm_mat_mult_f32>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001296:	461a      	mov	r2, r3
 8001298:	f005 fc9a 	bl	8006bd0 <arm_mat_mult_f32>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 704e 	add.w	r0, r3, #824	; 0x338
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80012b8:	461a      	mov	r2, r3
 80012ba:	f005 fe33 	bl	8006f24 <arm_mat_add_f32>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80012da:	461a      	mov	r2, r3
 80012dc:	f005 fc78 	bl	8006bd0 <arm_mat_mult_f32>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f503 7150 	add.w	r1, r3, #832	; 0x340
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80012fc:	461a      	mov	r2, r3
 80012fe:	f005 fbfd 	bl	8006afc <arm_mat_sub_f32>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800131e:	461a      	mov	r2, r3
 8001320:	f005 fc56 	bl	8006bd0 <arm_mat_mult_f32>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <PIDVelocityController_Init>:
 *  Created on: 4 Jun 2022
 *      Author: mobil
 */

#include "PIDVelocity.h"
void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001382:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 8001394:	ed97 7a02 	vldr	s14, [r7, #8]
 8001398:	edd7 7a01 	vldr	s15, [r7, #4]
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80013be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * error);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80013d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80013e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	ee17 0a90 	vmov	r0, s15
 80013f2:	f7ff f855 	bl	80004a0 <__aeabi_f2d>
 80013f6:	4604      	mov	r4, r0
 80013f8:	460d      	mov	r5, r1
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f84e 	bl	80004a0 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	f7fe feec 	bl	80001e4 <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4690      	mov	r8, r2
 8001412:	4699      	mov	r9, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f841 	bl	80004a0 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4640      	mov	r0, r8
 8001424:	4649      	mov	r1, r9
 8001426:	f7ff f893 	bl	8000550 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe fed5 	bl	80001e0 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4614      	mov	r4, r2
 800143c:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error))	;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a02 	vldr	s14, [r3, #8]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	ee17 0a90 	vmov	r0, s15
 8001452:	f7ff f825 	bl	80004a0 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe fec1 	bl	80001e4 <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb0b 	bl	8000a84 <__aeabi_d2f>
 800146e:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	ed93 7a07 	vldr	s14, [r3, #28]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	edd3 7a06 	vldr	s15, [r3, #24]
 800148a:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd04      	ble.n	80014be <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
 80014bc:	e00e      	b.n	80014dc <PIDVelocityController_Update+0x15a>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d503      	bpl.n	80014dc <PIDVelocityController_Update+0x15a>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28

    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last1Error = error;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

	return pidVelocity->ControllerOut;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	ee07 3a90 	vmov	s15, r3
}
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001508 <VmaxOptimization>:


#include "Trajectory.h"


float VmaxOptimization(float Qinitial, float Qfinal){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001512:	edc7 0a00 	vstr	s1, [r7]
	float Qrelative = Qfinal - Qinitial;
 8001516:	ed97 7a00 	vldr	s14, [r7]
 800151a:	edd7 7a01 	vldr	s15, [r7, #4]
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	edc7 7a02 	vstr	s15, [r7, #8]
	float Vmax = -1;
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <VmaxOptimization+0xf8>)
 8001528:	60fb      	str	r3, [r7, #12]
	if(Qrelative >= 1.0  && Qrelative < 20.0)
 800152a:	edd7 7a02 	vldr	s15, [r7, #8]
 800152e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	db0b      	blt.n	8001554 <VmaxOptimization+0x4c>
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	d502      	bpl.n	8001554 <VmaxOptimization+0x4c>
	{
		Vmax = 0.7f;
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <VmaxOptimization+0xfc>)
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e035      	b.n	80015c0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 20.0  && Qrelative < 60.0)
 8001554:	edd7 7a02 	vldr	s15, [r7, #8]
 8001558:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800155c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	db0b      	blt.n	800157e <VmaxOptimization+0x76>
 8001566:	edd7 7a02 	vldr	s15, [r7, #8]
 800156a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001608 <VmaxOptimization+0x100>
 800156e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d502      	bpl.n	800157e <VmaxOptimization+0x76>
	{
		Vmax = 3.0f;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <VmaxOptimization+0x104>)
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e020      	b.n	80015c0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 60.0  && Qrelative < 160.0)
 800157e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001582:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001608 <VmaxOptimization+0x100>
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	db0b      	blt.n	80015a8 <VmaxOptimization+0xa0>
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001610 <VmaxOptimization+0x108>
 8001598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d502      	bpl.n	80015a8 <VmaxOptimization+0xa0>
	{
		Vmax = 6.0f;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <VmaxOptimization+0x10c>)
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e00b      	b.n	80015c0 <VmaxOptimization+0xb8>
	}
	else if(Qrelative >= 160.0)
 80015a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001610 <VmaxOptimization+0x108>
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	db02      	blt.n	80015c0 <VmaxOptimization+0xb8>
	{
		Vmax = 8.0f;
 80015ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80015be:	60fb      	str	r3, [r7, #12]
	}
	// RPM to deg/sec
	return Vmax *360.0/60.0;
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7fe ff6d 	bl	80004a0 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <VmaxOptimization+0x110>)
 80015cc:	f7fe ffc0 	bl	8000550 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <VmaxOptimization+0x114>)
 80015de:	f7ff f8e1 	bl	80007a4 <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa4b 	bl	8000a84 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	ee07 3a90 	vmov	s15, r3
}
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	bf800000 	.word	0xbf800000
 8001604:	3f333333 	.word	0x3f333333
 8001608:	42700000 	.word	0x42700000
 800160c:	40400000 	.word	0x40400000
 8001610:	43200000 	.word	0x43200000
 8001614:	40c00000 	.word	0x40c00000
 8001618:	40768000 	.word	0x40768000
 800161c:	404e0000 	.word	0x404e0000

08001620 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	ed87 0a02 	vstr	s0, [r7, #8]
 800162c:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	// Set initial = 0;
	float Qrelative = Qfinal - Qinitial;
 8001640:	ed97 7a01 	vldr	s14, [r7, #4]
 8001644:	edd7 7a02 	vldr	s15, [r7, #8]
 8001648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164c:	edc7 7a05 	vstr	s15, [r7, #20]
	// Set Vmax
	traject -> Vmax = VmaxOptimization(Qinitial,Qfinal);
 8001650:	edd7 0a01 	vldr	s1, [r7, #4]
 8001654:	ed97 0a02 	vldr	s0, [r7, #8]
 8001658:	f7ff ff56 	bl	8001508 <VmaxOptimization>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (Qrelative/traject -> Vmax);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	ed93 6a02 	vldr	s12, [r3, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	edd3 6a00 	vldr	s13, [r3]
 8001682:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001690:	ed97 6a05 	vldr	s12, [r7, #20]
 8001694:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	edd3 6a00 	vldr	s13, [r3]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80016ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	edd3 6a00 	vldr	s13, [r3]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80016da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	ed93 6a02 	vldr	s12, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edd3 6a00 	vldr	s13, [r3]
 80016ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800171a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fea6 	bl	80004a0 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f992 	bl	8000a84 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef1 7a67 	vneg.f32	s15, s15
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe8f 	bl	80004a0 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f97b 	bl	8000a84 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef1 7a67 	vneg.f32	s15, s15
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe4d 	bl	80004a0 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f939 	bl	8000a84 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef1 7a67 	vneg.f32	s15, s15
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe3a 	bl	80004a0 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	ed93 7a01 	vldr	s14, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe fe29 	bl	80004a0 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fcc3 	bl	80001e0 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f90f 	bl	8000a84 <__aeabi_d2f>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	ed93 7a03 	vldr	s14, [r3, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001892:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018b0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 6a04 	vldr	s13, [r3, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018ea:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001912:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 6a05 	vldr	s13, [r3, #20]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800194a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001952:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001962:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	ed93 7a05 	vldr	s14, [r3, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001992:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80019b0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	edd3 6a06 	vldr	s13, [r3, #24]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a52:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edd3 6a08 	vldr	s13, [r3, #32]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ac6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ace:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ad2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ae2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001b30:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b52:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ba4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001be8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	edd3 6a04 	vldr	s13, [r3, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bfe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c14:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c32:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c52:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ca2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ca6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 6a05 	vldr	s13, [r3, #20]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001cf4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d12:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d86:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001da8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edd3 6a06 	vldr	s13, [r3, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001dd4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e12:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e62:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e66:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001e88:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001ea8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001eb4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ece:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ed2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f42:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001f68:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f94:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001faa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fb2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001fca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	ed93 7a08 	vldr	s14, [r3, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002004:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800201a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800201e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002022:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002026:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800202a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002048:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800205e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002068:	ee66 7a27 	vmul.f32	s15, s12, s15
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002074:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800208a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800208e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002092:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800209a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80020aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020b2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	0000      	movs	r0, r0
	...

080020c8 <TrajectoryEvaluation>:


float TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80020d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020dc:	1a84      	subs	r4, r0, r2
 80020de:	eb61 0503 	sbc.w	r5, r1, r3
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f9fd 	bl	80004e4 <__aeabi_ul2d>
 80020ea:	a392      	add	r3, pc, #584	; (adr r3, 8002334 <TrajectoryEvaluation+0x26c>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fb58 	bl	80007a4 <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fcc2 	bl	8000a84 <__aeabi_d2f>
 8002100:	4603      	mov	r3, r0
 8002102:	4a8b      	ldr	r2, [pc, #556]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002104:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 8002106:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	db7e      	blt.n	8002214 <TrajectoryEvaluation+0x14c>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <TrajectoryEvaluation+0x268>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	dd73      	ble.n	8002214 <TrajectoryEvaluation+0x14c>
	{
		traject -> QJ = traject -> A[0];
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	ed93 7a03 	vldr	s14, [r3, #12]
 800213c:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <TrajectoryEvaluation+0x268>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	ed93 7a03 	vldr	s14, [r3, #12]
 800215c:	4b74      	ldr	r3, [pc, #464]	; (8002330 <TrajectoryEvaluation+0x268>)
 800215e:	edd3 6a00 	vldr	s13, [r3]
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800217e:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	ed93 7a03 	vldr	s14, [r3, #12]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021a4:	edd3 6a00 	vldr	s13, [r3]
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b2:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021d0:	ed93 6a00 	vldr	s12, [r3]
 80021d4:	4b56      	ldr	r3, [pc, #344]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021e2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80021f4:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <TrajectoryEvaluation+0x268>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002212:	e362      	b.n	80028da <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <TrajectoryEvaluation+0x268>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	f200 8088 	bhi.w	800233c <TrajectoryEvaluation+0x274>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	dd7c      	ble.n	800233c <TrajectoryEvaluation+0x274>
	{
		traject -> QJ = traject -> A[1];
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002274:	edd3 6a00 	vldr	s13, [r3]
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <TrajectoryEvaluation+0x268>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800228a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <TrajectoryEvaluation+0x268>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <TrajectoryEvaluation+0x268>)
 80022ba:	edd3 6a00 	vldr	s13, [r3]
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <TrajectoryEvaluation+0x268>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <TrajectoryEvaluation+0x268>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <TrajectoryEvaluation+0x268>)
 80022e6:	ed93 6a00 	vldr	s12, [r3]
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <TrajectoryEvaluation+0x268>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <TrajectoryEvaluation+0x268>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002328:	e2d7      	b.n	80028da <TrajectoryEvaluation+0x812>
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
 8002330:	20000494 	.word	0x20000494
 8002334:	00000000 	.word	0x00000000
 8002338:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002342:	4b89      	ldr	r3, [pc, #548]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d87e      	bhi.n	8002450 <TrajectoryEvaluation+0x388>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002358:	4b83      	ldr	r3, [pc, #524]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	dd73      	ble.n	8002450 <TrajectoryEvaluation+0x388>
	{
		traject -> QJ = traject -> A[2];
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	ed93 7a05 	vldr	s14, [r3, #20]
 8002378:	4b7b      	ldr	r3, [pc, #492]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	ed93 7a05 	vldr	s14, [r3, #20]
 8002398:	4b73      	ldr	r3, [pc, #460]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 800239a:	edd3 6a00 	vldr	s13, [r3]
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023ba:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	ed93 7a05 	vldr	s14, [r3, #20]
 80023de:	4b62      	ldr	r3, [pc, #392]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002400:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 800240c:	ed93 6a00 	vldr	s12, [r3]
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee66 7a27 	vmul.f32	s15, s12, s15
 800241a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800241e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002422:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800244e:	e244      	b.n	80028da <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	f200 8082 	bhi.w	800256c <TrajectoryEvaluation+0x4a4>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	dd76      	ble.n	800256c <TrajectoryEvaluation+0x4a4>
	{
		traject -> QJ = traject -> A[3];
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	ed93 7a06 	vldr	s14, [r3, #24]
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80024b0:	edd3 6a00 	vldr	s13, [r3]
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80024f6:	edd3 6a00 	vldr	s13, [r3]
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002516:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002522:	ed93 6a00 	vldr	s12, [r3]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002534:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002538:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800253c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <TrajectoryEvaluation+0x4a0>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002564:	e1b9      	b.n	80028da <TrajectoryEvaluation+0x812>
 8002566:	bf00      	nop
 8002568:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d87e      	bhi.n	8002680 <TrajectoryEvaluation+0x5b8>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002588:	4b83      	ldr	r3, [pc, #524]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	dd73      	ble.n	8002680 <TrajectoryEvaluation+0x5b8>
	{
		traject -> QJ = traject -> A[4];
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80025a8:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80025c8:	4b73      	ldr	r3, [pc, #460]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80025ca:	edd3 6a00 	vldr	s13, [r3]
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	ed93 7a07 	vldr	s14, [r3, #28]
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002610:	edd3 6a00 	vldr	s13, [r3]
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002630:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 800263c:	ed93 6a00 	vldr	s12, [r3]
 8002640:	4b55      	ldr	r3, [pc, #340]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	ee66 7a27 	vmul.f32	s15, s12, s15
 800264a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800264e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002652:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800267e:	e12c      	b.n	80028da <TrajectoryEvaluation+0x812>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	f200 8082 	bhi.w	800279c <TrajectoryEvaluation+0x6d4>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	dd76      	ble.n	800279c <TrajectoryEvaluation+0x6d4>
	{
		traject -> QJ = traject -> A[5];
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	ed93 7a08 	vldr	s14, [r3, #32]
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ed93 7a08 	vldr	s14, [r3, #32]
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80026e0:	edd3 6a00 	vldr	s13, [r3]
 80026e4:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	ed93 7a08 	vldr	s14, [r3, #32]
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002726:	edd3 6a00 	vldr	s13, [r3]
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002752:	ed93 6a00 	vldr	s12, [r3]
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002760:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002764:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002768:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <TrajectoryEvaluation+0x6d0>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002794:	e0a1      	b.n	80028da <TrajectoryEvaluation+0x812>
 8002796:	bf00      	nop
 8002798:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <TrajectoryEvaluation+0x828>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d87e      	bhi.n	80028b0 <TrajectoryEvaluation+0x7e8>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <TrajectoryEvaluation+0x828>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	dd73      	ble.n	80028b0 <TrajectoryEvaluation+0x7e8>
	{
		traject -> QJ = traject -> A[6];
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027d8:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <TrajectoryEvaluation+0x828>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80027e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <TrajectoryEvaluation+0x828>)
 80027fa:	edd3 6a00 	vldr	s13, [r3]
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002810:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <TrajectoryEvaluation+0x828>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002840:	edd3 6a00 	vldr	s13, [r3]
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <TrajectoryEvaluation+0x828>)
 800286c:	ed93 6a00 	vldr	s12, [r3]
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee66 7a27 	vmul.f32	s15, s12, s15
 800287a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800287e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002882:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <TrajectoryEvaluation+0x828>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80028ae:	e014      	b.n	80028da <TrajectoryEvaluation+0x812>
	}
	else
	{
		traject -> QJ = 0;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = 0;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QV = 0;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QX = traject -> Qfinal;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	return traject -> QV;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028e0:	ee07 3a90 	vmov	s15, r3
}
 80028e4:	eeb0 0a67 	vmov.f32	s0, s15
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000494 	.word	0x20000494

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f8:	f000 ff52 	bl	80037a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f862 	bl	80029c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002900:	f000 fa3e 	bl	8002d80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002904:	f000 fa10 	bl	8002d28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002908:	f000 f8c4 	bl	8002a94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800290c:	f000 f946 	bl	8002b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002910:	f000 f998 	bl	8002c44 <MX_TIM3_Init>
  MX_TIM11_Init();
 8002914:	f000 f9e4 	bl	8002ce0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  KalmanMatrixInit(&KalmanVar);
 8002918:	481b      	ldr	r0, [pc, #108]	; (8002988 <main+0x94>)
 800291a:	f7fe fa85 	bl	8000e28 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800291e:	2100      	movs	r1, #0
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <main+0x98>)
 8002922:	f002 f88b 	bl	8004a3c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002926:	481a      	ldr	r0, [pc, #104]	; (8002990 <main+0x9c>)
 8002928:	f001 ffd6 	bl	80048d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 800292c:	4819      	ldr	r0, [pc, #100]	; (8002994 <main+0xa0>)
 800292e:	f001 ffd3 	bl	80048d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002932:	213c      	movs	r1, #60	; 0x3c
 8002934:	4818      	ldr	r0, [pc, #96]	; (8002998 <main+0xa4>)
 8002936:	f002 f9d7 	bl	8004ce8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 800293a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	461a      	mov	r2, r3
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <main+0xa8>)
 8002944:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <main+0xa8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <main+0xa8>)
 800294c:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <main+0xa8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <main+0xac>)
 8002954:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002956:	4813      	ldr	r0, [pc, #76]	; (80029a4 <main+0xb0>)
 8002958:	f7fe fced 	bl	8001336 <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 800295c:	4812      	ldr	r0, [pc, #72]	; (80029a8 <main+0xb4>)
 800295e:	f7fe fcea 	bl	8001336 <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,testDes);
 8002962:	eddf 0a12 	vldr	s1, [pc, #72]	; 80029ac <main+0xb8>
 8002966:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80029b0 <main+0xbc>
 800296a:	4812      	ldr	r0, [pc, #72]	; (80029b4 <main+0xc0>)
 800296c:	f7fe fe58 	bl	8001620 <CoefficientAndTimeCalculation>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8002970:	2220      	movs	r2, #32
 8002972:	4911      	ldr	r1, [pc, #68]	; (80029b8 <main+0xc4>)
 8002974:	4811      	ldr	r0, [pc, #68]	; (80029bc <main+0xc8>)
 8002976:	f003 f931 	bl	8005bdc <HAL_UART_Receive_IT>
	inputchar = UARTRecieveIT();
 800297a:	f000 fca5 	bl	80032c8 <UARTRecieveIT>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <main+0xcc>)
 8002984:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8002986:	e7f3      	b.n	8002970 <main+0x7c>
 8002988:	20000004 	.word	0x20000004
 800298c:	20000498 	.word	0x20000498
 8002990:	20000570 	.word	0x20000570
 8002994:	20000528 	.word	0x20000528
 8002998:	200004e0 	.word	0x200004e0
 800299c:	20000628 	.word	0x20000628
 80029a0:	20000634 	.word	0x20000634
 80029a4:	20000358 	.word	0x20000358
 80029a8:	20000388 	.word	0x20000388
 80029ac:	42b40000 	.word	0x42b40000
 80029b0:	00000000 	.word	0x00000000
 80029b4:	200003b8 	.word	0x200003b8
 80029b8:	200005fc 	.word	0x200005fc
 80029bc:	200005b8 	.word	0x200005b8
 80029c0:	2000061e 	.word	0x2000061e

080029c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b094      	sub	sp, #80	; 0x50
 80029c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	2230      	movs	r2, #48	; 0x30
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fb34 	bl	8007040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <SystemClock_Config+0xc8>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <SystemClock_Config+0xc8>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6413      	str	r3, [r2, #64]	; 0x40
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <SystemClock_Config+0xc8>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a04:	2300      	movs	r3, #0
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <SystemClock_Config+0xcc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <SystemClock_Config+0xcc>)
 8002a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <SystemClock_Config+0xcc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a20:	2302      	movs	r3, #2
 8002a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a24:	2301      	movs	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a28:	2310      	movs	r3, #16
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a34:	2308      	movs	r3, #8
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002a38:	2364      	movs	r3, #100	; 0x64
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a40:	2304      	movs	r3, #4
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 fa5d 	bl	8003f08 <HAL_RCC_OscConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a54:	f000 fcb0 	bl	80033b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a58:	230f      	movs	r3, #15
 8002a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	2103      	movs	r1, #3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fcbf 	bl	80043f8 <HAL_RCC_ClockConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a80:	f000 fc9a 	bl	80033b8 <Error_Handler>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3750      	adds	r7, #80	; 0x50
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000

08002a94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b092      	sub	sp, #72	; 0x48
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	615a      	str	r2, [r3, #20]
 8002ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2220      	movs	r2, #32
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 fabe 	bl	8007040 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ac4:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <MX_TIM1_Init+0x104>)
 8002ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8002aca:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002acc:	2209      	movs	r2, #9
 8002ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002ad8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002af0:	4828      	ldr	r0, [pc, #160]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002af2:	f001 ff53 	bl	800499c <HAL_TIM_PWM_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002afc:	f000 fc5c 	bl	80033b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4821      	ldr	r0, [pc, #132]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002b10:	f002 fefe 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002b1a:	f000 fc4d 	bl	80033b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1e:	2360      	movs	r3, #96	; 0x60
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4814      	ldr	r0, [pc, #80]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002b44:	f002 fa66 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b4e:	f000 fc33 	bl	80033b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4807      	ldr	r0, [pc, #28]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002b76:	f002 ff39 	bl	80059ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002b80:	f000 fc1a 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <MX_TIM1_Init+0x100>)
 8002b86:	f000 fcf9 	bl	800357c <HAL_TIM_MspPostInit>

}
 8002b8a:	bf00      	nop
 8002b8c:	3748      	adds	r7, #72	; 0x48
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000498 	.word	0x20000498
 8002b98:	40010000 	.word	0x40010000

08002b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fa48 	bl	8007040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bce:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002be0:	2303      	movs	r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002be8:	2301      	movs	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002c0c:	f001 ffc6 	bl	8004b9c <HAL_TIM_Encoder_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c16:	f000 fbcf 	bl	80033b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <MX_TIM2_Init+0xa4>)
 8002c28:	f002 fe72 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c32:	f000 fbc1 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	3730      	adds	r7, #48	; 0x30
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200004e0 	.word	0x200004e0

08002c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c62:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <MX_TIM3_Init+0x98>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c68:	2209      	movs	r2, #9
 8002c6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c74:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c86:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c88:	f001 fdd6 	bl	8004838 <HAL_TIM_Base_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c92:	f000 fb91 	bl	80033b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002ca4:	f002 fa78 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002cae:	f000 fb83 	bl	80033b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002cc0:	f002 fe26 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002cca:	f000 fb75 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000528 	.word	0x20000528
 8002cdc:	40000400 	.word	0x40000400

08002ce0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <MX_TIM11_Init+0x44>)
 8002ce8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002cec:	2263      	movs	r2, #99	; 0x63
 8002cee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_TIM11_Init+0x40>)
 8002d0c:	f001 fd94 	bl	8004838 <HAL_TIM_Base_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002d16:	f000 fb4f 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000570 	.word	0x20000570
 8002d24:	40014800 	.word	0x40014800

08002d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <MX_USART2_UART_Init+0x54>)
 8002d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d34:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d40:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_USART2_UART_Init+0x50>)
 8002d64:	f002 fea8 	bl	8005ab8 <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002d6e:	f000 fb23 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200005b8 	.word	0x200005b8
 8002d7c:	40004400 	.word	0x40004400

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_GPIO_Init+0xd8>)
 8002e0e:	f001 f861 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	4619      	mov	r1, r3
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <MX_GPIO_Init+0xdc>)
 8002e2a:	f000 fecf 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002e2e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_GPIO_Init+0xd8>)
 8002e48:	f000 fec0 	bl	8003bcc <HAL_GPIO_Init>

}
 8002e4c:	bf00      	nop
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020800 	.word	0x40020800

08002e60 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <EncoderRead+0x100>)
 8002e6e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <EncoderRead+0x100>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <EncoderRead+0x100>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <EncoderRead+0x104>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	425b      	negs	r3, r3
 8002e80:	429a      	cmp	r2, r3
 8002e82:	da07      	bge.n	8002e94 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002e84:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <EncoderRead+0x108>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	4a36      	ldr	r2, [pc, #216]	; (8002f68 <EncoderRead+0x108>)
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00f      	b.n	8002eb4 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <EncoderRead+0x100>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <EncoderRead+0x100>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	1ad2      	subs	r2, r2, r3
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <EncoderRead+0x104>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	db06      	blt.n	8002eb4 <EncoderRead+0x54>
		WrappingStep-=12000;
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <EncoderRead+0x108>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8002eae:	3b20      	subs	r3, #32
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <EncoderRead+0x108>)
 8002eb2:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <EncoderRead+0x100>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <EncoderRead+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <EncoderRead+0x10c>)
 8002ec0:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg = (PositionRaw/12000.0)*360.0;
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <EncoderRead+0x10c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fad8 	bl	800047c <__aeabi_i2d>
 8002ecc:	a322      	add	r3, pc, #136	; (adr r3, 8002f58 <EncoderRead+0xf8>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fc67 	bl	80007a4 <__aeabi_ddiv>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <EncoderRead+0x110>)
 8002ee4:	f7fd fb34 	bl	8000550 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7fd fdc8 	bl	8000a84 <__aeabi_d2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <EncoderRead+0x114>)
 8002ef8:	6013      	str	r3, [r2, #0]
	VelocityDeg = (((EncoderRawData[0] - EncoderRawData[1])/dt)/12000.0)*360.0;
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <EncoderRead+0x100>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <EncoderRead+0x100>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002f78 <EncoderRead+0x118>
 8002f10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f14:	ee16 0a90 	vmov	r0, s13
 8002f18:	f7fd fac2 	bl	80004a0 <__aeabi_f2d>
 8002f1c:	a30e      	add	r3, pc, #56	; (adr r3, 8002f58 <EncoderRead+0xf8>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fc3f 	bl	80007a4 <__aeabi_ddiv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <EncoderRead+0x110>)
 8002f34:	f7fd fb0c 	bl	8000550 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fda0 	bl	8000a84 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <EncoderRead+0x11c>)
 8002f48:	6013      	str	r3, [r2, #0]
	EncoderRawData[1] = EncoderRawData[0];
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <EncoderRead+0x100>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <EncoderRead+0x100>)
 8002f50:	6053      	str	r3, [r2, #4]
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	40c77000 	.word	0x40c77000
 8002f60:	20000628 	.word	0x20000628
 8002f64:	20000468 	.word	0x20000468
 8002f68:	20000630 	.word	0x20000630
 8002f6c:	20000634 	.word	0x20000634
 8002f70:	40768000 	.word	0x40768000
 8002f74:	20000638 	.word	0x20000638
 8002f78:	3a83126f 	.word	0x3a83126f
 8002f7c:	2000063c 	.word	0x2000063c

08002f80 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da02      	bge.n	8002f94 <PWMAbs+0x14>
		return PWM*-1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	425b      	negs	r3, r3
 8002f92:	e000      	b.n	8002f96 <PWMAbs+0x16>
	}else{
		return PWM;
 8002f94:	687b      	ldr	r3, [r7, #4]
	}
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-PWM_MAX){
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	dc11      	bgt.n	8002fd6 <Drivemotor+0x32>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a25      	ldr	r2, [pc, #148]	; (800304c <Drivemotor+0xa8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	db0d      	blt.n	8002fd6 <Drivemotor+0x32>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <Drivemotor+0xac>)
 8002fbc:	681c      	ldr	r4, [r3, #0]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffde 	bl	8002f80 <PWMAbs>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fce:	4821      	ldr	r0, [pc, #132]	; (8003054 <Drivemotor+0xb0>)
 8002fd0:	f000 ff80 	bl	8003ed4 <HAL_GPIO_WritePin>
 8002fd4:	e036      	b.n	8003044 <Drivemotor+0xa0>
	}else if (PWM<-PWM_MAX){
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <Drivemotor+0xa8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	da0b      	bge.n	8002ff6 <Drivemotor+0x52>
		htim1.Instance->CCR1=PWM_MAX;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <Drivemotor+0xac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fee:	4819      	ldr	r0, [pc, #100]	; (8003054 <Drivemotor+0xb0>)
 8002ff0:	f000 ff70 	bl	8003ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}else if(PWM>PWM_MAX){
		htim1.Instance->CCR1=PWM_MAX;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}
}
 8002ff4:	e026      	b.n	8003044 <Drivemotor+0xa0>
	}else if(PWM>=0 && PWM<=PWM_MAX){
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db12      	blt.n	8003022 <Drivemotor+0x7e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003002:	4293      	cmp	r3, r2
 8003004:	dc0d      	bgt.n	8003022 <Drivemotor+0x7e>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <Drivemotor+0xac>)
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ffb8 	bl	8002f80 <PWMAbs>
 8003010:	4603      	mov	r3, r0
 8003012:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800301a:	480e      	ldr	r0, [pc, #56]	; (8003054 <Drivemotor+0xb0>)
 800301c:	f000 ff5a 	bl	8003ed4 <HAL_GPIO_WritePin>
 8003020:	e010      	b.n	8003044 <Drivemotor+0xa0>
	}else if(PWM>PWM_MAX){
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f242 7210 	movw	r2, #10000	; 0x2710
 8003028:	4293      	cmp	r3, r2
 800302a:	dd0b      	ble.n	8003044 <Drivemotor+0xa0>
		htim1.Instance->CCR1=PWM_MAX;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <Drivemotor+0xac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f242 7210 	movw	r2, #10000	; 0x2710
 8003034:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800303c:	4805      	ldr	r0, [pc, #20]	; (8003054 <Drivemotor+0xb0>)
 800303e:	f000 ff49 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 8003042:	e7ff      	b.n	8003044 <Drivemotor+0xa0>
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	ffffd8f0 	.word	0xffffd8f0
 8003050:	20000498 	.word	0x20000498
 8003054:	40020000 	.word	0x40020000

08003058 <AbsVal>:

float AbsVal(float number)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8003062:	edd7 7a01 	vldr	s15, [r7, #4]
 8003066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	d50e      	bpl.n	800308e <AbsVal+0x36>
  {
    return number*-1.0;
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd fa15 	bl	80004a0 <__aeabi_f2d>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd01 	bl	8000a84 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef1 7a67 	vneg.f32	s15, s15
 800308c:	e001      	b.n	8003092 <AbsVal+0x3a>
  }
  else
  {
    return number;
 800308e:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	0000      	movs	r0, r0
	...

080030a0 <ControllLoopAndErrorHandler>:

void ControllLoopAndErrorHandler()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af02      	add	r7, sp, #8
	CurrentTime = Micros();
 80030a6:	f000 f8f7 	bl	8003298 <Micros>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	494c      	ldr	r1, [pc, #304]	; (80031e0 <ControllLoopAndErrorHandler+0x140>)
 80030b0:	e9c1 2300 	strd	r2, r3, [r1]
	setpoint = TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <ControllLoopAndErrorHandler+0x144>)
 80030b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <ControllLoopAndErrorHandler+0x140>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	e9cd 2300 	strd	r2, r3, [sp]
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4847      	ldr	r0, [pc, #284]	; (80031e8 <ControllLoopAndErrorHandler+0x148>)
 80030ca:	f7fe fffd 	bl	80020c8 <TrajectoryEvaluation>
 80030ce:	eef0 7a40 	vmov.f32	s15, s0
 80030d2:	4b46      	ldr	r3, [pc, #280]	; (80031ec <ControllLoopAndErrorHandler+0x14c>)
 80030d4:	edc3 7a00 	vstr	s15, [r3]
	EncoderRead();
 80030d8:	f7ff fec2 	bl	8002e60 <EncoderRead>
	KalmanFilterFunction(&KalmanVar,PositionDeg);
 80030dc:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <ControllLoopAndErrorHandler+0x150>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	4843      	ldr	r0, [pc, #268]	; (80031f4 <ControllLoopAndErrorHandler+0x154>)
 80030e8:	f7fd fff8 	bl	80010dc <KalmanFilterFunction>
	  if (flagT == 0)
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <ControllLoopAndErrorHandler+0x158>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <ControllLoopAndErrorHandler+0x68>
	  {
	    StartTime = Micros();
 80030f4:	f000 f8d0 	bl	8003298 <Micros>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4939      	ldr	r1, [pc, #228]	; (80031e4 <ControllLoopAndErrorHandler+0x144>)
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
	    flagT =1;
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <ControllLoopAndErrorHandler+0x158>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
	  }
	  if(AbsVal(testDes - PositionDeg) < 0.15 && AbsVal(KalmanVar.MatState_Data[1]) < 1.0)
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <ControllLoopAndErrorHandler+0x150>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80031fc <ControllLoopAndErrorHandler+0x15c>
 8003112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	f7ff ff9d 	bl	8003058 <AbsVal>
 800311e:	ee10 3a10 	vmov	r3, s0
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f9bc 	bl	80004a0 <__aeabi_f2d>
 8003128:	a32b      	add	r3, pc, #172	; (adr r3, 80031d8 <ControllLoopAndErrorHandler+0x138>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd fc81 	bl	8000a34 <__aeabi_dcmplt>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01d      	beq.n	8003174 <ControllLoopAndErrorHandler+0xd4>
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <ControllLoopAndErrorHandler+0x154>)
 800313a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800313e:	eeb0 0a67 	vmov.f32	s0, s15
 8003142:	f7ff ff89 	bl	8003058 <AbsVal>
 8003146:	eef0 7a40 	vmov.f32	s15, s0
 800314a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d50d      	bpl.n	8003174 <ControllLoopAndErrorHandler+0xd4>
	  {
	    PWMCHECKER = 0.0;
 8003158:	4b29      	ldr	r3, [pc, #164]	; (8003200 <ControllLoopAndErrorHandler+0x160>)
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
	    Drivemotor(PWMCHECKER);
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <ControllLoopAndErrorHandler+0x160>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316a:	ee17 0a90 	vmov	r0, s15
 800316e:	f7ff ff19 	bl	8002fa4 <Drivemotor>
 8003172:	e02c      	b.n	80031ce <ControllLoopAndErrorHandler+0x12e>
	  }
	  else
	  {
		PIDVelocityController_Update(&PidPos,traject.QX, PositionDeg);
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <ControllLoopAndErrorHandler+0x148>)
 8003176:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <ControllLoopAndErrorHandler+0x150>)
 800317c:	ed93 7a00 	vldr	s14, [r3]
 8003180:	eef0 0a47 	vmov.f32	s1, s14
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	481e      	ldr	r0, [pc, #120]	; (8003204 <ControllLoopAndErrorHandler+0x164>)
 800318a:	f7fe f8fa 	bl	8001382 <PIDVelocityController_Update>
		PIDVelocityController_Update(&PidVelo, traject.QV + PidPos.ControllerOut , KalmanVar.MatState_Data[1]);
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <ControllLoopAndErrorHandler+0x148>)
 8003190:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <ControllLoopAndErrorHandler+0x164>)
 8003196:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800319a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <ControllLoopAndErrorHandler+0x154>)
 80031a0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80031a4:	eef0 0a47 	vmov.f32	s1, s14
 80031a8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ac:	4816      	ldr	r0, [pc, #88]	; (8003208 <ControllLoopAndErrorHandler+0x168>)
 80031ae:	f7fe f8e8 	bl	8001382 <PIDVelocityController_Update>
		PWMCHECKER = PidVelo.ControllerOut;
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <ControllLoopAndErrorHandler+0x168>)
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <ControllLoopAndErrorHandler+0x160>)
 80031b8:	6013      	str	r3, [r2, #0]
		Drivemotor(PWMCHECKER);
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <ControllLoopAndErrorHandler+0x160>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c4:	ee17 0a90 	vmov	r0, s15
 80031c8:	f7ff feec 	bl	8002fa4 <Drivemotor>
	  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	f3af 8000 	nop.w
 80031d8:	33333333 	.word	0x33333333
 80031dc:	3fc33333 	.word	0x3fc33333
 80031e0:	20000658 	.word	0x20000658
 80031e4:	20000650 	.word	0x20000650
 80031e8:	200003b8 	.word	0x200003b8
 80031ec:	20000640 	.word	0x20000640
 80031f0:	20000638 	.word	0x20000638
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000648 	.word	0x20000648
 80031fc:	42b40000 	.word	0x42b40000
 8003200:	20000644 	.word	0x20000644
 8003204:	20000388 	.word	0x20000388
 8003208:	20000358 	.word	0x20000358

0800320c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800320c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10b      	bne.n	8003236 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003228:	eb12 0801 	adds.w	r8, r2, r1
 800322c:	f143 0900 	adc.w	r9, r3, #0
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003232:	e9c3 8900 	strd	r8, r9, [r3]
	}
	if (htim == &htim3) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d11b      	bne.n	8003276 <HAL_TIM_PeriodElapsedCallback+0x6a>
		CheckLoopStartTime = Micros();
 800323e:	f000 f82b 	bl	8003298 <Micros>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4911      	ldr	r1, [pc, #68]	; (800328c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003248:	e9c1 2300 	strd	r2, r3, [r1]
		//
		ControllLoopAndErrorHandler();
 800324c:	f7ff ff28 	bl	80030a0 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003250:	f000 f822 	bl	8003298 <Micros>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	490d      	ldr	r1, [pc, #52]	; (8003290 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800325a:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	1a84      	subs	r4, r0, r2
 800326c:	eb61 0503 	sbc.w	r5, r1, r3
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003272:	e9c3 4500 	strd	r4, r5, [r3]
		}
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003280:	20000570 	.word	0x20000570
 8003284:	20000620 	.word	0x20000620
 8003288:	20000528 	.word	0x20000528
 800328c:	20000660 	.word	0x20000660
 8003290:	20000668 	.word	0x20000668
 8003294:	20000670 	.word	0x20000670

08003298 <Micros>:

uint64_t Micros(){
 8003298:	b4b0      	push	{r4, r5, r7}
 800329a:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Micros+0x28>)
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <Micros+0x2c>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	1884      	adds	r4, r0, r2
 80032ae:	eb41 0503 	adc.w	r5, r1, r3
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
}
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bcb0      	pop	{r4, r5, r7}
 80032be:	4770      	bx	lr
 80032c0:	40014800 	.word	0x40014800
 80032c4:	20000620 	.word	0x20000620

080032c8 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	static uint8_t sum = 0;
	static uint8_t str_idx = 0;
	static uint32_t dataPos = 0;
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos)
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <UARTRecieveIT+0xd4>)
 80032ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <UARTRecieveIT+0xd4>)
 80032d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <UARTRecieveIT+0xd8>)
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	4293      	cmp	r3, r2
 80032e0:	d059      	beq.n	8003396 <UARTRecieveIT+0xce>
	{
		if ((uint8_t)RxDataBuffer[dataPos]==(uint8_t)(~sum)) {
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <UARTRecieveIT+0xd8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <UARTRecieveIT+0xdc>)
 80032e8:	5cd2      	ldrb	r2, [r2, r3]
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <UARTRecieveIT+0xe0>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d139      	bne.n	800336a <UARTRecieveIT+0xa2>
			sum = 0;
 80032f6:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <UARTRecieveIT+0xe0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
			switch (RxDataBuffer[str_idx]) {
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <UARTRecieveIT+0xe4>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <UARTRecieveIT+0xdc>)
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	2b9e      	cmp	r3, #158	; 0x9e
 8003308:	d018      	beq.n	800333c <UARTRecieveIT+0x74>
 800330a:	2b9e      	cmp	r3, #158	; 0x9e
 800330c:	dc1f      	bgt.n	800334e <UARTRecieveIT+0x86>
 800330e:	2b92      	cmp	r3, #146	; 0x92
 8003310:	d002      	beq.n	8003318 <UARTRecieveIT+0x50>
 8003312:	2b93      	cmp	r3, #147	; 0x93
 8003314:	d009      	beq.n	800332a <UARTRecieveIT+0x62>
 8003316:	e01a      	b.n	800334e <UARTRecieveIT+0x86>
			case 0b10010010:
				//mode 2
				connected = 2;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <UARTRecieveIT+0xe8>)
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 800331e:	2202      	movs	r2, #2
 8003320:	4924      	ldr	r1, [pc, #144]	; (80033b4 <UARTRecieveIT+0xec>)
 8003322:	481e      	ldr	r0, [pc, #120]	; (800339c <UARTRecieveIT+0xd4>)
 8003324:	f002 fc15 	bl	8005b52 <HAL_UART_Transmit_IT>
				break;
 8003328:	e011      	b.n	800334e <UARTRecieveIT+0x86>
			case 0b10010011:
				//mode 3
				connected = 3;
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <UARTRecieveIT+0xe8>)
 800332c:	2203      	movs	r2, #3
 800332e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003330:	2202      	movs	r2, #2
 8003332:	4920      	ldr	r1, [pc, #128]	; (80033b4 <UARTRecieveIT+0xec>)
 8003334:	4819      	ldr	r0, [pc, #100]	; (800339c <UARTRecieveIT+0xd4>)
 8003336:	f002 fc0c 	bl	8005b52 <HAL_UART_Transmit_IT>
				break;
 800333a:	e008      	b.n	800334e <UARTRecieveIT+0x86>
			case 0b10011110:
				//mode 14
				connected = 14;
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <UARTRecieveIT+0xe8>)
 800333e:	220e      	movs	r2, #14
 8003340:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003342:	2202      	movs	r2, #2
 8003344:	491b      	ldr	r1, [pc, #108]	; (80033b4 <UARTRecieveIT+0xec>)
 8003346:	4815      	ldr	r0, [pc, #84]	; (800339c <UARTRecieveIT+0xd4>)
 8003348:	f002 fc03 	bl	8005b52 <HAL_UART_Transmit_IT>
				break;
 800334c:	bf00      	nop
			}
			str_idx = (dataPos + 1) % huart2.RxXferSize;
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <UARTRecieveIT+0xd8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <UARTRecieveIT+0xd4>)
 8003356:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003358:	fbb3 f1f2 	udiv	r1, r3, r2
 800335c:	fb01 f202 	mul.w	r2, r1, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <UARTRecieveIT+0xe4>)
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e009      	b.n	800337e <UARTRecieveIT+0xb6>
		} else {
			sum = sum+RxDataBuffer[dataPos];
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <UARTRecieveIT+0xd8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <UARTRecieveIT+0xdc>)
 8003370:	5cd2      	ldrb	r2, [r2, r3]
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <UARTRecieveIT+0xe0>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <UARTRecieveIT+0xe0>)
 800337c:	701a      	strb	r2, [r3, #0]
		}
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <UARTRecieveIT+0xd8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	4a05      	ldr	r2, [pc, #20]	; (800339c <UARTRecieveIT+0xd4>)
 8003386:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003388:	fbb3 f1f2 	udiv	r1, r3, r2
 800338c:	fb01 f202 	mul.w	r2, r1, r2
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <UARTRecieveIT+0xd8>)
 8003394:	6013      	str	r3, [r2, #0]
	}
}
 8003396:	bf00      	nop
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200005b8 	.word	0x200005b8
 80033a0:	20000678 	.word	0x20000678
 80033a4:	200005fc 	.word	0x200005fc
 80033a8:	2000067c 	.word	0x2000067c
 80033ac:	2000067d 	.word	0x2000067d
 80033b0:	2000061c 	.word	0x2000061c
 80033b4:	20000000 	.word	0x20000000

080033b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033bc:	b672      	cpsid	i
}
 80033be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <Error_Handler+0x8>
	...

080033c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_MspInit+0x4c>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_MspInit+0x4c>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_MspInit+0x4c>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_MspInit+0x4c>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003402:	2007      	movs	r0, #7
 8003404:	f000 fb0e 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <HAL_TIM_PWM_MspInit+0x48>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d115      	bne.n	8003452 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_TIM_PWM_MspInit+0x4c>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <HAL_TIM_PWM_MspInit+0x4c>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_TIM_PWM_MspInit+0x4c>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201a      	movs	r0, #26
 8003448:	f000 faf7 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800344c:	201a      	movs	r0, #26
 800344e:	f000 fb10 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40023800 	.word	0x40023800

08003464 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d12b      	bne.n	80034de <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034be:	2303      	movs	r3, #3
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	4804      	ldr	r0, [pc, #16]	; (80034ec <HAL_TIM_Encoder_MspInit+0x88>)
 80034da:	f000 fb77 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000

080034f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_TIM_Base_MspInit+0x80>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d116      	bne.n	8003530 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	201d      	movs	r0, #29
 8003524:	f000 fa89 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003528:	201d      	movs	r0, #29
 800352a:	f000 faa2 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800352e:	e01a      	b.n	8003566 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_TIM_Base_MspInit+0x88>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d115      	bne.n	8003566 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_TIM_Base_MspInit+0x84>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	201a      	movs	r0, #26
 800355c:	f000 fa6d 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003560:	201a      	movs	r0, #26
 8003562:	f000 fa86 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40000400 	.word	0x40000400
 8003574:	40023800 	.word	0x40023800
 8003578:	40014800 	.word	0x40014800

0800357c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <HAL_TIM_MspPostInit+0x68>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d11e      	bne.n	80035dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_TIM_MspPostInit+0x6c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <HAL_TIM_MspPostInit+0x6c>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_TIM_MspPostInit+0x6c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	4619      	mov	r1, r3
 80035d6:	4805      	ldr	r0, [pc, #20]	; (80035ec <HAL_TIM_MspPostInit+0x70>)
 80035d8:	f000 faf8 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80035dc:	bf00      	nop
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40020000 	.word	0x40020000

080035f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_UART_MspInit+0x94>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d133      	bne.n	800367a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_UART_MspInit+0x98>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_UART_MspInit+0x98>)
 800361c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_UART_MspInit+0x98>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_UART_MspInit+0x98>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_UART_MspInit+0x98>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_UART_MspInit+0x98>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800364a:	230c      	movs	r3, #12
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800365a:	2307      	movs	r3, #7
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	4809      	ldr	r0, [pc, #36]	; (800368c <HAL_UART_MspInit+0x9c>)
 8003666:	f000 fab1 	bl	8003bcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2026      	movs	r0, #38	; 0x26
 8003670:	f000 f9e3 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003674:	2026      	movs	r0, #38	; 0x26
 8003676:	f000 f9fc 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40004400 	.word	0x40004400
 8003688:	40023800 	.word	0x40023800
 800368c:	40020000 	.word	0x40020000

08003690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <NMI_Handler+0x4>

08003696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <HardFault_Handler+0x4>

0800369c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <MemManage_Handler+0x4>

080036a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a6:	e7fe      	b.n	80036a6 <BusFault_Handler+0x4>

080036a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <UsageFault_Handler+0x4>

080036ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036dc:	f000 f8b2 	bl	8003844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80036ea:	f001 fb8b 	bl	8004e04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80036ee:	4803      	ldr	r0, [pc, #12]	; (80036fc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80036f0:	f001 fb88 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000498 	.word	0x20000498
 80036fc:	20000570 	.word	0x20000570

08003700 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <TIM3_IRQHandler+0x10>)
 8003706:	f001 fb7d 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000528 	.word	0x20000528

08003714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <USART2_IRQHandler+0x10>)
 800371a:	f002 fa8f 	bl	8005c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200005b8 	.word	0x200005b8

08003728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SystemInit+0x20>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <SystemInit+0x20>)
 8003734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800374c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003750:	480d      	ldr	r0, [pc, #52]	; (8003788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003752:	490e      	ldr	r1, [pc, #56]	; (800378c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003754:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003758:	e002      	b.n	8003760 <LoopCopyDataInit>

0800375a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800375c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375e:	3304      	adds	r3, #4

08003760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003764:	d3f9      	bcc.n	800375a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003768:	4c0b      	ldr	r4, [pc, #44]	; (8003798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800376a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800376c:	e001      	b.n	8003772 <LoopFillZerobss>

0800376e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003770:	3204      	adds	r2, #4

08003772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003774:	d3fb      	bcc.n	800376e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003776:	f7ff ffd7 	bl	8003728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377a:	f003 fc3d 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377e:	f7ff f8b9 	bl	80028f4 <main>
  bx  lr    
 8003782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800378c:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 8003790:	08007090 	.word	0x08007090
  ldr r2, =_sbss
 8003794:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8003798:	20000684 	.word	0x20000684

0800379c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC_IRQHandler>
	...

080037a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_Init+0x40>)
 80037aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_Init+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <HAL_Init+0x40>)
 80037b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_Init+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_Init+0x40>)
 80037c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c8:	2003      	movs	r0, #3
 80037ca:	f000 f92b 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f000 f808 	bl	80037e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d4:	f7ff fdf6 	bl	80033c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00

080037e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_InitTick+0x54>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x58>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	4619      	mov	r1, r3
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f943 	bl	8003a8e <HAL_SYSTICK_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e00e      	b.n	8003830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d80a      	bhi.n	800382e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003818:	2200      	movs	r2, #0
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f000 f90b 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003824:	4a06      	ldr	r2, [pc, #24]	; (8003840 <HAL_InitTick+0x5c>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	2000046c 	.word	0x2000046c
 800383c:	20000474 	.word	0x20000474
 8003840:	20000470 	.word	0x20000470

08003844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x24>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <HAL_IncTick+0x24>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000474 	.word	0x20000474
 8003868:	20000680 	.word	0x20000680

0800386c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return uwTick;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_GetTick+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000680 	.word	0x20000680

08003884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff29 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff3e 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff8e 	bl	8003978 <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff31 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa2 	bl	80039e0 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff feda 	bl	800386c <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d008      	beq.n	8003ad8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e052      	b.n	8003b7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0216 	bic.w	r2, r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <HAL_DMA_Abort+0x62>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0208 	bic.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	e013      	b.n	8003b52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2a:	f7ff fe9f 	bl	800386c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d90c      	bls.n	8003b52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e015      	b.n	8003b7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e4      	bne.n	8003b2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	223f      	movs	r2, #63	; 0x3f
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e00c      	b.n	8003bbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e159      	b.n	8003e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8148 	bne.w	8003e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a56      	ldr	r2, [pc, #344]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b54      	ldr	r3, [pc, #336]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a49      	ldr	r2, [pc, #292]	; (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x202>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a48      	ldr	r2, [pc, #288]	; (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x1fe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_GPIO_Init+0x2fc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x1f6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <HAL_GPIO_Init+0x300>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x1f2>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e008      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e004      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f002 0203 	and.w	r2, r2, #3
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	4093      	lsls	r3, r2
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de0:	4935      	ldr	r1, [pc, #212]	; (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e66:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	f67f aea2 	bls.w	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e267      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e242      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b70      	ldr	r3, [pc, #448]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff fc54 	bl	800386c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7ff fc50 	bl	800386c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e207      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7ff fc40 	bl	800386c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7ff fc3c 	bl	800386c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f3      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c7      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x244>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7ff fbf5 	bl	800386c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7ff fbf1 	bl	800386c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a8      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_OscConfig+0x244>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7ff fbd4 	bl	800386c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7ff fbd0 	bl	800386c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e187      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d036      	beq.n	8004160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7ff fbb4 	bl	800386c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004108:	f7ff fbb0 	bl	800386c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e167      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7ff fb9d 	bl	800386c <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00e      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7ff fb99 	bl	800386c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d907      	bls.n	8004154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e150      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8097 	beq.w	800429c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7ff fb59 	bl	800386c <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7ff fb55 	bl	800386c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e10c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ea>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a63      	ldr	r2, [pc, #396]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x30c>
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a5b      	ldr	r2, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a54      	ldr	r2, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7ff fb1a 	bl	800386c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7ff fb16 	bl	800386c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0cb      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7ff fb04 	bl	800386c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7ff fb00 	bl	800386c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b5      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ee      	bne.n	8004268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a38      	ldr	r2, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d05c      	beq.n	800436c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d141      	bne.n	800433e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7ff fad4 	bl	800386c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7ff fad0 	bl	800386c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	491b      	ldr	r1, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7ff faa9 	bl	800386c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7ff faa5 	bl	800386c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e05c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x416>
 800433c:	e054      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7ff fa92 	bl	800386c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7ff fa8e 	bl	800386c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e045      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
 800436a:	e03d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e038      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d028      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d11a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7ff f9c0 	bl	800386c <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7ff f9bc 	bl	800386c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f920 	bl	80037e4 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	08007068 	.word	0x08007068
 80045bc:	2000046c 	.word	0x2000046c
 80045c0:	20000470 	.word	0x20000470

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b094      	sub	sp, #80	; 0x50
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44
 80045d0:	2300      	movs	r3, #0
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	2300      	movs	r3, #0
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80e1 	bhi.w	80047b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e0db      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b73      	ldr	r3, [pc, #460]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045fc:	e0db      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b73      	ldr	r3, [pc, #460]	; (80047cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004602:	e0d8      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d063      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
 8004624:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
 800462e:	2300      	movs	r3, #0
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
 8004632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	0159      	lsls	r1, r3, #5
 8004644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004648:	0150      	lsls	r0, r2, #5
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4621      	mov	r1, r4
 8004650:	1a51      	subs	r1, r2, r1
 8004652:	6139      	str	r1, [r7, #16]
 8004654:	4629      	mov	r1, r5
 8004656:	eb63 0301 	sbc.w	r3, r3, r1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004668:	4659      	mov	r1, fp
 800466a:	018b      	lsls	r3, r1, #6
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004672:	4651      	mov	r1, sl
 8004674:	018a      	lsls	r2, r1, #6
 8004676:	4651      	mov	r1, sl
 8004678:	ebb2 0801 	subs.w	r8, r2, r1
 800467c:	4659      	mov	r1, fp
 800467e:	eb63 0901 	sbc.w	r9, r3, r1
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004696:	4690      	mov	r8, r2
 8004698:	4699      	mov	r9, r3
 800469a:	4623      	mov	r3, r4
 800469c:	eb18 0303 	adds.w	r3, r8, r3
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	462b      	mov	r3, r5
 80046a4:	eb49 0303 	adc.w	r3, r9, r3
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046b6:	4629      	mov	r1, r5
 80046b8:	024b      	lsls	r3, r1, #9
 80046ba:	4621      	mov	r1, r4
 80046bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046c0:	4621      	mov	r1, r4
 80046c2:	024a      	lsls	r2, r1, #9
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ca:	2200      	movs	r2, #0
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046d4:	f7fc fa26 	bl	8000b24 <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4613      	mov	r3, r2
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	e058      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e2:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	2200      	movs	r2, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	4611      	mov	r1, r2
 80046ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	f04f 0000 	mov.w	r0, #0
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	0159      	lsls	r1, r3, #5
 800470a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800470e:	0150      	lsls	r0, r2, #5
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4641      	mov	r1, r8
 8004716:	ebb2 0a01 	subs.w	sl, r2, r1
 800471a:	4649      	mov	r1, r9
 800471c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800472c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004734:	ebb2 040a 	subs.w	r4, r2, sl
 8004738:	eb63 050b 	sbc.w	r5, r3, fp
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	00eb      	lsls	r3, r5, #3
 8004746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474a:	00e2      	lsls	r2, r4, #3
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	4643      	mov	r3, r8
 8004752:	18e3      	adds	r3, r4, r3
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	464b      	mov	r3, r9
 8004758:	eb45 0303 	adc.w	r3, r5, r3
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476a:	4629      	mov	r1, r5
 800476c:	028b      	lsls	r3, r1, #10
 800476e:	4621      	mov	r1, r4
 8004770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004774:	4621      	mov	r1, r4
 8004776:	028a      	lsls	r2, r1, #10
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2200      	movs	r2, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	61fa      	str	r2, [r7, #28]
 8004784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004788:	f7fc f9cc 	bl	8000b24 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3750      	adds	r7, #80	; 0x50
 80047bc:	46bd      	mov	sp, r7
 80047be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000046c 	.word	0x2000046c

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a9b      	lsrs	r3, r3, #10
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	08007078 	.word	0x08007078

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004814:	f7ff ffdc 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0b5b      	lsrs	r3, r3, #13
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800
 8004834:	08007078 	.word	0x08007078

08004838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e041      	b.n	80048ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fe46 	bl	80034f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 fd7e 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e044      	b.n	800497a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_TIM_Base_Start_IT+0xb0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d013      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_TIM_Base_Start_IT+0xb4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_Base_Start_IT+0xb8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_TIM_Base_Start_IT+0xbc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_TIM_Base_Start_IT+0xc0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d111      	bne.n	8004968 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d010      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	e007      	b.n	8004978 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40014000 	.word	0x40014000

0800499c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e041      	b.n	8004a32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fe fd26 	bl	8003414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 fccc 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_PWM_Start+0x24>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e022      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d109      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x3e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e015      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_PWM_Start+0x58>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e008      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e068      	b.n	8004b80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0x82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0x92>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fee8 	bl	80058c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_TIM_PWM_Start+0x14c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d107      	bne.n	8004b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <HAL_TIM_PWM_Start+0x14c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x10e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d013      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x10e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <HAL_TIM_PWM_Start+0x150>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x10e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_TIM_PWM_Start+0x154>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x10e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIM_PWM_Start+0x158>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x10e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_TIM_PWM_Start+0x15c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d010      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	e007      	b.n	8004b7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40014000 	.word	0x40014000

08004b9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e097      	b.n	8004ce0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fe fc4d 	bl	8003464 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 fbc1 	bl	8005378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c3c:	f023 030c 	bic.w	r3, r3, #12
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	011a      	lsls	r2, r3, #4
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d110      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d102      	bne.n	8004d24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d1e:	7b7b      	ldrb	r3, [r7, #13]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d001      	beq.n	8004d28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e069      	b.n	8004dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d38:	e031      	b.n	8004d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d110      	bne.n	8004d62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d40:	7bbb      	ldrb	r3, [r7, #14]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d102      	bne.n	8004d4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d46:	7b3b      	ldrb	r3, [r7, #12]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e055      	b.n	8004dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d60:	e01d      	b.n	8004d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d108      	bne.n	8004d7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d105      	bne.n	8004d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d6e:	7b7b      	ldrb	r3, [r7, #13]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d74:	7b3b      	ldrb	r3, [r7, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e03e      	b.n	8004dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_TIM_Encoder_Start+0xc4>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d008      	beq.n	8004dbc <HAL_TIM_Encoder_Start+0xd4>
 8004daa:	e00f      	b.n	8004dcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fd85 	bl	80058c4 <TIM_CCxChannelCmd>
      break;
 8004dba:	e016      	b.n	8004dea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fd7d 	bl	80058c4 <TIM_CCxChannelCmd>
      break;
 8004dca:	e00e      	b.n	8004dea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fd75 	bl	80058c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	2104      	movs	r1, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd6e 	bl	80058c4 <TIM_CCxChannelCmd>
      break;
 8004de8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0202 	mvn.w	r2, #2
 8004e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa77 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa69 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa7a 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0204 	mvn.w	r2, #4
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa4d 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa3f 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa50 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0208 	mvn.w	r2, #8
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa23 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa15 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa26 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0210 	mvn.w	r2, #16
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2208      	movs	r2, #8
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9f9 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9eb 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9fc 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fe f942 	bl	800320c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fd78 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9c1 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0220 	mvn.w	r2, #32
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd42 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ae      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	f200 809f 	bhi.w	8005180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800507d 	.word	0x0800507d
 800504c:	08005181 	.word	0x08005181
 8005050:	08005181 	.word	0x08005181
 8005054:	08005181 	.word	0x08005181
 8005058:	080050bd 	.word	0x080050bd
 800505c:	08005181 	.word	0x08005181
 8005060:	08005181 	.word	0x08005181
 8005064:	08005181 	.word	0x08005181
 8005068:	080050ff 	.word	0x080050ff
 800506c:	08005181 	.word	0x08005181
 8005070:	08005181 	.word	0x08005181
 8005074:	08005181 	.word	0x08005181
 8005078:	0800513f 	.word	0x0800513f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f9f8 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	619a      	str	r2, [r3, #24]
      break;
 80050ba:	e064      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa3e 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
      break;
 80050fc:	e043      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fa89 	bl	800561c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	61da      	str	r2, [r3, #28]
      break;
 800513c:	e023      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fad3 	bl	80056f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	61da      	str	r2, [r3, #28]
      break;
 800517e:	e002      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b4      	b.n	800531e <HAL_TIM_ConfigClockSource+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd4>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x172>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b70      	cmp	r3, #112	; 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xa6>
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b60      	cmp	r3, #96	; 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b50      	cmp	r3, #80	; 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfa>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f000 fb19 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f000 fb02 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fa76 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	; 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 facf 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 fa95 	bl	80057ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	; 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fabf 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fa56 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 faaf 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 faa6 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a34      	ldr	r2, [pc, #208]	; (800545c <TIM_Base_SetConfig+0xe4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a31      	ldr	r2, [pc, #196]	; (8005460 <TIM_Base_SetConfig+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a30      	ldr	r2, [pc, #192]	; (8005464 <TIM_Base_SetConfig+0xec>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <TIM_Base_SetConfig+0xf0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a25      	ldr	r2, [pc, #148]	; (800545c <TIM_Base_SetConfig+0xe4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <TIM_Base_SetConfig+0xe8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <TIM_Base_SetConfig+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <TIM_Base_SetConfig+0xf0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <TIM_Base_SetConfig+0xf4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <TIM_Base_SetConfig+0xf8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <TIM_Base_SetConfig+0xfc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <TIM_Base_SetConfig+0xe4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0308 	bic.w	r3, r3, #8
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40010000 	.word	0x40010000

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d113      	bne.n	80055f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a14      	ldr	r2, [pc, #80]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d113      	bne.n	80056c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40010000 	.word	0x40010000

080056f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800573a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a10      	ldr	r2, [pc, #64]	; (800578c <TIM_OC4_SetConfig+0x9c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d109      	bne.n	8005764 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000

08005790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 030a 	bic.w	r3, r3, #10
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	031b      	lsls	r3, r3, #12
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 0307 	orr.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e050      	b.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d013      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10c      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40014000 	.word	0x40014000

080059ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e03d      	b.n	8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03f      	b.n	8005b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fd fd86 	bl	80035f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	; 0x24
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fd2d 	bl	800655c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d130      	bne.n	8005bce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Transmit_IT+0x26>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e029      	b.n	8005bd0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Transmit_IT+0x38>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e022      	b.n	8005bd0 <HAL_UART_Transmit_IT+0x7e>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2221      	movs	r2, #33	; 0x21
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bc8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e000      	b.n	8005bd0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
  }
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d11d      	bne.n	8005c32 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_UART_Receive_IT+0x26>
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e016      	b.n	8005c34 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_UART_Receive_IT+0x38>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e00f      	b.n	8005c34 <HAL_UART_Receive_IT+0x58>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	461a      	mov	r2, r3
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fabf 	bl	80061ac <UART_Start_Receive_IT>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	e000      	b.n	8005c34 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
  }
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b0ba      	sub	sp, #232	; 0xe8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x66>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fba3 	bl	80063e6 <UART_Receive_IT>
      return;
 8005ca0:	e256      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80de 	beq.w	8005e68 <HAL_UART_IRQHandler+0x22c>
 8005cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80d1 	beq.w	8005e68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <HAL_UART_IRQHandler+0xae>
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0201 	orr.w	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_UART_IRQHandler+0xd2>
 8005cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <HAL_UART_IRQHandler+0xf6>
 8005d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f043 0204 	orr.w	r2, r3, #4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d011      	beq.n	8005d62 <HAL_UART_IRQHandler+0x126>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0208 	orr.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 81ed 	beq.w	8006146 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_UART_IRQHandler+0x14e>
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb2e 	bl	80063e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <HAL_UART_IRQHandler+0x17a>
 8005dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d04f      	beq.n	8005e56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa36 	bl	8006228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d141      	bne.n	8005e4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3314      	adds	r3, #20
 8005df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d9      	bne.n	8005dca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d013      	beq.n	8005e46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	4a7d      	ldr	r2, [pc, #500]	; (8006018 <HAL_UART_IRQHandler+0x3dc>)
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd feab 	bl	8003b86 <HAL_DMA_Abort_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	e00e      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f99a 	bl	8006180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	e00a      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f996 	bl	8006180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e006      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f992 	bl	8006180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e62:	e170      	b.n	8006146 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	bf00      	nop
    return;
 8005e66:	e16e      	b.n	8006146 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 814a 	bne.w	8006106 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8143 	beq.w	8006106 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 813c 	beq.w	8006106 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	f040 80b4 	bne.w	800601c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8140 	beq.w	800614a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	f080 8139 	bcs.w	800614a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ede:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eea:	f000 8088 	beq.w	8005ffe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1d9      	bne.n	8005eee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e1      	bne.n	8005f3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e3      	bne.n	8005f76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e3      	bne.n	8005fbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fd fd54 	bl	8003aa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006006:	b29b      	uxth	r3, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8c0 	bl	8006194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006014:	e099      	b.n	800614a <HAL_UART_IRQHandler+0x50e>
 8006016:	bf00      	nop
 8006018:	080062ef 	.word	0x080062ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 808b 	beq.w	800614e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8086 	beq.w	800614e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006066:	647a      	str	r2, [r7, #68]	; 0x44
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800606c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e3      	bne.n	8006042 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	623b      	str	r3, [r7, #32]
   return(result);
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800609e:	633a      	str	r2, [r7, #48]	; 0x30
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e3      	bne.n	800607a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	617b      	str	r3, [r7, #20]
   return(result);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e3      	bne.n	80060c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f848 	bl	8006194 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006104:	e023      	b.n	800614e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_UART_IRQHandler+0x4ea>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8f9 	bl	8006316 <UART_Transmit_IT>
    return;
 8006124:	e014      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x514>
 8006132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f939 	bl	80063b6 <UART_EndTransmit_IT>
    return;
 8006144:	e004      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
    return;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
      return;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
      return;
 800614e:	bf00      	nop
  }
}
 8006150:	37e8      	adds	r7, #232	; 0xe8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2222      	movs	r2, #34	; 0x22
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0220 	orr.w	r2, r2, #32
 8006218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b095      	sub	sp, #84	; 0x54
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006250:	643a      	str	r2, [r7, #64]	; 0x40
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	61fb      	str	r3, [r7, #28]
   return(result);
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	64bb      	str	r3, [r7, #72]	; 0x48
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800628a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d119      	bne.n	80062d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	647b      	str	r3, [r7, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c0:	61ba      	str	r2, [r7, #24]
 80062c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	613b      	str	r3, [r7, #16]
   return(result);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062e2:	bf00      	nop
 80062e4:	3754      	adds	r7, #84	; 0x54
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff ff39 	bl	8006180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b21      	cmp	r3, #33	; 0x21
 8006328:	d13e      	bne.n	80063a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	d114      	bne.n	800635e <UART_Transmit_IT+0x48>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d110      	bne.n	800635e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	1c9a      	adds	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]
 800635c:	e008      	b.n	8006370 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	1c59      	adds	r1, r3, #1
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6211      	str	r1, [r2, #32]
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29b      	uxth	r3, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4619      	mov	r1, r3
 800637e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10f      	bne.n	80063a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006392:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e000      	b.n	80063aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff febe 	bl	8006158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b08c      	sub	sp, #48	; 0x30
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b22      	cmp	r3, #34	; 0x22
 80063f8:	f040 80ab 	bne.w	8006552 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d117      	bne.n	8006436 <UART_Receive_IT+0x50>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d113      	bne.n	8006436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	b29a      	uxth	r2, r3
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
 8006434:	e026      	b.n	8006484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d007      	beq.n	800645a <UART_Receive_IT+0x74>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <UART_Receive_IT+0x82>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e008      	b.n	800647a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29b      	uxth	r3, r3
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4619      	mov	r1, r3
 8006492:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006494:	2b00      	cmp	r3, #0
 8006496:	d15a      	bne.n	800654e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0220 	bic.w	r2, r2, #32
 80064a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d135      	bne.n	8006544 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	613b      	str	r3, [r7, #16]
   return(result);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	623a      	str	r2, [r7, #32]
 8006500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	69f9      	ldr	r1, [r7, #28]
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	61bb      	str	r3, [r7, #24]
   return(result);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b10      	cmp	r3, #16
 800651e:	d10a      	bne.n	8006536 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fe29 	bl	8006194 <HAL_UARTEx_RxEventCallback>
 8006542:	e002      	b.n	800654a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fe11 	bl	800616c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e002      	b.n	8006554 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800655c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006560:	b0c0      	sub	sp, #256	; 0x100
 8006562:	af00      	add	r7, sp, #0
 8006564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	68d9      	ldr	r1, [r3, #12]
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	ea40 0301 	orr.w	r3, r0, r1
 8006584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	431a      	orrs	r2, r3
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b4:	f021 010c 	bic.w	r1, r1, #12
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c2:	430b      	orrs	r3, r1
 80065c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	6999      	ldr	r1, [r3, #24]
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	ea40 0301 	orr.w	r3, r0, r1
 80065e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b8f      	ldr	r3, [pc, #572]	; (8006828 <UART_SetConfig+0x2cc>)
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d005      	beq.n	80065fc <UART_SetConfig+0xa0>
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b8d      	ldr	r3, [pc, #564]	; (800682c <UART_SetConfig+0x2d0>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d104      	bne.n	8006606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065fc:	f7fe f908 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 8006600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006604:	e003      	b.n	800660e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006606:	f7fe f8ef 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 800660a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	f040 810c 	bne.w	8006834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800661c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006620:	2200      	movs	r2, #0
 8006622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800662a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	1891      	adds	r1, r2, r2
 8006634:	65b9      	str	r1, [r7, #88]	; 0x58
 8006636:	415b      	adcs	r3, r3
 8006638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800663e:	4621      	mov	r1, r4
 8006640:	eb12 0801 	adds.w	r8, r2, r1
 8006644:	4629      	mov	r1, r5
 8006646:	eb43 0901 	adc.w	r9, r3, r1
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800665e:	4690      	mov	r8, r2
 8006660:	4699      	mov	r9, r3
 8006662:	4623      	mov	r3, r4
 8006664:	eb18 0303 	adds.w	r3, r8, r3
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800666c:	462b      	mov	r3, r5
 800666e:	eb49 0303 	adc.w	r3, r9, r3
 8006672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800668a:	460b      	mov	r3, r1
 800668c:	18db      	adds	r3, r3, r3
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
 8006690:	4613      	mov	r3, r2
 8006692:	eb42 0303 	adc.w	r3, r2, r3
 8006696:	657b      	str	r3, [r7, #84]	; 0x54
 8006698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800669c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a0:	f7fa fa40 	bl	8000b24 <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4b61      	ldr	r3, [pc, #388]	; (8006830 <UART_SetConfig+0x2d4>)
 80066aa:	fba3 2302 	umull	r2, r3, r3, r2
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	011c      	lsls	r4, r3, #4
 80066b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	1891      	adds	r1, r2, r2
 80066ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80066cc:	415b      	adcs	r3, r3
 80066ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d4:	4641      	mov	r1, r8
 80066d6:	eb12 0a01 	adds.w	sl, r2, r1
 80066da:	4649      	mov	r1, r9
 80066dc:	eb43 0b01 	adc.w	fp, r3, r1
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f4:	4692      	mov	sl, r2
 80066f6:	469b      	mov	fp, r3
 80066f8:	4643      	mov	r3, r8
 80066fa:	eb1a 0303 	adds.w	r3, sl, r3
 80066fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006702:	464b      	mov	r3, r9
 8006704:	eb4b 0303 	adc.w	r3, fp, r3
 8006708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800671c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006720:	460b      	mov	r3, r1
 8006722:	18db      	adds	r3, r3, r3
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
 8006726:	4613      	mov	r3, r2
 8006728:	eb42 0303 	adc.w	r3, r2, r3
 800672c:	647b      	str	r3, [r7, #68]	; 0x44
 800672e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006736:	f7fa f9f5 	bl	8000b24 <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4611      	mov	r1, r2
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <UART_SetConfig+0x2d4>)
 8006742:	fba3 2301 	umull	r2, r3, r3, r1
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2264      	movs	r2, #100	; 0x64
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	1acb      	subs	r3, r1, r3
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006756:	4b36      	ldr	r3, [pc, #216]	; (8006830 <UART_SetConfig+0x2d4>)
 8006758:	fba3 2302 	umull	r2, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006764:	441c      	add	r4, r3
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	1891      	adds	r1, r2, r2
 800677e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006780:	415b      	adcs	r3, r3
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006788:	4641      	mov	r1, r8
 800678a:	1851      	adds	r1, r2, r1
 800678c:	6339      	str	r1, [r7, #48]	; 0x30
 800678e:	4649      	mov	r1, r9
 8006790:	414b      	adcs	r3, r1
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a0:	4659      	mov	r1, fp
 80067a2:	00cb      	lsls	r3, r1, #3
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067aa:	4651      	mov	r1, sl
 80067ac:	00ca      	lsls	r2, r1, #3
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	4642      	mov	r2, r8
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067bc:	464b      	mov	r3, r9
 80067be:	460a      	mov	r2, r1
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067dc:	460b      	mov	r3, r1
 80067de:	18db      	adds	r3, r3, r3
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e2:	4613      	mov	r3, r2
 80067e4:	eb42 0303 	adc.w	r3, r2, r3
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067f2:	f7fa f997 	bl	8000b24 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <UART_SetConfig+0x2d4>)
 80067fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	2164      	movs	r1, #100	; 0x64
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	3332      	adds	r3, #50	; 0x32
 800680e:	4a08      	ldr	r2, [pc, #32]	; (8006830 <UART_SetConfig+0x2d4>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f003 0207 	and.w	r2, r3, #7
 800681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4422      	add	r2, r4
 8006822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006824:	e105      	b.n	8006a32 <UART_SetConfig+0x4d6>
 8006826:	bf00      	nop
 8006828:	40011000 	.word	0x40011000
 800682c:	40011400 	.word	0x40011400
 8006830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800683e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006846:	4642      	mov	r2, r8
 8006848:	464b      	mov	r3, r9
 800684a:	1891      	adds	r1, r2, r2
 800684c:	6239      	str	r1, [r7, #32]
 800684e:	415b      	adcs	r3, r3
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
 8006852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006856:	4641      	mov	r1, r8
 8006858:	1854      	adds	r4, r2, r1
 800685a:	4649      	mov	r1, r9
 800685c:	eb43 0501 	adc.w	r5, r3, r1
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	00eb      	lsls	r3, r5, #3
 800686a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800686e:	00e2      	lsls	r2, r4, #3
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	4643      	mov	r3, r8
 8006876:	18e3      	adds	r3, r4, r3
 8006878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800687c:	464b      	mov	r3, r9
 800687e:	eb45 0303 	adc.w	r3, r5, r3
 8006882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068a2:	4629      	mov	r1, r5
 80068a4:	008b      	lsls	r3, r1, #2
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ac:	4621      	mov	r1, r4
 80068ae:	008a      	lsls	r2, r1, #2
 80068b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b4:	f7fa f936 	bl	8000b24 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b60      	ldr	r3, [pc, #384]	; (8006a40 <UART_SetConfig+0x4e4>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011c      	lsls	r4, r3, #4
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	1891      	adds	r1, r2, r2
 80068de:	61b9      	str	r1, [r7, #24]
 80068e0:	415b      	adcs	r3, r3
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068e8:	4641      	mov	r1, r8
 80068ea:	1851      	adds	r1, r2, r1
 80068ec:	6139      	str	r1, [r7, #16]
 80068ee:	4649      	mov	r1, r9
 80068f0:	414b      	adcs	r3, r1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006900:	4659      	mov	r1, fp
 8006902:	00cb      	lsls	r3, r1, #3
 8006904:	4651      	mov	r1, sl
 8006906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690a:	4651      	mov	r1, sl
 800690c:	00ca      	lsls	r2, r1, #3
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	4603      	mov	r3, r0
 8006914:	4642      	mov	r2, r8
 8006916:	189b      	adds	r3, r3, r2
 8006918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800691c:	464b      	mov	r3, r9
 800691e:	460a      	mov	r2, r1
 8006920:	eb42 0303 	adc.w	r3, r2, r3
 8006924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	67bb      	str	r3, [r7, #120]	; 0x78
 8006932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006940:	4649      	mov	r1, r9
 8006942:	008b      	lsls	r3, r1, #2
 8006944:	4641      	mov	r1, r8
 8006946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694a:	4641      	mov	r1, r8
 800694c:	008a      	lsls	r2, r1, #2
 800694e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006952:	f7fa f8e7 	bl	8000b24 <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <UART_SetConfig+0x4e4>)
 800695c:	fba3 1302 	umull	r1, r3, r3, r2
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	2164      	movs	r1, #100	; 0x64
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	3332      	adds	r3, #50	; 0x32
 800696e:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697a:	441c      	add	r4, r3
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	673b      	str	r3, [r7, #112]	; 0x70
 8006984:	677a      	str	r2, [r7, #116]	; 0x74
 8006986:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800698a:	4642      	mov	r2, r8
 800698c:	464b      	mov	r3, r9
 800698e:	1891      	adds	r1, r2, r2
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	415b      	adcs	r3, r3
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800699a:	4641      	mov	r1, r8
 800699c:	1851      	adds	r1, r2, r1
 800699e:	6039      	str	r1, [r7, #0]
 80069a0:	4649      	mov	r1, r9
 80069a2:	414b      	adcs	r3, r1
 80069a4:	607b      	str	r3, [r7, #4]
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069b2:	4659      	mov	r1, fp
 80069b4:	00cb      	lsls	r3, r1, #3
 80069b6:	4651      	mov	r1, sl
 80069b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069bc:	4651      	mov	r1, sl
 80069be:	00ca      	lsls	r2, r1, #3
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	4642      	mov	r2, r8
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80069cc:	464b      	mov	r3, r9
 80069ce:	460a      	mov	r2, r1
 80069d0:	eb42 0303 	adc.w	r3, r2, r3
 80069d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	663b      	str	r3, [r7, #96]	; 0x60
 80069e0:	667a      	str	r2, [r7, #100]	; 0x64
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069ee:	4649      	mov	r1, r9
 80069f0:	008b      	lsls	r3, r1, #2
 80069f2:	4641      	mov	r1, r8
 80069f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f8:	4641      	mov	r1, r8
 80069fa:	008a      	lsls	r2, r1, #2
 80069fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a00:	f7fa f890 	bl	8000b24 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2164      	movs	r1, #100	; 0x64
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	; 0x32
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <UART_SetConfig+0x4e4>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4422      	add	r2, r4
 8006a30:	609a      	str	r2, [r3, #8]
}
 8006a32:	bf00      	nop
 8006a34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3e:	bf00      	nop
 8006a40:	51eb851f 	.word	0x51eb851f

08006a44 <arm_mat_trans_f32>:
 8006a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a48:	8802      	ldrh	r2, [r0, #0]
 8006a4a:	884b      	ldrh	r3, [r1, #2]
 8006a4c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006a50:	684f      	ldr	r7, [r1, #4]
 8006a52:	8840      	ldrh	r0, [r0, #2]
 8006a54:	4293      	cmp	r3, r2
 8006a56:	b083      	sub	sp, #12
 8006a58:	d14c      	bne.n	8006af4 <arm_mat_trans_f32+0xb0>
 8006a5a:	f8b1 e000 	ldrh.w	lr, [r1]
 8006a5e:	4586      	cmp	lr, r0
 8006a60:	d148      	bne.n	8006af4 <arm_mat_trans_f32+0xb0>
 8006a62:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8006a66:	009c      	lsls	r4, r3, #2
 8006a68:	f00e 0e03 	and.w	lr, lr, #3
 8006a6c:	fb08 f904 	mul.w	r9, r8, r4
 8006a70:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8006a74:	011d      	lsls	r5, r3, #4
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006a7c:	eb07 0a04 	add.w	sl, r7, r4
 8006a80:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8006a84:	9201      	str	r2, [sp, #4]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	463b      	mov	r3, r7
 8006a8a:	f1b8 0f00 	cmp.w	r8, #0
 8006a8e:	d01d      	beq.n	8006acc <arm_mat_trans_f32+0x88>
 8006a90:	9900      	ldr	r1, [sp, #0]
 8006a92:	f10c 0210 	add.w	r2, ip, #16
 8006a96:	4439      	add	r1, r7
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8006a9e:	601e      	str	r6, [r3, #0]
 8006aa0:	ed52 7a03 	vldr	s15, [r2, #-12]
 8006aa4:	191e      	adds	r6, r3, r4
 8006aa6:	edc6 7a00 	vstr	s15, [r6]
 8006aaa:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8006aae:	600e      	str	r6, [r1, #0]
 8006ab0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8006ab4:	190e      	adds	r6, r1, r4
 8006ab6:	3801      	subs	r0, #1
 8006ab8:	442b      	add	r3, r5
 8006aba:	f102 0210 	add.w	r2, r2, #16
 8006abe:	edc6 7a00 	vstr	s15, [r6]
 8006ac2:	4429      	add	r1, r5
 8006ac4:	d1e9      	bne.n	8006a9a <arm_mat_trans_f32+0x56>
 8006ac6:	44dc      	add	ip, fp
 8006ac8:	eb09 0307 	add.w	r3, r9, r7
 8006acc:	f1be 0f00 	cmp.w	lr, #0
 8006ad0:	d009      	beq.n	8006ae6 <arm_mat_trans_f32+0xa2>
 8006ad2:	4672      	mov	r2, lr
 8006ad4:	4661      	mov	r1, ip
 8006ad6:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ada:	6018      	str	r0, [r3, #0]
 8006adc:	3a01      	subs	r2, #1
 8006ade:	4423      	add	r3, r4
 8006ae0:	d1f9      	bne.n	8006ad6 <arm_mat_trans_f32+0x92>
 8006ae2:	9b01      	ldr	r3, [sp, #4]
 8006ae4:	449c      	add	ip, r3
 8006ae6:	3704      	adds	r7, #4
 8006ae8:	4557      	cmp	r7, sl
 8006aea:	d1cd      	bne.n	8006a88 <arm_mat_trans_f32+0x44>
 8006aec:	2000      	movs	r0, #0
 8006aee:	b003      	add	sp, #12
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	f06f 0002 	mvn.w	r0, #2
 8006af8:	e7f9      	b.n	8006aee <arm_mat_trans_f32+0xaa>
 8006afa:	bf00      	nop

08006afc <arm_mat_sub_f32>:
 8006afc:	b4f0      	push	{r4, r5, r6, r7}
 8006afe:	e9d1 4700 	ldrd	r4, r7, [r1]
 8006b02:	6803      	ldr	r3, [r0, #0]
 8006b04:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006b08:	6856      	ldr	r6, [r2, #4]
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	d15d      	bne.n	8006bca <arm_mat_sub_f32+0xce>
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d15a      	bne.n	8006bca <arm_mat_sub_f32+0xce>
 8006b14:	8803      	ldrh	r3, [r0, #0]
 8006b16:	8844      	ldrh	r4, [r0, #2]
 8006b18:	fb04 f403 	mul.w	r4, r4, r3
 8006b1c:	08a5      	lsrs	r5, r4, #2
 8006b1e:	d032      	beq.n	8006b86 <arm_mat_sub_f32+0x8a>
 8006b20:	f10c 0110 	add.w	r1, ip, #16
 8006b24:	f107 0210 	add.w	r2, r7, #16
 8006b28:	f106 0310 	add.w	r3, r6, #16
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006b32:	ed51 7a04 	vldr	s15, [r1, #-16]
 8006b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b3a:	3801      	subs	r0, #1
 8006b3c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006b40:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006b44:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b4c:	f101 0110 	add.w	r1, r1, #16
 8006b50:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006b54:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006b58:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8006b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b60:	f102 0210 	add.w	r2, r2, #16
 8006b64:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006b68:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8006b6c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8006b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b74:	f103 0310 	add.w	r3, r3, #16
 8006b78:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006b7c:	d1d7      	bne.n	8006b2e <arm_mat_sub_f32+0x32>
 8006b7e:	012b      	lsls	r3, r5, #4
 8006b80:	449c      	add	ip, r3
 8006b82:	441f      	add	r7, r3
 8006b84:	441e      	add	r6, r3
 8006b86:	f014 0403 	ands.w	r4, r4, #3
 8006b8a:	d01b      	beq.n	8006bc4 <arm_mat_sub_f32+0xc8>
 8006b8c:	eddc 7a00 	vldr	s15, [ip]
 8006b90:	ed97 7a00 	vldr	s14, [r7]
 8006b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b98:	3c01      	subs	r4, #1
 8006b9a:	edc6 7a00 	vstr	s15, [r6]
 8006b9e:	d011      	beq.n	8006bc4 <arm_mat_sub_f32+0xc8>
 8006ba0:	eddc 7a01 	vldr	s15, [ip, #4]
 8006ba4:	ed97 7a01 	vldr	s14, [r7, #4]
 8006ba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bac:	2c01      	cmp	r4, #1
 8006bae:	edc6 7a01 	vstr	s15, [r6, #4]
 8006bb2:	d007      	beq.n	8006bc4 <arm_mat_sub_f32+0xc8>
 8006bb4:	eddc 7a02 	vldr	s15, [ip, #8]
 8006bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8006bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bc0:	edc6 7a02 	vstr	s15, [r6, #8]
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8006bc8:	4770      	bx	lr
 8006bca:	f06f 0002 	mvn.w	r0, #2
 8006bce:	e7fa      	b.n	8006bc6 <arm_mat_sub_f32+0xca>

08006bd0 <arm_mat_mult_f32>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	8845      	ldrh	r5, [r0, #2]
 8006bd6:	880b      	ldrh	r3, [r1, #0]
 8006bd8:	8806      	ldrh	r6, [r0, #0]
 8006bda:	6847      	ldr	r7, [r0, #4]
 8006bdc:	6854      	ldr	r4, [r2, #4]
 8006bde:	6848      	ldr	r0, [r1, #4]
 8006be0:	b08b      	sub	sp, #44	; 0x2c
 8006be2:	42ab      	cmp	r3, r5
 8006be4:	9109      	str	r1, [sp, #36]	; 0x24
 8006be6:	9604      	str	r6, [sp, #16]
 8006be8:	8849      	ldrh	r1, [r1, #2]
 8006bea:	f040 808a 	bne.w	8006d02 <arm_mat_mult_f32+0x132>
 8006bee:	8815      	ldrh	r5, [r2, #0]
 8006bf0:	42b5      	cmp	r5, r6
 8006bf2:	f040 8086 	bne.w	8006d02 <arm_mat_mult_f32+0x132>
 8006bf6:	8852      	ldrh	r2, [r2, #2]
 8006bf8:	428a      	cmp	r2, r1
 8006bfa:	f040 8082 	bne.w	8006d02 <arm_mat_mult_f32+0x132>
 8006bfe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8006c02:	1d01      	adds	r1, r0, #4
 8006c04:	0116      	lsls	r6, r2, #4
 8006c06:	9108      	str	r1, [sp, #32]
 8006c08:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8006c0c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8006c10:	9101      	str	r1, [sp, #4]
 8006c12:	fb06 f108 	mul.w	r1, r6, r8
 8006c16:	0095      	lsls	r5, r2, #2
 8006c18:	9103      	str	r1, [sp, #12]
 8006c1a:	00d2      	lsls	r2, r2, #3
 8006c1c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8006c20:	f003 0903 	and.w	r9, r3, #3
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	f107 0b10 	add.w	fp, r7, #16
 8006c2a:	eb04 0a05 	add.w	sl, r4, r5
 8006c2e:	9107      	str	r1, [sp, #28]
 8006c30:	9202      	str	r2, [sp, #8]
 8006c32:	9306      	str	r3, [sp, #24]
 8006c34:	f1ab 0310 	sub.w	r3, fp, #16
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	9b07      	ldr	r3, [sp, #28]
 8006c3c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006c40:	eb03 0c0a 	add.w	ip, r3, sl
 8006c44:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006d0c <arm_mat_mult_f32+0x13c>
 8006c48:	f1b8 0f00 	cmp.w	r8, #0
 8006c4c:	d053      	beq.n	8006cf6 <arm_mat_mult_f32+0x126>
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	4644      	mov	r4, r8
 8006c52:	18c1      	adds	r1, r0, r3
 8006c54:	4602      	mov	r2, r0
 8006c56:	465b      	mov	r3, fp
 8006c58:	ed92 6a00 	vldr	s12, [r2]
 8006c5c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8006c60:	ed53 4a03 	vldr	s9, [r3, #-12]
 8006c64:	ed53 6a02 	vldr	s13, [r3, #-8]
 8006c68:	ed91 5a00 	vldr	s10, [r1]
 8006c6c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8006c70:	1957      	adds	r7, r2, r5
 8006c72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006c76:	ed97 6a00 	vldr	s12, [r7]
 8006c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006c82:	194f      	adds	r7, r1, r5
 8006c84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006c88:	ee26 7a85 	vmul.f32	s14, s13, s10
 8006c8c:	edd7 7a00 	vldr	s15, [r7]
 8006c90:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006c98:	3c01      	subs	r4, #1
 8006c9a:	4432      	add	r2, r6
 8006c9c:	4431      	add	r1, r6
 8006c9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ca2:	f103 0310 	add.w	r3, r3, #16
 8006ca6:	d1d7      	bne.n	8006c58 <arm_mat_mult_f32+0x88>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	9a01      	ldr	r2, [sp, #4]
 8006cac:	4418      	add	r0, r3
 8006cae:	f1b9 0f00 	cmp.w	r9, #0
 8006cb2:	d00b      	beq.n	8006ccc <arm_mat_mult_f32+0xfc>
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	edd0 6a00 	vldr	s13, [r0]
 8006cba:	ecb2 7a01 	vldmia	r2!, {s14}
 8006cbe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	4428      	add	r0, r5
 8006cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cca:	d1f4      	bne.n	8006cb6 <arm_mat_mult_f32+0xe6>
 8006ccc:	ecec 7a01 	vstmia	ip!, {s15}
 8006cd0:	45d4      	cmp	ip, sl
 8006cd2:	4670      	mov	r0, lr
 8006cd4:	f10e 0e04 	add.w	lr, lr, #4
 8006cd8:	d1b4      	bne.n	8006c44 <arm_mat_mult_f32+0x74>
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4419      	add	r1, r3
 8006ce2:	449b      	add	fp, r3
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	9101      	str	r1, [sp, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	44aa      	add	sl, r5
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	d004      	beq.n	8006cfa <arm_mat_mult_f32+0x12a>
 8006cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf2:	6858      	ldr	r0, [r3, #4]
 8006cf4:	e79e      	b.n	8006c34 <arm_mat_mult_f32+0x64>
 8006cf6:	9a05      	ldr	r2, [sp, #20]
 8006cf8:	e7d9      	b.n	8006cae <arm_mat_mult_f32+0xde>
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	b00b      	add	sp, #44	; 0x2c
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	f06f 0002 	mvn.w	r0, #2
 8006d06:	b00b      	add	sp, #44	; 0x2c
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	00000000 	.word	0x00000000

08006d10 <arm_mat_inverse_f32>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	8843      	ldrh	r3, [r0, #2]
 8006d16:	8804      	ldrh	r4, [r0, #0]
 8006d18:	684e      	ldr	r6, [r1, #4]
 8006d1a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8006d1e:	b087      	sub	sp, #28
 8006d20:	429c      	cmp	r4, r3
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	9603      	str	r6, [sp, #12]
 8006d26:	f040 80ea 	bne.w	8006efe <arm_mat_inverse_f32+0x1ee>
 8006d2a:	880a      	ldrh	r2, [r1, #0]
 8006d2c:	884b      	ldrh	r3, [r1, #2]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f040 80e5 	bne.w	8006efe <arm_mat_inverse_f32+0x1ee>
 8006d34:	429c      	cmp	r4, r3
 8006d36:	f040 80e2 	bne.w	8006efe <arm_mat_inverse_f32+0x1ee>
 8006d3a:	9005      	str	r0, [sp, #20]
 8006d3c:	b30c      	cbz	r4, 8006d82 <arm_mat_inverse_f32+0x72>
 8006d3e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8006d42:	1e67      	subs	r7, r4, #1
 8006d44:	f846 bb04 	str.w	fp, [r6], #4
 8006d48:	d01b      	beq.n	8006d82 <arm_mat_inverse_f32+0x72>
 8006d4a:	f04f 0801 	mov.w	r8, #1
 8006d4e:	00ba      	lsls	r2, r7, #2
 8006d50:	eb06 0a02 	add.w	sl, r6, r2
 8006d54:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8006d58:	4630      	mov	r0, r6
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	f000 f970 	bl	8007040 <memset>
 8006d60:	eb0a 0605 	add.w	r6, sl, r5
 8006d64:	462a      	mov	r2, r5
 8006d66:	2100      	movs	r1, #0
 8006d68:	4650      	mov	r0, sl
 8006d6a:	f1b8 0f00 	cmp.w	r8, #0
 8006d6e:	f000 80cb 	beq.w	8006f08 <arm_mat_inverse_f32+0x1f8>
 8006d72:	f000 f965 	bl	8007040 <memset>
 8006d76:	3f01      	subs	r7, #1
 8006d78:	f108 0801 	add.w	r8, r8, #1
 8006d7c:	f846 bb04 	str.w	fp, [r6], #4
 8006d80:	d1e5      	bne.n	8006d4e <arm_mat_inverse_f32+0x3e>
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80b5 	beq.w	8006ef4 <arm_mat_inverse_f32+0x1e4>
 8006d8a:	009d      	lsls	r5, r3, #2
 8006d8c:	eb09 0205 	add.w	r2, r9, r5
 8006d90:	46cc      	mov	ip, r9
 8006d92:	9202      	str	r2, [sp, #8]
 8006d94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d98:	1d2a      	adds	r2, r5, #4
 8006d9a:	9204      	str	r2, [sp, #16]
 8006d9c:	462f      	mov	r7, r5
 8006d9e:	469e      	mov	lr, r3
 8006da0:	2600      	movs	r6, #0
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	eddc 6a00 	vldr	s13, [ip]
 8006da8:	42b4      	cmp	r4, r6
 8006daa:	eba3 0b07 	sub.w	fp, r3, r7
 8006dae:	f000 80a1 	beq.w	8006ef4 <arm_mat_inverse_f32+0x1e4>
 8006db2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006f18 <arm_mat_inverse_f32+0x208>
 8006db6:	4632      	mov	r2, r6
 8006db8:	4663      	mov	r3, ip
 8006dba:	e00b      	b.n	8006dd4 <arm_mat_inverse_f32+0xc4>
 8006dbc:	eef4 7a47 	vcmp.f32	s15, s14
 8006dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc4:	f102 0201 	add.w	r2, r2, #1
 8006dc8:	bfc8      	it	gt
 8006dca:	eeb0 7a67 	vmovgt.f32	s14, s15
 8006dce:	42a2      	cmp	r2, r4
 8006dd0:	442b      	add	r3, r5
 8006dd2:	d014      	beq.n	8006dfe <arm_mat_inverse_f32+0xee>
 8006dd4:	edd3 7a00 	vldr	s15, [r3]
 8006dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de0:	eeb1 6a67 	vneg.f32	s12, s15
 8006de4:	dcea      	bgt.n	8006dbc <arm_mat_inverse_f32+0xac>
 8006de6:	eeb4 6a47 	vcmp.f32	s12, s14
 8006dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dee:	f102 0201 	add.w	r2, r2, #1
 8006df2:	bfc8      	it	gt
 8006df4:	eeb0 7a46 	vmovgt.f32	s14, s12
 8006df8:	42a2      	cmp	r2, r4
 8006dfa:	442b      	add	r3, r5
 8006dfc:	d1ea      	bne.n	8006dd4 <arm_mat_inverse_f32+0xc4>
 8006dfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e06:	d075      	beq.n	8006ef4 <arm_mat_inverse_f32+0x1e4>
 8006e08:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e10:	d070      	beq.n	8006ef4 <arm_mat_inverse_f32+0x1e4>
 8006e12:	4672      	mov	r2, lr
 8006e14:	4663      	mov	r3, ip
 8006e16:	ed93 7a00 	vldr	s14, [r3]
 8006e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	ece3 7a01 	vstmia	r3!, {s15}
 8006e24:	d1f7      	bne.n	8006e16 <arm_mat_inverse_f32+0x106>
 8006e26:	9901      	ldr	r1, [sp, #4]
 8006e28:	464b      	mov	r3, r9
 8006e2a:	ed93 7a00 	vldr	s14, [r3]
 8006e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e32:	3901      	subs	r1, #1
 8006e34:	ece3 7a01 	vstmia	r3!, {s15}
 8006e38:	d1f7      	bne.n	8006e2a <arm_mat_inverse_f32+0x11a>
 8006e3a:	9803      	ldr	r0, [sp, #12]
 8006e3c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8006e40:	42b1      	cmp	r1, r6
 8006e42:	d039      	beq.n	8006eb8 <arm_mat_inverse_f32+0x1a8>
 8006e44:	eddb 6a00 	vldr	s13, [fp]
 8006e48:	465a      	mov	r2, fp
 8006e4a:	4673      	mov	r3, lr
 8006e4c:	46e2      	mov	sl, ip
 8006e4e:	ecba 7a01 	vldmia	sl!, {s14}
 8006e52:	edd2 7a00 	vldr	s15, [r2]
 8006e56:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e60:	ece2 7a01 	vstmia	r2!, {s15}
 8006e64:	d1f3      	bne.n	8006e4e <arm_mat_inverse_f32+0x13e>
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	44bb      	add	fp, r7
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	46ca      	mov	sl, r9
 8006e6e:	ecba 7a01 	vldmia	sl!, {s14}
 8006e72:	edd2 7a00 	vldr	s15, [r2]
 8006e76:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e80:	ece2 7a01 	vstmia	r2!, {s15}
 8006e84:	d1f3      	bne.n	8006e6e <arm_mat_inverse_f32+0x15e>
 8006e86:	4428      	add	r0, r5
 8006e88:	3101      	adds	r1, #1
 8006e8a:	428c      	cmp	r4, r1
 8006e8c:	44c3      	add	fp, r8
 8006e8e:	d1d7      	bne.n	8006e40 <arm_mat_inverse_f32+0x130>
 8006e90:	9b04      	ldr	r3, [sp, #16]
 8006e92:	f1be 0e01 	subs.w	lr, lr, #1
 8006e96:	f106 0601 	add.w	r6, r6, #1
 8006e9a:	449c      	add	ip, r3
 8006e9c:	f1a7 0704 	sub.w	r7, r7, #4
 8006ea0:	44a9      	add	r9, r5
 8006ea2:	f47f af7e 	bne.w	8006da2 <arm_mat_inverse_f32+0x92>
 8006ea6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eae:	d006      	beq.n	8006ebe <arm_mat_inverse_f32+0x1ae>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	b007      	add	sp, #28
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	44bb      	add	fp, r7
 8006eba:	4428      	add	r0, r5
 8006ebc:	e7e4      	b.n	8006e88 <arm_mat_inverse_f32+0x178>
 8006ebe:	9b05      	ldr	r3, [sp, #20]
 8006ec0:	9a01      	ldr	r2, [sp, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	edd3 7a00 	vldr	s15, [r3]
 8006ec8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ecc:	fb02 f204 	mul.w	r2, r2, r4
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	bf08      	it	eq
 8006ed8:	3304      	addeq	r3, #4
 8006eda:	d007      	beq.n	8006eec <arm_mat_inverse_f32+0x1dc>
 8006edc:	e7e8      	b.n	8006eb0 <arm_mat_inverse_f32+0x1a0>
 8006ede:	ecf3 7a01 	vldmia	r3!, {s15}
 8006ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	d1e1      	bne.n	8006eb0 <arm_mat_inverse_f32+0x1a0>
 8006eec:	f10e 0e01 	add.w	lr, lr, #1
 8006ef0:	4574      	cmp	r4, lr
 8006ef2:	d1f4      	bne.n	8006ede <arm_mat_inverse_f32+0x1ce>
 8006ef4:	f06f 0004 	mvn.w	r0, #4
 8006ef8:	b007      	add	sp, #28
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	f06f 0002 	mvn.w	r0, #2
 8006f02:	b007      	add	sp, #28
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	4656      	mov	r6, sl
 8006f0a:	3f01      	subs	r7, #1
 8006f0c:	f846 bb04 	str.w	fp, [r6], #4
 8006f10:	f47f af1b 	bne.w	8006d4a <arm_mat_inverse_f32+0x3a>
 8006f14:	e735      	b.n	8006d82 <arm_mat_inverse_f32+0x72>
 8006f16:	bf00      	nop
 8006f18:	00000000 	.word	0x00000000

08006f1c <arm_mat_init_f32>:
 8006f1c:	8001      	strh	r1, [r0, #0]
 8006f1e:	8042      	strh	r2, [r0, #2]
 8006f20:	6043      	str	r3, [r0, #4]
 8006f22:	4770      	bx	lr

08006f24 <arm_mat_add_f32>:
 8006f24:	b4f0      	push	{r4, r5, r6, r7}
 8006f26:	e9d1 4700 	ldrd	r4, r7, [r1]
 8006f2a:	6803      	ldr	r3, [r0, #0]
 8006f2c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006f30:	6856      	ldr	r6, [r2, #4]
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	d15d      	bne.n	8006ff2 <arm_mat_add_f32+0xce>
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d15a      	bne.n	8006ff2 <arm_mat_add_f32+0xce>
 8006f3c:	8803      	ldrh	r3, [r0, #0]
 8006f3e:	8844      	ldrh	r4, [r0, #2]
 8006f40:	fb04 f403 	mul.w	r4, r4, r3
 8006f44:	08a5      	lsrs	r5, r4, #2
 8006f46:	d032      	beq.n	8006fae <arm_mat_add_f32+0x8a>
 8006f48:	f10c 0110 	add.w	r1, ip, #16
 8006f4c:	f107 0210 	add.w	r2, r7, #16
 8006f50:	f106 0310 	add.w	r3, r6, #16
 8006f54:	4628      	mov	r0, r5
 8006f56:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006f5a:	ed51 7a04 	vldr	s15, [r1, #-16]
 8006f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f62:	3801      	subs	r0, #1
 8006f64:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006f68:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006f6c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f74:	f101 0110 	add.w	r1, r1, #16
 8006f78:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006f7c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006f80:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8006f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f88:	f102 0210 	add.w	r2, r2, #16
 8006f8c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006f90:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8006f94:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8006f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f9c:	f103 0310 	add.w	r3, r3, #16
 8006fa0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006fa4:	d1d7      	bne.n	8006f56 <arm_mat_add_f32+0x32>
 8006fa6:	012b      	lsls	r3, r5, #4
 8006fa8:	449c      	add	ip, r3
 8006faa:	441f      	add	r7, r3
 8006fac:	441e      	add	r6, r3
 8006fae:	f014 0403 	ands.w	r4, r4, #3
 8006fb2:	d01b      	beq.n	8006fec <arm_mat_add_f32+0xc8>
 8006fb4:	edd7 7a00 	vldr	s15, [r7]
 8006fb8:	ed9c 7a00 	vldr	s14, [ip]
 8006fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fc0:	3c01      	subs	r4, #1
 8006fc2:	edc6 7a00 	vstr	s15, [r6]
 8006fc6:	d011      	beq.n	8006fec <arm_mat_add_f32+0xc8>
 8006fc8:	eddc 7a01 	vldr	s15, [ip, #4]
 8006fcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8006fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fd4:	2c01      	cmp	r4, #1
 8006fd6:	edc6 7a01 	vstr	s15, [r6, #4]
 8006fda:	d007      	beq.n	8006fec <arm_mat_add_f32+0xc8>
 8006fdc:	eddc 7a02 	vldr	s15, [ip, #8]
 8006fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fe8:	edc6 7a02 	vstr	s15, [r6, #8]
 8006fec:	2000      	movs	r0, #0
 8006fee:	bcf0      	pop	{r4, r5, r6, r7}
 8006ff0:	4770      	bx	lr
 8006ff2:	f06f 0002 	mvn.w	r0, #2
 8006ff6:	e7fa      	b.n	8006fee <arm_mat_add_f32+0xca>

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2600      	movs	r6, #0
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4d0b      	ldr	r5, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f000 f820 	bl	8007050 <_init>
 8007010:	1b64      	subs	r4, r4, r5
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2600      	movs	r6, #0
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08007088 	.word	0x08007088
 8007034:	08007088 	.word	0x08007088
 8007038:	08007088 	.word	0x08007088
 800703c:	0800708c 	.word	0x0800708c

08007040 <memset>:
 8007040:	4402      	add	r2, r0
 8007042:	4603      	mov	r3, r0
 8007044:	4293      	cmp	r3, r2
 8007046:	d100      	bne.n	800704a <memset+0xa>
 8007048:	4770      	bx	lr
 800704a:	f803 1b01 	strb.w	r1, [r3], #1
 800704e:	e7f9      	b.n	8007044 <memset+0x4>

08007050 <_init>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr

0800705c <_fini>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr
