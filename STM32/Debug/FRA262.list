
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008198  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008348  08008348  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008350  08008350  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08008358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000478  080087d0  00020478  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  080087d0  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165db  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e94  00000000  00000000  00036a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  0003a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017470  00000000  00000000  0003b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014971  00000000  00000000  00052dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a37  00000000  00000000  00067739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fa170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  000fa238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000fe8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000478 	.word	0x20000478
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008318 	.word	0x08008318

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000047c 	.word	0x2000047c
 80001d4:	08008318 	.word	0x08008318

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f007 fa5a 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f007 fa51 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f007 fa48 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f007 fa3f 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2203      	movs	r2, #3
 8000d72:	2103      	movs	r1, #3
 8000d74:	f007 fa36 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3364      	adds	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f007 fa2d 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3368      	adds	r3, #104	; 0x68
 8000d94:	2203      	movs	r2, #3
 8000d96:	2103      	movs	r1, #3
 8000d98:	f007 fa24 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	338c      	adds	r3, #140	; 0x8c
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f007 fa1b 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3398      	adds	r3, #152	; 0x98
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f007 fa12 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	33a4      	adds	r3, #164	; 0xa4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f007 fa09 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	33c8      	adds	r3, #200	; 0xc8
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f007 fa00 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33ec      	adds	r3, #236	; 0xec
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f007 f9f7 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33f0      	adds	r3, #240	; 0xf0
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f007 f9ee 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33f4      	adds	r3, #244	; 0xf4
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f007 f9e5 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33f8      	adds	r3, #248	; 0xf8
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f007 f9dc 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	f007 f9d2 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f007 f9c8 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000e60:	2203      	movs	r2, #3
 8000e62:	2103      	movs	r1, #3
 8000e64:	f007 f9be 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000e74:	2201      	movs	r2, #1
 8000e76:	2103      	movs	r1, #3
 8000e78:	f007 f9b4 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2203      	movs	r2, #3
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	f007 f9aa 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f007 f9a0 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f007 f996 	bl	80081e4 <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	f007 f98c 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000ed8:	2203      	movs	r2, #3
 8000eda:	2103      	movs	r1, #3
 8000edc:	f007 f982 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f007 f978 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	f007 f96e 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f14:	2201      	movs	r2, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	f007 f964 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	f007 f95a 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	2103      	movs	r1, #3
 8000f40:	f007 f950 	bl	80081e4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f50:	2203      	movs	r2, #3
 8000f52:	2103      	movs	r1, #3
 8000f54:	f007 f946 	bl	80081e4 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f006 fed0 	bl	8007d0c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f006 fec6 	bl	8007d0c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f006 febc 	bl	8007d0c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQGt));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7120 	add.w	r1, r3, #640	; 0x280
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f006 ff76 	bl	8007e98 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQGt), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f006 ff6a 	bl	8007e98 <arm_mat_mult_f32>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 7128 	add.w	r1, r3, #672	; 0x2a0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000fea:	461a      	mov	r2, r3
 8000fec:	f006 ff54 	bl	8007e98 <arm_mat_mult_f32>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800100c:	461a      	mov	r2, r3
 800100e:	f006 ff43 	bl	8007e98 <arm_mat_mult_f32>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7138 	add.w	r1, r3, #736	; 0x2e0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800102e:	461a      	mov	r2, r3
 8001030:	f006 ff32 	bl	8007e98 <arm_mat_mult_f32>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f503 7140 	add.w	r1, r3, #768	; 0x300
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001050:	461a      	mov	r2, r3
 8001052:	f007 f8cb 	bl	80081ec <arm_mat_add_f32>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800107a:	461a      	mov	r2, r3
 800107c:	f006 ff0c 	bl	8007e98 <arm_mat_mult_f32>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 7148 	add.w	r1, r3, #800	; 0x320
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800109c:	461a      	mov	r2, r3
 800109e:	f006 fe91 	bl	8007dc4 <arm_mat_sub_f32>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80010be:	461a      	mov	r2, r3
 80010c0:	f006 feea 	bl	8007e98 <arm_mat_mult_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80010e0:	461a      	mov	r2, r3
 80010e2:	f006 fed9 	bl	8007e98 <arm_mat_mult_f32>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 704a 	add.w	r0, r3, #808	; 0x328
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 7122 	add.w	r1, r3, #648	; 0x288
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001102:	461a      	mov	r2, r3
 8001104:	f007 f872 	bl	80081ec <arm_mat_add_f32>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f006 ff59 	bl	8007fd8 <arm_mat_inverse_f32>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001142:	461a      	mov	r2, r3
 8001144:	f006 fea8 	bl	8007e98 <arm_mat_mult_f32>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001164:	461a      	mov	r2, r3
 8001166:	f006 fe97 	bl	8007e98 <arm_mat_mult_f32>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001186:	461a      	mov	r2, r3
 8001188:	f006 fe86 	bl	8007e98 <arm_mat_mult_f32>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 704e 	add.w	r0, r3, #824	; 0x338
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f007 f81f 	bl	80081ec <arm_mat_add_f32>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80011ca:	461a      	mov	r2, r3
 80011cc:	f006 fe64 	bl	8007e98 <arm_mat_mult_f32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 7150 	add.w	r1, r3, #832	; 0x340
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80011ec:	461a      	mov	r2, r3
 80011ee:	f006 fde9 	bl	8007dc4 <arm_mat_sub_f32>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800120e:	461a      	mov	r2, r3
 8001210:	f006 fe42 	bl	8007e98 <arm_mat_mult_f32>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PIDVelocityController_Init>:
 *  Created on: 4 Jun 2022
 *      Author: mobil
 */

#include "PIDVelocity.h"
void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001272:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001280:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 8001284:	ed97 7a02 	vldr	s14, [r7, #8]
 8001288:	edd7 7a01 	vldr	s15, [r7, #4]
 800128c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001290:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	edd7 7a05 	vldr	s15, [r7, #20]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * error);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	ee17 0a90 	vmov	r0, s15
 80012e2:	f7ff f8dd 	bl	80004a0 <__aeabi_f2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8d6 	bl	80004a0 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	f7fe ff74 	bl	80001e4 <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4690      	mov	r8, r2
 8001302:	4699      	mov	r9, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f8c9 	bl	80004a0 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4640      	mov	r0, r8
 8001314:	4649      	mov	r1, r9
 8001316:	f7ff f91b 	bl	8000550 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ff5d 	bl	80001e0 <__aeabi_dsub>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error))	;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	ed93 7a02 	vldr	s14, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f8ad 	bl	80004a0 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7fe ff49 	bl	80001e4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fb0b 	bl	8000974 <__aeabi_d2f>
 800135e:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ed93 7a07 	vldr	s14, [r3, #28]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	edd3 7a06 	vldr	s15, [r3, #24]
 800137a:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a04 	vldr	s15, [r3, #16]
 800139a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	dd04      	ble.n	80013ae <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
 80013ac:	e00e      	b.n	80013cc <PIDVelocityController_Update+0x15a>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d503      	bpl.n	80013cc <PIDVelocityController_Update+0x15a>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last1Error = error;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

	return pidVelocity->ControllerOut;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013f6 <AbsVal>:

#include "Trajectory.h"


float AbsVal(float number)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	d50e      	bpl.n	800142c <AbsVal+0x36>
  {
    return number*-1.0;
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f846 	bl	80004a0 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff faaa 	bl	8000974 <__aeabi_d2f>
 8001420:	4603      	mov	r3, r0
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef1 7a67 	vneg.f32	s15, s15
 800142a:	e001      	b.n	8001430 <AbsVal+0x3a>
  }
  else
  {
    return number;
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <CoefficientAndTimeCalculation>:
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  (Vmax *360.0/60.0)*gain;
}

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 800143c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001440:	b088      	sub	sp, #32
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	ed87 0a02 	vstr	s0, [r7, #8]
 800144a:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	float gain = 0.0;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
	// Check Direction
	if(traject -> QRelative < 0.0)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d508      	bpl.n	800149c <CoefficientAndTimeCalculation+0x60>
	{
		gain = -1.0;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <CoefficientAndTimeCalculation+0x138>)
 800148c:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  -17.19; // 0.3 rad/s^2 to deg/sec^2
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a39      	ldr	r2, [pc, #228]	; (8001578 <CoefficientAndTimeCalculation+0x13c>)
 8001492:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  -114.6; // 2.0 rad/s^3 to deg/sec^3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a39      	ldr	r2, [pc, #228]	; (800157c <CoefficientAndTimeCalculation+0x140>)
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	e008      	b.n	80014ae <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 800149c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014a0:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  17.19; // 0.3 rad/s^2 to deg/sec^2
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <CoefficientAndTimeCalculation+0x144>)
 80014a6:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6; // 2.0 rad/s^3 to deg/sec^3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a36      	ldr	r2, [pc, #216]	; (8001584 <CoefficientAndTimeCalculation+0x148>)
 80014ac:	605a      	str	r2, [r3, #4]
	}
	// Find Speed limit
	float Vmax = 0.0;
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
	float Vcheck = AbsVal(traject -> QRelative);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f7ff ff9a 	bl	80013f6 <AbsVal>
 80014c2:	ed87 0a05 	vstr	s0, [r7, #20]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 80014c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	db0b      	blt.n	80014f0 <CoefficientAndTimeCalculation+0xb4>
 80014d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80014e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	d502      	bpl.n	80014f0 <CoefficientAndTimeCalculation+0xb4>
	{
		Vmax = 0.4f;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <CoefficientAndTimeCalculation+0x14c>)
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	e061      	b.n	80015b4 <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 20.0  && Vcheck < 60.0)
 80014f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	db0c      	blt.n	800151c <CoefficientAndTimeCalculation+0xe0>
 8001502:	edd7 7a05 	vldr	s15, [r7, #20]
 8001506:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800158c <CoefficientAndTimeCalculation+0x150>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d503      	bpl.n	800151c <CoefficientAndTimeCalculation+0xe0>
	{
		Vmax = 2.0f;
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	e04b      	b.n	80015b4 <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 800151c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001520:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800158c <CoefficientAndTimeCalculation+0x150>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	db0c      	blt.n	8001548 <CoefficientAndTimeCalculation+0x10c>
 800152e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001532:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001590 <CoefficientAndTimeCalculation+0x154>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d503      	bpl.n	8001548 <CoefficientAndTimeCalculation+0x10c>
	{
		Vmax = 4.0f;
 8001540:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	e035      	b.n	80015b4 <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 8001548:	edd7 7a05 	vldr	s15, [r7, #20]
 800154c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001590 <CoefficientAndTimeCalculation+0x154>
 8001550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	db20      	blt.n	800159c <CoefficientAndTimeCalculation+0x160>
 800155a:	edd7 7a05 	vldr	s15, [r7, #20]
 800155e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001598 <CoefficientAndTimeCalculation+0x15c>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d517      	bpl.n	800159c <CoefficientAndTimeCalculation+0x160>
	{
		Vmax = 6.0f;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <CoefficientAndTimeCalculation+0x158>)
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e020      	b.n	80015b4 <CoefficientAndTimeCalculation+0x178>
 8001572:	bf00      	nop
 8001574:	bf800000 	.word	0xbf800000
 8001578:	c189851f 	.word	0xc189851f
 800157c:	c2e53333 	.word	0xc2e53333
 8001580:	4189851f 	.word	0x4189851f
 8001584:	42e53333 	.word	0x42e53333
 8001588:	3ecccccd 	.word	0x3ecccccd
 800158c:	42700000 	.word	0x42700000
 8001590:	42c80000 	.word	0x42c80000
 8001594:	40c00000 	.word	0x40c00000
 8001598:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 800159c:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001598 <CoefficientAndTimeCalculation+0x15c>
 80015a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	db02      	blt.n	80015b4 <CoefficientAndTimeCalculation+0x178>
	{
		Vmax = 8.0f;
 80015ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80015b2:	61bb      	str	r3, [r7, #24]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  (Vmax *360.0/60.0)*gain;
 80015b4:	69b8      	ldr	r0, [r7, #24]
 80015b6:	f7fe ff73 	bl	80004a0 <__aeabi_f2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4bc8      	ldr	r3, [pc, #800]	; (80018e0 <CoefficientAndTimeCalculation+0x4a4>)
 80015c0:	f7fe ffc6 	bl	8000550 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4bc4      	ldr	r3, [pc, #784]	; (80018e4 <CoefficientAndTimeCalculation+0x4a8>)
 80015d2:	f7ff f8e7 	bl	80007a4 <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4690      	mov	r8, r2
 80015dc:	4699      	mov	r9, r3
 80015de:	69f8      	ldr	r0, [r7, #28]
 80015e0:	f7fe ff5e 	bl	80004a0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4640      	mov	r0, r8
 80015ea:	4649      	mov	r1, r9
 80015ec:	f7fe ffb0 	bl	8000550 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff f9bc 	bl	8000974 <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	609a      	str	r2, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edd3 6a00 	vldr	s13, [r3]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 7a01 	vldr	s15, [r3, #4]
 800160e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	ed93 6a02 	vldr	s12, [r3, #8]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001632:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 6a00 	vldr	s13, [r3]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	ed93 7a01 	vldr	s14, [r3, #4]
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	edd3 6a02 	vldr	s13, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	edd3 6a00 	vldr	s13, [r3]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	edd3 7a01 	vldr	s15, [r3, #4]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80016a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fed7 	bl	80004a0 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f93b 	bl	8000974 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef1 7a67 	vneg.f32	s15, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fec0 	bl	80004a0 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f924 	bl	8000974 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef1 7a67 	vneg.f32	s15, s15
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	edd3 6a01 	vldr	s13, [r3, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800176e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	ed93 7a01 	vldr	s14, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe7e 	bl	80004a0 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f8e2 	bl	8000974 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef1 7a67 	vneg.f32	s15, s15
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe6b 	bl	80004a0 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	ee17 0a90 	vmov	r0, s15
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fcf4 	bl	80001e0 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f8b8 	bl	8000974 <__aeabi_d2f>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	ed93 7a03 	vldr	s14, [r3, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800184e:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 6a04 	vldr	s13, [r3, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001864:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001870:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001880:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	ed93 7a04 	vldr	s14, [r3, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80018ce:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 80018de:	e003      	b.n	80018e8 <CoefficientAndTimeCalculation+0x4ac>
 80018e0:	40768000 	.word	0x40768000
 80018e4:	404e0000 	.word	0x404e0000
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800190a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800190e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001912:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800193a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800194a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001958:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800196e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001976:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800197a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800198a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800198e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	ed93 7a06 	vldr	s14, [r3, #24]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80019d8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 6a07 	vldr	s13, [r3, #28]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a7a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001aee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001afa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001b4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001b90:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ba6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001bbc:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bd2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bda:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001be2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bf2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c4a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001c70:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	edd3 6a05 	vldr	s13, [r3, #20]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c9c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cb2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cb6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cba:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d22:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d2a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d66:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d78:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d7c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d92:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d9a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001da2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001db2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001dec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001e30:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edd3 6a07 	vldr	s13, [r3, #28]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001e5c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e72:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e7a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	ed93 7a07 	vldr	s14, [r3, #28]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001eee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001f10:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f38:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f3c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f5a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001fac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002006:	ee26 6a27 	vmul.f32	s12, s12, s15
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002010:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800201c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002032:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002036:	ee26 6a27 	vmul.f32	s12, s12, s15
 800203a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800203e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002042:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002052:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800206e:	bf00      	nop

08002070 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 800207c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002084:	1a84      	subs	r4, r0, r2
 8002086:	eb61 0503 	sbc.w	r5, r1, r3
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe fa29 	bl	80004e4 <__aeabi_ul2d>
 8002092:	a396      	add	r3, pc, #600	; (adr r3, 80022ec <TrajectoryEvaluation+0x27c>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fb84 	bl	80007a4 <__aeabi_ddiv>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fc66 	bl	8000974 <__aeabi_d2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a8f      	ldr	r2, [pc, #572]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80020ac:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80020ae:	4b8e      	ldr	r3, [pc, #568]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	f2c0 8084 	blt.w	80021c8 <TrajectoryEvaluation+0x158>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	dd78      	ble.n	80021c8 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80020e6:	4b80      	ldr	r3, [pc, #512]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	ed93 7a03 	vldr	s14, [r3, #12]
 8002106:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800211e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002128:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002154:	ed93 6a00 	vldr	s12, [r3]
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002162:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee66 7a27 	vmul.f32	s15, s12, s15
 800216c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002170:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002174:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002184:	ed93 6a00 	vldr	s12, [r3]
 8002188:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002192:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002196:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800219a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800219e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80021c6:	e37e      	b.n	80028c6 <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	f200 808a 	bhi.w	80022f4 <TrajectoryEvaluation+0x284>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd7e      	ble.n	80022f4 <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	ed93 7a04 	vldr	s14, [r3, #16]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	ed93 7a04 	vldr	s14, [r3, #16]
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002228:	edd3 6a00 	vldr	s13, [r3]
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800223e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002274:	ed93 6a00 	vldr	s12, [r3]
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <TrajectoryEvaluation+0x278>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <TrajectoryEvaluation+0x278>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee66 7a27 	vmul.f32	s15, s12, s15
 800228c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002290:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002294:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80022a4:	ed93 6a00 	vldr	s12, [r3]
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <TrajectoryEvaluation+0x278>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80022e6:	e2ee      	b.n	80028c6 <TrajectoryEvaluation+0x856>
 80022e8:	20000494 	.word	0x20000494
 80022ec:	00000000 	.word	0x00000000
 80022f0:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80022fa:	4b8e      	ldr	r3, [pc, #568]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	f200 8084 	bhi.w	8002414 <TrajectoryEvaluation+0x3a4>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	dd78      	ble.n	8002414 <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002332:	4b80      	ldr	r3, [pc, #512]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002354:	edd3 6a00 	vldr	s13, [r3]
 8002358:	4b76      	ldr	r3, [pc, #472]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800236a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	edd3 6a05 	vldr	s13, [r3, #20]
 800239e:	4b65      	ldr	r3, [pc, #404]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023a0:	ed93 6a00 	vldr	s12, [r3]
 80023a4:	4b63      	ldr	r3, [pc, #396]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023bc:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023ce:	4b59      	ldr	r3, [pc, #356]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023d0:	ed93 6a00 	vldr	s12, [r3]
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80023f4:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002412:	e258      	b.n	80028c6 <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	f200 8086 	bhi.w	8002538 <TrajectoryEvaluation+0x4c8>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002432:	4b40      	ldr	r3, [pc, #256]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd7a      	ble.n	8002538 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002474:	edd3 6a00 	vldr	s13, [r3]
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800248a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80024a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	edd3 6a06 	vldr	s13, [r3, #24]
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80024c0:	ed93 6a00 	vldr	s12, [r3]
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024dc:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80024e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80024f0:	ed93 6a00 	vldr	s12, [r3]
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002502:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002506:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800250a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <TrajectoryEvaluation+0x4c4>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002532:	e1c8      	b.n	80028c6 <TrajectoryEvaluation+0x856>
 8002534:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800253e:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	f200 8084 	bhi.w	8002658 <TrajectoryEvaluation+0x5e8>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	dd78      	ble.n	8002658 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	ed93 7a07 	vldr	s14, [r3, #28]
 8002576:	4b80      	ldr	r3, [pc, #512]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	ed93 7a07 	vldr	s14, [r3, #28]
 8002596:	4b78      	ldr	r3, [pc, #480]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002598:	edd3 6a00 	vldr	s13, [r3]
 800259c:	4b76      	ldr	r3, [pc, #472]	; (8002778 <TrajectoryEvaluation+0x708>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <TrajectoryEvaluation+0x708>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	edd3 6a07 	vldr	s13, [r3, #28]
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <TrajectoryEvaluation+0x708>)
 80025e4:	ed93 6a00 	vldr	s12, [r3]
 80025e8:	4b63      	ldr	r3, [pc, #396]	; (8002778 <TrajectoryEvaluation+0x708>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <TrajectoryEvaluation+0x708>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002600:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002604:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002614:	ed93 6a00 	vldr	s12, [r3]
 8002618:	4b57      	ldr	r3, [pc, #348]	; (8002778 <TrajectoryEvaluation+0x708>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002626:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800262a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800262e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <TrajectoryEvaluation+0x708>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002656:	e136      	b.n	80028c6 <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	f200 8086 	bhi.w	800277c <TrajectoryEvaluation+0x70c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	dd7a      	ble.n	800277c <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	ed93 7a08 	vldr	s14, [r3, #32]
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <TrajectoryEvaluation+0x708>)
 80026b8:	edd3 6a00 	vldr	s13, [r3]
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <TrajectoryEvaluation+0x708>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <TrajectoryEvaluation+0x708>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002704:	ed93 6a00 	vldr	s12, [r3]
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <TrajectoryEvaluation+0x708>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee66 7a27 	vmul.f32	s15, s12, s15
 800271c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002720:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002724:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <TrajectoryEvaluation+0x708>)
 8002734:	ed93 6a00 	vldr	s12, [r3]
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <TrajectoryEvaluation+0x708>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002742:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002746:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800274a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <TrajectoryEvaluation+0x708>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002776:	e0a6      	b.n	80028c6 <TrajectoryEvaluation+0x856>
 8002778:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <TrajectoryEvaluation+0x860>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	f200 8084 	bhi.w	800289c <TrajectoryEvaluation+0x82c>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <TrajectoryEvaluation+0x860>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	dd78      	ble.n	800289c <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027ba:	4b45      	ldr	r3, [pc, #276]	; (80028d0 <TrajectoryEvaluation+0x860>)
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <TrajectoryEvaluation+0x860>)
 80027dc:	edd3 6a00 	vldr	s13, [r3]
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <TrajectoryEvaluation+0x860>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <TrajectoryEvaluation+0x860>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <TrajectoryEvaluation+0x860>)
 8002828:	ed93 6a00 	vldr	s12, [r3]
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <TrajectoryEvaluation+0x860>)
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <TrajectoryEvaluation+0x860>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002840:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002844:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002848:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800284c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <TrajectoryEvaluation+0x860>)
 8002858:	ed93 6a00 	vldr	s12, [r3]
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <TrajectoryEvaluation+0x860>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002866:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800286a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800286e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <TrajectoryEvaluation+0x860>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800289a:	e014      	b.n	80028c6 <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 80028c6:	bf00      	nop
}
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000494 	.word	0x20000494

080028d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d8:	f000 ffda 	bl	8003890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028dc:	f000 f868 	bl	80029b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e0:	f000 fabe 	bl	8002e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028e4:	f000 fa92 	bl	8002e0c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80028e8:	f000 f8f8 	bl	8002adc <MX_TIM1_Init>
  MX_TIM2_Init();
 80028ec:	f000 f97a 	bl	8002be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80028f0:	f000 f9cc 	bl	8002c8c <MX_TIM3_Init>
  MX_TIM11_Init();
 80028f4:	f000 fa66 	bl	8002dc4 <MX_TIM11_Init>
  MX_I2C1_Init();
 80028f8:	f000 f8c2 	bl	8002a80 <MX_I2C1_Init>
  MX_TIM4_Init();
 80028fc:	f000 fa14 	bl	8002d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  KalmanMatrixInit(&KalmanVar);
 8002900:	481c      	ldr	r0, [pc, #112]	; (8002974 <main+0xa0>)
 8002902:	f7fe fa09 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002906:	2100      	movs	r1, #0
 8002908:	481b      	ldr	r0, [pc, #108]	; (8002978 <main+0xa4>)
 800290a:	f003 feff 	bl	800670c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 800290e:	481b      	ldr	r0, [pc, #108]	; (800297c <main+0xa8>)
 8002910:	f003 fe4a 	bl	80065a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002914:	481a      	ldr	r0, [pc, #104]	; (8002980 <main+0xac>)
 8002916:	f003 fe47 	bl	80065a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4);
 800291a:	481a      	ldr	r0, [pc, #104]	; (8002984 <main+0xb0>)
 800291c:	f003 fe44 	bl	80065a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002920:	213c      	movs	r1, #60	; 0x3c
 8002922:	4819      	ldr	r0, [pc, #100]	; (8002988 <main+0xb4>)
 8002924:	f004 f848 	bl	80069b8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	461a      	mov	r2, r3
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <main+0xb8>)
 8002932:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <main+0xb8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <main+0xb8>)
 800293a:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <main+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <main+0xbc>)
 8002942:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002944:	4813      	ldr	r0, [pc, #76]	; (8002994 <main+0xc0>)
 8002946:	f7fe fc6e 	bl	8001226 <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 800294a:	4813      	ldr	r0, [pc, #76]	; (8002998 <main+0xc4>)
 800294c:	f7fe fc6b 	bl	8001226 <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,-150.0,-90.0);
 8002950:	eddf 0a12 	vldr	s1, [pc, #72]	; 800299c <main+0xc8>
 8002954:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80029a0 <main+0xcc>
 8002958:	4812      	ldr	r0, [pc, #72]	; (80029a4 <main+0xd0>)
 800295a:	f7fe fd6f 	bl	800143c <CoefficientAndTimeCalculation>

  btncheck = 0;
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <main+0xd4>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  PWMupdate = 0;
 8002964:	4911      	ldr	r1, [pc, #68]	; (80029ac <main+0xd8>)
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002972:	e7fe      	b.n	8002972 <main+0x9e>
 8002974:	20000000 	.word	0x20000000
 8002978:	200004ec 	.word	0x200004ec
 800297c:	2000060c 	.word	0x2000060c
 8002980:	2000057c 	.word	0x2000057c
 8002984:	200005c4 	.word	0x200005c4
 8002988:	20000534 	.word	0x20000534
 800298c:	200006a0 	.word	0x200006a0
 8002990:	200006ac 	.word	0x200006ac
 8002994:	20000354 	.word	0x20000354
 8002998:	20000384 	.word	0x20000384
 800299c:	c2b40000 	.word	0xc2b40000
 80029a0:	c3160000 	.word	0xc3160000
 80029a4:	200003b4 	.word	0x200003b4
 80029a8:	200006e8 	.word	0x200006e8
 80029ac:	200006f0 	.word	0x200006f0

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	2230      	movs	r2, #48	; 0x30
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fca2 	bl	8008308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <SystemClock_Config+0xc8>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <SystemClock_Config+0xc8>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <SystemClock_Config+0xc8>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <SystemClock_Config+0xcc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <SystemClock_Config+0xcc>)
 80029fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <SystemClock_Config+0xcc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a14:	2310      	movs	r3, #16
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a20:	2308      	movs	r3, #8
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 f8cf 	bl	8005bd8 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a40:	f000 fc9c 	bl	800337c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fb31 	bl	80060c8 <HAL_RCC_ClockConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a6c:	f000 fc86 	bl	800337c <Error_Handler>
  }
}
 8002a70:	bf00      	nop
 8002a72:	3750      	adds	r7, #80	; 0x50
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000

08002a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <MX_I2C1_Init+0x54>)
 8002a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <MX_I2C1_Init+0x58>)
 8002a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_I2C1_Init+0x50>)
 8002abe:	f001 fa6b 	bl	8003f98 <HAL_I2C_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ac8:	f000 fc58 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000498 	.word	0x20000498
 8002ad4:	40005400 	.word	0x40005400
 8002ad8:	00061a80 	.word	0x00061a80

08002adc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b092      	sub	sp, #72	; 0x48
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
 8002afc:	615a      	str	r2, [r3, #20]
 8002afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2220      	movs	r2, #32
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 fbfe 	bl	8008308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b0c:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b0e:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <MX_TIM1_Init+0x104>)
 8002b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b20:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b38:	4828      	ldr	r0, [pc, #160]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b3a:	f003 fd97 	bl	800666c <HAL_TIM_PWM_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002b44:	f000 fc1a 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b54:	4619      	mov	r1, r3
 8002b56:	4821      	ldr	r0, [pc, #132]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b58:	f004 fd42 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002b62:	f000 fc0b 	bl	800337c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b66:	2360      	movs	r3, #96	; 0x60
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b72:	2300      	movs	r3, #0
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	2200      	movs	r2, #0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4814      	ldr	r0, [pc, #80]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002b8c:	f004 f8aa 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b96:	f000 fbf1 	bl	800337c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002bbe:	f004 fd7d 	bl	80076bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002bc8:	f000 fbd8 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <MX_TIM1_Init+0x100>)
 8002bce:	f000 fd2d 	bl	800362c <HAL_TIM_MspPostInit>

}
 8002bd2:	bf00      	nop
 8002bd4:	3748      	adds	r7, #72	; 0x48
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200004ec 	.word	0x200004ec
 8002be0:	40010000 	.word	0x40010000

08002be4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 fb88 	bl	8008308 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002c14:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c16:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c30:	2301      	movs	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c40:	2301      	movs	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4619      	mov	r1, r3
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c54:	f003 fe0a 	bl	800686c <HAL_TIM_Encoder_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c5e:	f000 fb8d 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4806      	ldr	r0, [pc, #24]	; (8002c88 <MX_TIM2_Init+0xa4>)
 8002c70:	f004 fcb6 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c7a:	f000 fb7f 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	3730      	adds	r7, #48	; 0x30
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000534 	.word	0x20000534

08002c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <MX_TIM3_Init+0x98>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002cae:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cb0:	2209      	movs	r2, #9
 8002cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cce:	4814      	ldr	r0, [pc, #80]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cd0:	f003 fc1a 	bl	8006508 <HAL_TIM_Base_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002cda:	f000 fb4f 	bl	800337c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ce4:	f107 0308 	add.w	r3, r7, #8
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480d      	ldr	r0, [pc, #52]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002cec:	f004 f8bc 	bl	8006e68 <HAL_TIM_ConfigClockSource>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002cf6:	f000 fb41 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	4619      	mov	r1, r3
 8002d06:	4806      	ldr	r0, [pc, #24]	; (8002d20 <MX_TIM3_Init+0x94>)
 8002d08:	f004 fc6a 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d12:	f000 fb33 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000057c 	.word	0x2000057c
 8002d24:	40000400 	.word	0x40000400

08002d28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <MX_TIM4_Init+0x98>)
 8002d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d4c:	2209      	movs	r2, #9
 8002d4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d58:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d6c:	f003 fbcc 	bl	8006508 <HAL_TIM_Base_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d76:	f000 fb01 	bl	800337c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	4619      	mov	r1, r3
 8002d86:	480d      	ldr	r0, [pc, #52]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002d88:	f004 f86e 	bl	8006e68 <HAL_TIM_ConfigClockSource>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d92:	f000 faf3 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <MX_TIM4_Init+0x94>)
 8002da4:	f004 fc1c 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002dae:	f000 fae5 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200005c4 	.word	0x200005c4
 8002dc0:	40000800 	.word	0x40000800

08002dc4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <MX_TIM11_Init+0x44>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002dd0:	2263      	movs	r2, #99	; 0x63
 8002dd2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_TIM11_Init+0x40>)
 8002df0:	f003 fb8a 	bl	8006508 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002dfa:	f000 fabf 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000060c 	.word	0x2000060c
 8002e08:	40014800 	.word	0x40014800

08002e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_USART2_UART_Init+0x50>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART2_UART_Init+0x4c>)
 8002e44:	f004 fca0 	bl	8007788 <HAL_UART_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e4e:	f000 fa95 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000654 	.word	0x20000654
 8002e5c:	40004400 	.word	0x40004400

08002e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a4c      	ldr	r2, [pc, #304]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a45      	ldr	r2, [pc, #276]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <MX_GPIO_Init+0x150>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002eec:	4831      	ldr	r0, [pc, #196]	; (8002fb4 <MX_GPIO_Init+0x154>)
 8002eee:	f001 f807 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2118      	movs	r1, #24
 8002ef6:	4830      	ldr	r0, [pc, #192]	; (8002fb8 <MX_GPIO_Init+0x158>)
 8002ef8:	f001 f802 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	482a      	ldr	r0, [pc, #168]	; (8002fbc <MX_GPIO_Init+0x15c>)
 8002f14:	f000 fe70 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002f18:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4820      	ldr	r0, [pc, #128]	; (8002fb4 <MX_GPIO_Init+0x154>)
 8002f32:	f000 fe61 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8002f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <MX_GPIO_Init+0x154>)
 8002f4e:	f000 fe53 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 8002f52:	2318      	movs	r3, #24
 8002f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f107 0314 	add.w	r3, r7, #20
 8002f66:	4619      	mov	r1, r3
 8002f68:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <MX_GPIO_Init+0x158>)
 8002f6a:	f000 fe45 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <MX_GPIO_Init+0x158>)
 8002f84:	f000 fe38 	bl	8003bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	2017      	movs	r0, #23
 8002f8e:	f000 fdcc 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f92:	2017      	movs	r0, #23
 8002f94:	f000 fde5 	bl	8003b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2028      	movs	r0, #40	; 0x28
 8002f9e:	f000 fdc4 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fa2:	2028      	movs	r0, #40	; 0x28
 8002fa4:	f000 fddd 	bl	8003b62 <HAL_NVIC_EnableIRQ>

}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <EncoderRead+0x100>)
 8002fce:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <EncoderRead+0x100>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <EncoderRead+0x100>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	1ad2      	subs	r2, r2, r3
 8002fda:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <EncoderRead+0x104>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	425b      	negs	r3, r3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	da07      	bge.n	8002ff4 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002fe4:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <EncoderRead+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002fec:	3320      	adds	r3, #32
 8002fee:	4a36      	ldr	r2, [pc, #216]	; (80030c8 <EncoderRead+0x108>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e00f      	b.n	8003014 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002ff4:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <EncoderRead+0x100>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <EncoderRead+0x100>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	1ad2      	subs	r2, r2, r3
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <EncoderRead+0x104>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	db06      	blt.n	8003014 <EncoderRead+0x54>
		WrappingStep-=12000;
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <EncoderRead+0x108>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800300e:	3b20      	subs	r3, #32
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <EncoderRead+0x108>)
 8003012:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <EncoderRead+0x100>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <EncoderRead+0x108>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4413      	add	r3, r2
 800301e:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <EncoderRead+0x10c>)
 8003020:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg = (PositionRaw/12000.0)*360.0;
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <EncoderRead+0x10c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa28 	bl	800047c <__aeabi_i2d>
 800302c:	a322      	add	r3, pc, #136	; (adr r3, 80030b8 <EncoderRead+0xf8>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd fbb7 	bl	80007a4 <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <EncoderRead+0x110>)
 8003044:	f7fd fa84 	bl	8000550 <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fc90 	bl	8000974 <__aeabi_d2f>
 8003054:	4603      	mov	r3, r0
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <EncoderRead+0x114>)
 8003058:	6013      	str	r3, [r2, #0]
	VelocityDeg = (((EncoderRawData[0] - EncoderRawData[1])/dt)/12000.0)*360.0;
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <EncoderRead+0x100>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <EncoderRead+0x100>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80030d8 <EncoderRead+0x118>
 8003070:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003074:	ee16 0a90 	vmov	r0, s13
 8003078:	f7fd fa12 	bl	80004a0 <__aeabi_f2d>
 800307c:	a30e      	add	r3, pc, #56	; (adr r3, 80030b8 <EncoderRead+0xf8>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd fb8f 	bl	80007a4 <__aeabi_ddiv>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <EncoderRead+0x110>)
 8003094:	f7fd fa5c 	bl	8000550 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fc68 	bl	8000974 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <EncoderRead+0x11c>)
 80030a8:	6013      	str	r3, [r2, #0]
	EncoderRawData[1] = EncoderRawData[0];
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <EncoderRead+0x100>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <EncoderRead+0x100>)
 80030b0:	6053      	str	r3, [r2, #4]
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	00000000 	.word	0x00000000
 80030bc:	40c77000 	.word	0x40c77000
 80030c0:	200006a0 	.word	0x200006a0
 80030c4:	20000468 	.word	0x20000468
 80030c8:	200006a8 	.word	0x200006a8
 80030cc:	200006ac 	.word	0x200006ac
 80030d0:	40768000 	.word	0x40768000
 80030d4:	200006b0 	.word	0x200006b0
 80030d8:	3a83126f 	.word	0x3a83126f
 80030dc:	200006b4 	.word	0x200006b4

080030e0 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da02      	bge.n	80030f4 <PWMAbs+0x14>
		return PWM*-1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	425b      	negs	r3, r3
 80030f2:	e000      	b.n	80030f6 <PWMAbs+0x16>
	}else{
		return PWM;
 80030f4:	687b      	ldr	r3, [r7, #4]
	}
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc11      	bgt.n	8003136 <Drivemotor+0x32>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <Drivemotor+0xa8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	db0d      	blt.n	8003136 <Drivemotor+0x32>
			htim1.Instance->CCR1=PWMAbs(PWM);
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <Drivemotor+0xac>)
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffde 	bl	80030e0 <PWMAbs>
 8003124:	4603      	mov	r3, r0
 8003126:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800312e:	4821      	ldr	r0, [pc, #132]	; (80031b4 <Drivemotor+0xb0>)
 8003130:	f000 fee6 	bl	8003f00 <HAL_GPIO_WritePin>
 8003134:	e036      	b.n	80031a4 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <Drivemotor+0xa8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	da0b      	bge.n	8003156 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <Drivemotor+0xac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f242 7210 	movw	r2, #10000	; 0x2710
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003148:	2200      	movs	r2, #0
 800314a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314e:	4819      	ldr	r0, [pc, #100]	; (80031b4 <Drivemotor+0xb0>)
 8003150:	f000 fed6 	bl	8003f00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003154:	e026      	b.n	80031a4 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db12      	blt.n	8003182 <Drivemotor+0x7e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003162:	4293      	cmp	r3, r2
 8003164:	dc0d      	bgt.n	8003182 <Drivemotor+0x7e>
			htim1.Instance->CCR1=PWMAbs(PWM);
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <Drivemotor+0xac>)
 8003168:	681c      	ldr	r4, [r3, #0]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffb8 	bl	80030e0 <PWMAbs>
 8003170:	4603      	mov	r3, r0
 8003172:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317a:	480e      	ldr	r0, [pc, #56]	; (80031b4 <Drivemotor+0xb0>)
 800317c:	f000 fec0 	bl	8003f00 <HAL_GPIO_WritePin>
 8003180:	e010      	b.n	80031a4 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f242 7210 	movw	r2, #10000	; 0x2710
 8003188:	4293      	cmp	r3, r2
 800318a:	dd0b      	ble.n	80031a4 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <Drivemotor+0xac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f242 7210 	movw	r2, #10000	; 0x2710
 8003194:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003196:	2201      	movs	r2, #1
 8003198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <Drivemotor+0xb0>)
 800319e:	f000 feaf 	bl	8003f00 <HAL_GPIO_WritePin>
}
 80031a2:	e7ff      	b.n	80031a4 <Drivemotor+0xa0>
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	ffffd8f0 	.word	0xffffd8f0
 80031b0:	200004ec 	.word	0x200004ec
 80031b4:	40020000 	.word	0x40020000

080031b8 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af02      	add	r7, sp, #8
	CurrentTime = Micros();
 80031be:	f000 f8c5 	bl	800334c <Micros>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	490b      	ldr	r1, [pc, #44]	; (80031f4 <ControllLoopAndErrorHandler+0x3c>)
 80031c8:	e9c1 2300 	strd	r2, r3, [r1]
	Drivemotor(2000.0);
 80031cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031d0:	f7ff ff98 	bl	8003104 <Drivemotor>
	TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <ControllLoopAndErrorHandler+0x40>)
 80031d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <ControllLoopAndErrorHandler+0x3c>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	e9cd 2300 	strd	r2, r3, [sp]
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <ControllLoopAndErrorHandler+0x44>)
 80031ea:	f7fe ff41 	bl	8002070 <TrajectoryEvaluation>
//		PIDVelocityController_Update(&PidPos,traject.QX, PositionDeg);
//		PIDVelocityController_Update(&PidVelo, traject.QV + PidPos.ControllerOut , KalmanVar.MatState_Data[1]);
//		PWMCHECKER = PidVelo.ControllerOut;
//		Drivemotor(PWMCHECKER);
//	  }
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200006c8 	.word	0x200006c8
 80031f8:	200006c0 	.word	0x200006c0
 80031fc:	200003b4 	.word	0x200003b4

08003200 <HAL_GPIO_EXTI_Callback>:
		I2CEndEffectorReadFlag = 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
//		I2CEndEffectorWriteFlag = 1;
//		I2CWriteFcn(dumdata,len,Endeff_ADDR);
////		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, 0b01000101, 1);
////		HAL_I2C_Mem_Write_IT(&hi2c1, Endeff_ADDR, Endeff_TEST, I2C_MEMADD_SIZE_16BIT, pData, Size);
//	}
	if(GPIO_Pin == GPIO_PIN_10)
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003210:	d103      	bne.n	800321a <HAL_GPIO_EXTI_Callback+0x1a>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003212:	2108      	movs	r1, #8
 8003214:	4809      	ldr	r0, [pc, #36]	; (800323c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003216:	f000 fe8c 	bl	8003f32 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b20      	cmp	r3, #32
 800321e:	d109      	bne.n	8003234 <HAL_GPIO_EXTI_Callback+0x34>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003220:	2110      	movs	r1, #16
 8003222:	4806      	ldr	r0, [pc, #24]	; (800323c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003224:	f000 fe85 	bl	8003f32 <HAL_GPIO_TogglePin>
		btncheck++;
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_GPIO_EXTI_Callback+0x40>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_GPIO_EXTI_Callback+0x40>)
 8003232:	701a      	strb	r2, [r3, #0]
	}
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40020400 	.word	0x40020400
 8003240:	200006e8 	.word	0x200006e8

08003244 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10c      	bne.n	8003270 <HAL_TIM_PeriodElapsedCallback+0x2c>
		_micro += 65535;
 8003256:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003260:	eb12 0801 	adds.w	r8, r2, r1
 8003264:	f143 0900 	adc.w	r9, r3, #0
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800326a:	e9c3 8900 	strd	r8, r9, [r3]
	//	PWMCHECKER = PidVelo.ControllerOut;
		//
		CheckLoopStopTime = Micros();
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
		}
}
 800326e:	e04f      	b.n	8003310 <HAL_TIM_PeriodElapsedCallback+0xcc>
	else if (htim == &htim3) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d109      	bne.n	800328c <HAL_TIM_PeriodElapsedCallback+0x48>
		ControllLoopAndErrorHandler();
 8003278:	f7ff ff9e 	bl	80031b8 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 800327c:	f000 f866 	bl	800334c <Micros>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4928      	ldr	r1, [pc, #160]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003286:	e9c1 2300 	strd	r2, r3, [r1]
}
 800328a:	e041      	b.n	8003310 <HAL_TIM_PeriodElapsedCallback+0xcc>
	else if (htim == &htim4) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d13d      	bne.n	8003310 <HAL_TIM_PeriodElapsedCallback+0xcc>
		CheckLoopStartTime = Micros();
 8003294:	f000 f85a 	bl	800334c <Micros>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800329e:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 80032a2:	f7ff fe8d 	bl	8002fc0 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg);
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	4821      	ldr	r0, [pc, #132]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80032b2:	f7fd fe8b 	bl	8000fcc <KalmanFilterFunction>
		PIDVelocityController_Update(&PidPos,setpoint, PositionDeg);
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80032be:	ed93 7a00 	vldr	s14, [r3]
 80032c2:	eef0 0a47 	vmov.f32	s1, s14
 80032c6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ca:	481d      	ldr	r0, [pc, #116]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80032cc:	f7fd ffd1 	bl	8001272 <PIDVelocityController_Update>
		PIDVelocityController_Update(&PidVelo, PidPos.ControllerOut , KalmanVar.MatState_Data[1]);
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80032d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80032d8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80032dc:	eef0 0a47 	vmov.f32	s1, s14
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	4817      	ldr	r0, [pc, #92]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80032e6:	f7fd ffc4 	bl	8001272 <PIDVelocityController_Update>
		CheckLoopStopTime = Micros();
 80032ea:	f000 f82f 	bl	800334c <Micros>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	490d      	ldr	r1, [pc, #52]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80032f4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80032fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	1a84      	subs	r4, r0, r2
 8003306:	eb61 0503 	sbc.w	r5, r1, r3
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800330c:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800331a:	bf00      	nop
 800331c:	2000060c 	.word	0x2000060c
 8003320:	20000698 	.word	0x20000698
 8003324:	2000057c 	.word	0x2000057c
 8003328:	200006d8 	.word	0x200006d8
 800332c:	200005c4 	.word	0x200005c4
 8003330:	200006d0 	.word	0x200006d0
 8003334:	200006b0 	.word	0x200006b0
 8003338:	20000000 	.word	0x20000000
 800333c:	200006b8 	.word	0x200006b8
 8003340:	20000384 	.word	0x20000384
 8003344:	20000354 	.word	0x20000354
 8003348:	200006e0 	.word	0x200006e0

0800334c <Micros>:

uint64_t Micros(){
 800334c:	b4b0      	push	{r4, r5, r7}
 800334e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <Micros+0x28>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	4611      	mov	r1, r2
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <Micros+0x2c>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	1884      	adds	r4, r0, r2
 8003362:	eb41 0503 	adc.w	r5, r1, r3
 8003366:	4622      	mov	r2, r4
 8003368:	462b      	mov	r3, r5
}
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bcb0      	pop	{r4, r5, r7}
 8003372:	4770      	bx	lr
 8003374:	40014800 	.word	0x40014800
 8003378:	20000698 	.word	0x20000698

0800337c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
}
 8003382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003384:	e7fe      	b.n	8003384 <Error_Handler+0x8>
	...

08003388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_MspInit+0x4c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_MspInit+0x4c>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_MspInit+0x4c>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_MspInit+0x4c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <HAL_MspInit+0x4c>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_MspInit+0x4c>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033c6:	2007      	movs	r0, #7
 80033c8:	f000 fba4 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_I2C_MspInit+0xa4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d13c      	bne.n	8003474 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341c:	2312      	movs	r3, #18
 800341e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003428:	2304      	movs	r3, #4
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	4814      	ldr	r0, [pc, #80]	; (8003484 <HAL_I2C_MspInit+0xac>)
 8003434:	f000 fbe0 	bl	8003bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 8003442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_I2C_MspInit+0xa8>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2100      	movs	r1, #0
 8003458:	201f      	movs	r0, #31
 800345a:	f000 fb66 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800345e:	201f      	movs	r0, #31
 8003460:	f000 fb7f 	bl	8003b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2020      	movs	r0, #32
 800346a:	f000 fb5e 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800346e:	2020      	movs	r0, #32
 8003470:	f000 fb77 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003474:	bf00      	nop
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40005400 	.word	0x40005400
 8003480:	40023800 	.word	0x40023800
 8003484:	40020400 	.word	0x40020400

08003488 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_TIM_PWM_MspInit+0x48>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d115      	bne.n	80034c6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_TIM_PWM_MspInit+0x4c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <HAL_TIM_PWM_MspInit+0x4c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_TIM_PWM_MspInit+0x4c>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	201a      	movs	r0, #26
 80034bc:	f000 fb35 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034c0:	201a      	movs	r0, #26
 80034c2:	f000 fb4e 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d12b      	bne.n	8003552 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_TIM_Encoder_MspInit+0x84>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003532:	2303      	movs	r3, #3
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003542:	2301      	movs	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4804      	ldr	r0, [pc, #16]	; (8003560 <HAL_TIM_Encoder_MspInit+0x88>)
 800354e:	f000 fb53 	bl	8003bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000

08003564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_TIM_Base_MspInit+0xb8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d116      	bne.n	80035a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a28      	ldr	r2, [pc, #160]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	201d      	movs	r0, #29
 8003598:	f000 fac7 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800359c:	201d      	movs	r0, #29
 800359e:	f000 fae0 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80035a2:	e036      	b.n	8003612 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_TIM_Base_MspInit+0xc0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d116      	bne.n	80035dc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	2100      	movs	r1, #0
 80035ce:	201e      	movs	r0, #30
 80035d0:	f000 faab 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035d4:	201e      	movs	r0, #30
 80035d6:	f000 fac4 	bl	8003b62 <HAL_NVIC_EnableIRQ>
}
 80035da:	e01a      	b.n	8003612 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_TIM_Base_MspInit+0xc4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d115      	bne.n	8003612 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_TIM_Base_MspInit+0xbc>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	201a      	movs	r0, #26
 8003608:	f000 fa8f 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800360c:	201a      	movs	r0, #26
 800360e:	f000 faa8 	bl	8003b62 <HAL_NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40000400 	.word	0x40000400
 8003620:	40023800 	.word	0x40023800
 8003624:	40000800 	.word	0x40000800
 8003628:	40014800 	.word	0x40014800

0800362c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_TIM_MspPostInit+0x68>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d11e      	bne.n	800368c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_TIM_MspPostInit+0x6c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_TIM_MspPostInit+0x6c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_TIM_MspPostInit+0x6c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800366a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800366e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800367c:	2301      	movs	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	4619      	mov	r1, r3
 8003686:	4805      	ldr	r0, [pc, #20]	; (800369c <HAL_TIM_MspPostInit+0x70>)
 8003688:	f000 fab6 	bl	8003bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010000 	.word	0x40010000
 8003698:	40023800 	.word	0x40023800
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_UART_MspInit+0x84>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12b      	bne.n	800371a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_UART_MspInit+0x88>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036fa:	230c      	movs	r3, #12
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370a:	2307      	movs	r3, #7
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <HAL_UART_MspInit+0x8c>)
 8003716:	f000 fa6f 	bl	8003bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800371a:	bf00      	nop
 800371c:	3728      	adds	r7, #40	; 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40004400 	.word	0x40004400
 8003728:	40023800 	.word	0x40023800
 800372c:	40020000 	.word	0x40020000

08003730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <NMI_Handler+0x4>

08003736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800373a:	e7fe      	b.n	800373a <HardFault_Handler+0x4>

0800373c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <MemManage_Handler+0x4>

08003742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003746:	e7fe      	b.n	8003746 <BusFault_Handler+0x4>

08003748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800374c:	e7fe      	b.n	800374c <UsageFault_Handler+0x4>

0800374e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800377c:	f000 f8da 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}

08003784 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8003788:	2020      	movs	r0, #32
 800378a:	f000 fbed 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800379a:	f003 f99b 	bl	8006ad4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800379e:	4803      	ldr	r0, [pc, #12]	; (80037ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80037a0:	f003 f998 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200004ec 	.word	0x200004ec
 80037ac:	2000060c 	.word	0x2000060c

080037b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037b4:	4802      	ldr	r0, [pc, #8]	; (80037c0 <TIM3_IRQHandler+0x10>)
 80037b6:	f003 f98d 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000057c 	.word	0x2000057c

080037c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <TIM4_IRQHandler+0x10>)
 80037ca:	f003 f983 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200005c4 	.word	0x200005c4

080037d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <I2C1_EV_IRQHandler+0x10>)
 80037de:	f000 fd1f 	bl	8004220 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000498 	.word	0x20000498

080037ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <I2C1_ER_IRQHandler+0x10>)
 80037f2:	f000 fe86 	bl	8004502 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000498 	.word	0x20000498

08003800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8003804:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003808:	f000 fbae 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800380c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003810:	f000 fbaa 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <SystemInit+0x20>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <SystemInit+0x20>)
 8003824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800383c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003842:	490e      	ldr	r1, [pc, #56]	; (800387c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003844:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003848:	e002      	b.n	8003850 <LoopCopyDataInit>

0800384a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800384c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384e:	3304      	adds	r3, #4

08003850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003854:	d3f9      	bcc.n	800384a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003858:	4c0b      	ldr	r4, [pc, #44]	; (8003888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800385c:	e001      	b.n	8003862 <LoopFillZerobss>

0800385e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003860:	3204      	adds	r2, #4

08003862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003864:	d3fb      	bcc.n	800385e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003866:	f7ff ffd7 	bl	8003818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386a:	f004 fd29 	bl	80082c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800386e:	f7ff f831 	bl	80028d4 <main>
  bx  lr    
 8003872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800387c:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 8003880:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 8003884:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8003888:	200006fc 	.word	0x200006fc

0800388c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC_IRQHandler>
	...

08003890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_Init+0x40>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_Init+0x40>)
 80038a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_Init+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_Init+0x40>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b8:	2003      	movs	r0, #3
 80038ba:	f000 f92b 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038be:	2000      	movs	r0, #0
 80038c0:	f000 f808 	bl	80038d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c4:	f7ff fd60 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_InitTick+0x54>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_InitTick+0x58>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f943 	bl	8003b7e <HAL_SYSTICK_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00e      	b.n	8003920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d80a      	bhi.n	800391e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003908:	2200      	movs	r2, #0
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f000 f90b 	bl	8003b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_InitTick+0x5c>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2000046c 	.word	0x2000046c
 800392c:	20000474 	.word	0x20000474
 8003930:	20000470 	.word	0x20000470

08003934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_IncTick+0x20>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x24>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_IncTick+0x24>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000474 	.word	0x20000474
 8003958:	200006f8 	.word	0x200006f8

0800395c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return uwTick;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_GetTick+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200006f8 	.word	0x200006f8

08003974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db0b      	blt.n	8003a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4907      	ldr	r1, [pc, #28]	; (8003a10 <__NVIC_EnableIRQ+0x38>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2001      	movs	r0, #1
 80039fa:	fa00 f202 	lsl.w	r2, r0, r2
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	; (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	; (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	; 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
         );
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae0:	d301      	bcc.n	8003ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00f      	b.n	8003b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <SysTick_Config+0x40>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aee:	210f      	movs	r1, #15
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	f7ff ff8e 	bl	8003a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <SysTick_Config+0x40>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <SysTick_Config+0x40>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff29 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b3c:	f7ff ff3e 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7ff ff8e 	bl	8003a68 <NVIC_EncodePriority>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff5d 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff31 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ffa2 	bl	8003ad0 <SysTick_Config>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00c      	b.n	8003bce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be8:	b2db      	uxtb	r3, r3
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e159      	b.n	8003ec8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c14:	2201      	movs	r2, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	f040 8148 	bne.w	8003ec2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d005      	beq.n	8003c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d130      	bne.n	8003cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 0201 	and.w	r2, r3, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d017      	beq.n	8003ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d123      	bne.n	8003d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a2 	beq.w	8003ec2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	4a56      	ldr	r2, [pc, #344]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8e:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9a:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	220f      	movs	r2, #15
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a49      	ldr	r2, [pc, #292]	; (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_Init+0x202>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a48      	ldr	r2, [pc, #288]	; (8003eec <HAL_GPIO_Init+0x2f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_Init+0x1fe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_GPIO_Init+0x2f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a46      	ldr	r2, [pc, #280]	; (8003ef4 <HAL_GPIO_Init+0x2fc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_Init+0x1f6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a45      	ldr	r2, [pc, #276]	; (8003ef8 <HAL_GPIO_Init+0x300>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_Init+0x1f2>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e68:	4a24      	ldr	r2, [pc, #144]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	f67f aea2 	bls.w	8003c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	40020c00 	.word	0x40020c00
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f1c:	e003      	b.n	8003f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	041a      	lsls	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	400b      	ands	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f93a 	bl	8003200 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e12b      	b.n	8004202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fa0a 	bl	80033d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f002 fa5c 	bl	80064b8 <HAL_RCC_GetPCLK1Freq>
 8004000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a81      	ldr	r2, [pc, #516]	; (800420c <HAL_I2C_Init+0x274>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d807      	bhi.n	800401c <HAL_I2C_Init+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a80      	ldr	r2, [pc, #512]	; (8004210 <HAL_I2C_Init+0x278>)
 8004010:	4293      	cmp	r3, r2
 8004012:	bf94      	ite	ls
 8004014:	2301      	movls	r3, #1
 8004016:	2300      	movhi	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e006      	b.n	800402a <HAL_I2C_Init+0x92>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a7d      	ldr	r2, [pc, #500]	; (8004214 <HAL_I2C_Init+0x27c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	bf94      	ite	ls
 8004024:	2301      	movls	r3, #1
 8004026:	2300      	movhi	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0e7      	b.n	8004202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a78      	ldr	r2, [pc, #480]	; (8004218 <HAL_I2C_Init+0x280>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a6a      	ldr	r2, [pc, #424]	; (800420c <HAL_I2C_Init+0x274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d802      	bhi.n	800406c <HAL_I2C_Init+0xd4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	e009      	b.n	8004080 <HAL_I2C_Init+0xe8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a69      	ldr	r2, [pc, #420]	; (800421c <HAL_I2C_Init+0x284>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	3301      	adds	r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	495c      	ldr	r1, [pc, #368]	; (800420c <HAL_I2C_Init+0x274>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d819      	bhi.n	80040d4 <HAL_I2C_Init+0x13c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e59      	subs	r1, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040b4:	400b      	ands	r3, r1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_I2C_Init+0x138>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1e59      	subs	r1, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ce:	e051      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d0:	2304      	movs	r3, #4
 80040d2:	e04f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d111      	bne.n	8004100 <HAL_I2C_Init+0x168>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e012      	b.n	8004126 <HAL_I2C_Init+0x18e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Init+0x196>
 800412a:	2301      	movs	r3, #1
 800412c:	e022      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10e      	bne.n	8004154 <HAL_I2C_Init+0x1bc>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e58      	subs	r0, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	440b      	add	r3, r1
 8004144:	fbb0 f3f3 	udiv	r3, r0, r3
 8004148:	3301      	adds	r3, #1
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1e58      	subs	r0, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	0099      	lsls	r1, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	fbb0 f3f3 	udiv	r3, r0, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	6809      	ldr	r1, [r1, #0]
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6911      	ldr	r1, [r2, #16]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68d2      	ldr	r2, [r2, #12]
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	000186a0 	.word	0x000186a0
 8004210:	001e847f 	.word	0x001e847f
 8004214:	003d08ff 	.word	0x003d08ff
 8004218:	431bde83 	.word	0x431bde83
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d003      	beq.n	8004258 <HAL_I2C_EV_IRQHandler+0x38>
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	f040 80c1 	bne.w	80043da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <HAL_I2C_EV_IRQHandler+0x6e>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004278:	d003      	beq.n	8004282 <HAL_I2C_EV_IRQHandler+0x62>
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004280:	d101      	bne.n	8004286 <HAL_I2C_EV_IRQHandler+0x66>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x68>
 8004286:	2300      	movs	r3, #0
 8004288:	2b01      	cmp	r3, #1
 800428a:	f000 8132 	beq.w	80044f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x92>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	0a5b      	lsrs	r3, r3, #9
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 fc7b 	bl	8005ba0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fd83 	bl	8004db6 <I2C_Master_SB>
 80042b0:	e092      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	0a5b      	lsrs	r3, r3, #9
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fdf9 	bl	8004ec2 <I2C_Master_ADD10>
 80042d0:	e082      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	0a5b      	lsrs	r3, r3, #9
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fe13 	bl	8004f16 <I2C_Master_ADDR>
 80042f0:	e072      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03b      	beq.n	8004376 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430c:	f000 80f3 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	09db      	lsrs	r3, r3, #7
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <HAL_I2C_EV_IRQHandler+0x11c>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_I2C_EV_IRQHandler+0x11c>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f9f3 	bl	8004720 <I2C_MasterTransmit_TXE>
 800433a:	e04d      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80d6 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	0a5b      	lsrs	r3, r3, #9
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80cf 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	2b21      	cmp	r3, #33	; 0x21
 800435c:	d103      	bne.n	8004366 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa7a 	bl	8004858 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004364:	e0c7      	b.n	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	f040 80c4 	bne.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fae8 	bl	8004944 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004374:	e0bf      	b.n	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004384:	f000 80b7 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00f      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x194>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	0a9b      	lsrs	r3, r3, #10
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x194>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb5d 	bl	8004a6c <I2C_MasterReceive_RXNE>
 80043b2:	e011      	b.n	80043d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 809a 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	0a5b      	lsrs	r3, r3, #9
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8093 	beq.w	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fc06 	bl	8004be2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	e08e      	b.n	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043d8:	e08d      	b.n	80044f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e007      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x20e>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	0a5b      	lsrs	r3, r3, #9
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00c      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004424:	69b9      	ldr	r1, [r7, #24]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 ffc4 	bl	80053b4 <I2C_Slave_ADDR>
 800442c:	e066      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x22e>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fffe 	bl	8005448 <I2C_Slave_STOPF>
 800444c:	e056      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800444e:	7bbb      	ldrb	r3, [r7, #14]
 8004450:	2b21      	cmp	r3, #33	; 0x21
 8004452:	d002      	beq.n	800445a <HAL_I2C_EV_IRQHandler+0x23a>
 8004454:	7bbb      	ldrb	r3, [r7, #14]
 8004456:	2b29      	cmp	r3, #41	; 0x29
 8004458:	d125      	bne.n	80044a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	09db      	lsrs	r3, r3, #7
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x266>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	0a9b      	lsrs	r3, r3, #10
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x266>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 feda 	bl	8005238 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004484:	e039      	b.n	80044fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d033      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x2da>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02d      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff07 	bl	80052b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a4:	e029      	b.n	80044fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00f      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	0a9b      	lsrs	r3, r3, #10
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ff12 	bl	80052f4 <I2C_SlaveReceive_RXNE>
 80044d0:	e014      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00e      	beq.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	0a5b      	lsrs	r3, r3, #9
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 ff40 	bl	8005370 <I2C_SlaveReceive_BTF>
 80044f0:	e004      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	; 0x28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004524:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <HAL_I2C_ER_IRQHandler+0x4e>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800454e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <HAL_I2C_ER_IRQHandler+0x78>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f043 0302 	orr.w	r3, r3, #2
 800456e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004578:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	0a9b      	lsrs	r3, r3, #10
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03f      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0x104>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d039      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004592:	7efb      	ldrb	r3, [r7, #27]
 8004594:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80045ac:	7ebb      	ldrb	r3, [r7, #26]
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d112      	bne.n	80045d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b21      	cmp	r3, #33	; 0x21
 80045bc:	d008      	beq.n	80045d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b29      	cmp	r3, #41	; 0x29
 80045c2:	d005      	beq.n	80045d0 <HAL_I2C_ER_IRQHandler+0xce>
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b28      	cmp	r3, #40	; 0x28
 80045c8:	d106      	bne.n	80045d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b21      	cmp	r3, #33	; 0x21
 80045ce:	d103      	bne.n	80045d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f001 f869 	bl	80056a8 <I2C_Slave_AF>
 80045d6:	e016      	b.n	8004606 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045ea:	7efb      	ldrb	r3, [r7, #27]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d002      	beq.n	80045f6 <HAL_I2C_ER_IRQHandler+0xf4>
 80045f0:	7efb      	ldrb	r3, [r7, #27]
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d107      	bne.n	8004606 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004604:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	0adb      	lsrs	r3, r3, #11
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00e      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0x12e>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	f043 0308 	orr.w	r3, r3, #8
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800462e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 f8a0 	bl	8005788 <I2C_ITError>
  }
}
 8004648:	bf00      	nop
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
 80046ac:	4613      	mov	r3, r2
 80046ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004736:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	d150      	bne.n	80047e8 <I2C_MasterTransmit_TXE+0xc8>
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b21      	cmp	r3, #33	; 0x21
 800474a:	d14d      	bne.n	80047e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d01d      	beq.n	800478e <I2C_MasterTransmit_TXE+0x6e>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b20      	cmp	r3, #32
 8004756:	d01a      	beq.n	800478e <I2C_MasterTransmit_TXE+0x6e>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475e:	d016      	beq.n	800478e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800476e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2211      	movs	r2, #17
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ff62 	bl	8004650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800478c:	e060      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800479c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d107      	bne.n	80047d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff7d 	bl	80046d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047d6:	e03b      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff ff35 	bl	8004650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047e6:	e033      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b21      	cmp	r3, #33	; 0x21
 80047ec:	d005      	beq.n	80047fa <I2C_MasterTransmit_TXE+0xda>
 80047ee:	7bbb      	ldrb	r3, [r7, #14]
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d12d      	bne.n	8004850 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b22      	cmp	r3, #34	; 0x22
 80047f8:	d12a      	bne.n	8004850 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004814:	e01c      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d103      	bne.n	800482a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f88e 	bl	8004944 <I2C_MemoryTransmit_TXE_BTF>
}
 8004828:	e012      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800484e:	e7ff      	b.n	8004850 <I2C_MasterTransmit_TXE+0x130>
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b21      	cmp	r3, #33	; 0x21
 8004870:	d164      	bne.n	800493c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d012      	beq.n	80048a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048a0:	e04c      	b.n	800493c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d01d      	beq.n	80048e4 <I2C_MasterTransmit_BTF+0x8c>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d01a      	beq.n	80048e4 <I2C_MasterTransmit_BTF+0x8c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b4:	d016      	beq.n	80048e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2211      	movs	r2, #17
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff feb7 	bl	8004650 <HAL_I2C_MasterTxCpltCallback>
}
 80048e2:	e02b      	b.n	800493c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d107      	bne.n	800492e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fed2 	bl	80046d0 <HAL_I2C_MemTxCpltCallback>
}
 800492c:	e006      	b.n	800493c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fe8a 	bl	8004650 <HAL_I2C_MasterTxCpltCallback>
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10b      	bne.n	800497c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	b2da      	uxtb	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	1c9a      	adds	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800497a:	e073      	b.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	b29b      	uxth	r3, r3
 8004982:	121b      	asrs	r3, r3, #8
 8004984:	b2da      	uxtb	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004996:	e065      	b.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10b      	bne.n	80049b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049b6:	e055      	b.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d151      	bne.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b22      	cmp	r3, #34	; 0x22
 80049c4:	d10d      	bne.n	80049e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049e0:	e040      	b.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b21      	cmp	r3, #33	; 0x21
 80049f0:	d112      	bne.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a16:	e025      	b.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d120      	bne.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b21      	cmp	r3, #33	; 0x21
 8004a26:	d11d      	bne.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a36:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fe36 	bl	80046d0 <HAL_I2C_MemTxCpltCallback>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b22      	cmp	r3, #34	; 0x22
 8004a7e:	f040 80ac 	bne.w	8004bda <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d921      	bls.n	8004ad4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	f040 808c 	bne.w	8004bda <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ad2:	e082      	b.n	8004bda <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d075      	beq.n	8004bc8 <I2C_MasterReceive_RXNE+0x15c>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d002      	beq.n	8004ae8 <I2C_MasterReceive_RXNE+0x7c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d16f      	bne.n	8004bc8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 f827 	bl	8005b3c <I2C_WaitOnSTOPRequestThroughIT>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d142      	bne.n	8004b7a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d10a      	bne.n	8004b64 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fdc1 	bl	80046e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b62:	e03a      	b.n	8004bda <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2212      	movs	r2, #18
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fd76 	bl	8004664 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b78:	e02f      	b.n	8004bda <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fd99 	bl	80046f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bc6:	e008      	b.n	8004bda <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	605a      	str	r2, [r3, #4]
}
 8004bd8:	e7ff      	b.n	8004bda <I2C_MasterReceive_RXNE+0x16e>
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d11b      	bne.n	8004c32 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c08:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c30:	e0bd      	b.n	8004dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d129      	bne.n	8004c90 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00a      	beq.n	8004c68 <I2C_MasterReceive_BTF+0x86>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d007      	beq.n	8004c68 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c8e:	e08e      	b.n	8004dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d176      	bne.n	8004d88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d002      	beq.n	8004ca6 <I2C_MasterReceive_BTF+0xc4>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d108      	bne.n	8004cb8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e019      	b.n	8004cec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d002      	beq.n	8004cc4 <I2C_MasterReceive_BTF+0xe2>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d108      	bne.n	8004cd6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e00a      	b.n	8004cec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d007      	beq.n	8004cec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d10a      	bne.n	8004d72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fcba 	bl	80046e4 <HAL_I2C_MemRxCpltCallback>
}
 8004d70:	e01d      	b.n	8004dae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2212      	movs	r2, #18
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fc6f 	bl	8004664 <HAL_I2C_MasterRxCpltCallback>
}
 8004d86:	e012      	b.n	8004dae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d117      	bne.n	8004dfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004de4:	e067      	b.n	8004eb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
}
 8004df8:	e05d      	b.n	8004eb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e02:	d133      	bne.n	8004e6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b21      	cmp	r3, #33	; 0x21
 8004e0e:	d109      	bne.n	8004e24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e20:	611a      	str	r2, [r3, #16]
 8004e22:	e008      	b.n	8004e36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <I2C_Master_SB+0x92>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d032      	beq.n	8004eb6 <I2C_Master_SB+0x100>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02d      	beq.n	8004eb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	605a      	str	r2, [r3, #4]
}
 8004e6a:	e024      	b.n	8004eb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	11db      	asrs	r3, r3, #7
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 0306 	and.w	r3, r3, #6
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f063 030f 	orn	r3, r3, #15
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]
}
 8004e90:	e011      	b.n	8004eb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	11db      	asrs	r3, r3, #7
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0306 	and.w	r3, r3, #6
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f063 030e 	orn	r3, r3, #14
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <I2C_Master_ADD10+0x26>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <I2C_Master_ADD10+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	605a      	str	r2, [r3, #4]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b091      	sub	sp, #68	; 0x44
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b22      	cmp	r3, #34	; 0x22
 8004f3e:	f040 8169 	bne.w	8005214 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <I2C_Master_ADDR+0x54>
 8004f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d10b      	bne.n	8004f6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	633b      	str	r3, [r7, #48]	; 0x30
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	e160      	b.n	800522c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d11d      	bne.n	8004fae <I2C_Master_ADDR+0x98>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f7a:	d118      	bne.n	8004fae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	651a      	str	r2, [r3, #80]	; 0x50
 8004fac:	e13e      	b.n	800522c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e115      	b.n	800520c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	f040 808a 	bne.w	8005100 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff2:	d137      	bne.n	8005064 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005002:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d113      	bne.n	800503c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	e0e7      	b.n	800520c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	623b      	str	r3, [r7, #32]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e0d3      	b.n	800520c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	2b08      	cmp	r3, #8
 8005068:	d02e      	beq.n	80050c8 <I2C_Master_ADDR+0x1b2>
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	2b20      	cmp	r3, #32
 800506e:	d02b      	beq.n	80050c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	2b12      	cmp	r3, #18
 8005074:	d102      	bne.n	800507c <I2C_Master_ADDR+0x166>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b01      	cmp	r3, #1
 800507a:	d125      	bne.n	80050c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	2b04      	cmp	r3, #4
 8005080:	d00e      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	2b02      	cmp	r3, #2
 8005086:	d00b      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	2b10      	cmp	r3, #16
 800508c:	d008      	beq.n	80050a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e007      	b.n	80050b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	e0a1      	b.n	800520c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e085      	b.n	800520c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d14d      	bne.n	80051a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b04      	cmp	r3, #4
 800510e:	d016      	beq.n	800513e <I2C_Master_ADDR+0x228>
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	2b02      	cmp	r3, #2
 8005114:	d013      	beq.n	800513e <I2C_Master_ADDR+0x228>
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b10      	cmp	r3, #16
 800511a:	d010      	beq.n	800513e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e007      	b.n	800514e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515c:	d117      	bne.n	800518e <I2C_Master_ADDR+0x278>
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005164:	d00b      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	2b01      	cmp	r3, #1
 800516a:	d008      	beq.n	800517e <I2C_Master_ADDR+0x268>
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	2b08      	cmp	r3, #8
 8005170:	d005      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	2b10      	cmp	r3, #16
 8005176:	d002      	beq.n	800517e <I2C_Master_ADDR+0x268>
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	2b20      	cmp	r3, #32
 800517c:	d107      	bne.n	800518e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800518c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e032      	b.n	800520c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c4:	d117      	bne.n	80051f6 <I2C_Master_ADDR+0x2e0>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051cc:	d00b      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d008      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d005      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d002      	beq.n	80051e6 <I2C_Master_ADDR+0x2d0>
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d107      	bne.n	80051f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005212:	e00b      	b.n	800522c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	e7ff      	b.n	800522c <I2C_Master_ADDR+0x316>
 800522c:	bf00      	nop
 800522e:	3744      	adds	r7, #68	; 0x44
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02b      	beq.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d114      	bne.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b29      	cmp	r3, #41	; 0x29
 8005284:	d111      	bne.n	80052aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2221      	movs	r2, #33	; 0x21
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2228      	movs	r2, #40	; 0x28
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff f9e7 	bl	8004678 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02c      	beq.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d114      	bne.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b2a      	cmp	r3, #42	; 0x2a
 8005342:	d111      	bne.n	8005368 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005352:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2222      	movs	r2, #34	; 0x22
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff f992 	bl	800468c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d012      	beq.n	80053a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053ce:	2b28      	cmp	r3, #40	; 0x28
 80053d0:	d127      	bne.n	8005422 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	81bb      	strh	r3, [r7, #12]
 8005404:	e002      	b.n	800540c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005414:	89ba      	ldrh	r2, [r7, #12]
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff f940 	bl	80046a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005420:	e00e      	b.n	8005440 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005466:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005494:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a4:	d172      	bne.n	800558c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b22      	cmp	r3, #34	; 0x22
 80054aa:	d002      	beq.n	80054b2 <I2C_Slave_STOPF+0x6a>
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b2a      	cmp	r3, #42	; 0x2a
 80054b0:	d135      	bne.n	800551e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fb75 	bl	8003bda <HAL_DMA_GetState>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d049      	beq.n	800558a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	4a69      	ldr	r2, [pc, #420]	; (80056a0 <I2C_Slave_STOPF+0x258>)
 80054fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fb47 	bl	8003b96 <HAL_DMA_Abort_IT>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d03d      	beq.n	800558a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800551c:	e035      	b.n	800558a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fb3f 	bl	8003bda <HAL_DMA_GetState>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d014      	beq.n	800558c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	4a4e      	ldr	r2, [pc, #312]	; (80056a0 <I2C_Slave_STOPF+0x258>)
 8005568:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fb11 	bl	8003b96 <HAL_DMA_Abort_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d008      	beq.n	800558c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
 8005588:	e000      	b.n	800558c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800558a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d03e      	beq.n	8005614 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d112      	bne.n	80055ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d112      	bne.n	80055fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f043 0204 	orr.w	r2, r3, #4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8b3 	bl	8005788 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005622:	e039      	b.n	8005698 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b2a      	cmp	r3, #42	; 0x2a
 8005628:	d109      	bne.n	800563e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2228      	movs	r2, #40	; 0x28
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f827 	bl	800468c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b28      	cmp	r3, #40	; 0x28
 8005648:	d111      	bne.n	800566e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <I2C_Slave_STOPF+0x25c>)
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff f828 	bl	80046bc <HAL_I2C_ListenCpltCallback>
}
 800566c:	e014      	b.n	8005698 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	2b22      	cmp	r3, #34	; 0x22
 8005674:	d002      	beq.n	800567c <I2C_Slave_STOPF+0x234>
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b22      	cmp	r3, #34	; 0x22
 800567a:	d10d      	bne.n	8005698 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fe fffa 	bl	800468c <HAL_I2C_SlaveRxCpltCallback>
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	080059ed 	.word	0x080059ed
 80056a4:	ffff0000 	.word	0xffff0000

080056a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d002      	beq.n	80056ca <I2C_Slave_AF+0x22>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d129      	bne.n	800571e <I2C_Slave_AF+0x76>
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b28      	cmp	r3, #40	; 0x28
 80056ce:	d126      	bne.n	800571e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <I2C_Slave_AF+0xdc>)
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fe ffd0 	bl	80046bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800571c:	e02e      	b.n	800577c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b21      	cmp	r3, #33	; 0x21
 8005722:	d126      	bne.n	8005772 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a17      	ldr	r2, [pc, #92]	; (8005784 <I2C_Slave_AF+0xdc>)
 8005728:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2221      	movs	r2, #33	; 0x21
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800574e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005758:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fe ff84 	bl	8004678 <HAL_I2C_SlaveTxCpltCallback>
}
 8005770:	e004      	b.n	800577c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577a:	615a      	str	r2, [r3, #20]
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffff0000 	.word	0xffff0000

08005788 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d002      	beq.n	80057ac <I2C_ITError+0x24>
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d10a      	bne.n	80057c2 <I2C_ITError+0x3a>
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b22      	cmp	r3, #34	; 0x22
 80057b0:	d107      	bne.n	80057c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057c8:	2b28      	cmp	r3, #40	; 0x28
 80057ca:	d107      	bne.n	80057dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2228      	movs	r2, #40	; 0x28
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057da:	e015      	b.n	8005808 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ea:	d00a      	beq.n	8005802 <I2C_ITError+0x7a>
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b60      	cmp	r3, #96	; 0x60
 80057f0:	d007      	beq.n	8005802 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d162      	bne.n	80058de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005826:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d020      	beq.n	8005878 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	4a6a      	ldr	r2, [pc, #424]	; (80059e4 <I2C_ITError+0x25c>)
 800583c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe f9a7 	bl	8003b96 <HAL_DMA_Abort_IT>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8089 	beq.w	8005962 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005872:	4610      	mov	r0, r2
 8005874:	4798      	blx	r3
 8005876:	e074      	b.n	8005962 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	4a59      	ldr	r2, [pc, #356]	; (80059e4 <I2C_ITError+0x25c>)
 800587e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe f986 	bl	8003b96 <HAL_DMA_Abort_IT>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d068      	beq.n	8005962 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d10b      	bne.n	80058b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058d8:	4610      	mov	r0, r2
 80058da:	4798      	blx	r3
 80058dc:	e041      	b.n	8005962 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b60      	cmp	r3, #96	; 0x60
 80058e8:	d125      	bne.n	8005936 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d10b      	bne.n	800591e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fe feec 	bl	800470c <HAL_I2C_AbortCpltCallback>
 8005934:	e015      	b.n	8005962 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d10b      	bne.n	800595c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fe fecb 	bl	80046f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10e      	bne.n	8005990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d113      	bne.n	80059dc <I2C_ITError+0x254>
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b28      	cmp	r3, #40	; 0x28
 80059b8:	d110      	bne.n	80059dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <I2C_ITError+0x260>)
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fe fe70 	bl	80046bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	080059ed 	.word	0x080059ed
 80059e8:	ffff0000 	.word	0xffff0000

080059ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a06:	4b4b      	ldr	r3, [pc, #300]	; (8005b34 <I2C_DMAAbort+0x148>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <I2C_DMAAbort+0x14c>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0a1a      	lsrs	r2, r3, #8
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00da      	lsls	r2, r3, #3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a32:	e00a      	b.n	8005a4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d0ea      	beq.n	8005a20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	2200      	movs	r2, #0
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	2200      	movs	r2, #0
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d10e      	bne.n	8005ada <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ad2:	6978      	ldr	r0, [r7, #20]
 8005ad4:	f7fe fe1a 	bl	800470c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ad8:	e027      	b.n	8005b2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ae0:	2b28      	cmp	r3, #40	; 0x28
 8005ae2:	d117      	bne.n	8005b14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2228      	movs	r2, #40	; 0x28
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b12:	e007      	b.n	8005b24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b24:	6978      	ldr	r0, [r7, #20]
 8005b26:	f7fe fde7 	bl	80046f8 <HAL_I2C_ErrorCallback>
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000046c 	.word	0x2000046c
 8005b38:	14f8b589 	.word	0x14f8b589

08005b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0a1a      	lsrs	r2, r3, #8
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e008      	b.n	8005b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d0e9      	beq.n	8005b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	2000046c 	.word	0x2000046c
 8005b9c:	14f8b589 	.word	0x14f8b589

08005ba0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005bb0:	d103      	bne.n	8005bba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bb8:	e007      	b.n	8005bca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005bc2:	d102      	bne.n	8005bca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e267      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d075      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bf6:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00c      	beq.n	8005c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c02:	4b85      	ldr	r3, [pc, #532]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d112      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0e:	4b82      	ldr	r3, [pc, #520]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1a:	d10b      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	4b7e      	ldr	r3, [pc, #504]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05b      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x108>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d157      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e242      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCC_OscConfig+0x74>
 8005c3e:	4b76      	ldr	r3, [pc, #472]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a75      	ldr	r2, [pc, #468]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e01d      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c54:	d10c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x98>
 8005c56:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6f      	ldr	r2, [pc, #444]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6c      	ldr	r2, [pc, #432]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c70:	4b69      	ldr	r3, [pc, #420]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a68      	ldr	r2, [pc, #416]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b66      	ldr	r3, [pc, #408]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a65      	ldr	r2, [pc, #404]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c90:	f7fd fe64 	bl	800395c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fd fe60 	bl	800395c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e207      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0xc0>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fd fe50 	bl	800395c <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7fd fe4c 	bl	800395c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	; 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e1f3      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd2:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0xe8>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d063      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfa:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d11c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d06:	4b44      	ldr	r3, [pc, #272]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d116      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e1c7      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2a:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4937      	ldr	r1, [pc, #220]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3e:	e03a      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d48:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <HAL_RCC_OscConfig+0x244>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4e:	f7fd fe05 	bl	800395c <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d56:	f7fd fe01 	bl	800395c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e1a8      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4925      	ldr	r1, [pc, #148]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
 8005d88:	e015      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <HAL_RCC_OscConfig+0x244>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fd fde4 	bl	800395c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d98:	f7fd fde0 	bl	800395c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e187      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d036      	beq.n	8005e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <HAL_RCC_OscConfig+0x248>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fd fdc4 	bl	800395c <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dd8:	f7fd fdc0 	bl	800395c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e167      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_OscConfig+0x240>)
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x200>
 8005df6:	e01b      	b.n	8005e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <HAL_RCC_OscConfig+0x248>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fd fdad 	bl	800395c <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	e00e      	b.n	8005e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e06:	f7fd fda9 	bl	800395c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d907      	bls.n	8005e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e150      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	42470000 	.word	0x42470000
 8005e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e24:	4b88      	ldr	r3, [pc, #544]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1ea      	bne.n	8005e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8097 	beq.w	8005f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e42:	4b81      	ldr	r3, [pc, #516]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	4b7d      	ldr	r3, [pc, #500]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	4a7c      	ldr	r2, [pc, #496]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e5e:	4b7a      	ldr	r3, [pc, #488]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6e:	4b77      	ldr	r3, [pc, #476]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d118      	bne.n	8005eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7a:	4b74      	ldr	r3, [pc, #464]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a73      	ldr	r2, [pc, #460]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e86:	f7fd fd69 	bl	800395c <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8e:	f7fd fd65 	bl	800395c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e10c      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	; (800604c <HAL_RCC_OscConfig+0x474>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2ea>
 8005eb4:	4b64      	ldr	r3, [pc, #400]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4a63      	ldr	r2, [pc, #396]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec0:	e01c      	b.n	8005efc <HAL_RCC_OscConfig+0x324>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x30c>
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	4a5e      	ldr	r2, [pc, #376]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed6:	4b5c      	ldr	r3, [pc, #368]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	4a5b      	ldr	r2, [pc, #364]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0x324>
 8005ee4:	4b58      	ldr	r3, [pc, #352]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a57      	ldr	r2, [pc, #348]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	4b55      	ldr	r3, [pc, #340]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a54      	ldr	r2, [pc, #336]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	f023 0304 	bic.w	r3, r3, #4
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f04:	f7fd fd2a 	bl	800395c <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fd26 	bl	800395c <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0cb      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f22:	4b49      	ldr	r3, [pc, #292]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0ee      	beq.n	8005f0c <HAL_RCC_OscConfig+0x334>
 8005f2e:	e014      	b.n	8005f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f30:	f7fd fd14 	bl	800395c <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f36:	e00a      	b.n	8005f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fd fd10 	bl	800395c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e0b5      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ee      	bne.n	8005f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	4a38      	ldr	r2, [pc, #224]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80a1 	beq.w	80060b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f76:	4b34      	ldr	r3, [pc, #208]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d05c      	beq.n	800603c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d141      	bne.n	800600e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fd fce4 	bl	800395c <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fd fce0 	bl	800395c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e087      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	4b27      	ldr	r3, [pc, #156]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69da      	ldr	r2, [r3, #28]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	019b      	lsls	r3, r3, #6
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	491b      	ldr	r1, [pc, #108]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe6:	f7fd fcb9 	bl	800395c <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fee:	f7fd fcb5 	bl	800395c <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e05c      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0f0      	beq.n	8005fee <HAL_RCC_OscConfig+0x416>
 800600c:	e054      	b.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCC_OscConfig+0x478>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fd fca2 	bl	800395c <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601c:	f7fd fc9e 	bl	800395c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e045      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <HAL_RCC_OscConfig+0x470>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x444>
 800603a:	e03d      	b.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d107      	bne.n	8006054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e038      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
 8006048:	40023800 	.word	0x40023800
 800604c:	40007000 	.word	0x40007000
 8006050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006054:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <HAL_RCC_OscConfig+0x4ec>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d028      	beq.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d121      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800607a:	429a      	cmp	r2, r3
 800607c:	d11a      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800608a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800608c:	4293      	cmp	r3, r2
 800608e:	d111      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	3b01      	subs	r3, #1
 800609e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800

080060c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0cc      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060dc:	4b68      	ldr	r3, [pc, #416]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d90c      	bls.n	8006104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b63      	ldr	r3, [pc, #396]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0b8      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800611c:	4b59      	ldr	r3, [pc, #356]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a58      	ldr	r2, [pc, #352]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006134:	4b53      	ldr	r3, [pc, #332]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800613e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006140:	4b50      	ldr	r3, [pc, #320]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	494d      	ldr	r1, [pc, #308]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	4313      	orrs	r3, r2
 8006150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d044      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006166:	4b47      	ldr	r3, [pc, #284]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d119      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d003      	beq.n	8006186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006182:	2b03      	cmp	r3, #3
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006186:	4b3f      	ldr	r3, [pc, #252]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e06f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006196:	4b3b      	ldr	r3, [pc, #236]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e067      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 0203 	bic.w	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4934      	ldr	r1, [pc, #208]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b8:	f7fd fbd0 	bl	800395c <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	e00a      	b.n	80061d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c0:	f7fd fbcc 	bl	800395c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e04f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 020c 	and.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1eb      	bne.n	80061c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d20c      	bcs.n	8006210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fe:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e032      	b.n	8006276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4916      	ldr	r1, [pc, #88]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800624e:	f000 f821 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 8006252:	4602      	mov	r2, r0
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	490a      	ldr	r1, [pc, #40]	; (8006288 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	5ccb      	ldrb	r3, [r1, r3]
 8006262:	fa22 f303 	lsr.w	r3, r2, r3
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <HAL_RCC_ClockConfig+0x1c4>)
 8006268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <HAL_RCC_ClockConfig+0x1c8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7fd fb30 	bl	80038d4 <HAL_InitTick>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40023c00 	.word	0x40023c00
 8006284:	40023800 	.word	0x40023800
 8006288:	08008330 	.word	0x08008330
 800628c:	2000046c 	.word	0x2000046c
 8006290:	20000470 	.word	0x20000470

08006294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b094      	sub	sp, #80	; 0x50
 800629a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
 80062a0:	2300      	movs	r3, #0
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a4:	2300      	movs	r3, #0
 80062a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d00d      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x40>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	f200 80e1 	bhi.w	8006480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0x34>
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d003      	beq.n	80062ce <HAL_RCC_GetSysClockFreq+0x3a>
 80062c6:	e0db      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b73      	ldr	r3, [pc, #460]	; (8006498 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062cc:	e0db      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ce:	4b73      	ldr	r3, [pc, #460]	; (800649c <HAL_RCC_GetSysClockFreq+0x208>)
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d2:	e0d8      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062d4:	4b6f      	ldr	r3, [pc, #444]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d063      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ea:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	099b      	lsrs	r3, r3, #6
 80062f0:	2200      	movs	r2, #0
 80062f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fc:	633b      	str	r3, [r7, #48]	; 0x30
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
 8006302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	f04f 0000 	mov.w	r0, #0
 800630e:	f04f 0100 	mov.w	r1, #0
 8006312:	0159      	lsls	r1, r3, #5
 8006314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006318:	0150      	lsls	r0, r2, #5
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4621      	mov	r1, r4
 8006320:	1a51      	subs	r1, r2, r1
 8006322:	6139      	str	r1, [r7, #16]
 8006324:	4629      	mov	r1, r5
 8006326:	eb63 0301 	sbc.w	r3, r3, r1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006338:	4659      	mov	r1, fp
 800633a:	018b      	lsls	r3, r1, #6
 800633c:	4651      	mov	r1, sl
 800633e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006342:	4651      	mov	r1, sl
 8006344:	018a      	lsls	r2, r1, #6
 8006346:	4651      	mov	r1, sl
 8006348:	ebb2 0801 	subs.w	r8, r2, r1
 800634c:	4659      	mov	r1, fp
 800634e:	eb63 0901 	sbc.w	r9, r3, r1
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	4623      	mov	r3, r4
 800636c:	eb18 0303 	adds.w	r3, r8, r3
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	462b      	mov	r3, r5
 8006374:	eb49 0303 	adc.w	r3, r9, r3
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006386:	4629      	mov	r1, r5
 8006388:	024b      	lsls	r3, r1, #9
 800638a:	4621      	mov	r1, r4
 800638c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006390:	4621      	mov	r1, r4
 8006392:	024a      	lsls	r2, r1, #9
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639a:	2200      	movs	r2, #0
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063a4:	f7fa fb36 	bl	8000a14 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4613      	mov	r3, r2
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	e058      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b2:	4b38      	ldr	r3, [pc, #224]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	2200      	movs	r2, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	4611      	mov	r1, r2
 80063be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	0159      	lsls	r1, r3, #5
 80063da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063de:	0150      	lsls	r0, r2, #5
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4641      	mov	r1, r8
 80063e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ea:	4649      	mov	r1, r9
 80063ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006404:	ebb2 040a 	subs.w	r4, r2, sl
 8006408:	eb63 050b 	sbc.w	r5, r3, fp
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	00eb      	lsls	r3, r5, #3
 8006416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800641a:	00e2      	lsls	r2, r4, #3
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	4643      	mov	r3, r8
 8006422:	18e3      	adds	r3, r4, r3
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	464b      	mov	r3, r9
 8006428:	eb45 0303 	adc.w	r3, r5, r3
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800643a:	4629      	mov	r1, r5
 800643c:	028b      	lsls	r3, r1, #10
 800643e:	4621      	mov	r1, r4
 8006440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006444:	4621      	mov	r1, r4
 8006446:	028a      	lsls	r2, r1, #10
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	2200      	movs	r2, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	61fa      	str	r2, [r7, #28]
 8006454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006458:	f7fa fadc 	bl	8000a14 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4613      	mov	r3, r2
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	3301      	adds	r3, #1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800647e:	e002      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_GetSysClockFreq+0x204>)
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006488:	4618      	mov	r0, r3
 800648a:	3750      	adds	r7, #80	; 0x50
 800648c:	46bd      	mov	sp, r7
 800648e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800
 8006498:	00f42400 	.word	0x00f42400
 800649c:	007a1200 	.word	0x007a1200

080064a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a4:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064a6:	681b      	ldr	r3, [r3, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000046c 	.word	0x2000046c

080064b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064bc:	f7ff fff0 	bl	80064a0 <HAL_RCC_GetHCLKFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	0a9b      	lsrs	r3, r3, #10
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40023800 	.word	0x40023800
 80064dc:	08008340 	.word	0x08008340

080064e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064e4:	f7ff ffdc 	bl	80064a0 <HAL_RCC_GetHCLKFreq>
 80064e8:	4602      	mov	r2, r0
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	0b5b      	lsrs	r3, r3, #13
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	4903      	ldr	r1, [pc, #12]	; (8006504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064f6:	5ccb      	ldrb	r3, [r1, r3]
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40023800 	.word	0x40023800
 8006504:	08008340 	.word	0x08008340

08006508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e041      	b.n	800659e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fd f818 	bl	8003564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f000 fd7e 	bl	8007048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d001      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e044      	b.n	800664a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIM_Base_Start_IT+0xb0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x6c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ea:	d013      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x6c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_TIM_Base_Start_IT+0xb4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x6c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_TIM_Base_Start_IT+0xb8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x6c>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <HAL_TIM_Base_Start_IT+0xbc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_TIM_Base_Start_IT+0x6c>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a16      	ldr	r2, [pc, #88]	; (8006668 <HAL_TIM_Base_Start_IT+0xc0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d111      	bne.n	8006638 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b06      	cmp	r3, #6
 8006624:	d010      	beq.n	8006648 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0201 	orr.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006636:	e007      	b.n	8006648 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40010000 	.word	0x40010000
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40014000 	.word	0x40014000

0800666c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e041      	b.n	8006702 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fc fef8 	bl	8003488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f000 fccc 	bl	8007048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_TIM_PWM_Start+0x24>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	bf14      	ite	ne
 8006728:	2301      	movne	r3, #1
 800672a:	2300      	moveq	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	e022      	b.n	8006776 <HAL_TIM_PWM_Start+0x6a>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d109      	bne.n	800674a <HAL_TIM_PWM_Start+0x3e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	e015      	b.n	8006776 <HAL_TIM_PWM_Start+0x6a>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d109      	bne.n	8006764 <HAL_TIM_PWM_Start+0x58>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	e008      	b.n	8006776 <HAL_TIM_PWM_Start+0x6a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	bf14      	ite	ne
 8006770:	2301      	movne	r3, #1
 8006772:	2300      	moveq	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e068      	b.n	8006850 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Start+0x82>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678c:	e013      	b.n	80067b6 <HAL_TIM_PWM_Start+0xaa>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start+0x92>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800679c:	e00b      	b.n	80067b6 <HAL_TIM_PWM_Start+0xaa>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	e003      	b.n	80067b6 <HAL_TIM_PWM_Start+0xaa>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2201      	movs	r2, #1
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fee8 	bl	8007594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a23      	ldr	r2, [pc, #140]	; (8006858 <HAL_TIM_PWM_Start+0x14c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d107      	bne.n	80067de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <HAL_TIM_PWM_Start+0x14c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_TIM_PWM_Start+0x10e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d013      	beq.n	800681a <HAL_TIM_PWM_Start+0x10e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a19      	ldr	r2, [pc, #100]	; (800685c <HAL_TIM_PWM_Start+0x150>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIM_PWM_Start+0x10e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <HAL_TIM_PWM_Start+0x154>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIM_PWM_Start+0x10e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a16      	ldr	r2, [pc, #88]	; (8006864 <HAL_TIM_PWM_Start+0x158>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_PWM_Start+0x10e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a14      	ldr	r2, [pc, #80]	; (8006868 <HAL_TIM_PWM_Start+0x15c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d111      	bne.n	800683e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b06      	cmp	r3, #6
 800682a:	d010      	beq.n	800684e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	e007      	b.n	800684e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40014000 	.word	0x40014000

0800686c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e097      	b.n	80069b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fc fe1f 	bl	80034d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b0:	f023 0307 	bic.w	r3, r3, #7
 80068b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f000 fbc1 	bl	8007048 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	4313      	orrs	r3, r2
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800690c:	f023 030c 	bic.w	r3, r3, #12
 8006910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800691c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4313      	orrs	r3, r2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	011a      	lsls	r2, r3, #4
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	031b      	lsls	r3, r3, #12
 800693c:	4313      	orrs	r3, r2
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	4313      	orrs	r3, r2
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d110      	bne.n	8006a0a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d102      	bne.n	80069f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ee:	7b7b      	ldrb	r3, [r7, #13]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d001      	beq.n	80069f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e069      	b.n	8006acc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a08:	e031      	b.n	8006a6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d110      	bne.n	8006a32 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d102      	bne.n	8006a1c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a16:	7b3b      	ldrb	r3, [r7, #12]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e055      	b.n	8006acc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a30:	e01d      	b.n	8006a6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d108      	bne.n	8006a4a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d105      	bne.n	8006a4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a3e:	7b7b      	ldrb	r3, [r7, #13]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d102      	bne.n	8006a4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a44:	7b3b      	ldrb	r3, [r7, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d001      	beq.n	8006a4e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e03e      	b.n	8006acc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_TIM_Encoder_Start+0xc4>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d008      	beq.n	8006a8c <HAL_TIM_Encoder_Start+0xd4>
 8006a7a:	e00f      	b.n	8006a9c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2201      	movs	r2, #1
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fd85 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006a8a:	e016      	b.n	8006aba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2201      	movs	r2, #1
 8006a92:	2104      	movs	r1, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fd7d 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006a9a:	e00e      	b.n	8006aba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fd75 	bl	8007594 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fd6e 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006ab8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d122      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d11b      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0202 	mvn.w	r2, #2
 8006b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa77 	bl	800700a <HAL_TIM_IC_CaptureCallback>
 8006b1c:	e005      	b.n	8006b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa69 	bl	8006ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa7a 	bl	800701e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d122      	bne.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d11b      	bne.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0204 	mvn.w	r2, #4
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa4d 	bl	800700a <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa3f 	bl	8006ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa50 	bl	800701e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d122      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0208 	mvn.w	r2, #8
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2204      	movs	r2, #4
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa23 	bl	800700a <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa15 	bl	8006ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fa26 	bl	800701e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0210 	mvn.w	r2, #16
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2208      	movs	r2, #8
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9f9 	bl	800700a <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9eb 	bl	8006ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9fc 	bl	800701e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d10e      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d107      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0201 	mvn.w	r2, #1
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fc faf6 	bl	8003244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d10e      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd78 	bl	8007774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d10e      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d107      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9c1 	bl	8007032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d10e      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d107      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0220 	mvn.w	r2, #32
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fd42 	bl	8007760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e0ae      	b.n	8006e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	f200 809f 	bhi.w	8006e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006e51 	.word	0x08006e51
 8006d20:	08006e51 	.word	0x08006e51
 8006d24:	08006e51 	.word	0x08006e51
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006e51 	.word	0x08006e51
 8006d30:	08006e51 	.word	0x08006e51
 8006d34:	08006e51 	.word	0x08006e51
 8006d38:	08006dcf 	.word	0x08006dcf
 8006d3c:	08006e51 	.word	0x08006e51
 8006d40:	08006e51 	.word	0x08006e51
 8006d44:	08006e51 	.word	0x08006e51
 8006d48:	08006e0f 	.word	0x08006e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f9f8 	bl	8007148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0208 	orr.w	r2, r2, #8
 8006d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0204 	bic.w	r2, r2, #4
 8006d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6999      	ldr	r1, [r3, #24]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	619a      	str	r2, [r3, #24]
      break;
 8006d8a:	e064      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa3e 	bl	8007214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6999      	ldr	r1, [r3, #24]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	619a      	str	r2, [r3, #24]
      break;
 8006dcc:	e043      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fa89 	bl	80072ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0208 	orr.w	r2, r2, #8
 8006de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0204 	bic.w	r2, r2, #4
 8006df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69d9      	ldr	r1, [r3, #28]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	61da      	str	r2, [r3, #28]
      break;
 8006e0c:	e023      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fad3 	bl	80073c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	021a      	lsls	r2, r3, #8
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	61da      	str	r2, [r3, #28]
      break;
 8006e4e:	e002      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_ConfigClockSource+0x1c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0b4      	b.n	8006fee <HAL_TIM_ConfigClockSource+0x186>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebc:	d03e      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0xd4>
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	f200 8087 	bhi.w	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	f000 8086 	beq.w	8006fda <HAL_TIM_ConfigClockSource+0x172>
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	d87f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b70      	cmp	r3, #112	; 0x70
 8006ed6:	d01a      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0xa6>
 8006ed8:	2b70      	cmp	r3, #112	; 0x70
 8006eda:	d87b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b60      	cmp	r3, #96	; 0x60
 8006ede:	d050      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x11a>
 8006ee0:	2b60      	cmp	r3, #96	; 0x60
 8006ee2:	d877      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b50      	cmp	r3, #80	; 0x50
 8006ee6:	d03c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0xfa>
 8006ee8:	2b50      	cmp	r3, #80	; 0x50
 8006eea:	d873      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d058      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d86f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d064      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef8:	2b30      	cmp	r3, #48	; 0x30
 8006efa:	d86b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d060      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d867      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d05c      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d05a      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f0c:	e062      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6899      	ldr	r1, [r3, #8]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f000 fb19 	bl	8007554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	609a      	str	r2, [r3, #8]
      break;
 8006f3a:	e04f      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6899      	ldr	r1, [r3, #8]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f000 fb02 	bl	8007554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f5e:	609a      	str	r2, [r3, #8]
      break;
 8006f60:	e03c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 fa76 	bl	8007460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2150      	movs	r1, #80	; 0x50
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 facf 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006f80:	e02c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f000 fa95 	bl	80074be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2160      	movs	r1, #96	; 0x60
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fabf 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006fa0:	e01c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 fa56 	bl	8007460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2140      	movs	r1, #64	; 0x40
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 faaf 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e00c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f000 faa6 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006fd2:	e003      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd8:	e000      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a34      	ldr	r2, [pc, #208]	; (800712c <TIM_Base_SetConfig+0xe4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00f      	beq.n	8007080 <TIM_Base_SetConfig+0x38>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d00b      	beq.n	8007080 <TIM_Base_SetConfig+0x38>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a31      	ldr	r2, [pc, #196]	; (8007130 <TIM_Base_SetConfig+0xe8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d007      	beq.n	8007080 <TIM_Base_SetConfig+0x38>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a30      	ldr	r2, [pc, #192]	; (8007134 <TIM_Base_SetConfig+0xec>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_Base_SetConfig+0x38>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <TIM_Base_SetConfig+0xf0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d108      	bne.n	8007092 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a25      	ldr	r2, [pc, #148]	; (800712c <TIM_Base_SetConfig+0xe4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01b      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d017      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a22      	ldr	r2, [pc, #136]	; (8007130 <TIM_Base_SetConfig+0xe8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a21      	ldr	r2, [pc, #132]	; (8007134 <TIM_Base_SetConfig+0xec>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a20      	ldr	r2, [pc, #128]	; (8007138 <TIM_Base_SetConfig+0xf0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	; (800713c <TIM_Base_SetConfig+0xf4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <TIM_Base_SetConfig+0xf8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_Base_SetConfig+0x8a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <TIM_Base_SetConfig+0xfc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a08      	ldr	r2, [pc, #32]	; (800712c <TIM_Base_SetConfig+0xe4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d103      	bne.n	8007118 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	615a      	str	r2, [r3, #20]
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40010000 	.word	0x40010000
 8007130:	40000400 	.word	0x40000400
 8007134:	40000800 	.word	0x40000800
 8007138:	40000c00 	.word	0x40000c00
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800

08007148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0201 	bic.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f023 0302 	bic.w	r3, r3, #2
 8007190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <TIM_OC1_SetConfig+0xc8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d10c      	bne.n	80071be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0308 	bic.w	r3, r3, #8
 80071aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f023 0304 	bic.w	r3, r3, #4
 80071bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <TIM_OC1_SetConfig+0xc8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40010000 	.word	0x40010000

08007214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0210 	bic.w	r2, r3, #16
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0320 	bic.w	r3, r3, #32
 800725e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <TIM_OC2_SetConfig+0xd4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10d      	bne.n	8007290 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <TIM_OC2_SetConfig+0xd4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d113      	bne.n	80072c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800729e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000

080072ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <TIM_OC3_SetConfig+0xd0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d10d      	bne.n	8007366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a14      	ldr	r2, [pc, #80]	; (80073bc <TIM_OC3_SetConfig+0xd0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d113      	bne.n	8007396 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800737c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	621a      	str	r2, [r3, #32]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	40010000 	.word	0x40010000

080073c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800740a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	031b      	lsls	r3, r3, #12
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a10      	ldr	r2, [pc, #64]	; (800745c <TIM_OC4_SetConfig+0x9c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d109      	bne.n	8007434 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	019b      	lsls	r3, r3, #6
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000

08007460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800748a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f023 030a 	bic.w	r3, r3, #10
 800749c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074be:	b480      	push	{r7}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0210 	bic.w	r2, r3, #16
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	031b      	lsls	r3, r3, #12
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	f043 0307 	orr.w	r3, r3, #7
 8007540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	431a      	orrs	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2201      	movs	r2, #1
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	43db      	mvns	r3, r3
 80075b6:	401a      	ands	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a1a      	ldr	r2, [r3, #32]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	fa01 f303 	lsl.w	r3, r1, r3
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e050      	b.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007644:	d013      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a13      	ldr	r2, [pc, #76]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10c      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40014000 	.word	0x40014000

080076bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e03d      	b.n	8007754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e03f      	b.n	800781a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fb ff76 	bl	80036a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f829 	bl	8007824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007828:	b0c0      	sub	sp, #256	; 0x100
 800782a:	af00      	add	r7, sp, #0
 800782c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007840:	68d9      	ldr	r1, [r3, #12]
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	ea40 0301 	orr.w	r3, r0, r1
 800784c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	431a      	orrs	r2, r3
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	431a      	orrs	r2, r3
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	4313      	orrs	r3, r2
 800786c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800787c:	f021 010c 	bic.w	r1, r1, #12
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800788a:	430b      	orrs	r3, r1
 800788c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800788e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789e:	6999      	ldr	r1, [r3, #24]
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	ea40 0301 	orr.w	r3, r0, r1
 80078aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b8f      	ldr	r3, [pc, #572]	; (8007af0 <UART_SetConfig+0x2cc>)
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d005      	beq.n	80078c4 <UART_SetConfig+0xa0>
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b8d      	ldr	r3, [pc, #564]	; (8007af4 <UART_SetConfig+0x2d0>)
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d104      	bne.n	80078ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078c4:	f7fe fe0c 	bl	80064e0 <HAL_RCC_GetPCLK2Freq>
 80078c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078cc:	e003      	b.n	80078d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ce:	f7fe fdf3 	bl	80064b8 <HAL_RCC_GetPCLK1Freq>
 80078d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e0:	f040 810c 	bne.w	8007afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078f6:	4622      	mov	r2, r4
 80078f8:	462b      	mov	r3, r5
 80078fa:	1891      	adds	r1, r2, r2
 80078fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80078fe:	415b      	adcs	r3, r3
 8007900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007906:	4621      	mov	r1, r4
 8007908:	eb12 0801 	adds.w	r8, r2, r1
 800790c:	4629      	mov	r1, r5
 800790e:	eb43 0901 	adc.w	r9, r3, r1
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800791e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007926:	4690      	mov	r8, r2
 8007928:	4699      	mov	r9, r3
 800792a:	4623      	mov	r3, r4
 800792c:	eb18 0303 	adds.w	r3, r8, r3
 8007930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007934:	462b      	mov	r3, r5
 8007936:	eb49 0303 	adc.w	r3, r9, r3
 800793a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800794a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800794e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007952:	460b      	mov	r3, r1
 8007954:	18db      	adds	r3, r3, r3
 8007956:	653b      	str	r3, [r7, #80]	; 0x50
 8007958:	4613      	mov	r3, r2
 800795a:	eb42 0303 	adc.w	r3, r2, r3
 800795e:	657b      	str	r3, [r7, #84]	; 0x54
 8007960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007968:	f7f9 f854 	bl	8000a14 <__aeabi_uldivmod>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4b61      	ldr	r3, [pc, #388]	; (8007af8 <UART_SetConfig+0x2d4>)
 8007972:	fba3 2302 	umull	r2, r3, r3, r2
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	011c      	lsls	r4, r3, #4
 800797a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800797e:	2200      	movs	r2, #0
 8007980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	1891      	adds	r1, r2, r2
 8007992:	64b9      	str	r1, [r7, #72]	; 0x48
 8007994:	415b      	adcs	r3, r3
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800799c:	4641      	mov	r1, r8
 800799e:	eb12 0a01 	adds.w	sl, r2, r1
 80079a2:	4649      	mov	r1, r9
 80079a4:	eb43 0b01 	adc.w	fp, r3, r1
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079bc:	4692      	mov	sl, r2
 80079be:	469b      	mov	fp, r3
 80079c0:	4643      	mov	r3, r8
 80079c2:	eb1a 0303 	adds.w	r3, sl, r3
 80079c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ca:	464b      	mov	r3, r9
 80079cc:	eb4b 0303 	adc.w	r3, fp, r3
 80079d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079e8:	460b      	mov	r3, r1
 80079ea:	18db      	adds	r3, r3, r3
 80079ec:	643b      	str	r3, [r7, #64]	; 0x40
 80079ee:	4613      	mov	r3, r2
 80079f0:	eb42 0303 	adc.w	r3, r2, r3
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079fe:	f7f9 f809 	bl	8000a14 <__aeabi_uldivmod>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <UART_SetConfig+0x2d4>)
 8007a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	2264      	movs	r2, #100	; 0x64
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	1acb      	subs	r3, r1, r3
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a1e:	4b36      	ldr	r3, [pc, #216]	; (8007af8 <UART_SetConfig+0x2d4>)
 8007a20:	fba3 2302 	umull	r2, r3, r3, r2
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a2c:	441c      	add	r4, r3
 8007a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a40:	4642      	mov	r2, r8
 8007a42:	464b      	mov	r3, r9
 8007a44:	1891      	adds	r1, r2, r2
 8007a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a48:	415b      	adcs	r3, r3
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a50:	4641      	mov	r1, r8
 8007a52:	1851      	adds	r1, r2, r1
 8007a54:	6339      	str	r1, [r7, #48]	; 0x30
 8007a56:	4649      	mov	r1, r9
 8007a58:	414b      	adcs	r3, r1
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a68:	4659      	mov	r1, fp
 8007a6a:	00cb      	lsls	r3, r1, #3
 8007a6c:	4651      	mov	r1, sl
 8007a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a72:	4651      	mov	r1, sl
 8007a74:	00ca      	lsls	r2, r1, #3
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	189b      	adds	r3, r3, r2
 8007a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a84:	464b      	mov	r3, r9
 8007a86:	460a      	mov	r2, r1
 8007a88:	eb42 0303 	adc.w	r3, r2, r3
 8007a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	18db      	adds	r3, r3, r3
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aaa:	4613      	mov	r3, r2
 8007aac:	eb42 0303 	adc.w	r3, r2, r3
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007aba:	f7f8 ffab 	bl	8000a14 <__aeabi_uldivmod>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <UART_SetConfig+0x2d4>)
 8007ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	2164      	movs	r1, #100	; 0x64
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	3332      	adds	r3, #50	; 0x32
 8007ad6:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <UART_SetConfig+0x2d4>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	f003 0207 	and.w	r2, r3, #7
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4422      	add	r2, r4
 8007aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007aec:	e105      	b.n	8007cfa <UART_SetConfig+0x4d6>
 8007aee:	bf00      	nop
 8007af0:	40011000 	.word	0x40011000
 8007af4:	40011400 	.word	0x40011400
 8007af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	1891      	adds	r1, r2, r2
 8007b14:	6239      	str	r1, [r7, #32]
 8007b16:	415b      	adcs	r3, r3
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b1e:	4641      	mov	r1, r8
 8007b20:	1854      	adds	r4, r2, r1
 8007b22:	4649      	mov	r1, r9
 8007b24:	eb43 0501 	adc.w	r5, r3, r1
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	00eb      	lsls	r3, r5, #3
 8007b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b36:	00e2      	lsls	r2, r4, #3
 8007b38:	4614      	mov	r4, r2
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	4643      	mov	r3, r8
 8007b3e:	18e3      	adds	r3, r4, r3
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b44:	464b      	mov	r3, r9
 8007b46:	eb45 0303 	adc.w	r3, r5, r3
 8007b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	008b      	lsls	r3, r1, #2
 8007b6e:	4621      	mov	r1, r4
 8007b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b74:	4621      	mov	r1, r4
 8007b76:	008a      	lsls	r2, r1, #2
 8007b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b7c:	f7f8 ff4a 	bl	8000a14 <__aeabi_uldivmod>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4b60      	ldr	r3, [pc, #384]	; (8007d08 <UART_SetConfig+0x4e4>)
 8007b86:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	011c      	lsls	r4, r3, #4
 8007b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	61b9      	str	r1, [r7, #24]
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	1851      	adds	r1, r2, r1
 8007bb4:	6139      	str	r1, [r7, #16]
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	414b      	adcs	r3, r1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bc8:	4659      	mov	r1, fp
 8007bca:	00cb      	lsls	r3, r1, #3
 8007bcc:	4651      	mov	r1, sl
 8007bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bd2:	4651      	mov	r1, sl
 8007bd4:	00ca      	lsls	r2, r1, #3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4642      	mov	r2, r8
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007be4:	464b      	mov	r3, r9
 8007be6:	460a      	mov	r2, r1
 8007be8:	eb42 0303 	adc.w	r3, r2, r3
 8007bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c08:	4649      	mov	r1, r9
 8007c0a:	008b      	lsls	r3, r1, #2
 8007c0c:	4641      	mov	r1, r8
 8007c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c12:	4641      	mov	r1, r8
 8007c14:	008a      	lsls	r2, r1, #2
 8007c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c1a:	f7f8 fefb 	bl	8000a14 <__aeabi_uldivmod>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <UART_SetConfig+0x4e4>)
 8007c24:	fba3 1302 	umull	r1, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	2164      	movs	r1, #100	; 0x64
 8007c2c:	fb01 f303 	mul.w	r3, r1, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	3332      	adds	r3, #50	; 0x32
 8007c36:	4a34      	ldr	r2, [pc, #208]	; (8007d08 <UART_SetConfig+0x4e4>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c42:	441c      	add	r4, r3
 8007c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c48:	2200      	movs	r2, #0
 8007c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c4c:	677a      	str	r2, [r7, #116]	; 0x74
 8007c4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c52:	4642      	mov	r2, r8
 8007c54:	464b      	mov	r3, r9
 8007c56:	1891      	adds	r1, r2, r2
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	415b      	adcs	r3, r3
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c62:	4641      	mov	r1, r8
 8007c64:	1851      	adds	r1, r2, r1
 8007c66:	6039      	str	r1, [r7, #0]
 8007c68:	4649      	mov	r1, r9
 8007c6a:	414b      	adcs	r3, r1
 8007c6c:	607b      	str	r3, [r7, #4]
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	00cb      	lsls	r3, r1, #3
 8007c7e:	4651      	mov	r1, sl
 8007c80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c84:	4651      	mov	r1, sl
 8007c86:	00ca      	lsls	r2, r1, #3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4642      	mov	r2, r8
 8007c90:	189b      	adds	r3, r3, r2
 8007c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c94:	464b      	mov	r3, r9
 8007c96:	460a      	mov	r2, r1
 8007c98:	eb42 0303 	adc.w	r3, r2, r3
 8007c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca8:	667a      	str	r2, [r7, #100]	; 0x64
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	008b      	lsls	r3, r1, #2
 8007cba:	4641      	mov	r1, r8
 8007cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	008a      	lsls	r2, r1, #2
 8007cc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cc8:	f7f8 fea4 	bl	8000a14 <__aeabi_uldivmod>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <UART_SetConfig+0x4e4>)
 8007cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	2164      	movs	r1, #100	; 0x64
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	3332      	adds	r3, #50	; 0x32
 8007ce4:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <UART_SetConfig+0x4e4>)
 8007ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	f003 020f 	and.w	r2, r3, #15
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4422      	add	r2, r4
 8007cf8:	609a      	str	r2, [r3, #8]
}
 8007cfa:	bf00      	nop
 8007cfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d00:	46bd      	mov	sp, r7
 8007d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d06:	bf00      	nop
 8007d08:	51eb851f 	.word	0x51eb851f

08007d0c <arm_mat_trans_f32>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	8802      	ldrh	r2, [r0, #0]
 8007d12:	884b      	ldrh	r3, [r1, #2]
 8007d14:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007d18:	684f      	ldr	r7, [r1, #4]
 8007d1a:	8840      	ldrh	r0, [r0, #2]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	b083      	sub	sp, #12
 8007d20:	d14c      	bne.n	8007dbc <arm_mat_trans_f32+0xb0>
 8007d22:	f8b1 e000 	ldrh.w	lr, [r1]
 8007d26:	4586      	cmp	lr, r0
 8007d28:	d148      	bne.n	8007dbc <arm_mat_trans_f32+0xb0>
 8007d2a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8007d2e:	009c      	lsls	r4, r3, #2
 8007d30:	f00e 0e03 	and.w	lr, lr, #3
 8007d34:	fb08 f904 	mul.w	r9, r8, r4
 8007d38:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8007d3c:	011d      	lsls	r5, r3, #4
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007d44:	eb07 0a04 	add.w	sl, r7, r4
 8007d48:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	463b      	mov	r3, r7
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	d01d      	beq.n	8007d94 <arm_mat_trans_f32+0x88>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	f10c 0210 	add.w	r2, ip, #16
 8007d5e:	4439      	add	r1, r7
 8007d60:	4640      	mov	r0, r8
 8007d62:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8007d66:	601e      	str	r6, [r3, #0]
 8007d68:	ed52 7a03 	vldr	s15, [r2, #-12]
 8007d6c:	191e      	adds	r6, r3, r4
 8007d6e:	edc6 7a00 	vstr	s15, [r6]
 8007d72:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8007d76:	600e      	str	r6, [r1, #0]
 8007d78:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007d7c:	190e      	adds	r6, r1, r4
 8007d7e:	3801      	subs	r0, #1
 8007d80:	442b      	add	r3, r5
 8007d82:	f102 0210 	add.w	r2, r2, #16
 8007d86:	edc6 7a00 	vstr	s15, [r6]
 8007d8a:	4429      	add	r1, r5
 8007d8c:	d1e9      	bne.n	8007d62 <arm_mat_trans_f32+0x56>
 8007d8e:	44dc      	add	ip, fp
 8007d90:	eb09 0307 	add.w	r3, r9, r7
 8007d94:	f1be 0f00 	cmp.w	lr, #0
 8007d98:	d009      	beq.n	8007dae <arm_mat_trans_f32+0xa2>
 8007d9a:	4672      	mov	r2, lr
 8007d9c:	4661      	mov	r1, ip
 8007d9e:	f851 0b04 	ldr.w	r0, [r1], #4
 8007da2:	6018      	str	r0, [r3, #0]
 8007da4:	3a01      	subs	r2, #1
 8007da6:	4423      	add	r3, r4
 8007da8:	d1f9      	bne.n	8007d9e <arm_mat_trans_f32+0x92>
 8007daa:	9b01      	ldr	r3, [sp, #4]
 8007dac:	449c      	add	ip, r3
 8007dae:	3704      	adds	r7, #4
 8007db0:	4557      	cmp	r7, sl
 8007db2:	d1cd      	bne.n	8007d50 <arm_mat_trans_f32+0x44>
 8007db4:	2000      	movs	r0, #0
 8007db6:	b003      	add	sp, #12
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	f06f 0002 	mvn.w	r0, #2
 8007dc0:	e7f9      	b.n	8007db6 <arm_mat_trans_f32+0xaa>
 8007dc2:	bf00      	nop

08007dc4 <arm_mat_sub_f32>:
 8007dc4:	b4f0      	push	{r4, r5, r6, r7}
 8007dc6:	e9d1 4700 	ldrd	r4, r7, [r1]
 8007dca:	6803      	ldr	r3, [r0, #0]
 8007dcc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007dd0:	6856      	ldr	r6, [r2, #4]
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	d15d      	bne.n	8007e92 <arm_mat_sub_f32+0xce>
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d15a      	bne.n	8007e92 <arm_mat_sub_f32+0xce>
 8007ddc:	8803      	ldrh	r3, [r0, #0]
 8007dde:	8844      	ldrh	r4, [r0, #2]
 8007de0:	fb04 f403 	mul.w	r4, r4, r3
 8007de4:	08a5      	lsrs	r5, r4, #2
 8007de6:	d032      	beq.n	8007e4e <arm_mat_sub_f32+0x8a>
 8007de8:	f10c 0110 	add.w	r1, ip, #16
 8007dec:	f107 0210 	add.w	r2, r7, #16
 8007df0:	f106 0310 	add.w	r3, r6, #16
 8007df4:	4628      	mov	r0, r5
 8007df6:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007dfa:	ed51 7a04 	vldr	s15, [r1, #-16]
 8007dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e02:	3801      	subs	r0, #1
 8007e04:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007e08:	ed12 7a03 	vldr	s14, [r2, #-12]
 8007e0c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e14:	f101 0110 	add.w	r1, r1, #16
 8007e18:	ed43 7a03 	vstr	s15, [r3, #-12]
 8007e1c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8007e20:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8007e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e28:	f102 0210 	add.w	r2, r2, #16
 8007e2c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007e30:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8007e34:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e3c:	f103 0310 	add.w	r3, r3, #16
 8007e40:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8007e44:	d1d7      	bne.n	8007df6 <arm_mat_sub_f32+0x32>
 8007e46:	012b      	lsls	r3, r5, #4
 8007e48:	449c      	add	ip, r3
 8007e4a:	441f      	add	r7, r3
 8007e4c:	441e      	add	r6, r3
 8007e4e:	f014 0403 	ands.w	r4, r4, #3
 8007e52:	d01b      	beq.n	8007e8c <arm_mat_sub_f32+0xc8>
 8007e54:	eddc 7a00 	vldr	s15, [ip]
 8007e58:	ed97 7a00 	vldr	s14, [r7]
 8007e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e60:	3c01      	subs	r4, #1
 8007e62:	edc6 7a00 	vstr	s15, [r6]
 8007e66:	d011      	beq.n	8007e8c <arm_mat_sub_f32+0xc8>
 8007e68:	eddc 7a01 	vldr	s15, [ip, #4]
 8007e6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e74:	2c01      	cmp	r4, #1
 8007e76:	edc6 7a01 	vstr	s15, [r6, #4]
 8007e7a:	d007      	beq.n	8007e8c <arm_mat_sub_f32+0xc8>
 8007e7c:	eddc 7a02 	vldr	s15, [ip, #8]
 8007e80:	ed97 7a02 	vldr	s14, [r7, #8]
 8007e84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e88:	edc6 7a02 	vstr	s15, [r6, #8]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8007e90:	4770      	bx	lr
 8007e92:	f06f 0002 	mvn.w	r0, #2
 8007e96:	e7fa      	b.n	8007e8e <arm_mat_sub_f32+0xca>

08007e98 <arm_mat_mult_f32>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	8845      	ldrh	r5, [r0, #2]
 8007e9e:	880b      	ldrh	r3, [r1, #0]
 8007ea0:	8806      	ldrh	r6, [r0, #0]
 8007ea2:	6847      	ldr	r7, [r0, #4]
 8007ea4:	6854      	ldr	r4, [r2, #4]
 8007ea6:	6848      	ldr	r0, [r1, #4]
 8007ea8:	b08b      	sub	sp, #44	; 0x2c
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	9109      	str	r1, [sp, #36]	; 0x24
 8007eae:	9604      	str	r6, [sp, #16]
 8007eb0:	8849      	ldrh	r1, [r1, #2]
 8007eb2:	f040 808a 	bne.w	8007fca <arm_mat_mult_f32+0x132>
 8007eb6:	8815      	ldrh	r5, [r2, #0]
 8007eb8:	42b5      	cmp	r5, r6
 8007eba:	f040 8086 	bne.w	8007fca <arm_mat_mult_f32+0x132>
 8007ebe:	8852      	ldrh	r2, [r2, #2]
 8007ec0:	428a      	cmp	r2, r1
 8007ec2:	f040 8082 	bne.w	8007fca <arm_mat_mult_f32+0x132>
 8007ec6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007eca:	1d01      	adds	r1, r0, #4
 8007ecc:	0116      	lsls	r6, r2, #4
 8007ece:	9108      	str	r1, [sp, #32]
 8007ed0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007ed4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007ed8:	9101      	str	r1, [sp, #4]
 8007eda:	fb06 f108 	mul.w	r1, r6, r8
 8007ede:	0095      	lsls	r5, r2, #2
 8007ee0:	9103      	str	r1, [sp, #12]
 8007ee2:	00d2      	lsls	r2, r2, #3
 8007ee4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007ee8:	f003 0903 	and.w	r9, r3, #3
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	f107 0b10 	add.w	fp, r7, #16
 8007ef2:	eb04 0a05 	add.w	sl, r4, r5
 8007ef6:	9107      	str	r1, [sp, #28]
 8007ef8:	9202      	str	r2, [sp, #8]
 8007efa:	9306      	str	r3, [sp, #24]
 8007efc:	f1ab 0310 	sub.w	r3, fp, #16
 8007f00:	9305      	str	r3, [sp, #20]
 8007f02:	9b07      	ldr	r3, [sp, #28]
 8007f04:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007f08:	eb03 0c0a 	add.w	ip, r3, sl
 8007f0c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007fd4 <arm_mat_mult_f32+0x13c>
 8007f10:	f1b8 0f00 	cmp.w	r8, #0
 8007f14:	d053      	beq.n	8007fbe <arm_mat_mult_f32+0x126>
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	4644      	mov	r4, r8
 8007f1a:	18c1      	adds	r1, r0, r3
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	465b      	mov	r3, fp
 8007f20:	ed92 6a00 	vldr	s12, [r2]
 8007f24:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007f28:	ed53 4a03 	vldr	s9, [r3, #-12]
 8007f2c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007f30:	ed91 5a00 	vldr	s10, [r1]
 8007f34:	ed53 5a01 	vldr	s11, [r3, #-4]
 8007f38:	1957      	adds	r7, r2, r5
 8007f3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007f3e:	ed97 6a00 	vldr	s12, [r7]
 8007f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f46:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007f4a:	194f      	adds	r7, r1, r5
 8007f4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007f50:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007f54:	edd7 7a00 	vldr	s15, [r7]
 8007f58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007f5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007f60:	3c01      	subs	r4, #1
 8007f62:	4432      	add	r2, r6
 8007f64:	4431      	add	r1, r6
 8007f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f6a:	f103 0310 	add.w	r3, r3, #16
 8007f6e:	d1d7      	bne.n	8007f20 <arm_mat_mult_f32+0x88>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	4418      	add	r0, r3
 8007f76:	f1b9 0f00 	cmp.w	r9, #0
 8007f7a:	d00b      	beq.n	8007f94 <arm_mat_mult_f32+0xfc>
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	edd0 6a00 	vldr	s13, [r0]
 8007f82:	ecb2 7a01 	vldmia	r2!, {s14}
 8007f86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4428      	add	r0, r5
 8007f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f92:	d1f4      	bne.n	8007f7e <arm_mat_mult_f32+0xe6>
 8007f94:	ecec 7a01 	vstmia	ip!, {s15}
 8007f98:	45d4      	cmp	ip, sl
 8007f9a:	4670      	mov	r0, lr
 8007f9c:	f10e 0e04 	add.w	lr, lr, #4
 8007fa0:	d1b4      	bne.n	8007f0c <arm_mat_mult_f32+0x74>
 8007fa2:	9a01      	ldr	r2, [sp, #4]
 8007fa4:	9b06      	ldr	r3, [sp, #24]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4419      	add	r1, r3
 8007faa:	449b      	add	fp, r3
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	9101      	str	r1, [sp, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	44aa      	add	sl, r5
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	d004      	beq.n	8007fc2 <arm_mat_mult_f32+0x12a>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	6858      	ldr	r0, [r3, #4]
 8007fbc:	e79e      	b.n	8007efc <arm_mat_mult_f32+0x64>
 8007fbe:	9a05      	ldr	r2, [sp, #20]
 8007fc0:	e7d9      	b.n	8007f76 <arm_mat_mult_f32+0xde>
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	b00b      	add	sp, #44	; 0x2c
 8007fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fca:	f06f 0002 	mvn.w	r0, #2
 8007fce:	b00b      	add	sp, #44	; 0x2c
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	00000000 	.word	0x00000000

08007fd8 <arm_mat_inverse_f32>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	8843      	ldrh	r3, [r0, #2]
 8007fde:	8804      	ldrh	r4, [r0, #0]
 8007fe0:	684e      	ldr	r6, [r1, #4]
 8007fe2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	9603      	str	r6, [sp, #12]
 8007fee:	f040 80ea 	bne.w	80081c6 <arm_mat_inverse_f32+0x1ee>
 8007ff2:	880a      	ldrh	r2, [r1, #0]
 8007ff4:	884b      	ldrh	r3, [r1, #2]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	f040 80e5 	bne.w	80081c6 <arm_mat_inverse_f32+0x1ee>
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	f040 80e2 	bne.w	80081c6 <arm_mat_inverse_f32+0x1ee>
 8008002:	9005      	str	r0, [sp, #20]
 8008004:	b30c      	cbz	r4, 800804a <arm_mat_inverse_f32+0x72>
 8008006:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800800a:	1e67      	subs	r7, r4, #1
 800800c:	f846 bb04 	str.w	fp, [r6], #4
 8008010:	d01b      	beq.n	800804a <arm_mat_inverse_f32+0x72>
 8008012:	f04f 0801 	mov.w	r8, #1
 8008016:	00ba      	lsls	r2, r7, #2
 8008018:	eb06 0a02 	add.w	sl, r6, r2
 800801c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8008020:	4630      	mov	r0, r6
 8008022:	2100      	movs	r1, #0
 8008024:	f000 f970 	bl	8008308 <memset>
 8008028:	eb0a 0605 	add.w	r6, sl, r5
 800802c:	462a      	mov	r2, r5
 800802e:	2100      	movs	r1, #0
 8008030:	4650      	mov	r0, sl
 8008032:	f1b8 0f00 	cmp.w	r8, #0
 8008036:	f000 80cb 	beq.w	80081d0 <arm_mat_inverse_f32+0x1f8>
 800803a:	f000 f965 	bl	8008308 <memset>
 800803e:	3f01      	subs	r7, #1
 8008040:	f108 0801 	add.w	r8, r8, #1
 8008044:	f846 bb04 	str.w	fp, [r6], #4
 8008048:	d1e5      	bne.n	8008016 <arm_mat_inverse_f32+0x3e>
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80b5 	beq.w	80081bc <arm_mat_inverse_f32+0x1e4>
 8008052:	009d      	lsls	r5, r3, #2
 8008054:	eb09 0205 	add.w	r2, r9, r5
 8008058:	46cc      	mov	ip, r9
 800805a:	9202      	str	r2, [sp, #8]
 800805c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008060:	1d2a      	adds	r2, r5, #4
 8008062:	9204      	str	r2, [sp, #16]
 8008064:	462f      	mov	r7, r5
 8008066:	469e      	mov	lr, r3
 8008068:	2600      	movs	r6, #0
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	eddc 6a00 	vldr	s13, [ip]
 8008070:	42b4      	cmp	r4, r6
 8008072:	eba3 0b07 	sub.w	fp, r3, r7
 8008076:	f000 80a1 	beq.w	80081bc <arm_mat_inverse_f32+0x1e4>
 800807a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80081e0 <arm_mat_inverse_f32+0x208>
 800807e:	4632      	mov	r2, r6
 8008080:	4663      	mov	r3, ip
 8008082:	e00b      	b.n	800809c <arm_mat_inverse_f32+0xc4>
 8008084:	eef4 7a47 	vcmp.f32	s15, s14
 8008088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808c:	f102 0201 	add.w	r2, r2, #1
 8008090:	bfc8      	it	gt
 8008092:	eeb0 7a67 	vmovgt.f32	s14, s15
 8008096:	42a2      	cmp	r2, r4
 8008098:	442b      	add	r3, r5
 800809a:	d014      	beq.n	80080c6 <arm_mat_inverse_f32+0xee>
 800809c:	edd3 7a00 	vldr	s15, [r3]
 80080a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a8:	eeb1 6a67 	vneg.f32	s12, s15
 80080ac:	dcea      	bgt.n	8008084 <arm_mat_inverse_f32+0xac>
 80080ae:	eeb4 6a47 	vcmp.f32	s12, s14
 80080b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b6:	f102 0201 	add.w	r2, r2, #1
 80080ba:	bfc8      	it	gt
 80080bc:	eeb0 7a46 	vmovgt.f32	s14, s12
 80080c0:	42a2      	cmp	r2, r4
 80080c2:	442b      	add	r3, r5
 80080c4:	d1ea      	bne.n	800809c <arm_mat_inverse_f32+0xc4>
 80080c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80080ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ce:	d075      	beq.n	80081bc <arm_mat_inverse_f32+0x1e4>
 80080d0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80080d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d8:	d070      	beq.n	80081bc <arm_mat_inverse_f32+0x1e4>
 80080da:	4672      	mov	r2, lr
 80080dc:	4663      	mov	r3, ip
 80080de:	ed93 7a00 	vldr	s14, [r3]
 80080e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080e6:	3a01      	subs	r2, #1
 80080e8:	ece3 7a01 	vstmia	r3!, {s15}
 80080ec:	d1f7      	bne.n	80080de <arm_mat_inverse_f32+0x106>
 80080ee:	9901      	ldr	r1, [sp, #4]
 80080f0:	464b      	mov	r3, r9
 80080f2:	ed93 7a00 	vldr	s14, [r3]
 80080f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080fa:	3901      	subs	r1, #1
 80080fc:	ece3 7a01 	vstmia	r3!, {s15}
 8008100:	d1f7      	bne.n	80080f2 <arm_mat_inverse_f32+0x11a>
 8008102:	9803      	ldr	r0, [sp, #12]
 8008104:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8008108:	42b1      	cmp	r1, r6
 800810a:	d039      	beq.n	8008180 <arm_mat_inverse_f32+0x1a8>
 800810c:	eddb 6a00 	vldr	s13, [fp]
 8008110:	465a      	mov	r2, fp
 8008112:	4673      	mov	r3, lr
 8008114:	46e2      	mov	sl, ip
 8008116:	ecba 7a01 	vldmia	sl!, {s14}
 800811a:	edd2 7a00 	vldr	s15, [r2]
 800811e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008122:	3b01      	subs	r3, #1
 8008124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008128:	ece2 7a01 	vstmia	r2!, {s15}
 800812c:	d1f3      	bne.n	8008116 <arm_mat_inverse_f32+0x13e>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	44bb      	add	fp, r7
 8008132:	4602      	mov	r2, r0
 8008134:	46ca      	mov	sl, r9
 8008136:	ecba 7a01 	vldmia	sl!, {s14}
 800813a:	edd2 7a00 	vldr	s15, [r2]
 800813e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008142:	3b01      	subs	r3, #1
 8008144:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008148:	ece2 7a01 	vstmia	r2!, {s15}
 800814c:	d1f3      	bne.n	8008136 <arm_mat_inverse_f32+0x15e>
 800814e:	4428      	add	r0, r5
 8008150:	3101      	adds	r1, #1
 8008152:	428c      	cmp	r4, r1
 8008154:	44c3      	add	fp, r8
 8008156:	d1d7      	bne.n	8008108 <arm_mat_inverse_f32+0x130>
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	f1be 0e01 	subs.w	lr, lr, #1
 800815e:	f106 0601 	add.w	r6, r6, #1
 8008162:	449c      	add	ip, r3
 8008164:	f1a7 0704 	sub.w	r7, r7, #4
 8008168:	44a9      	add	r9, r5
 800816a:	f47f af7e 	bne.w	800806a <arm_mat_inverse_f32+0x92>
 800816e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8008172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008176:	d006      	beq.n	8008186 <arm_mat_inverse_f32+0x1ae>
 8008178:	2000      	movs	r0, #0
 800817a:	b007      	add	sp, #28
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	44bb      	add	fp, r7
 8008182:	4428      	add	r0, r5
 8008184:	e7e4      	b.n	8008150 <arm_mat_inverse_f32+0x178>
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	9a01      	ldr	r2, [sp, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	edd3 7a00 	vldr	s15, [r3]
 8008190:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008194:	fb02 f204 	mul.w	r2, r2, r4
 8008198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819c:	4614      	mov	r4, r2
 800819e:	bf08      	it	eq
 80081a0:	3304      	addeq	r3, #4
 80081a2:	d007      	beq.n	80081b4 <arm_mat_inverse_f32+0x1dc>
 80081a4:	e7e8      	b.n	8008178 <arm_mat_inverse_f32+0x1a0>
 80081a6:	ecf3 7a01 	vldmia	r3!, {s15}
 80081aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b2:	d1e1      	bne.n	8008178 <arm_mat_inverse_f32+0x1a0>
 80081b4:	f10e 0e01 	add.w	lr, lr, #1
 80081b8:	4574      	cmp	r4, lr
 80081ba:	d1f4      	bne.n	80081a6 <arm_mat_inverse_f32+0x1ce>
 80081bc:	f06f 0004 	mvn.w	r0, #4
 80081c0:	b007      	add	sp, #28
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	f06f 0002 	mvn.w	r0, #2
 80081ca:	b007      	add	sp, #28
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	4656      	mov	r6, sl
 80081d2:	3f01      	subs	r7, #1
 80081d4:	f846 bb04 	str.w	fp, [r6], #4
 80081d8:	f47f af1b 	bne.w	8008012 <arm_mat_inverse_f32+0x3a>
 80081dc:	e735      	b.n	800804a <arm_mat_inverse_f32+0x72>
 80081de:	bf00      	nop
 80081e0:	00000000 	.word	0x00000000

080081e4 <arm_mat_init_f32>:
 80081e4:	8001      	strh	r1, [r0, #0]
 80081e6:	8042      	strh	r2, [r0, #2]
 80081e8:	6043      	str	r3, [r0, #4]
 80081ea:	4770      	bx	lr

080081ec <arm_mat_add_f32>:
 80081ec:	b4f0      	push	{r4, r5, r6, r7}
 80081ee:	e9d1 4700 	ldrd	r4, r7, [r1]
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80081f8:	6856      	ldr	r6, [r2, #4]
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	d15d      	bne.n	80082ba <arm_mat_add_f32+0xce>
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	4293      	cmp	r3, r2
 8008202:	d15a      	bne.n	80082ba <arm_mat_add_f32+0xce>
 8008204:	8803      	ldrh	r3, [r0, #0]
 8008206:	8844      	ldrh	r4, [r0, #2]
 8008208:	fb04 f403 	mul.w	r4, r4, r3
 800820c:	08a5      	lsrs	r5, r4, #2
 800820e:	d032      	beq.n	8008276 <arm_mat_add_f32+0x8a>
 8008210:	f10c 0110 	add.w	r1, ip, #16
 8008214:	f107 0210 	add.w	r2, r7, #16
 8008218:	f106 0310 	add.w	r3, r6, #16
 800821c:	4628      	mov	r0, r5
 800821e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8008222:	ed51 7a04 	vldr	s15, [r1, #-16]
 8008226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800822a:	3801      	subs	r0, #1
 800822c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008230:	ed12 7a03 	vldr	s14, [r2, #-12]
 8008234:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800823c:	f101 0110 	add.w	r1, r1, #16
 8008240:	ed43 7a03 	vstr	s15, [r3, #-12]
 8008244:	ed12 7a02 	vldr	s14, [r2, #-8]
 8008248:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800824c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008250:	f102 0210 	add.w	r2, r2, #16
 8008254:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008258:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800825c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8008260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008264:	f103 0310 	add.w	r3, r3, #16
 8008268:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800826c:	d1d7      	bne.n	800821e <arm_mat_add_f32+0x32>
 800826e:	012b      	lsls	r3, r5, #4
 8008270:	449c      	add	ip, r3
 8008272:	441f      	add	r7, r3
 8008274:	441e      	add	r6, r3
 8008276:	f014 0403 	ands.w	r4, r4, #3
 800827a:	d01b      	beq.n	80082b4 <arm_mat_add_f32+0xc8>
 800827c:	edd7 7a00 	vldr	s15, [r7]
 8008280:	ed9c 7a00 	vldr	s14, [ip]
 8008284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008288:	3c01      	subs	r4, #1
 800828a:	edc6 7a00 	vstr	s15, [r6]
 800828e:	d011      	beq.n	80082b4 <arm_mat_add_f32+0xc8>
 8008290:	eddc 7a01 	vldr	s15, [ip, #4]
 8008294:	ed97 7a01 	vldr	s14, [r7, #4]
 8008298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800829c:	2c01      	cmp	r4, #1
 800829e:	edc6 7a01 	vstr	s15, [r6, #4]
 80082a2:	d007      	beq.n	80082b4 <arm_mat_add_f32+0xc8>
 80082a4:	eddc 7a02 	vldr	s15, [ip, #8]
 80082a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80082ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082b0:	edc6 7a02 	vstr	s15, [r6, #8]
 80082b4:	2000      	movs	r0, #0
 80082b6:	bcf0      	pop	{r4, r5, r6, r7}
 80082b8:	4770      	bx	lr
 80082ba:	f06f 0002 	mvn.w	r0, #2
 80082be:	e7fa      	b.n	80082b6 <arm_mat_add_f32+0xca>

080082c0 <__libc_init_array>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	4d0d      	ldr	r5, [pc, #52]	; (80082f8 <__libc_init_array+0x38>)
 80082c4:	4c0d      	ldr	r4, [pc, #52]	; (80082fc <__libc_init_array+0x3c>)
 80082c6:	1b64      	subs	r4, r4, r5
 80082c8:	10a4      	asrs	r4, r4, #2
 80082ca:	2600      	movs	r6, #0
 80082cc:	42a6      	cmp	r6, r4
 80082ce:	d109      	bne.n	80082e4 <__libc_init_array+0x24>
 80082d0:	4d0b      	ldr	r5, [pc, #44]	; (8008300 <__libc_init_array+0x40>)
 80082d2:	4c0c      	ldr	r4, [pc, #48]	; (8008304 <__libc_init_array+0x44>)
 80082d4:	f000 f820 	bl	8008318 <_init>
 80082d8:	1b64      	subs	r4, r4, r5
 80082da:	10a4      	asrs	r4, r4, #2
 80082dc:	2600      	movs	r6, #0
 80082de:	42a6      	cmp	r6, r4
 80082e0:	d105      	bne.n	80082ee <__libc_init_array+0x2e>
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e8:	4798      	blx	r3
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7ee      	b.n	80082cc <__libc_init_array+0xc>
 80082ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f2:	4798      	blx	r3
 80082f4:	3601      	adds	r6, #1
 80082f6:	e7f2      	b.n	80082de <__libc_init_array+0x1e>
 80082f8:	08008350 	.word	0x08008350
 80082fc:	08008350 	.word	0x08008350
 8008300:	08008350 	.word	0x08008350
 8008304:	08008354 	.word	0x08008354

08008308 <memset>:
 8008308:	4402      	add	r2, r0
 800830a:	4603      	mov	r3, r0
 800830c:	4293      	cmp	r3, r2
 800830e:	d100      	bne.n	8008312 <memset+0xa>
 8008310:	4770      	bx	lr
 8008312:	f803 1b01 	strb.w	r1, [r3], #1
 8008316:	e7f9      	b.n	800830c <memset+0x4>

08008318 <_init>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr

08008324 <_fini>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr
