
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab3c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf4  0800acf4  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acfc  0800acfc  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad00  0800ad00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800ad04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000408  0800b108  00020408  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800b108  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171a6  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f54  00000000  00000000  000375da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769c  00000000  00000000  0003c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001570f  00000000  00000000  00053d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e6d  00000000  00000000  0006941b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fc288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  000fc350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00100c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000408 	.word	0x20000408
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800acbc 	.word	0x0800acbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000040c 	.word	0x2000040c
 80001d4:	0800acbc 	.word	0x0800acbc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f009 fefe 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f009 fef5 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f009 feec 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f009 fee3 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f009 feda 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f009 fed1 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f009 fec8 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f009 febf 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f009 feb6 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f009 fead 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f009 fea4 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f009 fe9b 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f009 fe92 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f009 fe89 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f009 fe80 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f009 fe76 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f009 fe6c 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f009 fe62 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f009 fe58 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f009 fe4e 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f009 fe44 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f009 fe3a 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f009 fe30 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f009 fe26 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f009 fe1c 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f009 fe12 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f009 fe08 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f009 fdfe 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f009 fdf4 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f009 fdea 	bl	800ab6c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f009 fde0 	bl	800ab6c <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 fb6a 	bl	800a694 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 fb60 	bl	800a694 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 fb56 	bl	800a694 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f009 fc10 	bl	800a820 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f009 fc04 	bl	800a820 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 fb74 	bl	800a820 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 fb63 	bl	800a820 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 fb52 	bl	800a820 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f009 fceb 	bl	800ab74 <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 fb2c 	bl	800a820 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 fab1 	bl	800a74c <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 fb0a 	bl	800a820 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 faf9 	bl	800a820 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f009 fc92 	bl	800ab74 <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 fb79 	bl	800a960 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 fac8 	bl	800a820 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 fab7 	bl	800a820 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 faa6 	bl	800a820 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f009 fc3f 	bl	800ab74 <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fa84 	bl	800a820 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fa09 	bl	800a74c <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 fa62 	bl	800a820 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <PIDVelocityController_Init>:
 */

#include "PIDVelocity.h"
#include "Trajectory.h"

void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 80013ba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
//    	pidVelocity->KpUse = pidVelocity->Kp;
//    }

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*errorDZ) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 6a00 	vldr	s13, [r3]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * errorDZ);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 7a01 	vldr	s14, [r3, #4]
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = pidVelocity->Kd *(errorDZ -(2.0* pidVelocity->Last1Error) + pidVelocity->Last2Error)	;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f83d 	bl	80004a0 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f7ff f838 	bl	80004a0 <__aeabi_f2d>
 8001430:	4680      	mov	r8, r0
 8001432:	4689      	mov	r9, r1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f831 	bl	80004a0 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	f7fe fecf 	bl	80001e4 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4640      	mov	r0, r8
 800144c:	4649      	mov	r1, r9
 800144e:	f7fe fec7 	bl	80001e0 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4690      	mov	r8, r2
 8001458:	4699      	mov	r9, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f81e 	bl	80004a0 <__aeabi_f2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7ff f86a 	bl	8000550 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fa96 	bl	80009b4 <__aeabi_d2f>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ed93 7a07 	vldr	s14, [r3, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edd3 7a05 	vldr	s15, [r3, #20]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a4:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	dd04      	ble.n	80014d8 <PIDVelocityController_Update+0x11e>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	e00e      	b.n	80014f6 <PIDVelocityController_Update+0x13c>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d503      	bpl.n	80014f6 <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last1Error = errorDZ;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	621a      	str	r2, [r3, #32]

	return pidVelocity->ControllerOut;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001520 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	61da      	str	r2, [r3, #28]

	  Robot -> flagSethome = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  Robot -> flagStartTime = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  Robot -> RunningFlag = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	  Robot -> MotorIsOn = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001594:	edd7 7a01 	vldr	s15, [r7, #4]
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d50e      	bpl.n	80015c0 <AbsVal+0x36>
  {
    return number*-1.0;
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe ff7c 	bl	80004a0 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa00 	bl	80009b4 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef1 7a67 	vneg.f32	s15, s15
 80015be:	e001      	b.n	80015c4 <AbsVal+0x3a>
  }
  else
  {
    return number;
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015dc:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	traject -> Amax = 0.0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 0.0;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d502      	bpl.n	800163a <CoefficientAndTimeCalculation+0x6a>
	{
		gain = -1.0;
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <CoefficientAndTimeCalculation+0x19c>)
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e002      	b.n	8001640 <CoefficientAndTimeCalculation+0x70>
	}
	else
	{
		gain = 1.0;
 800163a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800163e:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float Vcheck = AbsVal(traject -> QRelative);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f7ff ff9e 	bl	800158a <AbsVal>
 800164e:	ed87 0a04 	vstr	s0, [r7, #16]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800165a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	db12      	blt.n	800168a <CoefficientAndTimeCalculation+0xba>
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d509      	bpl.n	800168a <CoefficientAndTimeCalculation+0xba>
	{
		traject -> Amax =  5.73;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 800167a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a3d      	ldr	r2, [pc, #244]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001680:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  3.0;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <CoefficientAndTimeCalculation+0x1a8>)
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e0a6      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 20.0  && Vcheck < 40.0)
 800168a:	edd7 7a04 	vldr	s15, [r7, #16]
 800168e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	db12      	blt.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d509      	bpl.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
	{
		traject -> Amax =  5.73;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016b2:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016b8:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  6.0;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a30      	ldr	r2, [pc, #192]	; (8001780 <CoefficientAndTimeCalculation+0x1b0>)
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e08a      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 40.0  && Vcheck < 60.0)
 80016c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	db12      	blt.n	80016fa <CoefficientAndTimeCalculation+0x12a>
 80016d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d509      	bpl.n	80016fa <CoefficientAndTimeCalculation+0x12a>
	{
		traject -> Amax =  5.73;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016ea:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016f0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  9.0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <CoefficientAndTimeCalculation+0x1b8>)
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e06e      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 80016fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 8001702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	db12      	blt.n	8001732 <CoefficientAndTimeCalculation+0x162>
 800170c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001710:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 8001714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d509      	bpl.n	8001732 <CoefficientAndTimeCalculation+0x162>
	{
		traject -> Amax =  5.73;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 8001722:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001728:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  15.0;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <CoefficientAndTimeCalculation+0x1c0>)
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e052      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	db2f      	blt.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
 8001744:	edd7 7a04 	vldr	s15, [r7, #16]
 8001748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d526      	bpl.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
	{
		traject -> Amax =  17.9;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <CoefficientAndTimeCalculation+0x1c4>)
 800175a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  286.5;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <CoefficientAndTimeCalculation+0x1c8>)
 8001760:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  24;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <CoefficientAndTimeCalculation+0x1cc>)
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e036      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 800176a:	bf00      	nop
 800176c:	bf800000 	.word	0xbf800000
 8001770:	40b75c29 	.word	0x40b75c29
 8001774:	42e53333 	.word	0x42e53333
 8001778:	40400000 	.word	0x40400000
 800177c:	42200000 	.word	0x42200000
 8001780:	40c00000 	.word	0x40c00000
 8001784:	42700000 	.word	0x42700000
 8001788:	41100000 	.word	0x41100000
 800178c:	42c80000 	.word	0x42c80000
 8001790:	41700000 	.word	0x41700000
 8001794:	418f3333 	.word	0x418f3333
 8001798:	438f4000 	.word	0x438f4000
 800179c:	41c00000 	.word	0x41c00000
 80017a0:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 80017a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a8:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	db10      	blt.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	{
		traject -> Amax =  22.92;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <CoefficientAndTimeCalculation+0x1fc>)
 80017ba:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  573;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <CoefficientAndTimeCalculation+0x200>)
 80017c0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  54;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <CoefficientAndTimeCalculation+0x204>)
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 80017ca:	bf00      	nop
 80017cc:	41b75c29 	.word	0x41b75c29
 80017d0:	440f4000 	.word	0x440f4000
 80017d4:	42580000 	.word	0x42580000
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a02 	vldr	s14, [r3, #8]
 80017de:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	ed93 7a01 	vldr	s14, [r3, #4]
 8001806:	edd7 7a05 	vldr	s15, [r7, #20]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edd3 6a00 	vldr	s13, [r3]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ed93 6a02 	vldr	s12, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edd3 6a02 	vldr	s13, [r3, #8]
 8001844:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 6a00 	vldr	s13, [r3]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	ed93 7a01 	vldr	s14, [r3, #4]
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 6a02 	vldr	s13, [r3, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 7a01 	vldr	s15, [r3, #4]
 800188a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	ed93 6a02 	vldr	s12, [r3, #8]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edd3 6a00 	vldr	s13, [r3]
 800189a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f852 	bl	80009b4 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef1 7a67 	vneg.f32	s15, s15
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fdb7 	bl	80004a0 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f83b 	bl	80009b4 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	edd3 6a01 	vldr	s13, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd75 	bl	80004a0 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7fe fff9 	bl	80009b4 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef1 7a67 	vneg.f32	s15, s15
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fd51 	bl	80004a0 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fbeb 	bl	80001e0 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7fe ffcf 	bl	80009b4 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 6a07 	vldr	s13, [r3, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001c60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001d12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001db8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001dc4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001de2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ea4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ebe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f84:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800200a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800200e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002012:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002016:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002038:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800204e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002058:	ee66 7a27 	vmul.f32	s15, s12, s15
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002064:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800207a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800207e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002082:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800209a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800209e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800212e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002138:	ee66 7a27 	vmul.f32	s15, s12, s15
 800213c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002140:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002144:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800215a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800215e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002162:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800216a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800217a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800219e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800220e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002218:	ee66 7a27 	vmul.f32	s15, s12, s15
 800221c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002220:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002224:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800223a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800223e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002242:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800225a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	0000      	movs	r0, r0
	...

08002278 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228c:	1a84      	subs	r4, r0, r2
 800228e:	eb61 0503 	sbc.w	r5, r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe f925 	bl	80004e4 <__aeabi_ul2d>
 800229a:	a396      	add	r3, pc, #600	; (adr r3, 80024f4 <TrajectoryEvaluation+0x27c>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa80 	bl	80007a4 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fb82 	bl	80009b4 <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a8f      	ldr	r2, [pc, #572]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	f2c0 8084 	blt.w	80023d0 <TrajectoryEvaluation+0x158>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd78      	ble.n	80023d0 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80022ee:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	ed93 7a03 	vldr	s14, [r3, #12]
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002310:	edd3 6a00 	vldr	s13, [r3]
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	edd3 6a03 	vldr	s13, [r3, #12]
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800235c:	ed93 6a00 	vldr	s12, [r3]
 8002360:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002378:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800237c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800238c:	ed93 6a00 	vldr	s12, [r3]
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800239e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80023ce:	e37e      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	f200 808a 	bhi.w	80024fc <TrajectoryEvaluation+0x284>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	dd7e      	ble.n	80024fc <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	ed93 7a04 	vldr	s14, [r3, #16]
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	ed93 7a04 	vldr	s14, [r3, #16]
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edd3 6a04 	vldr	s13, [r3, #16]
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800247c:	ed93 6a00 	vldr	s12, [r3]
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee26 6a27 	vmul.f32	s12, s12, s15
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002498:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800249c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024ac:	ed93 6a00 	vldr	s12, [r3]
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80024ee:	e2ee      	b.n	8002ace <TrajectoryEvaluation+0x856>
 80024f0:	20000424 	.word	0x20000424
 80024f4:	00000000 	.word	0x00000000
 80024f8:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	f200 8084 	bhi.w	800261c <TrajectoryEvaluation+0x3a4>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd78      	ble.n	800261c <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ed93 7a05 	vldr	s14, [r3, #20]
 800253a:	4b80      	ldr	r3, [pc, #512]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	ed93 7a05 	vldr	s14, [r3, #20]
 800255a:	4b78      	ldr	r3, [pc, #480]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025a8:	ed93 6a00 	vldr	s12, [r3]
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025c4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025d8:	ed93 6a00 	vldr	s12, [r3]
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80025ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800261a:	e258      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	f200 8086 	bhi.w	8002740 <TrajectoryEvaluation+0x4c8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	dd7a      	ble.n	8002740 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	ed93 7a06 	vldr	s14, [r3, #24]
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	ed93 7a06 	vldr	s14, [r3, #24]
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800267c:	edd3 6a00 	vldr	s13, [r3]
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	edd3 6a06 	vldr	s13, [r3, #24]
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026c8:	ed93 6a00 	vldr	s12, [r3]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80026e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026f8:	ed93 6a00 	vldr	s12, [r3]
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800270e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800273a:	e1c8      	b.n	8002ace <TrajectoryEvaluation+0x856>
 800273c:	20000424 	.word	0x20000424
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002746:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	f200 8084 	bhi.w	8002860 <TrajectoryEvaluation+0x5e8>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	dd78      	ble.n	8002860 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	ed93 7a07 	vldr	s14, [r3, #28]
 800277e:	4b80      	ldr	r3, [pc, #512]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	ed93 7a07 	vldr	s14, [r3, #28]
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a0:	edd3 6a00 	vldr	s13, [r3]
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027ec:	ed93 6a00 	vldr	s12, [r3]
 80027f0:	4b63      	ldr	r3, [pc, #396]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002808:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800280c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <TrajectoryEvaluation+0x708>)
 800281c:	ed93 6a00 	vldr	s12, [r3]
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee66 7a27 	vmul.f32	s15, s12, s15
 800282a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002832:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800285e:	e136      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	f200 8086 	bhi.w	8002984 <TrajectoryEvaluation+0x70c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800287e:	4b40      	ldr	r3, [pc, #256]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	dd7a      	ble.n	8002984 <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ed93 7a08 	vldr	s14, [r3, #32]
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	ed93 7a08 	vldr	s14, [r3, #32]
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c0:	edd3 6a00 	vldr	s13, [r3]
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	edd3 6a08 	vldr	s13, [r3, #32]
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <TrajectoryEvaluation+0x708>)
 800290c:	ed93 6a00 	vldr	s12, [r3]
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <TrajectoryEvaluation+0x708>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002928:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800292c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <TrajectoryEvaluation+0x708>)
 800293c:	ed93 6a00 	vldr	s12, [r3]
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800294a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800294e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002952:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800297e:	e0a6      	b.n	8002ace <TrajectoryEvaluation+0x856>
 8002980:	20000424 	.word	0x20000424
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	f200 8084 	bhi.w	8002aa4 <TrajectoryEvaluation+0x82c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd78      	ble.n	8002aa4 <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a30:	ed93 6a00 	vldr	s12, [r3]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a4c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002aa2:	e014      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 8002ace:	bf00      	nop
}
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000424 	.word	0x20000424

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae0:	f001 ff0e 	bl	8004900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae4:	f000 f856 	bl	8002b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae8:	f000 fad6 	bl	8003098 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aec:	f000 faac 	bl	8003048 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002af0:	f000 fa7e 	bl	8002ff0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002af4:	f000 f8b6 	bl	8002c64 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002af8:	f000 f8e2 	bl	8002cc0 <MX_TIM1_Init>
  MX_TIM11_Init();
 8002afc:	f000 fa54 	bl	8002fa8 <MX_TIM11_Init>
  MX_TIM2_Init();
 8002b00:	f000 f962 	bl	8002dc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b04:	f000 f9b4 	bl	8002e70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b08:	f000 fa00 	bl	8002f0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //----UART-----//
  Ringbuf_Init();
 8002b0c:	f000 fd96 	bl	800363c <Ringbuf_Init>
  //  HAL_UART_Receive_DMA(&huart2, RxDataBuffer, 32);
  //----UART-----//
  KalmanMatrixInit(&KalmanVar);
 8002b10:	4816      	ldr	r0, [pc, #88]	; (8002b6c <main+0x90>)
 8002b12:	f7fe f921 	bl	8000d58 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b16:	2100      	movs	r1, #0
 8002b18:	4815      	ldr	r0, [pc, #84]	; (8002b70 <main+0x94>)
 8002b1a:	f005 fb63 	bl	80081e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002b1e:	4815      	ldr	r0, [pc, #84]	; (8002b74 <main+0x98>)
 8002b20:	f005 faae 	bl	8008080 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002b24:	4814      	ldr	r0, [pc, #80]	; (8002b78 <main+0x9c>)
 8002b26:	f005 faab 	bl	8008080 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4);
 8002b2a:	4814      	ldr	r0, [pc, #80]	; (8002b7c <main+0xa0>)
 8002b2c:	f005 faa8 	bl	8008080 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b30:	213c      	movs	r1, #60	; 0x3c
 8002b32:	4813      	ldr	r0, [pc, #76]	; (8002b80 <main+0xa4>)
 8002b34:	f005 fcac 	bl	8008490 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <main+0xa8>)
 8002b42:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <main+0xa8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <main+0xa8>)
 8002b4a:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <main+0xa8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	; (8002b88 <main+0xac>)
 8002b52:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <main+0xb0>)
 8002b56:	f7fe fc0a 	bl	800136e <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 8002b5a:	480d      	ldr	r0, [pc, #52]	; (8002b90 <main+0xb4>)
 8002b5c:	f7fe fc07 	bl	800136e <PIDVelocityController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RobotstateManagement();
 8002b60:	f001 f948 	bl	8003df4 <RobotstateManagement>
	  EndEffstateManagement();
 8002b64:	f001 fa42 	bl	8003fec <EndEffstateManagement>
	  RobotstateManagement();
 8002b68:	e7fa      	b.n	8002b60 <main+0x84>
 8002b6a:	bf00      	nop
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	2000047c 	.word	0x2000047c
 8002b74:	2000059c 	.word	0x2000059c
 8002b78:	2000050c 	.word	0x2000050c
 8002b7c:	20000554 	.word	0x20000554
 8002b80:	200004c4 	.word	0x200004c4
 8002b84:	20000770 	.word	0x20000770
 8002b88:	2000077c 	.word	0x2000077c
 8002b8c:	2000038c 	.word	0x2000038c
 8002b90:	200003c0 	.word	0x200003c0

08002b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b094      	sub	sp, #80	; 0x50
 8002b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9a:	f107 0320 	add.w	r3, r7, #32
 8002b9e:	2230      	movs	r2, #48	; 0x30
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f008 f882 	bl	800acac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <SystemClock_Config+0xc8>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <SystemClock_Config+0xc8>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <SystemClock_Config+0xc8>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <SystemClock_Config+0xcc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a20      	ldr	r2, [pc, #128]	; (8002c60 <SystemClock_Config+0xcc>)
 8002bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <SystemClock_Config+0xcc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c04:	2308      	movs	r3, #8
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002c08:	2364      	movs	r3, #100	; 0x64
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c10:	2304      	movs	r3, #4
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c14:	f107 0320 	add.w	r3, r7, #32
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f004 fd49 	bl	80076b0 <HAL_RCC_OscConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c24:	f001 fb51 	bl	80042ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c28:	230f      	movs	r3, #15
 8002c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 ffab 	bl	8007ba0 <HAL_RCC_ClockConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c50:	f001 fb3b 	bl	80042ca <Error_Handler>
  }
}
 8002c54:	bf00      	nop
 8002c56:	3750      	adds	r7, #80	; 0x50
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000

08002c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <MX_I2C1_Init+0x54>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <MX_I2C1_Init+0x58>)
 8002c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ca0:	4804      	ldr	r0, [pc, #16]	; (8002cb4 <MX_I2C1_Init+0x50>)
 8002ca2:	f002 fd91 	bl	80057c8 <HAL_I2C_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cac:	f001 fb0d 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000428 	.word	0x20000428
 8002cb8:	40005400 	.word	0x40005400
 8002cbc:	00061a80 	.word	0x00061a80

08002cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b092      	sub	sp, #72	; 0x48
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	615a      	str	r2, [r3, #20]
 8002ce2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f007 ffde 	bl	800acac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cf0:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <MX_TIM1_Init+0x104>)
 8002cf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cf6:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d04:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d1c:	4828      	ldr	r0, [pc, #160]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d1e:	f005 fa11 	bl	8008144 <HAL_TIM_PWM_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002d28:	f001 facf 	bl	80042ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4821      	ldr	r0, [pc, #132]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d3c:	f006 f9bc 	bl	80090b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002d46:	f001 fac0 	bl	80042ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d4a:	2360      	movs	r3, #96	; 0x60
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d56:	2300      	movs	r3, #0
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002d70:	f005 fd24 	bl	80087bc <HAL_TIM_PWM_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002d7a:	f001 faa6 	bl	80042ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002da2:	f006 f9f7 	bl	8009194 <HAL_TIMEx_ConfigBreakDeadTime>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002dac:	f001 fa8d 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002db0:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <MX_TIM1_Init+0x100>)
 8002db2:	f001 fbe1 	bl	8004578 <HAL_TIM_MspPostInit>

}
 8002db6:	bf00      	nop
 8002db8:	3748      	adds	r7, #72	; 0x48
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000047c 	.word	0x2000047c
 8002dc4:	40010000 	.word	0x40010000

08002dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f007 ff68 	bl	800acac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002dfa:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002dfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e20:	2300      	movs	r3, #0
 8002e22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	480d      	ldr	r0, [pc, #52]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002e38:	f005 fa84 	bl	8008344 <HAL_TIM_Encoder_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002e42:	f001 fa42 	bl	80042ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4806      	ldr	r0, [pc, #24]	; (8002e6c <MX_TIM2_Init+0xa4>)
 8002e54:	f006 f930 	bl	80090b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002e5e:	f001 fa34 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	3730      	adds	r7, #48	; 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200004c4 	.word	0x200004c4

08002e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <MX_TIM3_Init+0x98>)
 8002e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002e94:	2209      	movs	r2, #9
 8002e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002ea0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eb2:	4814      	ldr	r0, [pc, #80]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002eb4:	f005 f894 	bl	8007fe0 <HAL_TIM_Base_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ebe:	f001 fa04 	bl	80042ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ec8:	f107 0308 	add.w	r3, r7, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002ed0:	f005 fd36 	bl	8008940 <HAL_TIM_ConfigClockSource>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002eda:	f001 f9f6 	bl	80042ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <MX_TIM3_Init+0x94>)
 8002eec:	f006 f8e4 	bl	80090b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ef6:	f001 f9e8 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	2000050c 	.word	0x2000050c
 8002f08:	40000400 	.word	0x40000400

08002f0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	463b      	mov	r3, r7
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <MX_TIM4_Init+0x98>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f30:	2209      	movs	r2, #9
 8002f32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f4e:	4814      	ldr	r0, [pc, #80]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f50:	f005 f846 	bl	8007fe0 <HAL_TIM_Base_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f5a:	f001 f9b6 	bl	80042ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480d      	ldr	r0, [pc, #52]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f6c:	f005 fce8 	bl	8008940 <HAL_TIM_ConfigClockSource>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f76:	f001 f9a8 	bl	80042ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f82:	463b      	mov	r3, r7
 8002f84:	4619      	mov	r1, r3
 8002f86:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <MX_TIM4_Init+0x94>)
 8002f88:	f006 f896 	bl	80090b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f92:	f001 f99a 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000554 	.word	0x20000554
 8002fa4:	40000800 	.word	0x40000800

08002fa8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <MX_TIM11_Init+0x44>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fb4:	2263      	movs	r2, #99	; 0x63
 8002fb6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_TIM11_Init+0x40>)
 8002fd4:	f005 f804 	bl	8007fe0 <HAL_TIM_Base_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002fde:	f001 f974 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000059c 	.word	0x2000059c
 8002fec:	40014800 	.word	0x40014800

08002ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <MX_USART2_UART_Init+0x54>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8002ffc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8003000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8003004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003008:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <MX_USART2_UART_Init+0x50>)
 800300c:	2200      	movs	r2, #0
 800300e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8003012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_USART2_UART_Init+0x50>)
 800301a:	220c      	movs	r2, #12
 800301c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_USART2_UART_Init+0x50>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800302a:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_USART2_UART_Init+0x50>)
 800302c:	f006 f918 	bl	8009260 <HAL_UART_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8003036:	f001 f948 	bl	80042ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200005e4 	.word	0x200005e4
 8003044:	40004400 	.word	0x40004400

08003048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <MX_DMA_Init+0x4c>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <MX_DMA_Init+0x4c>)
 8003058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <MX_DMA_Init+0x4c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2010      	movs	r0, #16
 8003070:	f001 fd93 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003074:	2010      	movs	r0, #16
 8003076:	f001 fdac 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2011      	movs	r0, #17
 8003080:	f001 fd8b 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003084:	2011      	movs	r0, #17
 8003086:	f001 fda4 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a45      	ldr	r2, [pc, #276]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a3e      	ldr	r2, [pc, #248]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <MX_GPIO_Init+0x150>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <MX_GPIO_Init+0x150>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a37      	ldr	r2, [pc, #220]	; (80031e8 <MX_GPIO_Init+0x150>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b35      	ldr	r3, [pc, #212]	; (80031e8 <MX_GPIO_Init+0x150>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003124:	4831      	ldr	r0, [pc, #196]	; (80031ec <MX_GPIO_Init+0x154>)
 8003126:	f002 fb03 	bl	8005730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 800312a:	2200      	movs	r2, #0
 800312c:	2118      	movs	r1, #24
 800312e:	4830      	ldr	r0, [pc, #192]	; (80031f0 <MX_GPIO_Init+0x158>)
 8003130:	f002 fafe 	bl	8005730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800313a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800313e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	482a      	ldr	r0, [pc, #168]	; (80031f4 <MX_GPIO_Init+0x15c>)
 800314c:	f002 f96c 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8003150:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	4820      	ldr	r0, [pc, #128]	; (80031ec <MX_GPIO_Init+0x154>)
 800316a:	f002 f95d 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003174:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4819      	ldr	r0, [pc, #100]	; (80031ec <MX_GPIO_Init+0x154>)
 8003186:	f002 f94f 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 800318a:	2318      	movs	r3, #24
 800318c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4813      	ldr	r0, [pc, #76]	; (80031f0 <MX_GPIO_Init+0x158>)
 80031a2:	f002 f941 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 80031a6:	2320      	movs	r3, #32
 80031a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <MX_GPIO_Init+0x158>)
 80031bc:	f002 f934 	bl	8005428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	2017      	movs	r0, #23
 80031c6:	f001 fce8 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031ca:	2017      	movs	r0, #23
 80031cc:	f001 fd01 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	2028      	movs	r0, #40	; 0x28
 80031d6:	f001 fce0 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031da:	2028      	movs	r0, #40	; 0x28
 80031dc:	f001 fcf9 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800

080031f8 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80031fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	461a      	mov	r2, r3
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <EncoderRead+0xd8>)
 8003206:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <EncoderRead+0xd8>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <EncoderRead+0xd8>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	1ad2      	subs	r2, r2, r3
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <EncoderRead+0xdc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	425b      	negs	r3, r3
 8003218:	429a      	cmp	r2, r3
 800321a:	da07      	bge.n	800322c <EncoderRead+0x34>
		WrappingStep+=12000;
 800321c:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <EncoderRead+0xe0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003224:	3320      	adds	r3, #32
 8003226:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <EncoderRead+0xe0>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00f      	b.n	800324c <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <EncoderRead+0xd8>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <EncoderRead+0xd8>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	1ad2      	subs	r2, r2, r3
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <EncoderRead+0xdc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	db06      	blt.n	800324c <EncoderRead+0x54>
		WrappingStep-=12000;
 800323e:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <EncoderRead+0xe0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8003246:	3b20      	subs	r3, #32
 8003248:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <EncoderRead+0xe0>)
 800324a:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <EncoderRead+0xd8>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <EncoderRead+0xe0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4413      	add	r3, r2
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <EncoderRead+0xe4>)
 8003258:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <EncoderRead+0xe4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f90c 	bl	800047c <__aeabi_i2d>
 8003264:	a318      	add	r3, pc, #96	; (adr r3, 80032c8 <EncoderRead+0xd0>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f7fd fa9b 	bl	80007a4 <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <EncoderRead+0xe8>)
 800327c:	f7fd f968 	bl	8000550 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f7fd fb94 	bl	80009b4 <__aeabi_d2f>
 800328c:	4603      	mov	r3, r0
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <EncoderRead+0xec>)
 8003290:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <EncoderRead+0xec>)
 8003294:	ed93 7a00 	vldr	s14, [r3]
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <EncoderRead+0xec>)
 800329a:	edd3 7a01 	vldr	s15, [r3, #4]
 800329e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80032e8 <EncoderRead+0xf0>
 80032a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <EncoderRead+0xf4>)
 80032ac:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <EncoderRead+0xd8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <EncoderRead+0xd8>)
 80032b6:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <EncoderRead+0xec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <EncoderRead+0xec>)
 80032be:	6053      	str	r3, [r2, #4]
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	f3af 8000 	nop.w
 80032c8:	00000000 	.word	0x00000000
 80032cc:	40c77000 	.word	0x40c77000
 80032d0:	20000770 	.word	0x20000770
 80032d4:	200003f4 	.word	0x200003f4
 80032d8:	20000778 	.word	0x20000778
 80032dc:	2000077c 	.word	0x2000077c
 80032e0:	40768000 	.word	0x40768000
 80032e4:	20000780 	.word	0x20000780
 80032e8:	3a83126f 	.word	0x3a83126f
 80032ec:	20000788 	.word	0x20000788

080032f0 <Int32Abs>:

uint32_t Int32Abs(int32_t PWM)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da02      	bge.n	8003304 <Int32Abs+0x14>
		return PWM*-1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	425b      	negs	r3, r3
 8003302:	e000      	b.n	8003306 <Int32Abs+0x16>
	}else{
		return PWM;
 8003304:	687b      	ldr	r3, [r7, #4]
	}
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	dc11      	bgt.n	8003346 <Drivemotor+0x32>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <Drivemotor+0xa8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	db0d      	blt.n	8003346 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <Drivemotor+0xac>)
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffde 	bl	80032f0 <Int32Abs>
 8003334:	4603      	mov	r3, r0
 8003336:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333e:	4821      	ldr	r0, [pc, #132]	; (80033c4 <Drivemotor+0xb0>)
 8003340:	f002 f9f6 	bl	8005730 <HAL_GPIO_WritePin>
 8003344:	e036      	b.n	80033b4 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <Drivemotor+0xa8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	da0b      	bge.n	8003366 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <Drivemotor+0xac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f242 7210 	movw	r2, #10000	; 0x2710
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335e:	4819      	ldr	r0, [pc, #100]	; (80033c4 <Drivemotor+0xb0>)
 8003360:	f002 f9e6 	bl	8005730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003364:	e026      	b.n	80033b4 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db12      	blt.n	8003392 <Drivemotor+0x7e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003372:	4293      	cmp	r3, r2
 8003374:	dc0d      	bgt.n	8003392 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <Drivemotor+0xac>)
 8003378:	681c      	ldr	r4, [r3, #0]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffb8 	bl	80032f0 <Int32Abs>
 8003380:	4603      	mov	r3, r0
 8003382:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003384:	2201      	movs	r2, #1
 8003386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800338a:	480e      	ldr	r0, [pc, #56]	; (80033c4 <Drivemotor+0xb0>)
 800338c:	f002 f9d0 	bl	8005730 <HAL_GPIO_WritePin>
 8003390:	e010      	b.n	80033b4 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f242 7210 	movw	r2, #10000	; 0x2710
 8003398:	4293      	cmp	r3, r2
 800339a:	dd0b      	ble.n	80033b4 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <Drivemotor+0xac>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ac:	4805      	ldr	r0, [pc, #20]	; (80033c4 <Drivemotor+0xb0>)
 80033ae:	f002 f9bf 	bl	8005730 <HAL_GPIO_WritePin>
}
 80033b2:	e7ff      	b.n	80033b4 <Drivemotor+0xa0>
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	ffffd8f0 	.word	0xffffd8f0
 80033c0:	2000047c 	.word	0x2000047c
 80033c4:	40020000 	.word	0x40020000

080033c8 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
//	setpoint = 40.0;
//	PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	PWMCHECKER = PidVelo.ControllerOut;
//	Drivemotor(PWMCHECKER);
	if(Robot.MotorIsOn == 1)
 80033ce:	4b54      	ldr	r3, [pc, #336]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80033d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8092 	bne.w	80034fe <ControllLoopAndErrorHandler+0x136>
	{
		if (Robot.flagStartTime == 1)
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80033dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10a      	bne.n	80033fa <ControllLoopAndErrorHandler+0x32>
		{
			StartTime = Micros();
 80033e4:	f000 f912 	bl	800360c <Micros>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	494d      	ldr	r1, [pc, #308]	; (8003524 <ControllLoopAndErrorHandler+0x15c>)
 80033ee:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
		CurrentTime = Micros();
 80033fa:	f000 f907 	bl	800360c <Micros>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4949      	ldr	r1, [pc, #292]	; (8003528 <ControllLoopAndErrorHandler+0x160>)
 8003404:	e9c1 2300 	strd	r2, r3, [r1]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <ControllLoopAndErrorHandler+0x15c>)
 800340a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800340e:	4b46      	ldr	r3, [pc, #280]	; (8003528 <ControllLoopAndErrorHandler+0x160>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	e9cd 2300 	strd	r2, r3, [sp]
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4843      	ldr	r0, [pc, #268]	; (800352c <ControllLoopAndErrorHandler+0x164>)
 800341e:	f7fe ff2b 	bl	8002278 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 8003422:	4b42      	ldr	r3, [pc, #264]	; (800352c <ControllLoopAndErrorHandler+0x164>)
 8003424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 800342a:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 800342c:	4b3f      	ldr	r3, [pc, #252]	; (800352c <ControllLoopAndErrorHandler+0x164>)
 800342e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003432:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 8003434:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 8003438:	ed93 7a03 	vldr	s14, [r3, #12]
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	f7fe f89e 	bl	800158a <AbsVal>
 800344e:	eef0 7a40 	vmov.f32	s15, s0
 8003452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d521      	bpl.n	80034a4 <ControllLoopAndErrorHandler+0xdc>
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 8003462:	edd3 7a01 	vldr	s15, [r3, #4]
 8003466:	eeb0 0a67 	vmov.f32	s0, s15
 800346a:	f7fe f88e 	bl	800158a <AbsVal>
 800346e:	eef0 7a40 	vmov.f32	s15, s0
 8003472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d511      	bpl.n	80034a4 <ControllLoopAndErrorHandler+0xdc>
		{
			PWMCHECKER = 0.0;
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003492:	ee17 0a90 	vmov	r0, s15
 8003496:	f7ff ff3d 	bl	8003314 <Drivemotor>
			Robot.RunningFlag = 0;
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 80034a2:	e039      	b.n	8003518 <ControllLoopAndErrorHandler+0x150>
			PIDVelocityController_Update(&PidPos, Robot.QX , Robot.Position);
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80034a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80034ac:	ed93 7a00 	vldr	s14, [r3]
 80034b0:	eef0 0a47 	vmov.f32	s1, s14
 80034b4:	eeb0 0a67 	vmov.f32	s0, s15
 80034b8:	481e      	ldr	r0, [pc, #120]	; (8003534 <ControllLoopAndErrorHandler+0x16c>)
 80034ba:	f7fd ff7e 	bl	80013ba <PIDVelocityController_Update>
			PIDVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut  , Robot.Velocity);
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80034c0:	ed93 7a07 	vldr	s14, [r3, #28]
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <ControllLoopAndErrorHandler+0x16c>)
 80034c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80034ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <ControllLoopAndErrorHandler+0x158>)
 80034d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80034d4:	eef0 0a47 	vmov.f32	s1, s14
 80034d8:	eeb0 0a67 	vmov.f32	s0, s15
 80034dc:	4816      	ldr	r0, [pc, #88]	; (8003538 <ControllLoopAndErrorHandler+0x170>)
 80034de:	f7fd ff6c 	bl	80013ba <PIDVelocityController_Update>
			PWMCHECKER = PidVelo.ControllerOut;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <ControllLoopAndErrorHandler+0x170>)
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 80034e8:	6013      	str	r3, [r2, #0]
			Drivemotor(PWMCHECKER);
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f4:	ee17 0a90 	vmov	r0, s15
 80034f8:	f7ff ff0c 	bl	8003314 <Drivemotor>
}
 80034fc:	e00c      	b.n	8003518 <ControllLoopAndErrorHandler+0x150>
		PWMCHECKER = 0.0;
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <ControllLoopAndErrorHandler+0x168>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003510:	ee17 0a90 	vmov	r0, s15
 8003514:	f7ff fefe 	bl	8003314 <Drivemotor>
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200006e8 	.word	0x200006e8
 8003524:	20000848 	.word	0x20000848
 8003528:	20000850 	.word	0x20000850
 800352c:	20000790 	.word	0x20000790
 8003530:	2000078c 	.word	0x2000078c
 8003534:	200003c0 	.word	0x200003c0
 8003538:	2000038c 	.word	0x2000038c

0800353c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800353c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10c      	bne.n	8003568 <HAL_TIM_PeriodElapsedCallback+0x2c>
		_micro += 65535;
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003558:	eb12 0801 	adds.w	r8, r2, r1
 800355c:	f143 0900 	adc.w	r9, r3, #0
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003562:	e9c3 8900 	strd	r8, r9, [r3]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
	}
	else if (htim == &htim4) {

		}
}
 8003566:	e039      	b.n	80035dc <HAL_TIM_PeriodElapsedCallback+0xa0>
	else if (htim == &htim3) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d135      	bne.n	80035dc <HAL_TIM_PeriodElapsedCallback+0xa0>
		CheckLoopStartTime = Micros();
 8003570:	f000 f84c 	bl	800360c <Micros>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	491e      	ldr	r1, [pc, #120]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800357a:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 800357e:	f7ff fe3b 	bl	80031f8 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	eeb0 0a67 	vmov.f32	s0, s15
 800358c:	481b      	ldr	r0, [pc, #108]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800358e:	f7fd fdc1 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003598:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80035a2:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 80035a4:	f7ff ff10 	bl	80033c8 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 80035a8:	f000 f830 	bl	800360c <Micros>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4914      	ldr	r1, [pc, #80]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035b2:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStopTime = Micros();
 80035b6:	f000 f829 	bl	800360c <Micros>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4911      	ldr	r1, [pc, #68]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035c0:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	1a84      	subs	r4, r0, r2
 80035d2:	eb61 0503 	sbc.w	r5, r1, r3
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80035d8:	e9c3 4500 	strd	r4, r5, [r3]
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035e6:	bf00      	nop
 80035e8:	2000059c 	.word	0x2000059c
 80035ec:	20000768 	.word	0x20000768
 80035f0:	2000050c 	.word	0x2000050c
 80035f4:	20000858 	.word	0x20000858
 80035f8:	20000780 	.word	0x20000780
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	200006e8 	.word	0x200006e8
 8003604:	20000860 	.word	0x20000860
 8003608:	20000868 	.word	0x20000868

0800360c <Micros>:

uint64_t Micros(){
 800360c:	b4b0      	push	{r4, r5, r7}
 800360e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <Micros+0x28>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	4618      	mov	r0, r3
 8003618:	4611      	mov	r1, r2
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <Micros+0x2c>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	1884      	adds	r4, r0, r2
 8003622:	eb41 0503 	adc.w	r5, r1, r3
 8003626:	4622      	mov	r2, r4
 8003628:	462b      	mov	r3, r5
}
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bcb0      	pop	{r4, r5, r7}
 8003632:	4770      	bx	lr
 8003634:	40014800 	.word	0x40014800
 8003638:	20000768 	.word	0x20000768

0800363c <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003640:	2206      	movs	r2, #6
 8003642:	2100      	movs	r1, #0
 8003644:	4811      	ldr	r0, [pc, #68]	; (800368c <Ringbuf_Init+0x50>)
 8003646:	f007 fb31 	bl	800acac <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 800364a:	220c      	movs	r2, #12
 800364c:	2100      	movs	r1, #0
 800364e:	4810      	ldr	r0, [pc, #64]	; (8003690 <Ringbuf_Init+0x54>)
 8003650:	f007 fb2c 	bl	800acac <memset>

	Head = Tail = 0;
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <Ringbuf_Init+0x58>)
 8003656:	2200      	movs	r2, #0
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <Ringbuf_Init+0x58>)
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <Ringbuf_Init+0x5c>)
 8003660:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <Ringbuf_Init+0x60>)
 8003664:	2200      	movs	r2, #0
 8003666:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <Ringbuf_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 800366e:	2206      	movs	r2, #6
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <Ringbuf_Init+0x50>)
 8003672:	480c      	ldr	r0, [pc, #48]	; (80036a4 <Ringbuf_Init+0x68>)
 8003674:	f005 fec0 	bl	80093f8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <Ringbuf_Init+0x6c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <Ringbuf_Init+0x6c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0208 	bic.w	r2, r2, #8
 8003686:	601a      	str	r2, [r3, #0]
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	2000071c 	.word	0x2000071c
 8003690:	20000724 	.word	0x20000724
 8003694:	20000738 	.word	0x20000738
 8003698:	20000736 	.word	0x20000736
 800369c:	20000732 	.word	0x20000732
 80036a0:	20000734 	.word	0x20000734
 80036a4:	200005e4 	.word	0x200005e4
 80036a8:	20000628 	.word	0x20000628

080036ac <checkSum>:
	oldPos = 0;
	newPos = 0;
}

uint8_t checkSum (uint8_t *buffertoCheckSum , uint16_t StartPos, uint16_t EndPos)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	803b      	strh	r3, [r7, #0]
	uint8_t sum = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]
	uint16_t bufferSize = EndPos - StartPos;
 80036c0:	883a      	ldrh	r2, [r7, #0]
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < bufferSize-1; ++index)
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e00c      	b.n	80036e8 <checkSum+0x3c>
	{
		sum = sum + buffertoCheckSum[StartPos+index];
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	4413      	add	r3, r2
 80036e0:	75fb      	strb	r3, [r7, #23]
	for (int index = 0; index < bufferSize-1; ++index)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3301      	adds	r3, #1
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	89fb      	ldrh	r3, [r7, #14]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	dbed      	blt.n	80036ce <checkSum+0x22>
	}
	if((uint8_t)(buffertoCheckSum[bufferSize-1+StartPos])==(uint8_t)(~sum))
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	4413      	add	r3, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	43db      	mvns	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	429a      	cmp	r2, r3
 800370a:	d101      	bne.n	8003710 <checkSum+0x64>
	{
		return 1;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <checkSum+0x66>
	}
	else
	{
		return 0;
 8003710:	2300      	movs	r3, #0
	}
}
 8003712:	4618      	mov	r0, r3
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_UARTEx_RxEventCallback>:
	}
	return 2;
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
//		else
//		{
//			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
//			newPos = Size+oldPos;
//		}
		oldPos = 0;
 800372c:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_UARTEx_RxEventCallback+0x64>)
 800372e:	2200      	movs	r2, #0
 8003730:	801a      	strh	r2, [r3, #0]
		newPos = Size;
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_UARTEx_RxEventCallback+0x68>)
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	8013      	strh	r3, [r2, #0]
		memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf, Size);
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	461a      	mov	r2, r3
 800373c:	4913      	ldr	r1, [pc, #76]	; (800378c <HAL_UARTEx_RxEventCallback+0x6c>)
 800373e:	4814      	ldr	r0, [pc, #80]	; (8003790 <HAL_UARTEx_RxEventCallback+0x70>)
 8003740:	f007 faa6 	bl	800ac90 <memcpy>
		 */
//		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
//		else Head = Head+Size - MainBuf_SIZE;

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003744:	2206      	movs	r2, #6
 8003746:	4911      	ldr	r1, [pc, #68]	; (800378c <HAL_UARTEx_RxEventCallback+0x6c>)
 8003748:	4812      	ldr	r0, [pc, #72]	; (8003794 <HAL_UARTEx_RxEventCallback+0x74>)
 800374a:	f005 fe55 	bl	80093f8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_UARTEx_RxEventCallback+0x78>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_UARTEx_RxEventCallback+0x78>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0208 	bic.w	r2, r2, #8
 800375c:	601a      	str	r2, [r3, #0]


	/****************** PROCESS (Little) THE DATA HERE *********************/
		if(checkSum(MainBuf, oldPos, newPos))
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_UARTEx_RxEventCallback+0x64>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_UARTEx_RxEventCallback+0x68>)
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	4619      	mov	r1, r3
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <HAL_UARTEx_RxEventCallback+0x70>)
 800376a:	f7ff ff9f 	bl	80036ac <checkSum>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UARTEx_RxEventCallback+0x5a>
		{
			UARTstateManagement(MainBuf);
 8003774:	4806      	ldr	r0, [pc, #24]	; (8003790 <HAL_UARTEx_RxEventCallback+0x70>)
 8003776:	f000 f813 	bl	80037a0 <UARTstateManagement>
		}
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000732 	.word	0x20000732
 8003788:	20000734 	.word	0x20000734
 800378c:	2000071c 	.word	0x2000071c
 8003790:	20000724 	.word	0x20000724
 8003794:	200005e4 	.word	0x200005e4
 8003798:	20000628 	.word	0x20000628
 800379c:	00000000 	.word	0x00000000

080037a0 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	uint16_t rxDatalen = newPos - oldPos;
 80037a8:	4bad      	ldr	r3, [pc, #692]	; (8003a60 <UARTstateManagement+0x2c0>)
 80037aa:	881a      	ldrh	r2, [r3, #0]
 80037ac:	4bad      	ldr	r3, [pc, #692]	; (8003a64 <UARTstateManagement+0x2c4>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	817b      	strh	r3, [r7, #10]
	switch (UARTState)
 80037b4:	4bac      	ldr	r3, [pc, #688]	; (8003a68 <UARTstateManagement+0x2c8>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d01d      	beq.n	80037f8 <UARTstateManagement+0x58>
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f300 8303 	bgt.w	8003dc8 <UARTstateManagement+0x628>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 82fd 	beq.w	8003dc2 <UARTstateManagement+0x622>
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d000      	beq.n	80037ce <UARTstateManagement+0x2e>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 80037cc:	e2fc      	b.n	8003dc8 <UARTstateManagement+0x628>
			if(Mainbuffer[oldPos] == 0b10010010)
 80037ce:	4ba5      	ldr	r3, [pc, #660]	; (8003a64 <UARTstateManagement+0x2c4>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b92      	cmp	r3, #146	; 0x92
 80037dc:	f040 82f3 	bne.w	8003dc6 <UARTstateManagement+0x626>
				modeNo = 2;
 80037e0:	4ba2      	ldr	r3, [pc, #648]	; (8003a6c <UARTstateManagement+0x2cc>)
 80037e2:	2202      	movs	r2, #2
 80037e4:	701a      	strb	r2, [r3, #0]
				UARTState = normOperation;
 80037e6:	4ba0      	ldr	r3, [pc, #640]	; (8003a68 <UARTstateManagement+0x2c8>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80037ec:	2202      	movs	r2, #2
 80037ee:	49a0      	ldr	r1, [pc, #640]	; (8003a70 <UARTstateManagement+0x2d0>)
 80037f0:	48a0      	ldr	r0, [pc, #640]	; (8003a74 <UARTstateManagement+0x2d4>)
 80037f2:	f005 fd83 	bl	80092fc <HAL_UART_Transmit_DMA>
			break;
 80037f6:	e2e6      	b.n	8003dc6 <UARTstateManagement+0x626>
			if((Mainbuffer[oldPos] >> 4) == 0b1001) stateSwitch = Mainbuffer[oldPos];
 80037f8:	4b9a      	ldr	r3, [pc, #616]	; (8003a64 <UARTstateManagement+0x2c4>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b09      	cmp	r3, #9
 800380a:	d108      	bne.n	800381e <UARTstateManagement+0x7e>
 800380c:	4b95      	ldr	r3, [pc, #596]	; (8003a64 <UARTstateManagement+0x2c4>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	4b97      	ldr	r3, [pc, #604]	; (8003a78 <UARTstateManagement+0x2d8>)
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <UARTstateManagement+0x8e>
			else stateSwitch = Mainbuffer[oldPos+2];
 800381e:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <UARTstateManagement+0x2c4>)
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	3302      	adds	r3, #2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <UARTstateManagement+0x2d8>)
 800382c:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <UARTstateManagement+0x2d8>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	3b91      	subs	r3, #145	; 0x91
 8003834:	2b0d      	cmp	r3, #13
 8003836:	f200 82c7 	bhi.w	8003dc8 <UARTstateManagement+0x628>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <UARTstateManagement+0xa0>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003879 	.word	0x08003879
 8003844:	0800388b 	.word	0x0800388b
 8003848:	080038a3 	.word	0x080038a3
 800384c:	080038bb 	.word	0x080038bb
 8003850:	08003909 	.word	0x08003909
 8003854:	08003961 	.word	0x08003961
 8003858:	0800398b 	.word	0x0800398b
 800385c:	08003a03 	.word	0x08003a03
 8003860:	08003a9d 	.word	0x08003a9d
 8003864:	08003b3b 	.word	0x08003b3b
 8003868:	08003c2f 	.word	0x08003c2f
 800386c:	08003d6d 	.word	0x08003d6d
 8003870:	08003d85 	.word	0x08003d85
 8003874:	08003d9d 	.word	0x08003d9d
					modeNo = 1;
 8003878:	4b7c      	ldr	r3, [pc, #496]	; (8003a6c <UARTstateManagement+0x2cc>)
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800387e:	2202      	movs	r2, #2
 8003880:	497b      	ldr	r1, [pc, #492]	; (8003a70 <UARTstateManagement+0x2d0>)
 8003882:	487c      	ldr	r0, [pc, #496]	; (8003a74 <UARTstateManagement+0x2d4>)
 8003884:	f005 fd3a 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003888:	e29e      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 2;
 800388a:	4b78      	ldr	r3, [pc, #480]	; (8003a6c <UARTstateManagement+0x2cc>)
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8003890:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <UARTstateManagement+0x2c8>)
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003896:	2202      	movs	r2, #2
 8003898:	4975      	ldr	r1, [pc, #468]	; (8003a70 <UARTstateManagement+0x2d0>)
 800389a:	4876      	ldr	r0, [pc, #472]	; (8003a74 <UARTstateManagement+0x2d4>)
 800389c:	f005 fd2e 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 80038a0:	e292      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 3;
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <UARTstateManagement+0x2cc>)
 80038a4:	2203      	movs	r2, #3
 80038a6:	701a      	strb	r2, [r3, #0]
					UARTState = MCDisCon;
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <UARTstateManagement+0x2c8>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80038ae:	2202      	movs	r2, #2
 80038b0:	496f      	ldr	r1, [pc, #444]	; (8003a70 <UARTstateManagement+0x2d0>)
 80038b2:	4870      	ldr	r0, [pc, #448]	; (8003a74 <UARTstateManagement+0x2d4>)
 80038b4:	f005 fd22 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 80038b8:	e286      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 4;
 80038ba:	4b6c      	ldr	r3, [pc, #432]	; (8003a6c <UARTstateManagement+0x2cc>)
 80038bc:	2204      	movs	r2, #4
 80038be:	701a      	strb	r2, [r3, #0]
					uartVelo = ((Mainbuffer[2])/255.0)*10.0;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3302      	adds	r3, #2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fdd8 	bl	800047c <__aeabi_i2d>
 80038cc:	a360      	add	r3, pc, #384	; (adr r3, 8003a50 <UARTstateManagement+0x2b0>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc ff67 	bl	80007a4 <__aeabi_ddiv>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b66      	ldr	r3, [pc, #408]	; (8003a7c <UARTstateManagement+0x2dc>)
 80038e4:	f7fc fe34 	bl	8000550 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f7fd f840 	bl	8000974 <__aeabi_d2uiz>
 80038f4:	4603      	mov	r3, r0
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <UARTstateManagement+0x2e0>)
 80038fa:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80038fc:	2202      	movs	r2, #2
 80038fe:	495c      	ldr	r1, [pc, #368]	; (8003a70 <UARTstateManagement+0x2d0>)
 8003900:	485c      	ldr	r0, [pc, #368]	; (8003a74 <UARTstateManagement+0x2d4>)
 8003902:	f005 fcfb 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003906:	e25f      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 5;
 8003908:	4b58      	ldr	r3, [pc, #352]	; (8003a6c <UARTstateManagement+0x2cc>)
 800390a:	2205      	movs	r2, #5
 800390c:	701a      	strb	r2, [r3, #0]
					uartPos = (uint16_t)((((Mainbuffer[1] << 8) | Mainbuffer[2])*360.0)/62800);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3301      	adds	r3, #1
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	3202      	adds	r2, #2
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fdac 	bl	800047c <__aeabi_i2d>
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <UARTstateManagement+0x2e4>)
 800392a:	f7fc fe11 	bl	8000550 <__aeabi_dmul>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	a348      	add	r3, pc, #288	; (adr r3, 8003a58 <UARTstateManagement+0x2b8>)
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f7fc ff32 	bl	80007a4 <__aeabi_ddiv>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fd f814 	bl	8000974 <__aeabi_d2uiz>
 800394c:	4603      	mov	r3, r0
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <UARTstateManagement+0x2e8>)
 8003952:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003954:	2202      	movs	r2, #2
 8003956:	4946      	ldr	r1, [pc, #280]	; (8003a70 <UARTstateManagement+0x2d0>)
 8003958:	4846      	ldr	r0, [pc, #280]	; (8003a74 <UARTstateManagement+0x2d4>)
 800395a:	f005 fccf 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 800395e:	e233      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 6;
 8003960:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <UARTstateManagement+0x2cc>)
 8003962:	2206      	movs	r2, #6
 8003964:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, 0, 15);
 8003966:	220f      	movs	r2, #15
 8003968:	2100      	movs	r1, #0
 800396a:	4848      	ldr	r0, [pc, #288]	; (8003a8c <UARTstateManagement+0x2ec>)
 800396c:	f007 f99e 	bl	800acac <memset>
					goalAmount = 1;
 8003970:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <UARTstateManagement+0x2f0>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[2];
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	789a      	ldrb	r2, [r3, #2]
 800397a:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <UARTstateManagement+0x2ec>)
 800397c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800397e:	2202      	movs	r2, #2
 8003980:	493b      	ldr	r1, [pc, #236]	; (8003a70 <UARTstateManagement+0x2d0>)
 8003982:	483c      	ldr	r0, [pc, #240]	; (8003a74 <UARTstateManagement+0x2d4>)
 8003984:	f005 fcba 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003988:	e21e      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 7;
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <UARTstateManagement+0x2cc>)
 800398c:	2207      	movs	r2, #7
 800398e:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, 0, 15);
 8003990:	220f      	movs	r2, #15
 8003992:	2100      	movs	r1, #0
 8003994:	483d      	ldr	r0, [pc, #244]	; (8003a8c <UARTstateManagement+0x2ec>)
 8003996:	f007 f989 	bl	800acac <memset>
					goalAmount = Mainbuffer[1];
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	785a      	ldrb	r2, [r3, #1]
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <UARTstateManagement+0x2f0>)
 80039a0:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e01c      	b.n	80039e2 <UARTstateManagement+0x242>
						uartGoal[0+(i*2)] = Mainbuffer[(2+i)] & 15; // low 8 bit (last 4 bit)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3302      	adds	r3, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	f002 020f 	and.w	r2, r2, #15
 80039bc:	b2d1      	uxtb	r1, r2
 80039be:	4a33      	ldr	r2, [pc, #204]	; (8003a8c <UARTstateManagement+0x2ec>)
 80039c0:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[(2+i)] >> 4; // high 8 bit (first 4 bit)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3302      	adds	r3, #2
 80039c6:	461a      	mov	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	3301      	adds	r3, #1
 80039d4:	0912      	lsrs	r2, r2, #4
 80039d6:	b2d1      	uxtb	r1, r2
 80039d8:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <UARTstateManagement+0x2ec>)
 80039da:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <UARTstateManagement+0x2f0>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	0fda      	lsrs	r2, r3, #31
 80039ea:	4413      	add	r3, r2
 80039ec:	105b      	asrs	r3, r3, #1
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	dbd8      	blt.n	80039a8 <UARTstateManagement+0x208>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80039f6:	2202      	movs	r2, #2
 80039f8:	491d      	ldr	r1, [pc, #116]	; (8003a70 <UARTstateManagement+0x2d0>)
 80039fa:	481e      	ldr	r0, [pc, #120]	; (8003a74 <UARTstateManagement+0x2d4>)
 80039fc:	f005 fc7e 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003a00:	e1e2      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 8;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <UARTstateManagement+0x2cc>)
 8003a04:	2208      	movs	r2, #8
 8003a06:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <UARTstateManagement+0x2e8>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <UARTstateManagement+0x2f4>)
 8003a16:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <UARTstateManagement+0x2f4>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <UARTstateManagement+0x2f4>)
 8003a22:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a26:	eef0 0a47 	vmov.f32	s1, s14
 8003a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2e:	481a      	ldr	r0, [pc, #104]	; (8003a98 <UARTstateManagement+0x2f8>)
 8003a30:	f7fd fdce 	bl	80015d0 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <UARTstateManagement+0x2f4>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					Robot.RunningFlag = 1;
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <UARTstateManagement+0x2f4>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a44:	2202      	movs	r2, #2
 8003a46:	490a      	ldr	r1, [pc, #40]	; (8003a70 <UARTstateManagement+0x2d0>)
 8003a48:	480a      	ldr	r0, [pc, #40]	; (8003a74 <UARTstateManagement+0x2d4>)
 8003a4a:	f005 fc57 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003a4e:	e1bb      	b.n	8003dc8 <UARTstateManagement+0x628>
 8003a50:	00000000 	.word	0x00000000
 8003a54:	406fe000 	.word	0x406fe000
 8003a58:	00000000 	.word	0x00000000
 8003a5c:	40eeaa00 	.word	0x40eeaa00
 8003a60:	20000734 	.word	0x20000734
 8003a64:	20000732 	.word	0x20000732
 8003a68:	20000718 	.word	0x20000718
 8003a6c:	20000762 	.word	0x20000762
 8003a70:	20000004 	.word	0x20000004
 8003a74:	200005e4 	.word	0x200005e4
 8003a78:	20000731 	.word	0x20000731
 8003a7c:	40240000 	.word	0x40240000
 8003a80:	2000074a 	.word	0x2000074a
 8003a84:	40768000 	.word	0x40768000
 8003a88:	2000074c 	.word	0x2000074c
 8003a8c:	20000750 	.word	0x20000750
 8003a90:	2000075f 	.word	0x2000075f
 8003a94:	200006e8 	.word	0x200006e8
 8003a98:	20000790 	.word	0x20000790
					modeNo = 9;
 8003a9c:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <UARTstateManagement+0x558>)
 8003a9e:	2209      	movs	r2, #9
 8003aa0:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003aa2:	4b96      	ldr	r3, [pc, #600]	; (8003cfc <UARTstateManagement+0x55c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8003aa8:	4b95      	ldr	r3, [pc, #596]	; (8003d00 <UARTstateManagement+0x560>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	811a      	strh	r2, [r3, #8]
					if(Robot.RunningFlag == 1){
 8003aae:	4b94      	ldr	r3, [pc, #592]	; (8003d00 <UARTstateManagement+0x560>)
 8003ab0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d11d      	bne.n	8003af4 <UARTstateManagement+0x354>
 8003ab8:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <UARTstateManagement+0x564>)
 8003aba:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003abc:	4b92      	ldr	r3, [pc, #584]	; (8003d08 <UARTstateManagement+0x568>)
 8003abe:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 8003ac0:	4b91      	ldr	r3, [pc, #580]	; (8003d08 <UARTstateManagement+0x568>)
 8003ac2:	2299      	movs	r2, #153	; 0x99
 8003ac4:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 8003ac6:	4b90      	ldr	r3, [pc, #576]	; (8003d08 <UARTstateManagement+0x568>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	70da      	strb	r2, [r3, #3]
						sendData[4] = Robot.CurrentStation; // set current goal
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <UARTstateManagement+0x560>)
 8003ace:	891b      	ldrh	r3, [r3, #8]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <UARTstateManagement+0x568>)
 8003ad4:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003ad6:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <UARTstateManagement+0x568>)
 8003ad8:	789a      	ldrb	r2, [r3, #2]
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <UARTstateManagement+0x568>)
 8003adc:	78db      	ldrb	r3, [r3, #3]
 8003ade:	4413      	add	r3, r2
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b89      	ldr	r3, [pc, #548]	; (8003d08 <UARTstateManagement+0x568>)
 8003ae4:	791b      	ldrb	r3, [r3, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b86      	ldr	r3, [pc, #536]	; (8003d08 <UARTstateManagement+0x568>)
 8003af0:	715a      	strb	r2, [r3, #5]
 8003af2:	e01c      	b.n	8003b2e <UARTstateManagement+0x38e>
 8003af4:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <UARTstateManagement+0x56c>)
 8003af6:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003af8:	4b83      	ldr	r3, [pc, #524]	; (8003d08 <UARTstateManagement+0x568>)
 8003afa:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 8003afc:	4b82      	ldr	r3, [pc, #520]	; (8003d08 <UARTstateManagement+0x568>)
 8003afe:	2299      	movs	r2, #153	; 0x99
 8003b00:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 8003b02:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <UARTstateManagement+0x568>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	70da      	strb	r2, [r3, #3]
						sendData[4] = Robot.CurrentStation; // set current goal
 8003b08:	4b7d      	ldr	r3, [pc, #500]	; (8003d00 <UARTstateManagement+0x560>)
 8003b0a:	891b      	ldrh	r3, [r3, #8]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <UARTstateManagement+0x568>)
 8003b10:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003b12:	4b7d      	ldr	r3, [pc, #500]	; (8003d08 <UARTstateManagement+0x568>)
 8003b14:	789a      	ldrb	r2, [r3, #2]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <UARTstateManagement+0x568>)
 8003b18:	78db      	ldrb	r3, [r3, #3]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b7a      	ldr	r3, [pc, #488]	; (8003d08 <UARTstateManagement+0x568>)
 8003b20:	791b      	ldrb	r3, [r3, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b77      	ldr	r3, [pc, #476]	; (8003d08 <UARTstateManagement+0x568>)
 8003b2c:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003b2e:	2206      	movs	r2, #6
 8003b30:	4975      	ldr	r1, [pc, #468]	; (8003d08 <UARTstateManagement+0x568>)
 8003b32:	4877      	ldr	r0, [pc, #476]	; (8003d10 <UARTstateManagement+0x570>)
 8003b34:	f005 fbe2 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003b38:	e146      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 10;
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <UARTstateManagement+0x558>)
 8003b3c:	220a      	movs	r2, #10
 8003b3e:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003b40:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <UARTstateManagement+0x55c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <UARTstateManagement+0x560>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fca8 	bl	80004a0 <__aeabi_f2d>
 8003b50:	a363      	add	r3, pc, #396	; (adr r3, 8003ce0 <UARTstateManagement+0x540>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f7fc fcfb 	bl	8000550 <__aeabi_dmul>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	a361      	add	r3, pc, #388	; (adr r3, 8003ce8 <UARTstateManagement+0x548>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f7fc fcf2 	bl	8000550 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <UARTstateManagement+0x574>)
 8003b7a:	f7fc fe13 	bl	80007a4 <__aeabi_ddiv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f7fc fef5 	bl	8000974 <__aeabi_d2uiz>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <UARTstateManagement+0x578>)
 8003b90:	801a      	strh	r2, [r3, #0]
					if(Robot.RunningFlag == 1){
 8003b92:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <UARTstateManagement+0x560>)
 8003b94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d121      	bne.n	8003be0 <UARTstateManagement+0x440>
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <UARTstateManagement+0x564>)
 8003b9e:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <UARTstateManagement+0x568>)
 8003ba2:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 8003ba4:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <UARTstateManagement+0x568>)
 8003ba6:	229a      	movs	r2, #154	; 0x9a
 8003ba8:	709a      	strb	r2, [r3, #2]
						sendData[3] = (posData) >> 8 ; // set high byte posData
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <UARTstateManagement+0x578>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b54      	ldr	r3, [pc, #336]	; (8003d08 <UARTstateManagement+0x568>)
 8003bb6:	70da      	strb	r2, [r3, #3]
						sendData[4] = (posData) & 0xff; // set low byte posData
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <UARTstateManagement+0x578>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <UARTstateManagement+0x568>)
 8003bc0:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003bc2:	4b51      	ldr	r3, [pc, #324]	; (8003d08 <UARTstateManagement+0x568>)
 8003bc4:	789a      	ldrb	r2, [r3, #2]
 8003bc6:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <UARTstateManagement+0x568>)
 8003bc8:	78db      	ldrb	r3, [r3, #3]
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <UARTstateManagement+0x568>)
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <UARTstateManagement+0x568>)
 8003bdc:	715a      	strb	r2, [r3, #5]
 8003bde:	e020      	b.n	8003c22 <UARTstateManagement+0x482>
 8003be0:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <UARTstateManagement+0x56c>)
 8003be2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003be4:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <UARTstateManagement+0x568>)
 8003be6:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 8003be8:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <UARTstateManagement+0x568>)
 8003bea:	229a      	movs	r2, #154	; 0x9a
 8003bec:	709a      	strb	r2, [r3, #2]
						sendData[3] = (posData) >> 8; // set low byte posData
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <UARTstateManagement+0x578>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <UARTstateManagement+0x568>)
 8003bfa:	70da      	strb	r2, [r3, #3]
						sendData[4] = (posData) & 0xff; // set high byte posData
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <UARTstateManagement+0x578>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <UARTstateManagement+0x568>)
 8003c04:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003c06:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <UARTstateManagement+0x568>)
 8003c08:	789a      	ldrb	r2, [r3, #2]
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <UARTstateManagement+0x568>)
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	4413      	add	r3, r2
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <UARTstateManagement+0x568>)
 8003c14:	791b      	ldrb	r3, [r3, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <UARTstateManagement+0x568>)
 8003c20:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003c22:	2206      	movs	r2, #6
 8003c24:	4938      	ldr	r1, [pc, #224]	; (8003d08 <UARTstateManagement+0x568>)
 8003c26:	483a      	ldr	r0, [pc, #232]	; (8003d10 <UARTstateManagement+0x570>)
 8003c28:	f005 fb68 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003c2c:	e0cc      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 11;
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <UARTstateManagement+0x558>)
 8003c30:	220b      	movs	r2, #11
 8003c32:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003c34:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <UARTstateManagement+0x55c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
					veloData = (uint16_t)((((Robot.Velocity*30.0)/M_PI)/10.0)*255.0);
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <UARTstateManagement+0x560>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fc2e 	bl	80004a0 <__aeabi_f2d>
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <UARTstateManagement+0x57c>)
 8003c4a:	f7fc fc81 	bl	8000550 <__aeabi_dmul>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	a324      	add	r3, pc, #144	; (adr r3, 8003ce8 <UARTstateManagement+0x548>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fda2 	bl	80007a4 <__aeabi_ddiv>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <UARTstateManagement+0x580>)
 8003c6e:	f7fc fd99 	bl	80007a4 <__aeabi_ddiv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	a31d      	add	r3, pc, #116	; (adr r3, 8003cf0 <UARTstateManagement+0x550>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc fc66 	bl	8000550 <__aeabi_dmul>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7fc fe72 	bl	8000974 <__aeabi_d2uiz>
 8003c90:	4603      	mov	r3, r0
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <UARTstateManagement+0x584>)
 8003c96:	801a      	strh	r2, [r3, #0]
					if(Robot.RunningFlag == 1){
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <UARTstateManagement+0x560>)
 8003c9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d142      	bne.n	8003d28 <UARTstateManagement+0x588>
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <UARTstateManagement+0x564>)
 8003ca4:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <UARTstateManagement+0x568>)
 8003ca8:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <UARTstateManagement+0x568>)
 8003cac:	229b      	movs	r2, #155	; 0x9b
 8003cae:	709a      	strb	r2, [r3, #2]
						sendData[4] = veloData >> 8; // set low byte posData
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <UARTstateManagement+0x584>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <UARTstateManagement+0x568>)
 8003cbc:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <UARTstateManagement+0x568>)
 8003cc0:	789a      	ldrb	r2, [r3, #2]
 8003cc2:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <UARTstateManagement+0x568>)
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <UARTstateManagement+0x568>)
 8003ccc:	791b      	ldrb	r3, [r3, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <UARTstateManagement+0x568>)
 8003cd8:	715a      	strb	r2, [r3, #5]
 8003cda:	e041      	b.n	8003d60 <UARTstateManagement+0x5c0>
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	40c38800 	.word	0x40c38800
 8003ce8:	54442d18 	.word	0x54442d18
 8003cec:	400921fb 	.word	0x400921fb
 8003cf0:	00000000 	.word	0x00000000
 8003cf4:	406fe000 	.word	0x406fe000
 8003cf8:	20000762 	.word	0x20000762
 8003cfc:	20000730 	.word	0x20000730
 8003d00:	200006e8 	.word	0x200006e8
 8003d04:	20000004 	.word	0x20000004
 8003d08:	20000740 	.word	0x20000740
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	200005e4 	.word	0x200005e4
 8003d14:	40668000 	.word	0x40668000
 8003d18:	20000746 	.word	0x20000746
 8003d1c:	403e0000 	.word	0x403e0000
 8003d20:	40240000 	.word	0x40240000
 8003d24:	20000748 	.word	0x20000748
 8003d28:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <UARTstateManagement+0x630>)
 8003d2a:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003d2c:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d2e:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d32:	229b      	movs	r2, #155	; 0x9b
 8003d34:	709a      	strb	r2, [r3, #2]
						sendData[4] = veloData >> 8; // set low byte posData
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <UARTstateManagement+0x638>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d42:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d46:	789a      	ldrb	r2, [r3, #2]
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d4a:	78db      	ldrb	r3, [r3, #3]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d5e:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003d60:	2206      	movs	r2, #6
 8003d62:	491c      	ldr	r1, [pc, #112]	; (8003dd4 <UARTstateManagement+0x634>)
 8003d64:	481d      	ldr	r0, [pc, #116]	; (8003ddc <UARTstateManagement+0x63c>)
 8003d66:	f005 fac9 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003d6a:	e02d      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 12;
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <UARTstateManagement+0x640>)
 8003d6e:	220c      	movs	r2, #12
 8003d70:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <UARTstateManagement+0x644>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003d78:	2202      	movs	r2, #2
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <UARTstateManagement+0x648>)
 8003d7c:	4817      	ldr	r0, [pc, #92]	; (8003ddc <UARTstateManagement+0x63c>)
 8003d7e:	f005 fabd 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003d82:	e021      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 13;
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <UARTstateManagement+0x640>)
 8003d86:	220d      	movs	r2, #13
 8003d88:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <UARTstateManagement+0x644>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003d90:	2202      	movs	r2, #2
 8003d92:	4915      	ldr	r1, [pc, #84]	; (8003de8 <UARTstateManagement+0x648>)
 8003d94:	4811      	ldr	r0, [pc, #68]	; (8003ddc <UARTstateManagement+0x63c>)
 8003d96:	f005 fab1 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003d9a:	e015      	b.n	8003dc8 <UARTstateManagement+0x628>
					modeNo = 14;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <UARTstateManagement+0x640>)
 8003d9e:	220e      	movs	r2, #14
 8003da0:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon);
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <UARTstateManagement+0x64c>)
 8003da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	f000 fa5a 	bl	8004264 <RobotRunToPositon>
					homingFlag = 1;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <UARTstateManagement+0x650>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003db6:	2202      	movs	r2, #2
 8003db8:	490b      	ldr	r1, [pc, #44]	; (8003de8 <UARTstateManagement+0x648>)
 8003dba:	4808      	ldr	r0, [pc, #32]	; (8003ddc <UARTstateManagement+0x63c>)
 8003dbc:	f005 fa9e 	bl	80092fc <HAL_UART_Transmit_DMA>
					break;
 8003dc0:	e002      	b.n	8003dc8 <UARTstateManagement+0x628>
			break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <UARTstateManagement+0x628>
			break;
 8003dc6:	bf00      	nop
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	20000740 	.word	0x20000740
 8003dd8:	20000748 	.word	0x20000748
 8003ddc:	200005e4 	.word	0x200005e4
 8003de0:	20000762 	.word	0x20000762
 8003de4:	20000761 	.word	0x20000761
 8003de8:	20000004 	.word	0x20000004
 8003dec:	200006e8 	.word	0x200006e8
 8003df0:	20000760 	.word	0x20000760

08003df4 <RobotstateManagement>:

void RobotstateManagement()
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	switch (RobotState)
 8003df8:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <RobotstateManagement+0x12c>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	f200 808c 	bhi.w	8003f1a <RobotstateManagement+0x126>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <RobotstateManagement+0x14>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003f15 	.word	0x08003f15
 8003e14:	08003f15 	.word	0x08003f15
 8003e18:	08003f15 	.word	0x08003f15
	{
		case init:
			// Reset all Parameter
			Robotinit(&Robot);
 8003e1c:	4841      	ldr	r0, [pc, #260]	; (8003f24 <RobotstateManagement+0x130>)
 8003e1e:	f7fd fb7f 	bl	8001520 <Robotinit>
			Robot.MotorIsOn = 1;
 8003e22:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <RobotstateManagement+0x130>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2020 	strb.w	r2, [r3, #32]
			// Start Finding home Position
			Robot.flagSethome = 1;
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <RobotstateManagement+0x130>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			// Turn 360 Deg
			RobotRunToPositon(360.0);
 8003e32:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003f28 <RobotstateManagement+0x134>
 8003e36:	f000 fa15 	bl	8004264 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <RobotstateManagement+0x12c>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
			break;
 8003e40:	e06b      	b.n	8003f1a <RobotstateManagement+0x126>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <RobotstateManagement+0x130>)
 8003e44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d165      	bne.n	8003f18 <RobotstateManagement+0x124>
			{
				if(Robot.flagSethome == 2)
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <RobotstateManagement+0x130>)
 8003e4e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d10f      	bne.n	8003e76 <RobotstateManagement+0x82>
				{
					RobotRunToPositon(Robot.HomePositon);
 8003e56:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <RobotstateManagement+0x130>)
 8003e58:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	f000 fa00 	bl	8004264 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <RobotstateManagement+0x130>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					Robot.flagSethome = 3;
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <RobotstateManagement+0x130>)
 8003e6e:	2203      	movs	r2, #3
 8003e70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					FlagAckFromUART = 1;
					UARTState = normOperation;
					RobotState = NormM;
				}
			}
			break;
 8003e74:	e050      	b.n	8003f18 <RobotstateManagement+0x124>
				else if(Robot.flagSethome == 3)
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <RobotstateManagement+0x130>)
 8003e78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d14b      	bne.n	8003f18 <RobotstateManagement+0x124>
					TIM_ResetCounter(TIM2);
 8003e80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e84:	f000 fa14 	bl	80042b0 <TIM_ResetCounter>
					EncoderRawData[0] = 0;
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <RobotstateManagement+0x138>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
					EncoderRawData[1] = 0;
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <RobotstateManagement+0x138>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
					WrappingStep = 0;
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <RobotstateManagement+0x13c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
					CoefficientAndTimeCalculation(&traject,0.0,0.0);
 8003e9a:	eddf 0a26 	vldr	s1, [pc, #152]	; 8003f34 <RobotstateManagement+0x140>
 8003e9e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003f34 <RobotstateManagement+0x140>
 8003ea2:	4825      	ldr	r0, [pc, #148]	; (8003f38 <RobotstateManagement+0x144>)
 8003ea4:	f7fd fb94 	bl	80015d0 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <RobotstateManagement+0x130>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					StartTime = 0;
 8003eb0:	4922      	ldr	r1, [pc, #136]	; (8003f3c <RobotstateManagement+0x148>)
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9c1 2300 	strd	r2, r3, [r1]
					CurrentTime = 0;
 8003ebe:	4920      	ldr	r1, [pc, #128]	; (8003f40 <RobotstateManagement+0x14c>)
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9c1 2300 	strd	r2, r3, [r1]
					PositionDeg[0] = 0;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <RobotstateManagement+0x150>)
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
					PositionDeg[1] = 0;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <RobotstateManagement+0x150>)
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
					KalmanMatrixReset(&KalmanVar, Pvar);
 8003edc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8003f48 <RobotstateManagement+0x154>
 8003ee0:	481a      	ldr	r0, [pc, #104]	; (8003f4c <RobotstateManagement+0x158>)
 8003ee2:	f7fd f89d 	bl	8001020 <KalmanMatrixReset>
					Robotinit(&Robot);
 8003ee6:	480f      	ldr	r0, [pc, #60]	; (8003f24 <RobotstateManagement+0x130>)
 8003ee8:	f7fd fb1a 	bl	8001520 <Robotinit>
					PIDVelocityController_Init(&PidVelo);
 8003eec:	4818      	ldr	r0, [pc, #96]	; (8003f50 <RobotstateManagement+0x15c>)
 8003eee:	f7fd fa3e 	bl	800136e <PIDVelocityController_Init>
					PIDVelocityController_Init(&PidPos);
 8003ef2:	4818      	ldr	r0, [pc, #96]	; (8003f54 <RobotstateManagement+0x160>)
 8003ef4:	f7fd fa3b 	bl	800136e <PIDVelocityController_Init>
					Robot.MotorIsOn = 1;
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <RobotstateManagement+0x130>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2020 	strb.w	r2, [r3, #32]
					FlagAckFromUART = 1;
 8003f00:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <RobotstateManagement+0x164>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <RobotstateManagement+0x168>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]
					RobotState = NormM;
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <RobotstateManagement+0x12c>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
			break;
 8003f12:	e001      	b.n	8003f18 <RobotstateManagement+0x124>
		case NormM:
			break;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <RobotstateManagement+0x126>
			break;
 8003f18:	bf00      	nop
		case EndEff:
			break;
		case emergency:
			break;
	}
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000719 	.word	0x20000719
 8003f24:	200006e8 	.word	0x200006e8
 8003f28:	43b40000 	.word	0x43b40000
 8003f2c:	20000770 	.word	0x20000770
 8003f30:	20000778 	.word	0x20000778
 8003f34:	00000000 	.word	0x00000000
 8003f38:	20000790 	.word	0x20000790
 8003f3c:	20000848 	.word	0x20000848
 8003f40:	20000850 	.word	0x20000850
 8003f44:	20000780 	.word	0x20000780
 8003f48:	447a0000 	.word	0x447a0000
 8003f4c:	2000000c 	.word	0x2000000c
 8003f50:	2000038c 	.word	0x2000038c
 8003f54:	200003c0 	.word	0x200003c0
 8003f58:	20000730 	.word	0x20000730
 8003f5c:	20000718 	.word	0x20000718

08003f60 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <I2CWriteFcn+0x40>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d112      	bne.n	8003f96 <I2CWriteFcn+0x36>
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <I2CWriteFcn+0x44>)
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d10c      	bne.n	8003f96 <I2CWriteFcn+0x36>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <I2CWriteFcn+0x48>)
 8003f82:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8003f84:	2301      	movs	r3, #1
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <I2CWriteFcn+0x48>)
 8003f88:	2146      	movs	r1, #70	; 0x46
 8003f8a:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <I2CWriteFcn+0x44>)
 8003f8c:	f001 fd60 	bl	8005a50 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <I2CWriteFcn+0x40>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
	}
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000872 	.word	0x20000872
 8003fa4:	20000428 	.word	0x20000428
 8003fa8:	2000087c 	.word	0x2000087c

08003fac <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <I2CReadFcn+0x38>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10e      	bne.n	8003fda <I2CReadFcn+0x2e>
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <I2CReadFcn+0x3c>)
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d108      	bne.n	8003fda <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8003fc8:	2301      	movs	r3, #1
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	2146      	movs	r1, #70	; 0x46
 8003fce:	4806      	ldr	r0, [pc, #24]	; (8003fe8 <I2CReadFcn+0x3c>)
 8003fd0:	f001 fde4 	bl	8005b9c <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <I2CReadFcn+0x38>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
	}
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000871 	.word	0x20000871
 8003fe8:	20000428 	.word	0x20000428

08003fec <EndEffstateManagement>:

void EndEffstateManagement()
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8003ff0:	4b56      	ldr	r3, [pc, #344]	; (800414c <EndEffstateManagement+0x160>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	f200 80a7 	bhi.w	8004148 <EndEffstateManagement+0x15c>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <EndEffstateManagement+0x14>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004015 	.word	0x08004015
 8004004:	0800401d 	.word	0x0800401d
 8004008:	0800406d 	.word	0x0800406d
 800400c:	08004093 	.word	0x08004093
 8004010:	080040b9 	.word	0x080040b9
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8004014:	4b4e      	ldr	r3, [pc, #312]	; (8004150 <EndEffstateManagement+0x164>)
 8004016:	2203      	movs	r2, #3
 8004018:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800401a:	e095      	b.n	8004148 <EndEffstateManagement+0x15c>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <EndEffstateManagement+0x168>)
 800401e:	2223      	movs	r2, #35	; 0x23
 8004020:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004022:	484c      	ldr	r0, [pc, #304]	; (8004154 <EndEffstateManagement+0x168>)
 8004024:	f7ff ff9c 	bl	8003f60 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004028:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <EndEffstateManagement+0x16c>)
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	f040 8082 	bne.w	800413a <EndEffstateManagement+0x14e>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8004036:	4849      	ldr	r0, [pc, #292]	; (800415c <EndEffstateManagement+0x170>)
 8004038:	f7ff ffb8 	bl	8003fac <I2CReadFcn>
				if(hi2c1.State == HAL_I2C_STATE_READY)
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <EndEffstateManagement+0x16c>)
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d178      	bne.n	800413a <EndEffstateManagement+0x14e>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8004048:	4b44      	ldr	r3, [pc, #272]	; (800415c <EndEffstateManagement+0x170>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b78      	cmp	r3, #120	; 0x78
 800404e:	d109      	bne.n	8004064 <EndEffstateManagement+0x78>
					{
						EndEffState = OpenLaser;
 8004050:	4b3e      	ldr	r3, [pc, #248]	; (800414c <EndEffstateManagement+0x160>)
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 8004056:	4b42      	ldr	r3, [pc, #264]	; (8004160 <EndEffstateManagement+0x174>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 800405c:	4b41      	ldr	r3, [pc, #260]	; (8004164 <EndEffstateManagement+0x178>)
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004062:	e06a      	b.n	800413a <EndEffstateManagement+0x14e>
						EndEffState = idle;
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <EndEffstateManagement+0x160>)
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
		break;
 800406a:	e066      	b.n	800413a <EndEffstateManagement+0x14e>
		case OpenLaser:
			// Open Laser
			I2CTxDataBuffer[0] = 0x45;
 800406c:	4b39      	ldr	r3, [pc, #228]	; (8004154 <EndEffstateManagement+0x168>)
 800406e:	2245      	movs	r2, #69	; 0x45
 8004070:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004072:	4838      	ldr	r0, [pc, #224]	; (8004154 <EndEffstateManagement+0x168>)
 8004074:	f7ff ff74 	bl	8003f60 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004078:	4b37      	ldr	r3, [pc, #220]	; (8004158 <EndEffstateManagement+0x16c>)
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d15c      	bne.n	800413e <EndEffstateManagement+0x152>
			{
				EndEffState = SetupReadStatus;
 8004084:	4b31      	ldr	r3, [pc, #196]	; (800414c <EndEffstateManagement+0x160>)
 8004086:	2203      	movs	r2, #3
 8004088:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 800408a:	4b35      	ldr	r3, [pc, #212]	; (8004160 <EndEffstateManagement+0x174>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004090:	e055      	b.n	800413e <EndEffstateManagement+0x152>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <EndEffstateManagement+0x168>)
 8004094:	2223      	movs	r2, #35	; 0x23
 8004096:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004098:	482e      	ldr	r0, [pc, #184]	; (8004154 <EndEffstateManagement+0x168>)
 800409a:	f7ff ff61 	bl	8003f60 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <EndEffstateManagement+0x16c>)
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d14b      	bne.n	8004142 <EndEffstateManagement+0x156>
			{
				EndEffState = ReadStatus;
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <EndEffstateManagement+0x160>)
 80040ac:	2204      	movs	r2, #4
 80040ae:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <EndEffstateManagement+0x178>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80040b6:	e044      	b.n	8004142 <EndEffstateManagement+0x156>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 80040b8:	4828      	ldr	r0, [pc, #160]	; (800415c <EndEffstateManagement+0x170>)
 80040ba:	f7ff ff77 	bl	8003fac <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <EndEffstateManagement+0x16c>)
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d13d      	bne.n	8004146 <EndEffstateManagement+0x15a>
			{
				I2CEndEffectorReadFlag =  1;
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <EndEffstateManagement+0x178>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <EndEffstateManagement+0x170>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b78      	cmp	r3, #120	; 0x78
 80040d6:	d106      	bne.n	80040e6 <EndEffstateManagement+0xfa>
				{
					EndEffState = idle;
 80040d8:	4b1c      	ldr	r3, [pc, #112]	; (800414c <EndEffstateManagement+0x160>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <EndEffstateManagement+0x164>)
 80040e0:	2203      	movs	r2, #3
 80040e2:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 80040e4:	e02f      	b.n	8004146 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x12)
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <EndEffstateManagement+0x170>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b12      	cmp	r3, #18
 80040ec:	d109      	bne.n	8004102 <EndEffstateManagement+0x116>
					EndEffStatus = Opening;
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <EndEffstateManagement+0x164>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 80040f4:	4b15      	ldr	r3, [pc, #84]	; (800414c <EndEffstateManagement+0x160>)
 80040f6:	2203      	movs	r2, #3
 80040f8:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <EndEffstateManagement+0x174>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
			break;
 8004100:	e021      	b.n	8004146 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <EndEffstateManagement+0x170>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b34      	cmp	r3, #52	; 0x34
 8004108:	d109      	bne.n	800411e <EndEffstateManagement+0x132>
					EndEffStatus = Working;
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <EndEffstateManagement+0x164>)
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <EndEffstateManagement+0x160>)
 8004112:	2203      	movs	r2, #3
 8004114:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <EndEffstateManagement+0x174>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
			break;
 800411c:	e013      	b.n	8004146 <EndEffstateManagement+0x15a>
				else if(I2CRxDataBuffer[0] == 0x56)
 800411e:	4b0f      	ldr	r3, [pc, #60]	; (800415c <EndEffstateManagement+0x170>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b56      	cmp	r3, #86	; 0x56
 8004124:	d10f      	bne.n	8004146 <EndEffstateManagement+0x15a>
					EndEffStatus = Closing;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <EndEffstateManagement+0x164>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <EndEffstateManagement+0x160>)
 800412e:	2203      	movs	r2, #3
 8004130:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <EndEffstateManagement+0x174>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
			break;
 8004138:	e005      	b.n	8004146 <EndEffstateManagement+0x15a>
		break;
 800413a:	bf00      	nop
 800413c:	e004      	b.n	8004148 <EndEffstateManagement+0x15c>
			break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <EndEffstateManagement+0x15c>
			break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <EndEffstateManagement+0x15c>
			break;
 8004146:	bf00      	nop
	}
}
 8004148:	bf00      	nop
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000071a 	.word	0x2000071a
 8004150:	20000000 	.word	0x20000000
 8004154:	20000878 	.word	0x20000878
 8004158:	20000428 	.word	0x20000428
 800415c:	20000874 	.word	0x20000874
 8004160:	20000872 	.word	0x20000872
 8004164:	20000871 	.word	0x20000871

08004168 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004178:	d108      	bne.n	800418c <HAL_GPIO_EXTI_Callback+0x24>
	{
		I2CEndEffectorWriteFlag = 1;
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_GPIO_EXTI_Callback+0xd4>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		I2CEndEffectorReadFlag =  1;
 8004180:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
		EndEffState = CheckBeforRun;
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10)
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d142      	bne.n	800421a <HAL_GPIO_EXTI_Callback+0xb2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004196:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800419a:	2b01      	cmp	r3, #1
 800419c:	d139      	bne.n	8004212 <HAL_GPIO_EXTI_Callback+0xaa>
		{
			homePoint[homeFF] = PositionDeg[0];
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_GPIO_EXTI_Callback+0xe4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_GPIO_EXTI_Callback+0xe8>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	492a      	ldr	r1, [pc, #168]	; (8004254 <HAL_GPIO_EXTI_Callback+0xec>)
 80041aa:	0083      	lsls	r3, r0, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	601a      	str	r2, [r3, #0]
			homeFF++;
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_GPIO_EXTI_Callback+0xe4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_GPIO_EXTI_Callback+0xe4>)
 80041ba:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_GPIO_EXTI_Callback+0xe4>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d126      	bne.n	8004212 <HAL_GPIO_EXTI_Callback+0xaa>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_GPIO_EXTI_Callback+0xec>)
 80041c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_GPIO_EXTI_Callback+0xec>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004258 <HAL_GPIO_EXTI_Callback+0xf0>
 80041d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	dd04      	ble.n	80041ec <HAL_GPIO_EXTI_Callback+0x84>
				{
					Robot.HomePositon =  0;
 80041e2:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_GPIO_EXTI_Callback+0xe0>)
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	615a      	str	r2, [r3, #20]
 80041ea:	e00e      	b.n	800420a <HAL_GPIO_EXTI_Callback+0xa2>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 80041ec:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_GPIO_EXTI_Callback+0xec>)
 80041ee:	ed93 7a00 	vldr	s14, [r3]
 80041f2:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_GPIO_EXTI_Callback+0xec>)
 80041f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80041f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004206:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_GPIO_EXTI_Callback+0xe0>)
 800420c:	2202      	movs	r2, #2
 800420e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004212:	2108      	movs	r1, #8
 8004214:	4811      	ldr	r0, [pc, #68]	; (800425c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004216:	f001 faa4 	bl	8005762 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b20      	cmp	r3, #32
 800421e:	d109      	bne.n	8004234 <HAL_GPIO_EXTI_Callback+0xcc>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8004220:	2110      	movs	r1, #16
 8004222:	480e      	ldr	r0, [pc, #56]	; (800425c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004224:	f001 fa9d 	bl	8005762 <HAL_GPIO_TogglePin>
		btncheck++;
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_GPIO_EXTI_Callback+0xf8>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004232:	701a      	strb	r2, [r3, #0]
	}
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000872 	.word	0x20000872
 8004240:	20000871 	.word	0x20000871
 8004244:	2000071a 	.word	0x2000071a
 8004248:	200006e8 	.word	0x200006e8
 800424c:	2000070c 	.word	0x2000070c
 8004250:	20000780 	.word	0x20000780
 8004254:	20000710 	.word	0x20000710
 8004258:	43340000 	.word	0x43340000
 800425c:	40020400 	.word	0x40020400
 8004260:	20000870 	.word	0x20000870

08004264 <RobotRunToPositon>:
void RobotRunToPositon(float Destination)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	ed87 0a01 	vstr	s0, [r7, #4]
	Robot.GoalPositon = Destination;
 800426e:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <RobotRunToPositon+0x44>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60d3      	str	r3, [r2, #12]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <RobotRunToPositon+0x44>)
 8004276:	edd3 7a00 	vldr	s15, [r3]
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <RobotRunToPositon+0x44>)
 800427c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004280:	eef0 0a47 	vmov.f32	s1, s14
 8004284:	eeb0 0a67 	vmov.f32	s0, s15
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <RobotRunToPositon+0x48>)
 800428a:	f7fd f9a1 	bl	80015d0 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.flagStartTime = 1;
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <RobotRunToPositon+0x44>)
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Robot.RunningFlag = 1;
 8004296:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <RobotRunToPositon+0x44>)
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200006e8 	.word	0x200006e8
 80042ac:	20000790 	.word	0x20000790

080042b0 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042ce:	b672      	cpsid	i
}
 80042d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042d2:	e7fe      	b.n	80042d2 <Error_Handler+0x8>

080042d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_MspInit+0x4c>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <HAL_MspInit+0x4c>)
 80042e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <HAL_MspInit+0x4c>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_MspInit+0x4c>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_MspInit+0x4c>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_MspInit+0x4c>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004312:	2007      	movs	r0, #7
 8004314:	f000 fc36 	bl	8004b84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800

08004324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <HAL_I2C_MspInit+0xa4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d13c      	bne.n	80043c0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	6313      	str	r3, [r2, #48]	; 0x30
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004368:	2312      	movs	r3, #18
 800436a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004370:	2303      	movs	r3, #3
 8004372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004374:	2304      	movs	r3, #4
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	4619      	mov	r1, r3
 800437e:	4814      	ldr	r0, [pc, #80]	; (80043d0 <HAL_I2C_MspInit+0xac>)
 8004380:	f001 f852 	bl	8005428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 800438e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004392:	6413      	str	r3, [r2, #64]	; 0x40
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <HAL_I2C_MspInit+0xa8>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80043a0:	2200      	movs	r2, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	201f      	movs	r0, #31
 80043a6:	f000 fbf8 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80043aa:	201f      	movs	r0, #31
 80043ac:	f000 fc11 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2100      	movs	r1, #0
 80043b4:	2020      	movs	r0, #32
 80043b6:	f000 fbf0 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80043ba:	2020      	movs	r0, #32
 80043bc:	f000 fc09 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40005400 	.word	0x40005400
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020400 	.word	0x40020400

080043d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <HAL_TIM_PWM_MspInit+0x48>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d115      	bne.n	8004412 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_TIM_PWM_MspInit+0x4c>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_TIM_PWM_MspInit+0x4c>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6453      	str	r3, [r2, #68]	; 0x44
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_TIM_PWM_MspInit+0x4c>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	201a      	movs	r0, #26
 8004408:	f000 fbc7 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800440c:	201a      	movs	r0, #26
 800440e:	f000 fbe0 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d12b      	bne.n	800449e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800447e:	2303      	movs	r3, #3
 8004480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800448e:	2301      	movs	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	4619      	mov	r1, r3
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <HAL_TIM_Encoder_MspInit+0x88>)
 800449a:	f000 ffc5 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800449e:	bf00      	nop
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020000 	.word	0x40020000

080044b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <HAL_TIM_Base_MspInit+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d116      	bne.n	80044f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a28      	ldr	r2, [pc, #160]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	201d      	movs	r0, #29
 80044e4:	f000 fb59 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044e8:	201d      	movs	r0, #29
 80044ea:	f000 fb72 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80044ee:	e036      	b.n	800455e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <HAL_TIM_Base_MspInit+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d116      	bne.n	8004528 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	201e      	movs	r0, #30
 800451c:	f000 fb3d 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004520:	201e      	movs	r0, #30
 8004522:	f000 fb56 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
}
 8004526:	e01a      	b.n	800455e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a11      	ldr	r2, [pc, #68]	; (8004574 <HAL_TIM_Base_MspInit+0xc4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d115      	bne.n	800455e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	6453      	str	r3, [r2, #68]	; 0x44
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_TIM_Base_MspInit+0xbc>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	201a      	movs	r0, #26
 8004554:	f000 fb21 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004558:	201a      	movs	r0, #26
 800455a:	f000 fb3a 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40000400 	.word	0x40000400
 800456c:	40023800 	.word	0x40023800
 8004570:	40000800 	.word	0x40000800
 8004574:	40014800 	.word	0x40014800

08004578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_TIM_MspPostInit+0x68>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d11e      	bne.n	80045d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_TIM_MspPostInit+0x6c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_TIM_MspPostInit+0x6c>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_TIM_MspPostInit+0x6c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80045b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045cc:	f107 030c 	add.w	r3, r7, #12
 80045d0:	4619      	mov	r1, r3
 80045d2:	4805      	ldr	r0, [pc, #20]	; (80045e8 <HAL_TIM_MspPostInit+0x70>)
 80045d4:	f000 ff28 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020000 	.word	0x40020000

080045ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_UART_MspInit+0x14c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	f040 8090 	bne.w	8004730 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	4b49      	ldr	r3, [pc, #292]	; (800473c <HAL_UART_MspInit+0x150>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a48      	ldr	r2, [pc, #288]	; (800473c <HAL_UART_MspInit+0x150>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
 8004620:	4b46      	ldr	r3, [pc, #280]	; (800473c <HAL_UART_MspInit+0x150>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <HAL_UART_MspInit+0x150>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4a41      	ldr	r2, [pc, #260]	; (800473c <HAL_UART_MspInit+0x150>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6313      	str	r3, [r2, #48]	; 0x30
 800463c:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_UART_MspInit+0x150>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004648:	230c      	movs	r3, #12
 800464a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004654:	2303      	movs	r3, #3
 8004656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004658:	2307      	movs	r3, #7
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4619      	mov	r1, r3
 8004662:	4837      	ldr	r0, [pc, #220]	; (8004740 <HAL_UART_MspInit+0x154>)
 8004664:	f000 fee0 	bl	8005428 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_UART_MspInit+0x158>)
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_UART_MspInit+0x15c>)
 800466c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800466e:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_UART_MspInit+0x158>)
 8004670:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004674:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_UART_MspInit+0x158>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_UART_MspInit+0x158>)
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_UART_MspInit+0x158>)
 8004684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004688:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_UART_MspInit+0x158>)
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004690:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <HAL_UART_MspInit+0x158>)
 8004692:	2200      	movs	r2, #0
 8004694:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004696:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_UART_MspInit+0x158>)
 8004698:	2200      	movs	r2, #0
 800469a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <HAL_UART_MspInit+0x158>)
 800469e:	2200      	movs	r2, #0
 80046a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046a2:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_UART_MspInit+0x158>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80046a8:	4826      	ldr	r0, [pc, #152]	; (8004744 <HAL_UART_MspInit+0x158>)
 80046aa:	f000 faad 	bl	8004c08 <HAL_DMA_Init>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80046b4:	f7ff fe09 	bl	80042ca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_UART_MspInit+0x158>)
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <HAL_UART_MspInit+0x158>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_UART_MspInit+0x160>)
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_UART_MspInit+0x164>)
 80046c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_UART_MspInit+0x160>)
 80046cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_UART_MspInit+0x160>)
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <HAL_UART_MspInit+0x160>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_UART_MspInit+0x160>)
 80046e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_UART_MspInit+0x160>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_UART_MspInit+0x160>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_UART_MspInit+0x160>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_UART_MspInit+0x160>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <HAL_UART_MspInit+0x160>)
 8004700:	2200      	movs	r2, #0
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004704:	4811      	ldr	r0, [pc, #68]	; (800474c <HAL_UART_MspInit+0x160>)
 8004706:	f000 fa7f 	bl	8004c08 <HAL_DMA_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004710:	f7ff fddb 	bl	80042ca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a0d      	ldr	r2, [pc, #52]	; (800474c <HAL_UART_MspInit+0x160>)
 8004718:	635a      	str	r2, [r3, #52]	; 0x34
 800471a:	4a0c      	ldr	r2, [pc, #48]	; (800474c <HAL_UART_MspInit+0x160>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	2026      	movs	r0, #38	; 0x26
 8004726:	f000 fa38 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800472a:	2026      	movs	r0, #38	; 0x26
 800472c:	f000 fa51 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004730:	bf00      	nop
 8004732:	3728      	adds	r7, #40	; 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40004400 	.word	0x40004400
 800473c:	40023800 	.word	0x40023800
 8004740:	40020000 	.word	0x40020000
 8004744:	20000628 	.word	0x20000628
 8004748:	40026088 	.word	0x40026088
 800474c:	20000688 	.word	0x20000688
 8004750:	400260a0 	.word	0x400260a0

08004754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004758:	e7fe      	b.n	8004758 <NMI_Handler+0x4>

0800475a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800475a:	b480      	push	{r7}
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800475e:	e7fe      	b.n	800475e <HardFault_Handler+0x4>

08004760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <MemManage_Handler+0x4>

08004766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800476a:	e7fe      	b.n	800476a <BusFault_Handler+0x4>

0800476c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004770:	e7fe      	b.n	8004770 <UsageFault_Handler+0x4>

08004772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047a0:	f000 f900 	bl	80049a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <SysTick_Handler+0x18>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <SysTick_Handler+0x18>)
 80047ac:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	2000073c 	.word	0x2000073c

080047b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80047bc:	4802      	ldr	r0, [pc, #8]	; (80047c8 <DMA1_Stream5_IRQHandler+0x10>)
 80047be:	f000 fbbb 	bl	8004f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000628 	.word	0x20000628

080047cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <DMA1_Stream6_IRQHandler+0x10>)
 80047d2:	f000 fbb1 	bl	8004f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000688 	.word	0x20000688

080047e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 80047e4:	2020      	movs	r0, #32
 80047e6:	f000 ffd7 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047f4:	4803      	ldr	r0, [pc, #12]	; (8004804 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80047f6:	f003 fed9 	bl	80085ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80047fa:	4803      	ldr	r0, [pc, #12]	; (8004808 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80047fc:	f003 fed6 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000047c 	.word	0x2000047c
 8004808:	2000059c 	.word	0x2000059c

0800480c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004810:	4802      	ldr	r0, [pc, #8]	; (800481c <TIM3_IRQHandler+0x10>)
 8004812:	f003 fecb 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000050c 	.word	0x2000050c

08004820 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004824:	4802      	ldr	r0, [pc, #8]	; (8004830 <TIM4_IRQHandler+0x10>)
 8004826:	f003 fec1 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000554 	.word	0x20000554

08004834 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <I2C1_EV_IRQHandler+0x10>)
 800483a:	f001 fa5d 	bl	8005cf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000428 	.word	0x20000428

08004848 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800484c:	4802      	ldr	r0, [pc, #8]	; (8004858 <I2C1_ER_IRQHandler+0x10>)
 800484e:	f001 fbc4 	bl	8005fda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000428 	.word	0x20000428

0800485c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004860:	4802      	ldr	r0, [pc, #8]	; (800486c <USART2_IRQHandler+0x10>)
 8004862:	f004 fe2f 	bl	80094c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200005e4 	.word	0x200005e4

08004870 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8004874:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004878:	f000 ff8e 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800487c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004880:	f000 ff8a 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	bd80      	pop	{r7, pc}

08004888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SystemInit+0x20>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	4a05      	ldr	r2, [pc, #20]	; (80048a8 <SystemInit+0x20>)
 8004894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80048ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048b0:	480d      	ldr	r0, [pc, #52]	; (80048e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048b2:	490e      	ldr	r1, [pc, #56]	; (80048ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b8:	e002      	b.n	80048c0 <LoopCopyDataInit>

080048ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048be:	3304      	adds	r3, #4

080048c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048c4:	d3f9      	bcc.n	80048ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048c6:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048c8:	4c0b      	ldr	r4, [pc, #44]	; (80048f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048cc:	e001      	b.n	80048d2 <LoopFillZerobss>

080048ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048d0:	3204      	adds	r2, #4

080048d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048d4:	d3fb      	bcc.n	80048ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048d6:	f7ff ffd7 	bl	8004888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048da:	f006 f9b5 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048de:	f7fe f8fd 	bl	8002adc <main>
  bx  lr    
 80048e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048ec:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80048f0:	0800ad04 	.word	0x0800ad04
  ldr r2, =_sbss
 80048f4:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 80048f8:	20000884 	.word	0x20000884

080048fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048fc:	e7fe      	b.n	80048fc <ADC_IRQHandler>
	...

08004900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_Init+0x40>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_Init+0x40>)
 800490a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800490e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_Init+0x40>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <HAL_Init+0x40>)
 8004916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_Init+0x40>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a07      	ldr	r2, [pc, #28]	; (8004940 <HAL_Init+0x40>)
 8004922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004928:	2003      	movs	r0, #3
 800492a:	f000 f92b 	bl	8004b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800492e:	2000      	movs	r0, #0
 8004930:	f000 f808 	bl	8004944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004934:	f7ff fcce 	bl	80042d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00

08004944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_InitTick+0x54>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_InitTick+0x58>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	4619      	mov	r1, r3
 8004956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495a:	fbb3 f3f1 	udiv	r3, r3, r1
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f943 	bl	8004bee <HAL_SYSTICK_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e00e      	b.n	8004990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b0f      	cmp	r3, #15
 8004976:	d80a      	bhi.n	800498e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004978:	2200      	movs	r2, #0
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	f000 f90b 	bl	8004b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004984:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <HAL_InitTick+0x5c>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e000      	b.n	8004990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200003f8 	.word	0x200003f8
 800499c:	20000400 	.word	0x20000400
 80049a0:	200003fc 	.word	0x200003fc

080049a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_IncTick+0x20>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_IncTick+0x24>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_IncTick+0x24>)
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000400 	.word	0x20000400
 80049c8:	20000880 	.word	0x20000880

080049cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return uwTick;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_GetTick+0x14>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000880 	.word	0x20000880

080049e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	60d3      	str	r3, [r2, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <__NVIC_GetPriorityGrouping+0x18>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0307 	and.w	r3, r3, #7
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db0b      	blt.n	8004a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4907      	ldr	r1, [pc, #28]	; (8004a80 <__NVIC_EnableIRQ+0x38>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e100 	.word	0xe000e100

08004a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db0a      	blt.n	8004aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <__NVIC_SetPriority+0x4c>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aac:	e00a      	b.n	8004ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4908      	ldr	r1, [pc, #32]	; (8004ad4 <__NVIC_SetPriority+0x50>)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3b04      	subs	r3, #4
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	761a      	strb	r2, [r3, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf28      	it	cs
 8004af6:	2304      	movcs	r3, #4
 8004af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d902      	bls.n	8004b08 <NVIC_EncodePriority+0x30>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3b03      	subs	r3, #3
 8004b06:	e000      	b.n	8004b0a <NVIC_EncodePriority+0x32>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	4313      	orrs	r3, r2
         );
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b50:	d301      	bcc.n	8004b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b52:	2301      	movs	r3, #1
 8004b54:	e00f      	b.n	8004b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b56:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <SysTick_Config+0x40>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b5e:	210f      	movs	r1, #15
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	f7ff ff8e 	bl	8004a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <SysTick_Config+0x40>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <SysTick_Config+0x40>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff29 	bl	80049e4 <__NVIC_SetPriorityGrouping>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bac:	f7ff ff3e 	bl	8004a2c <__NVIC_GetPriorityGrouping>
 8004bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f7ff ff8e 	bl	8004ad8 <NVIC_EncodePriority>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff5d 	bl	8004a84 <__NVIC_SetPriority>
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff31 	bl	8004a48 <__NVIC_EnableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ffa2 	bl	8004b40 <SysTick_Config>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff feda 	bl	80049cc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e099      	b.n	8004d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c44:	e00f      	b.n	8004c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c46:	f7ff fec1 	bl	80049cc <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d908      	bls.n	8004c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e078      	b.n	8004d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e8      	bne.n	8004c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <HAL_DMA_Init+0x158>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d117      	bne.n	8004d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb0f 	bl	8005330 <DMA_CheckFifoParam>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d26:	2301      	movs	r3, #1
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fac6 	bl	80052c4 <DMA_CalcBaseAndBitshift>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	f010803f 	.word	0xf010803f

08004d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Start_IT+0x26>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e040      	b.n	8004e0c <HAL_DMA_Start_IT+0xa8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12f      	bne.n	8004dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa58 	bl	8005268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0216 	orr.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e005      	b.n	8004e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e22:	f7ff fdd3 	bl	80049cc <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d008      	beq.n	8004e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e052      	b.n	8004eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0216 	bic.w	r2, r2, #22
 8004e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <HAL_DMA_Abort+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0208 	bic.w	r2, r2, #8
 8004e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e96:	e013      	b.n	8004ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e98:	f7ff fd98 	bl	80049cc <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d90c      	bls.n	8004ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e015      	b.n	8004eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e4      	bne.n	8004e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	223f      	movs	r2, #63	; 0x3f
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d004      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00c      	b.n	8004f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2205      	movs	r2, #5
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f44:	4b8e      	ldr	r3, [pc, #568]	; (8005180 <HAL_DMA_IRQHandler+0x248>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a8e      	ldr	r2, [pc, #568]	; (8005184 <HAL_DMA_IRQHandler+0x24c>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	0a9b      	lsrs	r3, r3, #10
 8004f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	2208      	movs	r2, #8
 8004f64:	409a      	lsls	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01a      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	2208      	movs	r2, #8
 8004f92:	409a      	lsls	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa8:	2201      	movs	r2, #1
 8004faa:	409a      	lsls	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	2204      	movs	r2, #4
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d012      	beq.n	8005010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	409a      	lsls	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005014:	2210      	movs	r2, #16
 8005016:	409a      	lsls	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d043      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d03c      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	2210      	movs	r2, #16
 8005034:	409a      	lsls	r2, r3
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d018      	beq.n	800507a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d108      	bne.n	8005068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d024      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
 8005066:	e01f      	b.n	80050a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
 8005078:	e016      	b.n	80050a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0208 	bic.w	r2, r2, #8
 8005096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	2220      	movs	r2, #32
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 808f 	beq.w	80051d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8087 	beq.w	80051d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	2220      	movs	r2, #32
 80050d0:	409a      	lsls	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d136      	bne.n	8005150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0216 	bic.w	r2, r2, #22
 80050f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_DMA_IRQHandler+0x1da>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0208 	bic.w	r2, r2, #8
 8005120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	223f      	movs	r2, #63	; 0x3f
 8005128:	409a      	lsls	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d07e      	beq.n	8005244 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
        }
        return;
 800514e:	e079      	b.n	8005244 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01d      	beq.n	800519a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	2b00      	cmp	r3, #0
 8005172:	d031      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
 800517c:	e02c      	b.n	80051d8 <HAL_DMA_IRQHandler+0x2a0>
 800517e:	bf00      	nop
 8005180:	200003f8 	.word	0x200003f8
 8005184:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d023      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
 8005198:	e01e      	b.n	80051d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0210 	bic.w	r2, r2, #16
 80051b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d032      	beq.n	8005246 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d022      	beq.n	8005232 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2205      	movs	r2, #5
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	3301      	adds	r3, #1
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	429a      	cmp	r2, r3
 800520e:	d307      	bcc.n	8005220 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f2      	bne.n	8005204 <HAL_DMA_IRQHandler+0x2cc>
 800521e:	e000      	b.n	8005222 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005220:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
 8005242:	e000      	b.n	8005246 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005244:	bf00      	nop
    }
  }
}
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800525a:	b2db      	uxtb	r3, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d108      	bne.n	80052a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052a6:	e007      	b.n	80052b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	60da      	str	r2, [r3, #12]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	3b10      	subs	r3, #16
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <DMA_CalcBaseAndBitshift+0x64>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <DMA_CalcBaseAndBitshift+0x68>)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d909      	bls.n	8005306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	659a      	str	r2, [r3, #88]	; 0x58
 8005304:	e007      	b.n	8005316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	aaaaaaab 	.word	0xaaaaaaab
 800532c:	0800acec 	.word	0x0800acec

08005330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11f      	bne.n	800538a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d856      	bhi.n	80053fe <DMA_CheckFifoParam+0xce>
 8005350:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <DMA_CheckFifoParam+0x28>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	08005369 	.word	0x08005369
 800535c:	0800537b 	.word	0x0800537b
 8005360:	08005369 	.word	0x08005369
 8005364:	080053ff 	.word	0x080053ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d046      	beq.n	8005402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005378:	e043      	b.n	8005402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005382:	d140      	bne.n	8005406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005388:	e03d      	b.n	8005406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d121      	bne.n	80053d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d837      	bhi.n	800540a <DMA_CheckFifoParam+0xda>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <DMA_CheckFifoParam+0x70>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053b7 	.word	0x080053b7
 80053a8:	080053b1 	.word	0x080053b1
 80053ac:	080053c9 	.word	0x080053c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      break;
 80053b4:	e030      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d025      	beq.n	800540e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c6:	e022      	b.n	800540e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d0:	d11f      	bne.n	8005412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053d6:	e01c      	b.n	8005412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d903      	bls.n	80053e6 <DMA_CheckFifoParam+0xb6>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d003      	beq.n	80053ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053e4:	e018      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ea:	e015      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00e      	beq.n	8005416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e00b      	b.n	8005416 <DMA_CheckFifoParam+0xe6>
      break;
 80053fe:	bf00      	nop
 8005400:	e00a      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;
 8005402:	bf00      	nop
 8005404:	e008      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;
 8005406:	bf00      	nop
 8005408:	e006      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;
 800540a:	bf00      	nop
 800540c:	e004      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;   
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <DMA_CheckFifoParam+0xe8>
      break;
 8005416:	bf00      	nop
    }
  } 
  
  return status; 
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop

08005428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e159      	b.n	80056f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005444:	2201      	movs	r2, #1
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	f040 8148 	bne.w	80056f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d005      	beq.n	800547a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005476:	2b02      	cmp	r3, #2
 8005478:	d130      	bne.n	80054dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2203      	movs	r2, #3
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054b0:	2201      	movs	r2, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 0201 	and.w	r2, r3, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d017      	beq.n	8005518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	2203      	movs	r2, #3
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4013      	ands	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d123      	bne.n	800556c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	08da      	lsrs	r2, r3, #3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3208      	adds	r2, #8
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a2 	beq.w	80056f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	4b57      	ldr	r3, [pc, #348]	; (8005710 <HAL_GPIO_Init+0x2e8>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	4a56      	ldr	r2, [pc, #344]	; (8005710 <HAL_GPIO_Init+0x2e8>)
 80055b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055bc:	6453      	str	r3, [r2, #68]	; 0x44
 80055be:	4b54      	ldr	r3, [pc, #336]	; (8005710 <HAL_GPIO_Init+0x2e8>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ca:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_GPIO_Init+0x2ec>)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	3302      	adds	r3, #2
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a49      	ldr	r2, [pc, #292]	; (8005718 <HAL_GPIO_Init+0x2f0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d019      	beq.n	800562a <HAL_GPIO_Init+0x202>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a48      	ldr	r2, [pc, #288]	; (800571c <HAL_GPIO_Init+0x2f4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_GPIO_Init+0x1fe>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a47      	ldr	r2, [pc, #284]	; (8005720 <HAL_GPIO_Init+0x2f8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_GPIO_Init+0x1fa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a46      	ldr	r2, [pc, #280]	; (8005724 <HAL_GPIO_Init+0x2fc>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <HAL_GPIO_Init+0x1f6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a45      	ldr	r2, [pc, #276]	; (8005728 <HAL_GPIO_Init+0x300>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_GPIO_Init+0x1f2>
 8005616:	2304      	movs	r3, #4
 8005618:	e008      	b.n	800562c <HAL_GPIO_Init+0x204>
 800561a:	2307      	movs	r3, #7
 800561c:	e006      	b.n	800562c <HAL_GPIO_Init+0x204>
 800561e:	2303      	movs	r3, #3
 8005620:	e004      	b.n	800562c <HAL_GPIO_Init+0x204>
 8005622:	2302      	movs	r3, #2
 8005624:	e002      	b.n	800562c <HAL_GPIO_Init+0x204>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_GPIO_Init+0x204>
 800562a:	2300      	movs	r3, #0
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	f002 0203 	and.w	r2, r2, #3
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	4093      	lsls	r3, r2
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800563c:	4935      	ldr	r1, [pc, #212]	; (8005714 <HAL_GPIO_Init+0x2ec>)
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	3302      	adds	r3, #2
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800564a:	4b38      	ldr	r3, [pc, #224]	; (800572c <HAL_GPIO_Init+0x304>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800566e:	4a2f      	ldr	r2, [pc, #188]	; (800572c <HAL_GPIO_Init+0x304>)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005674:	4b2d      	ldr	r3, [pc, #180]	; (800572c <HAL_GPIO_Init+0x304>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005698:	4a24      	ldr	r2, [pc, #144]	; (800572c <HAL_GPIO_Init+0x304>)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800569e:	4b23      	ldr	r3, [pc, #140]	; (800572c <HAL_GPIO_Init+0x304>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056c2:	4a1a      	ldr	r2, [pc, #104]	; (800572c <HAL_GPIO_Init+0x304>)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <HAL_GPIO_Init+0x304>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056ec:	4a0f      	ldr	r2, [pc, #60]	; (800572c <HAL_GPIO_Init+0x304>)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	f67f aea2 	bls.w	8005444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3724      	adds	r7, #36	; 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	40013800 	.word	0x40013800
 8005718:	40020000 	.word	0x40020000
 800571c:	40020400 	.word	0x40020400
 8005720:	40020800 	.word	0x40020800
 8005724:	40020c00 	.word	0x40020c00
 8005728:	40021000 	.word	0x40021000
 800572c:	40013c00 	.word	0x40013c00

08005730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	807b      	strh	r3, [r7, #2]
 800573c:	4613      	mov	r3, r2
 800573e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005740:	787b      	ldrb	r3, [r7, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800574c:	e003      	b.n	8005756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	041a      	lsls	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	619a      	str	r2, [r3, #24]
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4013      	ands	r3, r2
 800577a:	041a      	lsls	r2, r3, #16
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	43d9      	mvns	r1, r3
 8005780:	887b      	ldrh	r3, [r7, #2]
 8005782:	400b      	ands	r3, r1
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fcd6 	bl	8004168 <HAL_GPIO_EXTI_Callback>
  }
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e12b      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fe fd98 	bl	8004324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800582c:	f002 fbb0 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a81      	ldr	r2, [pc, #516]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d807      	bhi.n	800584c <HAL_I2C_Init+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a80      	ldr	r2, [pc, #512]	; (8005a40 <HAL_I2C_Init+0x278>)
 8005840:	4293      	cmp	r3, r2
 8005842:	bf94      	ite	ls
 8005844:	2301      	movls	r3, #1
 8005846:	2300      	movhi	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e006      	b.n	800585a <HAL_I2C_Init+0x92>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a7d      	ldr	r2, [pc, #500]	; (8005a44 <HAL_I2C_Init+0x27c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	bf94      	ite	ls
 8005854:	2301      	movls	r3, #1
 8005856:	2300      	movhi	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0e7      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a78      	ldr	r2, [pc, #480]	; (8005a48 <HAL_I2C_Init+0x280>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a6a      	ldr	r2, [pc, #424]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d802      	bhi.n	800589c <HAL_I2C_Init+0xd4>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	e009      	b.n	80058b0 <HAL_I2C_Init+0xe8>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	4a69      	ldr	r2, [pc, #420]	; (8005a4c <HAL_I2C_Init+0x284>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	099b      	lsrs	r3, r3, #6
 80058ae:	3301      	adds	r3, #1
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	495c      	ldr	r1, [pc, #368]	; (8005a3c <HAL_I2C_Init+0x274>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d819      	bhi.n	8005904 <HAL_I2C_Init+0x13c>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e59      	subs	r1, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fbb1 f3f3 	udiv	r3, r1, r3
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058e4:	400b      	ands	r3, r1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_I2C_Init+0x138>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1e59      	subs	r1, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fe:	e051      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005900:	2304      	movs	r3, #4
 8005902:	e04f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d111      	bne.n	8005930 <HAL_I2C_Init+0x168>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	fbb0 f3f3 	udiv	r3, r0, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e012      	b.n	8005956 <HAL_I2C_Init+0x18e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1e58      	subs	r0, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	0099      	lsls	r1, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	fbb0 f3f3 	udiv	r3, r0, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Init+0x196>
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <HAL_I2C_Init+0x1bc>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e58      	subs	r0, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	440b      	add	r3, r1
 8005974:	fbb0 f3f3 	udiv	r3, r0, r3
 8005978:	3301      	adds	r3, #1
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005982:	e00f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e58      	subs	r0, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	0099      	lsls	r1, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	fbb0 f3f3 	udiv	r3, r0, r3
 800599a:	3301      	adds	r3, #1
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	6809      	ldr	r1, [r1, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6911      	ldr	r1, [r2, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	000186a0 	.word	0x000186a0
 8005a40:	001e847f 	.word	0x001e847f
 8005a44:	003d08ff 	.word	0x003d08ff
 8005a48:	431bde83 	.word	0x431bde83
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
 8005a60:	4613      	mov	r3, r2
 8005a62:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	f040 8085 	bne.w	8005b80 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a76:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	08db      	lsrs	r3, r3, #3
 8005a7c:	4a45      	ldr	r2, [pc, #276]	; (8005b94 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0a1a      	lsrs	r2, r3, #8
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e05b      	b.n	8005b82 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d0db      	beq.n	8005a90 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2C_Master_Transmit_IT+0x96>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e04d      	b.n	8005b82 <HAL_I2C_Master_Transmit_IT+0x132>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d007      	beq.n	8005b0c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2221      	movs	r2, #33	; 0x21
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2210      	movs	r2, #16
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	893a      	ldrh	r2, [r7, #8]
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005b4e:	897a      	ldrh	r2, [r7, #10]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005b6a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200003f8 	.word	0x200003f8
 8005b94:	14f8b589 	.word	0x14f8b589
 8005b98:	ffff0000 	.word	0xffff0000

08005b9c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	460b      	mov	r3, r1
 8005baa:	817b      	strh	r3, [r7, #10]
 8005bac:	4613      	mov	r3, r2
 8005bae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	f040 808d 	bne.w	8005cdc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_I2C_Master_Receive_IT+0x150>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	08db      	lsrs	r3, r3, #3
 8005bc8:	4a49      	ldr	r2, [pc, #292]	; (8005cf0 <HAL_I2C_Master_Receive_IT+0x154>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	0a1a      	lsrs	r2, r3, #8
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009a      	lsls	r2, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d116      	bne.n	8005c16 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0220 	orr.w	r2, r3, #32
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e063      	b.n	8005cde <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d0db      	beq.n	8005bdc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2C_Master_Receive_IT+0x96>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e055      	b.n	8005cde <HAL_I2C_Master_Receive_IT+0x142>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d007      	beq.n	8005c58 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2222      	movs	r2, #34	; 0x22
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2210      	movs	r2, #16
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	893a      	ldrh	r2, [r7, #8]
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <HAL_I2C_Master_Receive_IT+0x158>)
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005c9a:	897a      	ldrh	r2, [r7, #10]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005cb6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e000      	b.n	8005cde <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200003f8 	.word	0x200003f8
 8005cf0:	14f8b589 	.word	0x14f8b589
 8005cf4:	ffff0000 	.word	0xffff0000

08005cf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d003      	beq.n	8005d30 <HAL_I2C_EV_IRQHandler+0x38>
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	f040 80c1 	bne.w	8005eb2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10d      	bne.n	8005d66 <HAL_I2C_EV_IRQHandler+0x6e>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005d50:	d003      	beq.n	8005d5a <HAL_I2C_EV_IRQHandler+0x62>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_EV_IRQHandler+0x66>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_I2C_EV_IRQHandler+0x68>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f000 8132 	beq.w	8005fca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <HAL_I2C_EV_IRQHandler+0x92>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	0a5b      	lsrs	r3, r3, #9
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fc7b 	bl	8007678 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fd83 	bl	800688e <I2C_Master_SB>
 8005d88:	e092      	b.n	8005eb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_I2C_EV_IRQHandler+0xb2>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	0a5b      	lsrs	r3, r3, #9
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fdf9 	bl	800699a <I2C_Master_ADD10>
 8005da8:	e082      	b.n	8005eb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_I2C_EV_IRQHandler+0xd2>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fe13 	bl	80069ee <I2C_Master_ADDR>
 8005dc8:	e072      	b.n	8005eb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d03b      	beq.n	8005e4e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de4:	f000 80f3 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	09db      	lsrs	r3, r3, #7
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00f      	beq.n	8005e14 <HAL_I2C_EV_IRQHandler+0x11c>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	0a9b      	lsrs	r3, r3, #10
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9f3 	bl	80061f8 <I2C_MasterTransmit_TXE>
 8005e12:	e04d      	b.n	8005eb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80d6 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	0a5b      	lsrs	r3, r3, #9
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80cf 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b21      	cmp	r3, #33	; 0x21
 8005e34:	d103      	bne.n	8005e3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa7a 	bl	8006330 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e3c:	e0c7      	b.n	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	f040 80c4 	bne.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fae8 	bl	800641c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e4c:	e0bf      	b.n	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5c:	f000 80b7 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <HAL_I2C_EV_IRQHandler+0x194>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	0a9b      	lsrs	r3, r3, #10
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_I2C_EV_IRQHandler+0x194>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fb5d 	bl	8006544 <I2C_MasterReceive_RXNE>
 8005e8a:	e011      	b.n	8005eb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 809a 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	0a5b      	lsrs	r3, r3, #9
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8093 	beq.w	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc06 	bl	80066ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eae:	e08e      	b.n	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005eb0:	e08d      	b.n	8005fce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	e007      	b.n	8005ed4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_I2C_EV_IRQHandler+0x20e>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	0a5b      	lsrs	r3, r3, #9
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 ffc4 	bl	8006e8c <I2C_Slave_ADDR>
 8005f04:	e066      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_I2C_EV_IRQHandler+0x22e>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	0a5b      	lsrs	r3, r3, #9
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fffe 	bl	8006f20 <I2C_Slave_STOPF>
 8005f24:	e056      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b21      	cmp	r3, #33	; 0x21
 8005f2a:	d002      	beq.n	8005f32 <HAL_I2C_EV_IRQHandler+0x23a>
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b29      	cmp	r3, #41	; 0x29
 8005f30:	d125      	bne.n	8005f7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00f      	beq.n	8005f5e <HAL_I2C_EV_IRQHandler+0x266>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	0a9b      	lsrs	r3, r3, #10
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_I2C_EV_IRQHandler+0x266>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	089b      	lsrs	r3, r3, #2
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 feda 	bl	8006d10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f5c:	e039      	b.n	8005fd2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	089b      	lsrs	r3, r3, #2
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d033      	beq.n	8005fd2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	0a5b      	lsrs	r3, r3, #9
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d02d      	beq.n	8005fd2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 ff07 	bl	8006d8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f7c:	e029      	b.n	8005fd2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	099b      	lsrs	r3, r3, #6
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00f      	beq.n	8005faa <HAL_I2C_EV_IRQHandler+0x2b2>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	0a9b      	lsrs	r3, r3, #10
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <HAL_I2C_EV_IRQHandler+0x2b2>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 ff12 	bl	8006dcc <I2C_SlaveReceive_RXNE>
 8005fa8:	e014      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	089b      	lsrs	r3, r3, #2
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	0a5b      	lsrs	r3, r3, #9
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 ff40 	bl	8006e48 <I2C_SlaveReceive_BTF>
 8005fc8:	e004      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b08a      	sub	sp, #40	; 0x28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <HAL_I2C_ER_IRQHandler+0x4e>
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006026:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	0a5b      	lsrs	r3, r3, #9
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <HAL_I2C_ER_IRQHandler+0x78>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f043 0302 	orr.w	r3, r3, #2
 8006046:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006050:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	0a9b      	lsrs	r3, r3, #10
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d03f      	beq.n	80060de <HAL_I2C_ER_IRQHandler+0x104>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d039      	beq.n	80060de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800606a:	7efb      	ldrb	r3, [r7, #27]
 800606c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006084:	7ebb      	ldrb	r3, [r7, #26]
 8006086:	2b20      	cmp	r3, #32
 8006088:	d112      	bne.n	80060b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10f      	bne.n	80060b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	2b21      	cmp	r3, #33	; 0x21
 8006094:	d008      	beq.n	80060a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006096:	7cfb      	ldrb	r3, [r7, #19]
 8006098:	2b29      	cmp	r3, #41	; 0x29
 800609a:	d005      	beq.n	80060a8 <HAL_I2C_ER_IRQHandler+0xce>
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b28      	cmp	r3, #40	; 0x28
 80060a0:	d106      	bne.n	80060b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b21      	cmp	r3, #33	; 0x21
 80060a6:	d103      	bne.n	80060b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f869 	bl	8007180 <I2C_Slave_AF>
 80060ae:	e016      	b.n	80060de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060c2:	7efb      	ldrb	r3, [r7, #27]
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d002      	beq.n	80060ce <HAL_I2C_ER_IRQHandler+0xf4>
 80060c8:	7efb      	ldrb	r3, [r7, #27]
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d107      	bne.n	80060de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	0adb      	lsrs	r3, r3, #11
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <HAL_I2C_ER_IRQHandler+0x12e>
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	f043 0308 	orr.w	r3, r3, #8
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006106:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f8a0 	bl	8007260 <I2C_ITError>
  }
}
 8006120:	bf00      	nop
 8006122:	3728      	adds	r7, #40	; 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
 8006184:	4613      	mov	r3, r2
 8006186:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d150      	bne.n	80062c0 <I2C_MasterTransmit_TXE+0xc8>
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b21      	cmp	r3, #33	; 0x21
 8006222:	d14d      	bne.n	80062c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b08      	cmp	r3, #8
 8006228:	d01d      	beq.n	8006266 <I2C_MasterTransmit_TXE+0x6e>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b20      	cmp	r3, #32
 800622e:	d01a      	beq.n	8006266 <I2C_MasterTransmit_TXE+0x6e>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006236:	d016      	beq.n	8006266 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006246:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2211      	movs	r2, #17
 800624c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ff62 	bl	8006128 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006264:	e060      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006274:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006284:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d107      	bne.n	80062b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff7d 	bl	80061a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062ae:	e03b      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff35 	bl	8006128 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062be:	e033      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b21      	cmp	r3, #33	; 0x21
 80062c4:	d005      	beq.n	80062d2 <I2C_MasterTransmit_TXE+0xda>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d12d      	bne.n	8006328 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b22      	cmp	r3, #34	; 0x22
 80062d0:	d12a      	bne.n	8006328 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80062ec:	e01c      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d103      	bne.n	8006302 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f88e 	bl	800641c <I2C_MemoryTransmit_TXE_BTF>
}
 8006300:	e012      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006326:	e7ff      	b.n	8006328 <I2C_MasterTransmit_TXE+0x130>
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b21      	cmp	r3, #33	; 0x21
 8006348:	d164      	bne.n	8006414 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d012      	beq.n	800637a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006378:	e04c      	b.n	8006414 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d01d      	beq.n	80063bc <I2C_MasterTransmit_BTF+0x8c>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b20      	cmp	r3, #32
 8006384:	d01a      	beq.n	80063bc <I2C_MasterTransmit_BTF+0x8c>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800638c:	d016      	beq.n	80063bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800639c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2211      	movs	r2, #17
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff feb7 	bl	8006128 <HAL_I2C_MasterTxCpltCallback>
}
 80063ba:	e02b      	b.n	8006414 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d107      	bne.n	8006406 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fed2 	bl	80061a8 <HAL_I2C_MemTxCpltCallback>
}
 8006404:	e006      	b.n	8006414 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fe8a 	bl	8006128 <HAL_I2C_MasterTxCpltCallback>
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11d      	bne.n	8006470 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10b      	bne.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006440:	b2da      	uxtb	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006452:	e073      	b.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006458:	b29b      	uxth	r3, r3
 800645a:	121b      	asrs	r3, r3, #8
 800645c:	b2da      	uxtb	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800646e:	e065      	b.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10b      	bne.n	8006490 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647c:	b2da      	uxtb	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800648e:	e055      	b.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	2b02      	cmp	r3, #2
 8006496:	d151      	bne.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b22      	cmp	r3, #34	; 0x22
 800649c:	d10d      	bne.n	80064ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064b8:	e040      	b.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d015      	beq.n	80064f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b21      	cmp	r3, #33	; 0x21
 80064c8:	d112      	bne.n	80064f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064ee:	e025      	b.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d120      	bne.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b21      	cmp	r3, #33	; 0x21
 80064fe:	d11d      	bne.n	800653c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800650e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fe36 	bl	80061a8 <HAL_I2C_MemTxCpltCallback>
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b22      	cmp	r3, #34	; 0x22
 8006556:	f040 80ac 	bne.w	80066b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d921      	bls.n	80065ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b03      	cmp	r3, #3
 8006596:	f040 808c 	bne.w	80066b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80065aa:	e082      	b.n	80066b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d075      	beq.n	80066a0 <I2C_MasterReceive_RXNE+0x15c>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d002      	beq.n	80065c0 <I2C_MasterReceive_RXNE+0x7c>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d16f      	bne.n	80066a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f827 	bl	8007614 <I2C_WaitOnSTOPRequestThroughIT>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d142      	bne.n	8006652 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d10a      	bne.n	800663c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fdc1 	bl	80061bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800663a:	e03a      	b.n	80066b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2212      	movs	r2, #18
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fd76 	bl	800613c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006650:	e02f      	b.n	80066b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006660:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fd99 	bl	80061d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800669e:	e008      	b.n	80066b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ae:	605a      	str	r2, [r3, #4]
}
 80066b0:	e7ff      	b.n	80066b2 <I2C_MasterReceive_RXNE+0x16e>
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d11b      	bne.n	800670a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006708:	e0bd      	b.n	8006886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b03      	cmp	r3, #3
 8006712:	d129      	bne.n	8006768 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006722:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b04      	cmp	r3, #4
 8006728:	d00a      	beq.n	8006740 <I2C_MasterReceive_BTF+0x86>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d007      	beq.n	8006740 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800673e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006766:	e08e      	b.n	8006886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d176      	bne.n	8006860 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d002      	beq.n	800677e <I2C_MasterReceive_BTF+0xc4>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b10      	cmp	r3, #16
 800677c:	d108      	bne.n	8006790 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e019      	b.n	80067c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b04      	cmp	r3, #4
 8006794:	d002      	beq.n	800679c <I2C_MasterReceive_BTF+0xe2>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d108      	bne.n	80067ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	e00a      	b.n	80067c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d007      	beq.n	80067c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800681e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d10a      	bne.n	800684a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fcba 	bl	80061bc <HAL_I2C_MemRxCpltCallback>
}
 8006848:	e01d      	b.n	8006886 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2212      	movs	r2, #18
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fc6f 	bl	800613c <HAL_I2C_MasterRxCpltCallback>
}
 800685e:	e012      	b.n	8006886 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d117      	bne.n	80068d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80068bc:	e067      	b.n	800698e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	611a      	str	r2, [r3, #16]
}
 80068d0:	e05d      	b.n	800698e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068da:	d133      	bne.n	8006944 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b21      	cmp	r3, #33	; 0x21
 80068e6:	d109      	bne.n	80068fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068f8:	611a      	str	r2, [r3, #16]
 80068fa:	e008      	b.n	800690e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f043 0301 	orr.w	r3, r3, #1
 8006906:	b2da      	uxtb	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <I2C_Master_SB+0x92>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d108      	bne.n	8006932 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d032      	beq.n	800698e <I2C_Master_SB+0x100>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d02d      	beq.n	800698e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006940:	605a      	str	r2, [r3, #4]
}
 8006942:	e024      	b.n	800698e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10e      	bne.n	800696a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	b29b      	uxth	r3, r3
 8006952:	11db      	asrs	r3, r3, #7
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0306 	and.w	r3, r3, #6
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f063 030f 	orn	r3, r3, #15
 8006960:	b2da      	uxtb	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]
}
 8006968:	e011      	b.n	800698e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696e:	2b01      	cmp	r3, #1
 8006970:	d10d      	bne.n	800698e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	b29b      	uxth	r3, r3
 8006978:	11db      	asrs	r3, r3, #7
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0306 	and.w	r3, r3, #6
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f063 030e 	orn	r3, r3, #14
 8006986:	b2da      	uxtb	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	611a      	str	r2, [r3, #16]
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <I2C_Master_ADD10+0x26>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <I2C_Master_ADD10+0x48>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e0:	605a      	str	r2, [r3, #4]
  }
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b091      	sub	sp, #68	; 0x44
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b22      	cmp	r3, #34	; 0x22
 8006a16:	f040 8169 	bne.w	8006cec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10f      	bne.n	8006a42 <I2C_Master_ADDR+0x54>
 8006a22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d10b      	bne.n	8006a42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	e160      	b.n	8006d04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11d      	bne.n	8006a86 <I2C_Master_ADDR+0x98>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a52:	d118      	bne.n	8006a86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a54:	2300      	movs	r3, #0
 8006a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	651a      	str	r2, [r3, #80]	; 0x50
 8006a84:	e13e      	b.n	8006d04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d113      	bne.n	8006ab8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a90:	2300      	movs	r3, #0
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e115      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	f040 808a 	bne.w	8006bd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aca:	d137      	bne.n	8006b3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aea:	d113      	bne.n	8006b14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	e0e7      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b14:	2300      	movs	r3, #0
 8006b16:	623b      	str	r3, [r7, #32]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	623b      	str	r3, [r7, #32]
 8006b28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e0d3      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d02e      	beq.n	8006ba0 <I2C_Master_ADDR+0x1b2>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d02b      	beq.n	8006ba0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	2b12      	cmp	r3, #18
 8006b4c:	d102      	bne.n	8006b54 <I2C_Master_ADDR+0x166>
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d125      	bne.n	8006ba0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d00e      	beq.n	8006b78 <I2C_Master_ADDR+0x18a>
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d00b      	beq.n	8006b78 <I2C_Master_ADDR+0x18a>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d008      	beq.n	8006b78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e007      	b.n	8006b88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	e0a1      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	61bb      	str	r3, [r7, #24]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e085      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d14d      	bne.n	8006c7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d016      	beq.n	8006c16 <I2C_Master_ADDR+0x228>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d013      	beq.n	8006c16 <I2C_Master_ADDR+0x228>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d010      	beq.n	8006c16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e007      	b.n	8006c26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c34:	d117      	bne.n	8006c66 <I2C_Master_ADDR+0x278>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c3c:	d00b      	beq.n	8006c56 <I2C_Master_ADDR+0x268>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d008      	beq.n	8006c56 <I2C_Master_ADDR+0x268>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d005      	beq.n	8006c56 <I2C_Master_ADDR+0x268>
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d002      	beq.n	8006c56 <I2C_Master_ADDR+0x268>
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d107      	bne.n	8006c66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	e032      	b.n	8006ce4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9c:	d117      	bne.n	8006cce <I2C_Master_ADDR+0x2e0>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ca4:	d00b      	beq.n	8006cbe <I2C_Master_ADDR+0x2d0>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d008      	beq.n	8006cbe <I2C_Master_ADDR+0x2d0>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d005      	beq.n	8006cbe <I2C_Master_ADDR+0x2d0>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d002      	beq.n	8006cbe <I2C_Master_ADDR+0x2d0>
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d107      	bne.n	8006cce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ccc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006cea:	e00b      	b.n	8006d04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	e7ff      	b.n	8006d04 <I2C_Master_ADDR+0x316>
 8006d04:	bf00      	nop
 8006d06:	3744      	adds	r7, #68	; 0x44
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d02b      	beq.n	8006d82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d114      	bne.n	8006d82 <I2C_SlaveTransmit_TXE+0x72>
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b29      	cmp	r3, #41	; 0x29
 8006d5c:	d111      	bne.n	8006d82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2228      	movs	r2, #40	; 0x28
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff f9e7 	bl	8006150 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d011      	beq.n	8006dc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02c      	beq.n	8006e40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d114      	bne.n	8006e40 <I2C_SlaveReceive_RXNE+0x74>
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1a:	d111      	bne.n	8006e40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2222      	movs	r2, #34	; 0x22
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2228      	movs	r2, #40	; 0x28
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff f992 	bl	8006164 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d012      	beq.n	8006e80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ea6:	2b28      	cmp	r3, #40	; 0x28
 8006ea8:	d127      	bne.n	8006efa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	09db      	lsrs	r3, r3, #7
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	81bb      	strh	r3, [r7, #12]
 8006edc:	e002      	b.n	8006ee4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006eec:	89ba      	ldrh	r2, [r7, #12]
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff f940 	bl	8006178 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ef8:	e00e      	b.n	8006f18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006f40:	2300      	movs	r3, #0
 8006f42:	60bb      	str	r3, [r7, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7c:	d172      	bne.n	8007064 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b22      	cmp	r3, #34	; 0x22
 8006f82:	d002      	beq.n	8006f8a <I2C_Slave_STOPF+0x6a>
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	2b2a      	cmp	r3, #42	; 0x2a
 8006f88:	d135      	bne.n	8006ff6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f043 0204 	orr.w	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe f942 	bl	800524c <HAL_DMA_GetState>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d049      	beq.n	8007062 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	4a69      	ldr	r2, [pc, #420]	; (8007178 <I2C_Slave_STOPF+0x258>)
 8006fd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd ff8a 	bl	8004ef4 <HAL_DMA_Abort_IT>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d03d      	beq.n	8007062 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ff4:	e035      	b.n	8007062 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	f043 0204 	orr.w	r2, r3, #4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007028:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f90c 	bl	800524c <HAL_DMA_GetState>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d014      	beq.n	8007064 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703e:	4a4e      	ldr	r2, [pc, #312]	; (8007178 <I2C_Slave_STOPF+0x258>)
 8007040:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	4618      	mov	r0, r3
 8007048:	f7fd ff54 	bl	8004ef4 <HAL_DMA_Abort_IT>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	e000      	b.n	8007064 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007062:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d03e      	beq.n	80070ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b04      	cmp	r3, #4
 800707a:	d112      	bne.n	80070a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691a      	ldr	r2, [r3, #16]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d112      	bne.n	80070d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f043 0204 	orr.w	r2, r3, #4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8b3 	bl	8007260 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80070fa:	e039      	b.n	8007170 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d109      	bne.n	8007116 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2228      	movs	r2, #40	; 0x28
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff f827 	bl	8006164 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b28      	cmp	r3, #40	; 0x28
 8007120:	d111      	bne.n	8007146 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <I2C_Slave_STOPF+0x25c>)
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff f828 	bl	8006194 <HAL_I2C_ListenCpltCallback>
}
 8007144:	e014      	b.n	8007170 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	d002      	beq.n	8007154 <I2C_Slave_STOPF+0x234>
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b22      	cmp	r3, #34	; 0x22
 8007152:	d10d      	bne.n	8007170 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fe fffa 	bl	8006164 <HAL_I2C_SlaveRxCpltCallback>
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	080074c5 	.word	0x080074c5
 800717c:	ffff0000 	.word	0xffff0000

08007180 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d002      	beq.n	80071a2 <I2C_Slave_AF+0x22>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d129      	bne.n	80071f6 <I2C_Slave_AF+0x76>
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b28      	cmp	r3, #40	; 0x28
 80071a6:	d126      	bne.n	80071f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <I2C_Slave_AF+0xdc>)
 80071ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fe ffd0 	bl	8006194 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80071f4:	e02e      	b.n	8007254 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b21      	cmp	r3, #33	; 0x21
 80071fa:	d126      	bne.n	800724a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <I2C_Slave_AF+0xdc>)
 8007200:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2221      	movs	r2, #33	; 0x21
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007226:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007230:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007240:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe ff84 	bl	8006150 <HAL_I2C_SlaveTxCpltCallback>
}
 8007248:	e004      	b.n	8007254 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007252:	615a      	str	r2, [r3, #20]
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	ffff0000 	.word	0xffff0000

08007260 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007276:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b10      	cmp	r3, #16
 800727c:	d002      	beq.n	8007284 <I2C_ITError+0x24>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d10a      	bne.n	800729a <I2C_ITError+0x3a>
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b22      	cmp	r3, #34	; 0x22
 8007288:	d107      	bne.n	800729a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007298:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072a0:	2b28      	cmp	r3, #40	; 0x28
 80072a2:	d107      	bne.n	80072b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2228      	movs	r2, #40	; 0x28
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072b2:	e015      	b.n	80072e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c2:	d00a      	beq.n	80072da <I2C_ITError+0x7a>
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b60      	cmp	r3, #96	; 0x60
 80072c8:	d007      	beq.n	80072da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ee:	d162      	bne.n	80073b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b01      	cmp	r3, #1
 800730c:	d020      	beq.n	8007350 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	4a6a      	ldr	r2, [pc, #424]	; (80074bc <I2C_ITError+0x25c>)
 8007314:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	4618      	mov	r0, r3
 800731c:	f7fd fdea 	bl	8004ef4 <HAL_DMA_Abort_IT>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 8089 	beq.w	800743a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800734a:	4610      	mov	r0, r2
 800734c:	4798      	blx	r3
 800734e:	e074      	b.n	800743a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	4a59      	ldr	r2, [pc, #356]	; (80074bc <I2C_ITError+0x25c>)
 8007356:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	4618      	mov	r0, r3
 800735e:	f7fd fdc9 	bl	8004ef4 <HAL_DMA_Abort_IT>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d068      	beq.n	800743a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d10b      	bne.n	800738e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0201 	bic.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	e041      	b.n	800743a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b60      	cmp	r3, #96	; 0x60
 80073c0:	d125      	bne.n	800740e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d10b      	bne.n	80073f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe feec 	bl	80061e4 <HAL_I2C_AbortCpltCallback>
 800740c:	e015      	b.n	800743a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d10b      	bne.n	8007434 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe fecb 	bl	80061d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10e      	bne.n	8007468 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d109      	bne.n	8007468 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b04      	cmp	r3, #4
 800748a:	d113      	bne.n	80074b4 <I2C_ITError+0x254>
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b28      	cmp	r3, #40	; 0x28
 8007490:	d110      	bne.n	80074b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <I2C_ITError+0x260>)
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fe fe70 	bl	8006194 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	080074c5 	.word	0x080074c5
 80074c0:	ffff0000 	.word	0xffff0000

080074c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074de:	4b4b      	ldr	r3, [pc, #300]	; (800760c <I2C_DMAAbort+0x148>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	4a4a      	ldr	r2, [pc, #296]	; (8007610 <I2C_DMAAbort+0x14c>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	0a1a      	lsrs	r2, r3, #8
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	00da      	lsls	r2, r3, #3
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800750a:	e00a      	b.n	8007522 <I2C_DMAAbort+0x5e>
    }
    count--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b01      	subs	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d0ea      	beq.n	80074f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	2200      	movs	r2, #0
 8007530:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	2200      	movs	r2, #0
 8007540:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007564:	2200      	movs	r2, #0
 8007566:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	2200      	movs	r2, #0
 8007576:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b60      	cmp	r3, #96	; 0x60
 8007592:	d10e      	bne.n	80075b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2200      	movs	r2, #0
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075aa:	6978      	ldr	r0, [r7, #20]
 80075ac:	f7fe fe1a 	bl	80061e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075b0:	e027      	b.n	8007602 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075b8:	2b28      	cmp	r3, #40	; 0x28
 80075ba:	d117      	bne.n	80075ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2228      	movs	r2, #40	; 0x28
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075ea:	e007      	b.n	80075fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80075fc:	6978      	ldr	r0, [r7, #20]
 80075fe:	f7fe fde7 	bl	80061d0 <HAL_I2C_ErrorCallback>
}
 8007602:	bf00      	nop
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200003f8 	.word	0x200003f8
 8007610:	14f8b589 	.word	0x14f8b589

08007614 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007620:	4b13      	ldr	r3, [pc, #76]	; (8007670 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	0a1a      	lsrs	r2, r3, #8
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3b01      	subs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e008      	b.n	8007664 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800765c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007660:	d0e9      	beq.n	8007636 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	200003f8 	.word	0x200003f8
 8007674:	14f8b589 	.word	0x14f8b589

08007678 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007688:	d103      	bne.n	8007692 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007690:	e007      	b.n	80076a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800769a:	d102      	bne.n	80076a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2208      	movs	r2, #8
 80076a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e267      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d075      	beq.n	80077ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076ce:	4b88      	ldr	r3, [pc, #544]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d00c      	beq.n	80076f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076da:	4b85      	ldr	r3, [pc, #532]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d112      	bne.n	800770c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076e6:	4b82      	ldr	r3, [pc, #520]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f2:	d10b      	bne.n	800770c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f4:	4b7e      	ldr	r3, [pc, #504]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d05b      	beq.n	80077b8 <HAL_RCC_OscConfig+0x108>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d157      	bne.n	80077b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e242      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007714:	d106      	bne.n	8007724 <HAL_RCC_OscConfig+0x74>
 8007716:	4b76      	ldr	r3, [pc, #472]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a75      	ldr	r2, [pc, #468]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800771c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e01d      	b.n	8007760 <HAL_RCC_OscConfig+0xb0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800772c:	d10c      	bne.n	8007748 <HAL_RCC_OscConfig+0x98>
 800772e:	4b70      	ldr	r3, [pc, #448]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6f      	ldr	r2, [pc, #444]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b6d      	ldr	r3, [pc, #436]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6c      	ldr	r2, [pc, #432]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e00b      	b.n	8007760 <HAL_RCC_OscConfig+0xb0>
 8007748:	4b69      	ldr	r3, [pc, #420]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a68      	ldr	r2, [pc, #416]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800774e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	4b66      	ldr	r3, [pc, #408]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800775a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800775e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007768:	f7fd f930 	bl	80049cc <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007770:	f7fd f92c 	bl	80049cc <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b64      	cmp	r3, #100	; 0x64
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e207      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007782:	4b5b      	ldr	r3, [pc, #364]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0xc0>
 800778e:	e014      	b.n	80077ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007790:	f7fd f91c 	bl	80049cc <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007798:	f7fd f918 	bl	80049cc <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b64      	cmp	r3, #100	; 0x64
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e1f3      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077aa:	4b51      	ldr	r3, [pc, #324]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f0      	bne.n	8007798 <HAL_RCC_OscConfig+0xe8>
 80077b6:	e000      	b.n	80077ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d063      	beq.n	800788e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077c6:	4b4a      	ldr	r3, [pc, #296]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077d2:	4b47      	ldr	r3, [pc, #284]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d11c      	bne.n	8007818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077de:	4b44      	ldr	r3, [pc, #272]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d116      	bne.n	8007818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <HAL_RCC_OscConfig+0x152>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d001      	beq.n	8007802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e1c7      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007802:	4b3b      	ldr	r3, [pc, #236]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	4937      	ldr	r1, [pc, #220]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007812:	4313      	orrs	r3, r2
 8007814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007816:	e03a      	b.n	800788e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d020      	beq.n	8007862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007820:	4b34      	ldr	r3, [pc, #208]	; (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007826:	f7fd f8d1 	bl	80049cc <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800782e:	f7fd f8cd 	bl	80049cc <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e1a8      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784c:	4b28      	ldr	r3, [pc, #160]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4925      	ldr	r1, [pc, #148]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 800785c:	4313      	orrs	r3, r2
 800785e:	600b      	str	r3, [r1, #0]
 8007860:	e015      	b.n	800788e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007868:	f7fd f8b0 	bl	80049cc <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007870:	f7fd f8ac 	bl	80049cc <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e187      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007882:	4b1b      	ldr	r3, [pc, #108]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f0      	bne.n	8007870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d036      	beq.n	8007908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <HAL_RCC_OscConfig+0x248>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a8:	f7fd f890 	bl	80049cc <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078b0:	f7fd f88c 	bl	80049cc <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e167      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <HAL_RCC_OscConfig+0x240>)
 80078c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f0      	beq.n	80078b0 <HAL_RCC_OscConfig+0x200>
 80078ce:	e01b      	b.n	8007908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <HAL_RCC_OscConfig+0x248>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078d6:	f7fd f879 	bl	80049cc <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078dc:	e00e      	b.n	80078fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078de:	f7fd f875 	bl	80049cc <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d907      	bls.n	80078fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e150      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
 80078f0:	40023800 	.word	0x40023800
 80078f4:	42470000 	.word	0x42470000
 80078f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078fc:	4b88      	ldr	r3, [pc, #544]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80078fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ea      	bne.n	80078de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8097 	beq.w	8007a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800791a:	4b81      	ldr	r3, [pc, #516]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10f      	bne.n	8007946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007926:	2300      	movs	r3, #0
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	4b7d      	ldr	r3, [pc, #500]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	4a7c      	ldr	r2, [pc, #496]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007934:	6413      	str	r3, [r2, #64]	; 0x40
 8007936:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007942:	2301      	movs	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007946:	4b77      	ldr	r3, [pc, #476]	; (8007b24 <HAL_RCC_OscConfig+0x474>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d118      	bne.n	8007984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007952:	4b74      	ldr	r3, [pc, #464]	; (8007b24 <HAL_RCC_OscConfig+0x474>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a73      	ldr	r2, [pc, #460]	; (8007b24 <HAL_RCC_OscConfig+0x474>)
 8007958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800795c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800795e:	f7fd f835 	bl	80049cc <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007964:	e008      	b.n	8007978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007966:	f7fd f831 	bl	80049cc <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e10c      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007978:	4b6a      	ldr	r3, [pc, #424]	; (8007b24 <HAL_RCC_OscConfig+0x474>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0f0      	beq.n	8007966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d106      	bne.n	800799a <HAL_RCC_OscConfig+0x2ea>
 800798c:	4b64      	ldr	r3, [pc, #400]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	4a63      	ldr	r2, [pc, #396]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	6713      	str	r3, [r2, #112]	; 0x70
 8007998:	e01c      	b.n	80079d4 <HAL_RCC_OscConfig+0x324>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d10c      	bne.n	80079bc <HAL_RCC_OscConfig+0x30c>
 80079a2:	4b5f      	ldr	r3, [pc, #380]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4a5e      	ldr	r2, [pc, #376]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079a8:	f043 0304 	orr.w	r3, r3, #4
 80079ac:	6713      	str	r3, [r2, #112]	; 0x70
 80079ae:	4b5c      	ldr	r3, [pc, #368]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	4a5b      	ldr	r2, [pc, #364]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6713      	str	r3, [r2, #112]	; 0x70
 80079ba:	e00b      	b.n	80079d4 <HAL_RCC_OscConfig+0x324>
 80079bc:	4b58      	ldr	r3, [pc, #352]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	6713      	str	r3, [r2, #112]	; 0x70
 80079c8:	4b55      	ldr	r3, [pc, #340]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079cc:	4a54      	ldr	r2, [pc, #336]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079ce:	f023 0304 	bic.w	r3, r3, #4
 80079d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079dc:	f7fc fff6 	bl	80049cc <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e2:	e00a      	b.n	80079fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e4:	f7fc fff2 	bl	80049cc <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e0cb      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079fa:	4b49      	ldr	r3, [pc, #292]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0ee      	beq.n	80079e4 <HAL_RCC_OscConfig+0x334>
 8007a06:	e014      	b.n	8007a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a08:	f7fc ffe0 	bl	80049cc <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0e:	e00a      	b.n	8007a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a10:	f7fc ffdc 	bl	80049cc <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e0b5      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a26:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1ee      	bne.n	8007a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d105      	bne.n	8007a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a38:	4b39      	ldr	r3, [pc, #228]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	4a38      	ldr	r2, [pc, #224]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80a1 	beq.w	8007b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a4e:	4b34      	ldr	r3, [pc, #208]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 030c 	and.w	r3, r3, #12
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d05c      	beq.n	8007b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d141      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a62:	4b31      	ldr	r3, [pc, #196]	; (8007b28 <HAL_RCC_OscConfig+0x478>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a68:	f7fc ffb0 	bl	80049cc <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a70:	f7fc ffac 	bl	80049cc <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e087      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a82:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f0      	bne.n	8007a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69da      	ldr	r2, [r3, #28]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	061b      	lsls	r3, r3, #24
 8007ab2:	491b      	ldr	r1, [pc, #108]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <HAL_RCC_OscConfig+0x478>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007abe:	f7fc ff85 	bl	80049cc <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac6:	f7fc ff81 	bl	80049cc <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e05c      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ad8:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x416>
 8007ae4:	e054      	b.n	8007b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae6:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <HAL_RCC_OscConfig+0x478>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aec:	f7fc ff6e 	bl	80049cc <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af4:	f7fc ff6a 	bl	80049cc <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e045      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b06:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <HAL_RCC_OscConfig+0x470>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f0      	bne.n	8007af4 <HAL_RCC_OscConfig+0x444>
 8007b12:	e03d      	b.n	8007b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d107      	bne.n	8007b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e038      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40007000 	.word	0x40007000
 8007b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <HAL_RCC_OscConfig+0x4ec>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d028      	beq.n	8007b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d121      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d11a      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d111      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b72:	085b      	lsrs	r3, r3, #1
 8007b74:	3b01      	subs	r3, #1
 8007b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d107      	bne.n	8007b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40023800 	.word	0x40023800

08007ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0cc      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bb4:	4b68      	ldr	r3, [pc, #416]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d90c      	bls.n	8007bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc2:	4b65      	ldr	r3, [pc, #404]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bca:	4b63      	ldr	r3, [pc, #396]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d001      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0b8      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d020      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bf4:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4a58      	ldr	r2, [pc, #352]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c0c:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	4a52      	ldr	r2, [pc, #328]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c18:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	494d      	ldr	r1, [pc, #308]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d044      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d107      	bne.n	8007c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3e:	4b47      	ldr	r3, [pc, #284]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d119      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e07f      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d003      	beq.n	8007c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c5e:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e06f      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c6e:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e067      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c7e:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	4934      	ldr	r1, [pc, #208]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c90:	f7fc fe9c 	bl	80049cc <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c96:	e00a      	b.n	8007cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c98:	f7fc fe98 	bl	80049cc <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e04f      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cae:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 020c 	and.w	r2, r3, #12
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d1eb      	bne.n	8007c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d20c      	bcs.n	8007ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cce:	4b22      	ldr	r3, [pc, #136]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd6:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d001      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e032      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d008      	beq.n	8007d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4916      	ldr	r1, [pc, #88]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	490e      	ldr	r1, [pc, #56]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d26:	f000 f821 	bl	8007d6c <HAL_RCC_GetSysClockFreq>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	490a      	ldr	r1, [pc, #40]	; (8007d60 <HAL_RCC_ClockConfig+0x1c0>)
 8007d38:	5ccb      	ldrb	r3, [r1, r3]
 8007d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <HAL_RCC_ClockConfig+0x1c8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fc fdfc 	bl	8004944 <HAL_InitTick>

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40023c00 	.word	0x40023c00
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	0800acd4 	.word	0x0800acd4
 8007d64:	200003f8 	.word	0x200003f8
 8007d68:	200003fc 	.word	0x200003fc

08007d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b094      	sub	sp, #80	; 0x50
 8007d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	647b      	str	r3, [r7, #68]	; 0x44
 8007d78:	2300      	movs	r3, #0
 8007d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d84:	4b79      	ldr	r3, [pc, #484]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 030c 	and.w	r3, r3, #12
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d00d      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0x40>
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	f200 80e1 	bhi.w	8007f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_RCC_GetSysClockFreq+0x34>
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d003      	beq.n	8007da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d9e:	e0db      	b.n	8007f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da0:	4b73      	ldr	r3, [pc, #460]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8007da2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007da4:	e0db      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007da6:	4b73      	ldr	r3, [pc, #460]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8007da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007daa:	e0d8      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dac:	4b6f      	ldr	r3, [pc, #444]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007db6:	4b6d      	ldr	r3, [pc, #436]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d063      	beq.n	8007e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dc2:	4b6a      	ldr	r3, [pc, #424]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	2200      	movs	r2, #0
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007dde:	4622      	mov	r2, r4
 8007de0:	462b      	mov	r3, r5
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	0159      	lsls	r1, r3, #5
 8007dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007df0:	0150      	lsls	r0, r2, #5
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4621      	mov	r1, r4
 8007df8:	1a51      	subs	r1, r2, r1
 8007dfa:	6139      	str	r1, [r7, #16]
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e10:	4659      	mov	r1, fp
 8007e12:	018b      	lsls	r3, r1, #6
 8007e14:	4651      	mov	r1, sl
 8007e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	018a      	lsls	r2, r1, #6
 8007e1e:	4651      	mov	r1, sl
 8007e20:	ebb2 0801 	subs.w	r8, r2, r1
 8007e24:	4659      	mov	r1, fp
 8007e26:	eb63 0901 	sbc.w	r9, r3, r1
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e3e:	4690      	mov	r8, r2
 8007e40:	4699      	mov	r9, r3
 8007e42:	4623      	mov	r3, r4
 8007e44:	eb18 0303 	adds.w	r3, r8, r3
 8007e48:	60bb      	str	r3, [r7, #8]
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	eb49 0303 	adc.w	r3, r9, r3
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e5e:	4629      	mov	r1, r5
 8007e60:	024b      	lsls	r3, r1, #9
 8007e62:	4621      	mov	r1, r4
 8007e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e68:	4621      	mov	r1, r4
 8007e6a:	024a      	lsls	r2, r1, #9
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e72:	2200      	movs	r2, #0
 8007e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e7c:	f7f8 fdea 	bl	8000a54 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4613      	mov	r3, r2
 8007e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e88:	e058      	b.n	8007f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e8a:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	099b      	lsrs	r3, r3, #6
 8007e90:	2200      	movs	r2, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	4611      	mov	r1, r2
 8007e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e9a:	623b      	str	r3, [r7, #32]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	f04f 0000 	mov.w	r0, #0
 8007eac:	f04f 0100 	mov.w	r1, #0
 8007eb0:	0159      	lsls	r1, r3, #5
 8007eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eb6:	0150      	lsls	r0, r2, #5
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	f04f 0300 	mov.w	r3, #0
 8007ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007edc:	ebb2 040a 	subs.w	r4, r2, sl
 8007ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	00eb      	lsls	r3, r5, #3
 8007eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef2:	00e2      	lsls	r2, r4, #3
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	461d      	mov	r5, r3
 8007ef8:	4643      	mov	r3, r8
 8007efa:	18e3      	adds	r3, r4, r3
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	464b      	mov	r3, r9
 8007f00:	eb45 0303 	adc.w	r3, r5, r3
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f12:	4629      	mov	r1, r5
 8007f14:	028b      	lsls	r3, r1, #10
 8007f16:	4621      	mov	r1, r4
 8007f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	028a      	lsls	r2, r1, #10
 8007f20:	4610      	mov	r0, r2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f26:	2200      	movs	r2, #0
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	61fa      	str	r2, [r7, #28]
 8007f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f30:	f7f8 fd90 	bl	8000a54 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	3301      	adds	r3, #1
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f56:	e002      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3750      	adds	r7, #80	; 0x50
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	00f42400 	.word	0x00f42400
 8007f74:	007a1200 	.word	0x007a1200

08007f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200003f8 	.word	0x200003f8

08007f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f94:	f7ff fff0 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0a9b      	lsrs	r3, r3, #10
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4903      	ldr	r1, [pc, #12]	; (8007fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	0800ace4 	.word	0x0800ace4

08007fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fbc:	f7ff ffdc 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	0b5b      	lsrs	r3, r3, #13
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	4903      	ldr	r1, [pc, #12]	; (8007fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fce:	5ccb      	ldrb	r3, [r1, r3]
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	0800ace4 	.word	0x0800ace4

08007fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e041      	b.n	8008076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fc fa52 	bl	80044b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f000 fd7e 	bl	8008b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d001      	beq.n	8008098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e044      	b.n	8008122 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1e      	ldr	r2, [pc, #120]	; (8008130 <HAL_TIM_Base_Start_IT+0xb0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d018      	beq.n	80080ec <HAL_TIM_Base_Start_IT+0x6c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c2:	d013      	beq.n	80080ec <HAL_TIM_Base_Start_IT+0x6c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <HAL_TIM_Base_Start_IT+0xb4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00e      	beq.n	80080ec <HAL_TIM_Base_Start_IT+0x6c>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a19      	ldr	r2, [pc, #100]	; (8008138 <HAL_TIM_Base_Start_IT+0xb8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d009      	beq.n	80080ec <HAL_TIM_Base_Start_IT+0x6c>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a17      	ldr	r2, [pc, #92]	; (800813c <HAL_TIM_Base_Start_IT+0xbc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d004      	beq.n	80080ec <HAL_TIM_Base_Start_IT+0x6c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a16      	ldr	r2, [pc, #88]	; (8008140 <HAL_TIM_Base_Start_IT+0xc0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d111      	bne.n	8008110 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b06      	cmp	r3, #6
 80080fc:	d010      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810e:	e007      	b.n	8008120 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40014000 	.word	0x40014000

08008144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e041      	b.n	80081da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fc f932 	bl	80043d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3304      	adds	r3, #4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f000 fccc 	bl	8008b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <HAL_TIM_PWM_Start+0x24>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	e022      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d109      	bne.n	8008222 <HAL_TIM_PWM_Start+0x3e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b01      	cmp	r3, #1
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	e015      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d109      	bne.n	800823c <HAL_TIM_PWM_Start+0x58>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	e008      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	bf14      	ite	ne
 8008248:	2301      	movne	r3, #1
 800824a:	2300      	moveq	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e068      	b.n	8008328 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start+0x82>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008264:	e013      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b04      	cmp	r3, #4
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Start+0x92>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008274:	e00b      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0xa2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	e003      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2201      	movs	r2, #1
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fee8 	bl	800906c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a23      	ldr	r2, [pc, #140]	; (8008330 <HAL_TIM_PWM_Start+0x14c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <HAL_TIM_PWM_Start+0x14c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d018      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x10e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c8:	d013      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x10e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a19      	ldr	r2, [pc, #100]	; (8008334 <HAL_TIM_PWM_Start+0x150>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00e      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x10e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a17      	ldr	r2, [pc, #92]	; (8008338 <HAL_TIM_PWM_Start+0x154>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d009      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x10e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a16      	ldr	r2, [pc, #88]	; (800833c <HAL_TIM_PWM_Start+0x158>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d004      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x10e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <HAL_TIM_PWM_Start+0x15c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d111      	bne.n	8008316 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b06      	cmp	r3, #6
 8008302:	d010      	beq.n	8008326 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0201 	orr.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	e007      	b.n	8008326 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0201 	orr.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40010000 	.word	0x40010000
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40014000 	.word	0x40014000

08008344 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e097      	b.n	8008488 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d106      	bne.n	8008372 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fc f859 	bl	8004424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008388:	f023 0307 	bic.w	r3, r3, #7
 800838c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3304      	adds	r3, #4
 8008396:	4619      	mov	r1, r3
 8008398:	4610      	mov	r0, r2
 800839a:	f000 fbc1 	bl	8008b20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	4313      	orrs	r3, r2
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80083e4:	f023 030c 	bic.w	r3, r3, #12
 80083e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	4313      	orrs	r3, r2
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	011a      	lsls	r2, r3, #4
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	031b      	lsls	r3, r3, #12
 8008414:	4313      	orrs	r3, r2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008422:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	4313      	orrs	r3, r2
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d110      	bne.n	80084e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d102      	bne.n	80084cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084c6:	7b7b      	ldrb	r3, [r7, #13]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d001      	beq.n	80084d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e069      	b.n	80085a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e0:	e031      	b.n	8008546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d110      	bne.n	800850a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d102      	bne.n	80084f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084ee:	7b3b      	ldrb	r3, [r7, #12]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d001      	beq.n	80084f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e055      	b.n	80085a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008508:	e01d      	b.n	8008546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d108      	bne.n	8008522 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d105      	bne.n	8008522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008516:	7b7b      	ldrb	r3, [r7, #13]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800851c:	7b3b      	ldrb	r3, [r7, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d001      	beq.n	8008526 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e03e      	b.n	80085a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_TIM_Encoder_Start+0xc4>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d008      	beq.n	8008564 <HAL_TIM_Encoder_Start+0xd4>
 8008552:	e00f      	b.n	8008574 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2201      	movs	r2, #1
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fd85 	bl	800906c <TIM_CCxChannelCmd>
      break;
 8008562:	e016      	b.n	8008592 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2201      	movs	r2, #1
 800856a:	2104      	movs	r1, #4
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fd7d 	bl	800906c <TIM_CCxChannelCmd>
      break;
 8008572:	e00e      	b.n	8008592 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fd75 	bl	800906c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2201      	movs	r2, #1
 8008588:	2104      	movs	r1, #4
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fd6e 	bl	800906c <TIM_CCxChannelCmd>
      break;
 8008590:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d122      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d11b      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0202 	mvn.w	r2, #2
 80085d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa77 	bl	8008ae2 <HAL_TIM_IC_CaptureCallback>
 80085f4:	e005      	b.n	8008602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa69 	bl	8008ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa7a 	bl	8008af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b04      	cmp	r3, #4
 8008614:	d122      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d11b      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0204 	mvn.w	r2, #4
 800862c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa4d 	bl	8008ae2 <HAL_TIM_IC_CaptureCallback>
 8008648:	e005      	b.n	8008656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa3f 	bl	8008ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa50 	bl	8008af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b08      	cmp	r3, #8
 8008668:	d122      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b08      	cmp	r3, #8
 8008676:	d11b      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0208 	mvn.w	r2, #8
 8008680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa23 	bl	8008ae2 <HAL_TIM_IC_CaptureCallback>
 800869c:	e005      	b.n	80086aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa15 	bl	8008ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fa26 	bl	8008af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d122      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d11b      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0210 	mvn.w	r2, #16
 80086d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2208      	movs	r2, #8
 80086da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9f9 	bl	8008ae2 <HAL_TIM_IC_CaptureCallback>
 80086f0:	e005      	b.n	80086fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9eb 	bl	8008ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9fc 	bl	8008af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10e      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d107      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0201 	mvn.w	r2, #1
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fa ff06 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d10e      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d107      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fd78 	bl	800924c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d10e      	bne.n	8008788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d107      	bne.n	8008788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f9c1 	bl	8008b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b20      	cmp	r3, #32
 8008794:	d10e      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d107      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0220 	mvn.w	r2, #32
 80087ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fd42 	bl	8009238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e0ae      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b0c      	cmp	r3, #12
 80087e6:	f200 809f 	bhi.w	8008928 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008825 	.word	0x08008825
 80087f4:	08008929 	.word	0x08008929
 80087f8:	08008929 	.word	0x08008929
 80087fc:	08008929 	.word	0x08008929
 8008800:	08008865 	.word	0x08008865
 8008804:	08008929 	.word	0x08008929
 8008808:	08008929 	.word	0x08008929
 800880c:	08008929 	.word	0x08008929
 8008810:	080088a7 	.word	0x080088a7
 8008814:	08008929 	.word	0x08008929
 8008818:	08008929 	.word	0x08008929
 800881c:	08008929 	.word	0x08008929
 8008820:	080088e7 	.word	0x080088e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68b9      	ldr	r1, [r7, #8]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f9f8 	bl	8008c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0208 	orr.w	r2, r2, #8
 800883e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0204 	bic.w	r2, r2, #4
 800884e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6999      	ldr	r1, [r3, #24]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	691a      	ldr	r2, [r3, #16]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	619a      	str	r2, [r3, #24]
      break;
 8008862:	e064      	b.n	800892e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fa3e 	bl	8008cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	699a      	ldr	r2, [r3, #24]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800887e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6999      	ldr	r1, [r3, #24]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	021a      	lsls	r2, r3, #8
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	619a      	str	r2, [r3, #24]
      break;
 80088a4:	e043      	b.n	800892e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fa89 	bl	8008dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0208 	orr.w	r2, r2, #8
 80088c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0204 	bic.w	r2, r2, #4
 80088d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69d9      	ldr	r1, [r3, #28]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	61da      	str	r2, [r3, #28]
      break;
 80088e4:	e023      	b.n	800892e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fad3 	bl	8008e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69d9      	ldr	r1, [r3, #28]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	021a      	lsls	r2, r3, #8
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	61da      	str	r2, [r3, #28]
      break;
 8008926:	e002      	b.n	800892e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
      break;
 800892c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIM_ConfigClockSource+0x1c>
 8008958:	2302      	movs	r3, #2
 800895a:	e0b4      	b.n	8008ac6 <HAL_TIM_ConfigClockSource+0x186>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800897a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008994:	d03e      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0xd4>
 8008996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800899a:	f200 8087 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 800899e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a2:	f000 8086 	beq.w	8008ab2 <HAL_TIM_ConfigClockSource+0x172>
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089aa:	d87f      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089ac:	2b70      	cmp	r3, #112	; 0x70
 80089ae:	d01a      	beq.n	80089e6 <HAL_TIM_ConfigClockSource+0xa6>
 80089b0:	2b70      	cmp	r3, #112	; 0x70
 80089b2:	d87b      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089b4:	2b60      	cmp	r3, #96	; 0x60
 80089b6:	d050      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x11a>
 80089b8:	2b60      	cmp	r3, #96	; 0x60
 80089ba:	d877      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089bc:	2b50      	cmp	r3, #80	; 0x50
 80089be:	d03c      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0xfa>
 80089c0:	2b50      	cmp	r3, #80	; 0x50
 80089c2:	d873      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d058      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x13a>
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	d86f      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089cc:	2b30      	cmp	r3, #48	; 0x30
 80089ce:	d064      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x15a>
 80089d0:	2b30      	cmp	r3, #48	; 0x30
 80089d2:	d86b      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d060      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x15a>
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d867      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d05c      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x15a>
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d05a      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x15a>
 80089e4:	e062      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	6899      	ldr	r1, [r3, #8]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f000 fb19 	bl	800902c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	609a      	str	r2, [r3, #8]
      break;
 8008a12:	e04f      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6899      	ldr	r1, [r3, #8]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f000 fb02 	bl	800902c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a36:	609a      	str	r2, [r3, #8]
      break;
 8008a38:	e03c      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f000 fa76 	bl	8008f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2150      	movs	r1, #80	; 0x50
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 facf 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a58:	e02c      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6859      	ldr	r1, [r3, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f000 fa95 	bl	8008f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2160      	movs	r1, #96	; 0x60
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fabf 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a78:	e01c      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	6859      	ldr	r1, [r3, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f000 fa56 	bl	8008f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 faaf 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a98:	e00c      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f000 faa6 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008aaa:	e003      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab0:	e000      	b.n	8008ab4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a34      	ldr	r2, [pc, #208]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d00b      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a31      	ldr	r2, [pc, #196]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a30      	ldr	r2, [pc, #192]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d108      	bne.n	8008b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d017      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a22      	ldr	r2, [pc, #136]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a20      	ldr	r2, [pc, #128]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1f      	ldr	r2, [pc, #124]	; (8008c14 <TIM_Base_SetConfig+0xf4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <TIM_Base_SetConfig+0xf8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <TIM_Base_SetConfig+0xfc>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d108      	bne.n	8008bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d103      	bne.n	8008bf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	615a      	str	r2, [r3, #20]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40000800 	.word	0x40000800
 8008c10:	40000c00 	.word	0x40000c00
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0302 	bic.w	r3, r3, #2
 8008c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10c      	bne.n	8008c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 0308 	bic.w	r3, r3, #8
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 0304 	bic.w	r3, r3, #4
 8008c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d111      	bne.n	8008cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	40010000 	.word	0x40010000

08008cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1e      	ldr	r2, [pc, #120]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d10d      	bne.n	8008d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d113      	bne.n	8008d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	40010000 	.word	0x40010000

08008dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10d      	bne.n	8008e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d113      	bne.n	8008e6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40010000 	.word	0x40010000

08008e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	031b      	lsls	r3, r3, #12
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <TIM_OC4_SetConfig+0x9c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d109      	bne.n	8008f0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	019b      	lsls	r3, r3, #6
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000

08008f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 030a 	bic.w	r3, r3, #10
 8008f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b087      	sub	sp, #28
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0210 	bic.w	r2, r3, #16
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	f043 0307 	orr.w	r3, r3, #7
 8009018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	609a      	str	r2, [r3, #8]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	431a      	orrs	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4313      	orrs	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	2201      	movs	r2, #1
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1a      	ldr	r2, [r3, #32]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	431a      	orrs	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e050      	b.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d018      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911c:	d013      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a18      	ldr	r2, [pc, #96]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00e      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a16      	ldr	r2, [pc, #88]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a15      	ldr	r2, [pc, #84]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d004      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a13      	ldr	r2, [pc, #76]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d10c      	bne.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800914c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	4313      	orrs	r3, r2
 8009156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40010000 	.word	0x40010000
 8009184:	40000400 	.word	0x40000400
 8009188:	40000800 	.word	0x40000800
 800918c:	40000c00 	.word	0x40000c00
 8009190:	40014000 	.word	0x40014000

08009194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e03d      	b.n	800922c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e03f      	b.n	80092f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fb f9b0 	bl	80045ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2224      	movs	r2, #36	; 0x24
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ff81 	bl	800a1ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695a      	ldr	r2, [r3, #20]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08c      	sub	sp, #48	; 0x30
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b20      	cmp	r3, #32
 8009314:	d165      	bne.n	80093e2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_UART_Transmit_DMA+0x26>
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e05e      	b.n	80093e4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d101      	bne.n	8009334 <HAL_UART_Transmit_DMA+0x38>
 8009330:	2302      	movs	r3, #2
 8009332:	e057      	b.n	80093e4 <HAL_UART_Transmit_DMA+0xe8>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	88fa      	ldrh	r2, [r7, #6]
 8009346:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	88fa      	ldrh	r2, [r7, #6]
 800934c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2221      	movs	r2, #33	; 0x21
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	4a22      	ldr	r2, [pc, #136]	; (80093ec <HAL_UART_Transmit_DMA+0xf0>)
 8009362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009368:	4a21      	ldr	r2, [pc, #132]	; (80093f0 <HAL_UART_Transmit_DMA+0xf4>)
 800936a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	4a20      	ldr	r2, [pc, #128]	; (80093f4 <HAL_UART_Transmit_DMA+0xf8>)
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	2200      	movs	r2, #0
 800937a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800937c:	f107 0308 	add.w	r3, r7, #8
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3304      	adds	r3, #4
 8009390:	461a      	mov	r2, r3
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	f7fb fce6 	bl	8004d64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3314      	adds	r3, #20
 80093b0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3314      	adds	r3, #20
 80093c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ca:	627a      	str	r2, [r7, #36]	; 0x24
 80093cc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6a39      	ldr	r1, [r7, #32]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e5      	bne.n	80093aa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	e000      	b.n	80093e4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80093e2:	2302      	movs	r3, #2
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3730      	adds	r7, #48	; 0x30
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	08009a45 	.word	0x08009a45
 80093f0:	08009adf 	.word	0x08009adf
 80093f4:	08009c57 	.word	0x08009c57

080093f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	; 0x30
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b20      	cmp	r3, #32
 8009410:	d152      	bne.n	80094b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009418:	88fb      	ldrh	r3, [r7, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e04b      	b.n	80094ba <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800942c:	2302      	movs	r3, #2
 800942e:	e044      	b.n	80094ba <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	461a      	mov	r2, r3
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fc51 	bl	8009cec <UART_Start_Receive_DMA>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009454:	2b00      	cmp	r3, #0
 8009456:	d12c      	bne.n	80094b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	2b01      	cmp	r3, #1
 800945e:	d125      	bne.n	80094ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	617b      	str	r3, [r7, #20]
   return(result);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f043 0310 	orr.w	r3, r3, #16
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	330c      	adds	r3, #12
 8009494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009496:	627a      	str	r2, [r7, #36]	; 0x24
 8009498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6a39      	ldr	r1, [r7, #32]
 800949c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80094aa:	e002      	b.n	80094b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80094b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094b6:	e000      	b.n	80094ba <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3730      	adds	r7, #48	; 0x30
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b0ba      	sub	sp, #232	; 0xe8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10f      	bne.n	800952a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <HAL_UART_IRQHandler+0x66>
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fd87 	bl	800a036 <UART_Receive_IT>
      return;
 8009528:	e256      	b.n	80099d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800952a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80de 	beq.w	80096f0 <HAL_UART_IRQHandler+0x22c>
 8009534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80d1 	beq.w	80096f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <HAL_UART_IRQHandler+0xae>
 800955a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f043 0201 	orr.w	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <HAL_UART_IRQHandler+0xd2>
 800957e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	f043 0202 	orr.w	r2, r3, #2
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <HAL_UART_IRQHandler+0xf6>
 80095a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	f043 0204 	orr.w	r2, r3, #4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095be:	f003 0308 	and.w	r3, r3, #8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d011      	beq.n	80095ea <HAL_UART_IRQHandler+0x126>
 80095c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	f043 0208 	orr.w	r2, r3, #8
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 81ed 	beq.w	80099ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <HAL_UART_IRQHandler+0x14e>
 8009600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fd12 	bl	800a036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961c:	2b40      	cmp	r3, #64	; 0x40
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <HAL_UART_IRQHandler+0x17a>
 8009636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800963a:	2b00      	cmp	r3, #0
 800963c:	d04f      	beq.n	80096de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fc1a 	bl	8009e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b40      	cmp	r3, #64	; 0x40
 8009650:	d141      	bne.n	80096d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800966c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3314      	adds	r3, #20
 800967a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800967e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800968a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1d9      	bne.n	8009652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d013      	beq.n	80096ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	4a7d      	ldr	r2, [pc, #500]	; (80098a0 <HAL_UART_IRQHandler+0x3dc>)
 80096ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fb fc1e 	bl	8004ef4 <HAL_DMA_Abort_IT>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d016      	beq.n	80096ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096cc:	e00e      	b.n	80096ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f9ae 	bl	8009a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d4:	e00a      	b.n	80096ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f9aa 	bl	8009a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	e006      	b.n	80096ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9a6 	bl	8009a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096ea:	e170      	b.n	80099ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ec:	bf00      	nop
    return;
 80096ee:	e16e      	b.n	80099ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	f040 814a 	bne.w	800998e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	f003 0310 	and.w	r3, r3, #16
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8143 	beq.w	800998e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 813c 	beq.w	800998e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	60bb      	str	r3, [r7, #8]
 800972a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b40      	cmp	r3, #64	; 0x40
 8009738:	f040 80b4 	bne.w	80098a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 8140 	beq.w	80099d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800975a:	429a      	cmp	r2, r3
 800975c:	f080 8139 	bcs.w	80099d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009772:	f000 8088 	beq.w	8009886 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	330c      	adds	r3, #12
 800977c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800978c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1d9      	bne.n	8009776 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3314      	adds	r3, #20
 80097c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3314      	adds	r3, #20
 80097e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e1      	bne.n	80097c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800980e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3314      	adds	r3, #20
 800981e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009824:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e3      	bne.n	80097fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	330c      	adds	r3, #12
 800984a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009856:	f023 0310 	bic.w	r3, r3, #16
 800985a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009868:	65ba      	str	r2, [r7, #88]	; 0x58
 800986a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800986e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e3      	bne.n	8009844 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	4618      	mov	r0, r3
 8009882:	f7fb fac7 	bl	8004e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800988e:	b29b      	uxth	r3, r3
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	b29b      	uxth	r3, r3
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7f9 ff42 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800989c:	e099      	b.n	80099d2 <HAL_UART_IRQHandler+0x50e>
 800989e:	bf00      	nop
 80098a0:	08009f3f 	.word	0x08009f3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 808b 	beq.w	80099d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80098c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8086 	beq.w	80099d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	330c      	adds	r3, #12
 80098d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	330c      	adds	r3, #12
 80098ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098ee:	647a      	str	r2, [r7, #68]	; 0x44
 80098f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e3      	bne.n	80098ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	623b      	str	r3, [r7, #32]
   return(result);
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009926:	633a      	str	r2, [r7, #48]	; 0x30
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800992c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e3      	bne.n	8009902 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	330c      	adds	r3, #12
 800994e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	60fb      	str	r3, [r7, #12]
   return(result);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0310 	bic.w	r3, r3, #16
 800995e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	330c      	adds	r3, #12
 8009968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800996c:	61fa      	str	r2, [r7, #28]
 800996e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	69b9      	ldr	r1, [r7, #24]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	617b      	str	r3, [r7, #20]
   return(result);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e3      	bne.n	8009948 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7f9 feca 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800998c:	e023      	b.n	80099d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <HAL_UART_IRQHandler+0x4ea>
 800999a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fadd 	bl	8009f66 <UART_Transmit_IT>
    return;
 80099ac:	e014      	b.n	80099d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00e      	beq.n	80099d8 <HAL_UART_IRQHandler+0x514>
 80099ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d008      	beq.n	80099d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fb1d 	bl	800a006 <UART_EndTransmit_IT>
    return;
 80099cc:	e004      	b.n	80099d8 <HAL_UART_IRQHandler+0x514>
    return;
 80099ce:	bf00      	nop
 80099d0:	e002      	b.n	80099d8 <HAL_UART_IRQHandler+0x514>
      return;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_UART_IRQHandler+0x514>
      return;
 80099d6:	bf00      	nop
  }
}
 80099d8:	37e8      	adds	r7, #232	; 0xe8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b090      	sub	sp, #64	; 0x40
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d137      	bne.n	8009ad0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a62:	2200      	movs	r2, #0
 8009a64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3314      	adds	r3, #20
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	623b      	str	r3, [r7, #32]
   return(result);
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3314      	adds	r3, #20
 8009a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a86:	633a      	str	r2, [r7, #48]	; 0x30
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	330c      	adds	r3, #12
 8009aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aba:	61fa      	str	r2, [r7, #28]
 8009abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	69b9      	ldr	r1, [r7, #24]
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ace:	e002      	b.n	8009ad6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ad0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ad2:	f7ff ff85 	bl	80099e0 <HAL_UART_TxCpltCallback>
}
 8009ad6:	bf00      	nop
 8009ad8:	3740      	adds	r7, #64	; 0x40
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff ff81 	bl	80099f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b09c      	sub	sp, #112	; 0x70
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d172      	bne.n	8009bfc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b18:	2200      	movs	r2, #0
 8009b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	330c      	adds	r3, #12
 8009b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e5      	bne.n	8009b1c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3314      	adds	r3, #20
 8009b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	e853 3f00 	ldrex	r3, [r3]
 8009b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	f023 0301 	bic.w	r3, r3, #1
 8009b66:	667b      	str	r3, [r7, #100]	; 0x64
 8009b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3314      	adds	r3, #20
 8009b6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b70:	647a      	str	r2, [r7, #68]	; 0x44
 8009b72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e5      	bne.n	8009b50 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3314      	adds	r3, #20
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	623b      	str	r3, [r7, #32]
   return(result);
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8009b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ba4:	633a      	str	r2, [r7, #48]	; 0x30
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e5      	bne.n	8009b84 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d119      	bne.n	8009bfc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0310 	bic.w	r3, r3, #16
 8009bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009be8:	61fa      	str	r2, [r7, #28]
 8009bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	69b9      	ldr	r1, [r7, #24]
 8009bee:	69fa      	ldr	r2, [r7, #28]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e5      	bne.n	8009bc8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d106      	bne.n	8009c12 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c0c:	f7f9 fd88 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c10:	e002      	b.n	8009c18 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c14:	f7ff fef8 	bl	8009a08 <HAL_UART_RxCpltCallback>
}
 8009c18:	bf00      	nop
 8009c1a:	3770      	adds	r7, #112	; 0x70
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d108      	bne.n	8009c48 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7f9 fd6d 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c46:	e002      	b.n	8009c4e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fee7 	bl	8009a1c <HAL_UART_RxHalfCpltCallback>
}
 8009c4e:	bf00      	nop
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b80      	cmp	r3, #128	; 0x80
 8009c74:	bf0c      	ite	eq
 8009c76:	2301      	moveq	r3, #1
 8009c78:	2300      	movne	r3, #0
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b21      	cmp	r3, #33	; 0x21
 8009c88:	d108      	bne.n	8009c9c <UART_DMAError+0x46>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c96:	68b8      	ldr	r0, [r7, #8]
 8009c98:	f000 f8c6 	bl	8009e28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	bf0c      	ite	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	2300      	movne	r3, #0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b22      	cmp	r3, #34	; 0x22
 8009cbc:	d108      	bne.n	8009cd0 <UART_DMAError+0x7a>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009cca:	68b8      	ldr	r0, [r7, #8]
 8009ccc:	f000 f8d4 	bl	8009e78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	f043 0210 	orr.w	r2, r3, #16
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	f7ff fea7 	bl	8009a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b098      	sub	sp, #96	; 0x60
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	88fa      	ldrh	r2, [r7, #6]
 8009d04:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2222      	movs	r2, #34	; 0x22
 8009d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	4a40      	ldr	r2, [pc, #256]	; (8009e1c <UART_Start_Receive_DMA+0x130>)
 8009d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	4a3f      	ldr	r2, [pc, #252]	; (8009e20 <UART_Start_Receive_DMA+0x134>)
 8009d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	4a3e      	ldr	r2, [pc, #248]	; (8009e24 <UART_Start_Receive_DMA+0x138>)
 8009d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	2200      	movs	r2, #0
 8009d32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d34:	f107 0308 	add.w	r3, r7, #8
 8009d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	f7fb f80a 	bl	8004d64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d50:	2300      	movs	r3, #0
 8009d52:	613b      	str	r3, [r7, #16]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d019      	beq.n	8009daa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d96:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3314      	adds	r3, #20
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dca:	63ba      	str	r2, [r7, #56]	; 0x38
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3314      	adds	r3, #20
 8009de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	617b      	str	r3, [r7, #20]
   return(result);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df4:	653b      	str	r3, [r7, #80]	; 0x50
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3314      	adds	r3, #20
 8009dfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8009e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6a39      	ldr	r1, [r7, #32]
 8009e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e5      	bne.n	8009dde <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3760      	adds	r7, #96	; 0x60
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08009afb 	.word	0x08009afb
 8009e20:	08009c21 	.word	0x08009c21
 8009e24:	08009c57 	.word	0x08009c57

08009e28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	61ba      	str	r2, [r7, #24]
 8009e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009e6c:	bf00      	nop
 8009e6e:	3724      	adds	r7, #36	; 0x24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b095      	sub	sp, #84	; 0x54
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	330c      	adds	r3, #12
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ea0:	643a      	str	r2, [r7, #64]	; 0x40
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e5      	bne.n	8009e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3314      	adds	r3, #20
 8009eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3314      	adds	r3, #20
 8009ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e5      	bne.n	8009eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d119      	bne.n	8009f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f023 0310 	bic.w	r3, r3, #16
 8009f06:	647b      	str	r3, [r7, #68]	; 0x44
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f10:	61ba      	str	r2, [r7, #24]
 8009f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e5      	bne.n	8009ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f32:	bf00      	nop
 8009f34:	3754      	adds	r7, #84	; 0x54
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f7ff fd69 	bl	8009a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b21      	cmp	r3, #33	; 0x21
 8009f78:	d13e      	bne.n	8009ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f82:	d114      	bne.n	8009fae <UART_Transmit_IT+0x48>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d110      	bne.n	8009fae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	1c9a      	adds	r2, r3, #2
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	621a      	str	r2, [r3, #32]
 8009fac:	e008      	b.n	8009fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	1c59      	adds	r1, r3, #1
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6211      	str	r1, [r2, #32]
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10f      	bne.n	8009ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2220      	movs	r2, #32
 800a022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fcda 	bl	80099e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b08c      	sub	sp, #48	; 0x30
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b22      	cmp	r3, #34	; 0x22
 800a048:	f040 80ab 	bne.w	800a1a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a054:	d117      	bne.n	800a086 <UART_Receive_IT+0x50>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d113      	bne.n	800a086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a074:	b29a      	uxth	r2, r3
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07e:	1c9a      	adds	r2, r3, #2
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	629a      	str	r2, [r3, #40]	; 0x28
 800a084:	e026      	b.n	800a0d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d007      	beq.n	800a0aa <UART_Receive_IT+0x74>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <UART_Receive_IT+0x82>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e008      	b.n	800a0ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d15a      	bne.n	800a19e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f022 0220 	bic.w	r2, r2, #32
 800a0f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	695a      	ldr	r2, [r3, #20]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0201 	bic.w	r2, r2, #1
 800a116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	2b01      	cmp	r3, #1
 800a126:	d135      	bne.n	800a194 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	330c      	adds	r3, #12
 800a134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	613b      	str	r3, [r7, #16]
   return(result);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f023 0310 	bic.w	r3, r3, #16
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14e:	623a      	str	r2, [r7, #32]
 800a150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	69f9      	ldr	r1, [r7, #28]
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e5      	bne.n	800a12e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b10      	cmp	r3, #16
 800a16e:	d10a      	bne.n	800a186 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7f9 fac7 	bl	8003720 <HAL_UARTEx_RxEventCallback>
 800a192:	e002      	b.n	800a19a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff fc37 	bl	8009a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e002      	b.n	800a1a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e000      	b.n	800a1a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a1a2:	2302      	movs	r3, #2
  }
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3730      	adds	r7, #48	; 0x30
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1b0:	b0c0      	sub	sp, #256	; 0x100
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c8:	68d9      	ldr	r1, [r3, #12]
 800a1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	ea40 0301 	orr.w	r3, r0, r1
 800a1d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a204:	f021 010c 	bic.w	r1, r1, #12
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a212:	430b      	orrs	r3, r1
 800a214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a226:	6999      	ldr	r1, [r3, #24]
 800a228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	ea40 0301 	orr.w	r3, r0, r1
 800a232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b8f      	ldr	r3, [pc, #572]	; (800a478 <UART_SetConfig+0x2cc>)
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d005      	beq.n	800a24c <UART_SetConfig+0xa0>
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b8d      	ldr	r3, [pc, #564]	; (800a47c <UART_SetConfig+0x2d0>)
 800a248:	429a      	cmp	r2, r3
 800a24a:	d104      	bne.n	800a256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a24c:	f7fd feb4 	bl	8007fb8 <HAL_RCC_GetPCLK2Freq>
 800a250:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a254:	e003      	b.n	800a25e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a256:	f7fd fe9b 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 800a25a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a268:	f040 810c 	bne.w	800a484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a26c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a270:	2200      	movs	r2, #0
 800a272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a276:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a27a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	1891      	adds	r1, r2, r2
 800a284:	65b9      	str	r1, [r7, #88]	; 0x58
 800a286:	415b      	adcs	r3, r3
 800a288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a28a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a28e:	4621      	mov	r1, r4
 800a290:	eb12 0801 	adds.w	r8, r2, r1
 800a294:	4629      	mov	r1, r5
 800a296:	eb43 0901 	adc.w	r9, r3, r1
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2ae:	4690      	mov	r8, r2
 800a2b0:	4699      	mov	r9, r3
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	eb18 0303 	adds.w	r3, r8, r3
 800a2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2bc:	462b      	mov	r3, r5
 800a2be:	eb49 0303 	adc.w	r3, r9, r3
 800a2c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a2d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a2da:	460b      	mov	r3, r1
 800a2dc:	18db      	adds	r3, r3, r3
 800a2de:	653b      	str	r3, [r7, #80]	; 0x50
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	eb42 0303 	adc.w	r3, r2, r3
 800a2e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a2e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a2ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a2f0:	f7f6 fbb0 	bl	8000a54 <__aeabi_uldivmod>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4b61      	ldr	r3, [pc, #388]	; (800a480 <UART_SetConfig+0x2d4>)
 800a2fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a2fe:	095b      	lsrs	r3, r3, #5
 800a300:	011c      	lsls	r4, r3, #4
 800a302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a306:	2200      	movs	r2, #0
 800a308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a30c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	1891      	adds	r1, r2, r2
 800a31a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a31c:	415b      	adcs	r3, r3
 800a31e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a324:	4641      	mov	r1, r8
 800a326:	eb12 0a01 	adds.w	sl, r2, r1
 800a32a:	4649      	mov	r1, r9
 800a32c:	eb43 0b01 	adc.w	fp, r3, r1
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a33c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a344:	4692      	mov	sl, r2
 800a346:	469b      	mov	fp, r3
 800a348:	4643      	mov	r3, r8
 800a34a:	eb1a 0303 	adds.w	r3, sl, r3
 800a34e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a352:	464b      	mov	r3, r9
 800a354:	eb4b 0303 	adc.w	r3, fp, r3
 800a358:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a368:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a36c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a370:	460b      	mov	r3, r1
 800a372:	18db      	adds	r3, r3, r3
 800a374:	643b      	str	r3, [r7, #64]	; 0x40
 800a376:	4613      	mov	r3, r2
 800a378:	eb42 0303 	adc.w	r3, r2, r3
 800a37c:	647b      	str	r3, [r7, #68]	; 0x44
 800a37e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a386:	f7f6 fb65 	bl	8000a54 <__aeabi_uldivmod>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4611      	mov	r1, r2
 800a390:	4b3b      	ldr	r3, [pc, #236]	; (800a480 <UART_SetConfig+0x2d4>)
 800a392:	fba3 2301 	umull	r2, r3, r3, r1
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	2264      	movs	r2, #100	; 0x64
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	1acb      	subs	r3, r1, r3
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3a6:	4b36      	ldr	r3, [pc, #216]	; (800a480 <UART_SetConfig+0x2d4>)
 800a3a8:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3b4:	441c      	add	r4, r3
 800a3b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a3c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	1891      	adds	r1, r2, r2
 800a3ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800a3d0:	415b      	adcs	r3, r3
 800a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3d8:	4641      	mov	r1, r8
 800a3da:	1851      	adds	r1, r2, r1
 800a3dc:	6339      	str	r1, [r7, #48]	; 0x30
 800a3de:	4649      	mov	r1, r9
 800a3e0:	414b      	adcs	r3, r1
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a3f0:	4659      	mov	r1, fp
 800a3f2:	00cb      	lsls	r3, r1, #3
 800a3f4:	4651      	mov	r1, sl
 800a3f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3fa:	4651      	mov	r1, sl
 800a3fc:	00ca      	lsls	r2, r1, #3
 800a3fe:	4610      	mov	r0, r2
 800a400:	4619      	mov	r1, r3
 800a402:	4603      	mov	r3, r0
 800a404:	4642      	mov	r2, r8
 800a406:	189b      	adds	r3, r3, r2
 800a408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a40c:	464b      	mov	r3, r9
 800a40e:	460a      	mov	r2, r1
 800a410:	eb42 0303 	adc.w	r3, r2, r3
 800a414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a424:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a42c:	460b      	mov	r3, r1
 800a42e:	18db      	adds	r3, r3, r3
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
 800a432:	4613      	mov	r3, r2
 800a434:	eb42 0303 	adc.w	r3, r2, r3
 800a438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a43a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a43e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a442:	f7f6 fb07 	bl	8000a54 <__aeabi_uldivmod>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <UART_SetConfig+0x2d4>)
 800a44c:	fba3 1302 	umull	r1, r3, r3, r2
 800a450:	095b      	lsrs	r3, r3, #5
 800a452:	2164      	movs	r1, #100	; 0x64
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	3332      	adds	r3, #50	; 0x32
 800a45e:	4a08      	ldr	r2, [pc, #32]	; (800a480 <UART_SetConfig+0x2d4>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	f003 0207 	and.w	r2, r3, #7
 800a46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4422      	add	r2, r4
 800a472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a474:	e105      	b.n	800a682 <UART_SetConfig+0x4d6>
 800a476:	bf00      	nop
 800a478:	40011000 	.word	0x40011000
 800a47c:	40011400 	.word	0x40011400
 800a480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a48e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a496:	4642      	mov	r2, r8
 800a498:	464b      	mov	r3, r9
 800a49a:	1891      	adds	r1, r2, r2
 800a49c:	6239      	str	r1, [r7, #32]
 800a49e:	415b      	adcs	r3, r3
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	1854      	adds	r4, r2, r1
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	eb43 0501 	adc.w	r5, r3, r1
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	f04f 0300 	mov.w	r3, #0
 800a4b8:	00eb      	lsls	r3, r5, #3
 800a4ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4be:	00e2      	lsls	r2, r4, #3
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	4643      	mov	r3, r8
 800a4c6:	18e3      	adds	r3, r4, r3
 800a4c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	eb45 0303 	adc.w	r3, r5, r3
 800a4d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4e6:	f04f 0200 	mov.w	r2, #0
 800a4ea:	f04f 0300 	mov.w	r3, #0
 800a4ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	008b      	lsls	r3, r1, #2
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	008a      	lsls	r2, r1, #2
 800a500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a504:	f7f6 faa6 	bl	8000a54 <__aeabi_uldivmod>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4b60      	ldr	r3, [pc, #384]	; (800a690 <UART_SetConfig+0x4e4>)
 800a50e:	fba3 2302 	umull	r2, r3, r3, r2
 800a512:	095b      	lsrs	r3, r3, #5
 800a514:	011c      	lsls	r4, r3, #4
 800a516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	1891      	adds	r1, r2, r2
 800a52e:	61b9      	str	r1, [r7, #24]
 800a530:	415b      	adcs	r3, r3
 800a532:	61fb      	str	r3, [r7, #28]
 800a534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a538:	4641      	mov	r1, r8
 800a53a:	1851      	adds	r1, r2, r1
 800a53c:	6139      	str	r1, [r7, #16]
 800a53e:	4649      	mov	r1, r9
 800a540:	414b      	adcs	r3, r1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a550:	4659      	mov	r1, fp
 800a552:	00cb      	lsls	r3, r1, #3
 800a554:	4651      	mov	r1, sl
 800a556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a55a:	4651      	mov	r1, sl
 800a55c:	00ca      	lsls	r2, r1, #3
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	4603      	mov	r3, r0
 800a564:	4642      	mov	r2, r8
 800a566:	189b      	adds	r3, r3, r2
 800a568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a56c:	464b      	mov	r3, r9
 800a56e:	460a      	mov	r2, r1
 800a570:	eb42 0303 	adc.w	r3, r2, r3
 800a574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	67bb      	str	r3, [r7, #120]	; 0x78
 800a582:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	f04f 0300 	mov.w	r3, #0
 800a58c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a590:	4649      	mov	r1, r9
 800a592:	008b      	lsls	r3, r1, #2
 800a594:	4641      	mov	r1, r8
 800a596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a59a:	4641      	mov	r1, r8
 800a59c:	008a      	lsls	r2, r1, #2
 800a59e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5a2:	f7f6 fa57 	bl	8000a54 <__aeabi_uldivmod>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4b39      	ldr	r3, [pc, #228]	; (800a690 <UART_SetConfig+0x4e4>)
 800a5ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	2164      	movs	r1, #100	; 0x64
 800a5b4:	fb01 f303 	mul.w	r3, r1, r3
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	3332      	adds	r3, #50	; 0x32
 800a5be:	4a34      	ldr	r2, [pc, #208]	; (800a690 <UART_SetConfig+0x4e4>)
 800a5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c4:	095b      	lsrs	r3, r3, #5
 800a5c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5ca:	441c      	add	r4, r3
 800a5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	673b      	str	r3, [r7, #112]	; 0x70
 800a5d4:	677a      	str	r2, [r7, #116]	; 0x74
 800a5d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a5da:	4642      	mov	r2, r8
 800a5dc:	464b      	mov	r3, r9
 800a5de:	1891      	adds	r1, r2, r2
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	415b      	adcs	r3, r3
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	1851      	adds	r1, r2, r1
 800a5ee:	6039      	str	r1, [r7, #0]
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	414b      	adcs	r3, r1
 800a5f4:	607b      	str	r3, [r7, #4]
 800a5f6:	f04f 0200 	mov.w	r2, #0
 800a5fa:	f04f 0300 	mov.w	r3, #0
 800a5fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a602:	4659      	mov	r1, fp
 800a604:	00cb      	lsls	r3, r1, #3
 800a606:	4651      	mov	r1, sl
 800a608:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a60c:	4651      	mov	r1, sl
 800a60e:	00ca      	lsls	r2, r1, #3
 800a610:	4610      	mov	r0, r2
 800a612:	4619      	mov	r1, r3
 800a614:	4603      	mov	r3, r0
 800a616:	4642      	mov	r2, r8
 800a618:	189b      	adds	r3, r3, r2
 800a61a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a61c:	464b      	mov	r3, r9
 800a61e:	460a      	mov	r2, r1
 800a620:	eb42 0303 	adc.w	r3, r2, r3
 800a624:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	663b      	str	r3, [r7, #96]	; 0x60
 800a630:	667a      	str	r2, [r7, #100]	; 0x64
 800a632:	f04f 0200 	mov.w	r2, #0
 800a636:	f04f 0300 	mov.w	r3, #0
 800a63a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a63e:	4649      	mov	r1, r9
 800a640:	008b      	lsls	r3, r1, #2
 800a642:	4641      	mov	r1, r8
 800a644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a648:	4641      	mov	r1, r8
 800a64a:	008a      	lsls	r2, r1, #2
 800a64c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a650:	f7f6 fa00 	bl	8000a54 <__aeabi_uldivmod>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <UART_SetConfig+0x4e4>)
 800a65a:	fba3 1302 	umull	r1, r3, r3, r2
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	2164      	movs	r1, #100	; 0x64
 800a662:	fb01 f303 	mul.w	r3, r1, r3
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	3332      	adds	r3, #50	; 0x32
 800a66c:	4a08      	ldr	r2, [pc, #32]	; (800a690 <UART_SetConfig+0x4e4>)
 800a66e:	fba2 2303 	umull	r2, r3, r2, r3
 800a672:	095b      	lsrs	r3, r3, #5
 800a674:	f003 020f 	and.w	r2, r3, #15
 800a678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4422      	add	r2, r4
 800a680:	609a      	str	r2, [r3, #8]
}
 800a682:	bf00      	nop
 800a684:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a688:	46bd      	mov	sp, r7
 800a68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a68e:	bf00      	nop
 800a690:	51eb851f 	.word	0x51eb851f

0800a694 <arm_mat_trans_f32>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	8802      	ldrh	r2, [r0, #0]
 800a69a:	884b      	ldrh	r3, [r1, #2]
 800a69c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a6a0:	684f      	ldr	r7, [r1, #4]
 800a6a2:	8840      	ldrh	r0, [r0, #2]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	d14c      	bne.n	800a744 <arm_mat_trans_f32+0xb0>
 800a6aa:	f8b1 e000 	ldrh.w	lr, [r1]
 800a6ae:	4586      	cmp	lr, r0
 800a6b0:	d148      	bne.n	800a744 <arm_mat_trans_f32+0xb0>
 800a6b2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800a6b6:	009c      	lsls	r4, r3, #2
 800a6b8:	f00e 0e03 	and.w	lr, lr, #3
 800a6bc:	fb08 f904 	mul.w	r9, r8, r4
 800a6c0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800a6c4:	011d      	lsls	r5, r3, #4
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a6cc:	eb07 0a04 	add.w	sl, r7, r4
 800a6d0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800a6d4:	9201      	str	r2, [sp, #4]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	463b      	mov	r3, r7
 800a6da:	f1b8 0f00 	cmp.w	r8, #0
 800a6de:	d01d      	beq.n	800a71c <arm_mat_trans_f32+0x88>
 800a6e0:	9900      	ldr	r1, [sp, #0]
 800a6e2:	f10c 0210 	add.w	r2, ip, #16
 800a6e6:	4439      	add	r1, r7
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800a6ee:	601e      	str	r6, [r3, #0]
 800a6f0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800a6f4:	191e      	adds	r6, r3, r4
 800a6f6:	edc6 7a00 	vstr	s15, [r6]
 800a6fa:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800a6fe:	600e      	str	r6, [r1, #0]
 800a700:	ed52 7a01 	vldr	s15, [r2, #-4]
 800a704:	190e      	adds	r6, r1, r4
 800a706:	3801      	subs	r0, #1
 800a708:	442b      	add	r3, r5
 800a70a:	f102 0210 	add.w	r2, r2, #16
 800a70e:	edc6 7a00 	vstr	s15, [r6]
 800a712:	4429      	add	r1, r5
 800a714:	d1e9      	bne.n	800a6ea <arm_mat_trans_f32+0x56>
 800a716:	44dc      	add	ip, fp
 800a718:	eb09 0307 	add.w	r3, r9, r7
 800a71c:	f1be 0f00 	cmp.w	lr, #0
 800a720:	d009      	beq.n	800a736 <arm_mat_trans_f32+0xa2>
 800a722:	4672      	mov	r2, lr
 800a724:	4661      	mov	r1, ip
 800a726:	f851 0b04 	ldr.w	r0, [r1], #4
 800a72a:	6018      	str	r0, [r3, #0]
 800a72c:	3a01      	subs	r2, #1
 800a72e:	4423      	add	r3, r4
 800a730:	d1f9      	bne.n	800a726 <arm_mat_trans_f32+0x92>
 800a732:	9b01      	ldr	r3, [sp, #4]
 800a734:	449c      	add	ip, r3
 800a736:	3704      	adds	r7, #4
 800a738:	4557      	cmp	r7, sl
 800a73a:	d1cd      	bne.n	800a6d8 <arm_mat_trans_f32+0x44>
 800a73c:	2000      	movs	r0, #0
 800a73e:	b003      	add	sp, #12
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	f06f 0002 	mvn.w	r0, #2
 800a748:	e7f9      	b.n	800a73e <arm_mat_trans_f32+0xaa>
 800a74a:	bf00      	nop

0800a74c <arm_mat_sub_f32>:
 800a74c:	b4f0      	push	{r4, r5, r6, r7}
 800a74e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800a752:	6803      	ldr	r3, [r0, #0]
 800a754:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a758:	6856      	ldr	r6, [r2, #4]
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	d15d      	bne.n	800a81a <arm_mat_sub_f32+0xce>
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	4293      	cmp	r3, r2
 800a762:	d15a      	bne.n	800a81a <arm_mat_sub_f32+0xce>
 800a764:	8803      	ldrh	r3, [r0, #0]
 800a766:	8844      	ldrh	r4, [r0, #2]
 800a768:	fb04 f403 	mul.w	r4, r4, r3
 800a76c:	08a5      	lsrs	r5, r4, #2
 800a76e:	d032      	beq.n	800a7d6 <arm_mat_sub_f32+0x8a>
 800a770:	f10c 0110 	add.w	r1, ip, #16
 800a774:	f107 0210 	add.w	r2, r7, #16
 800a778:	f106 0310 	add.w	r3, r6, #16
 800a77c:	4628      	mov	r0, r5
 800a77e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a782:	ed51 7a04 	vldr	s15, [r1, #-16]
 800a786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a78a:	3801      	subs	r0, #1
 800a78c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a790:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a794:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a79c:	f101 0110 	add.w	r1, r1, #16
 800a7a0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a7a4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a7a8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800a7ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7b0:	f102 0210 	add.w	r2, r2, #16
 800a7b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a7b8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800a7bc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a7c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7c4:	f103 0310 	add.w	r3, r3, #16
 800a7c8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a7cc:	d1d7      	bne.n	800a77e <arm_mat_sub_f32+0x32>
 800a7ce:	012b      	lsls	r3, r5, #4
 800a7d0:	449c      	add	ip, r3
 800a7d2:	441f      	add	r7, r3
 800a7d4:	441e      	add	r6, r3
 800a7d6:	f014 0403 	ands.w	r4, r4, #3
 800a7da:	d01b      	beq.n	800a814 <arm_mat_sub_f32+0xc8>
 800a7dc:	eddc 7a00 	vldr	s15, [ip]
 800a7e0:	ed97 7a00 	vldr	s14, [r7]
 800a7e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7e8:	3c01      	subs	r4, #1
 800a7ea:	edc6 7a00 	vstr	s15, [r6]
 800a7ee:	d011      	beq.n	800a814 <arm_mat_sub_f32+0xc8>
 800a7f0:	eddc 7a01 	vldr	s15, [ip, #4]
 800a7f4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a7f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7fc:	2c01      	cmp	r4, #1
 800a7fe:	edc6 7a01 	vstr	s15, [r6, #4]
 800a802:	d007      	beq.n	800a814 <arm_mat_sub_f32+0xc8>
 800a804:	eddc 7a02 	vldr	s15, [ip, #8]
 800a808:	ed97 7a02 	vldr	s14, [r7, #8]
 800a80c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a810:	edc6 7a02 	vstr	s15, [r6, #8]
 800a814:	2000      	movs	r0, #0
 800a816:	bcf0      	pop	{r4, r5, r6, r7}
 800a818:	4770      	bx	lr
 800a81a:	f06f 0002 	mvn.w	r0, #2
 800a81e:	e7fa      	b.n	800a816 <arm_mat_sub_f32+0xca>

0800a820 <arm_mat_mult_f32>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	8845      	ldrh	r5, [r0, #2]
 800a826:	880b      	ldrh	r3, [r1, #0]
 800a828:	8806      	ldrh	r6, [r0, #0]
 800a82a:	6847      	ldr	r7, [r0, #4]
 800a82c:	6854      	ldr	r4, [r2, #4]
 800a82e:	6848      	ldr	r0, [r1, #4]
 800a830:	b08b      	sub	sp, #44	; 0x2c
 800a832:	42ab      	cmp	r3, r5
 800a834:	9109      	str	r1, [sp, #36]	; 0x24
 800a836:	9604      	str	r6, [sp, #16]
 800a838:	8849      	ldrh	r1, [r1, #2]
 800a83a:	f040 808a 	bne.w	800a952 <arm_mat_mult_f32+0x132>
 800a83e:	8815      	ldrh	r5, [r2, #0]
 800a840:	42b5      	cmp	r5, r6
 800a842:	f040 8086 	bne.w	800a952 <arm_mat_mult_f32+0x132>
 800a846:	8852      	ldrh	r2, [r2, #2]
 800a848:	428a      	cmp	r2, r1
 800a84a:	f040 8082 	bne.w	800a952 <arm_mat_mult_f32+0x132>
 800a84e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a852:	1d01      	adds	r1, r0, #4
 800a854:	0116      	lsls	r6, r2, #4
 800a856:	9108      	str	r1, [sp, #32]
 800a858:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800a85c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800a860:	9101      	str	r1, [sp, #4]
 800a862:	fb06 f108 	mul.w	r1, r6, r8
 800a866:	0095      	lsls	r5, r2, #2
 800a868:	9103      	str	r1, [sp, #12]
 800a86a:	00d2      	lsls	r2, r2, #3
 800a86c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800a870:	f003 0903 	and.w	r9, r3, #3
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	f107 0b10 	add.w	fp, r7, #16
 800a87a:	eb04 0a05 	add.w	sl, r4, r5
 800a87e:	9107      	str	r1, [sp, #28]
 800a880:	9202      	str	r2, [sp, #8]
 800a882:	9306      	str	r3, [sp, #24]
 800a884:	f1ab 0310 	sub.w	r3, fp, #16
 800a888:	9305      	str	r3, [sp, #20]
 800a88a:	9b07      	ldr	r3, [sp, #28]
 800a88c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a890:	eb03 0c0a 	add.w	ip, r3, sl
 800a894:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a95c <arm_mat_mult_f32+0x13c>
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	d053      	beq.n	800a946 <arm_mat_mult_f32+0x126>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	4644      	mov	r4, r8
 800a8a2:	18c1      	adds	r1, r0, r3
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	465b      	mov	r3, fp
 800a8a8:	ed92 6a00 	vldr	s12, [r2]
 800a8ac:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a8b0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a8b4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a8b8:	ed91 5a00 	vldr	s10, [r1]
 800a8bc:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a8c0:	1957      	adds	r7, r2, r5
 800a8c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a8c6:	ed97 6a00 	vldr	s12, [r7]
 800a8ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a8d2:	194f      	adds	r7, r1, r5
 800a8d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a8d8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a8dc:	edd7 7a00 	vldr	s15, [r7]
 800a8e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a8e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8e8:	3c01      	subs	r4, #1
 800a8ea:	4432      	add	r2, r6
 800a8ec:	4431      	add	r1, r6
 800a8ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8f2:	f103 0310 	add.w	r3, r3, #16
 800a8f6:	d1d7      	bne.n	800a8a8 <arm_mat_mult_f32+0x88>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	9a01      	ldr	r2, [sp, #4]
 800a8fc:	4418      	add	r0, r3
 800a8fe:	f1b9 0f00 	cmp.w	r9, #0
 800a902:	d00b      	beq.n	800a91c <arm_mat_mult_f32+0xfc>
 800a904:	464b      	mov	r3, r9
 800a906:	edd0 6a00 	vldr	s13, [r0]
 800a90a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a90e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a912:	3b01      	subs	r3, #1
 800a914:	4428      	add	r0, r5
 800a916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a91a:	d1f4      	bne.n	800a906 <arm_mat_mult_f32+0xe6>
 800a91c:	ecec 7a01 	vstmia	ip!, {s15}
 800a920:	45d4      	cmp	ip, sl
 800a922:	4670      	mov	r0, lr
 800a924:	f10e 0e04 	add.w	lr, lr, #4
 800a928:	d1b4      	bne.n	800a894 <arm_mat_mult_f32+0x74>
 800a92a:	9a01      	ldr	r2, [sp, #4]
 800a92c:	9b06      	ldr	r3, [sp, #24]
 800a92e:	4611      	mov	r1, r2
 800a930:	4419      	add	r1, r3
 800a932:	449b      	add	fp, r3
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	9101      	str	r1, [sp, #4]
 800a938:	3b01      	subs	r3, #1
 800a93a:	44aa      	add	sl, r5
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	d004      	beq.n	800a94a <arm_mat_mult_f32+0x12a>
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	6858      	ldr	r0, [r3, #4]
 800a944:	e79e      	b.n	800a884 <arm_mat_mult_f32+0x64>
 800a946:	9a05      	ldr	r2, [sp, #20]
 800a948:	e7d9      	b.n	800a8fe <arm_mat_mult_f32+0xde>
 800a94a:	4618      	mov	r0, r3
 800a94c:	b00b      	add	sp, #44	; 0x2c
 800a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a952:	f06f 0002 	mvn.w	r0, #2
 800a956:	b00b      	add	sp, #44	; 0x2c
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	00000000 	.word	0x00000000

0800a960 <arm_mat_inverse_f32>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	8843      	ldrh	r3, [r0, #2]
 800a966:	8804      	ldrh	r4, [r0, #0]
 800a968:	684e      	ldr	r6, [r1, #4]
 800a96a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a96e:	b087      	sub	sp, #28
 800a970:	429c      	cmp	r4, r3
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	9603      	str	r6, [sp, #12]
 800a976:	f040 80ea 	bne.w	800ab4e <arm_mat_inverse_f32+0x1ee>
 800a97a:	880a      	ldrh	r2, [r1, #0]
 800a97c:	884b      	ldrh	r3, [r1, #2]
 800a97e:	4293      	cmp	r3, r2
 800a980:	f040 80e5 	bne.w	800ab4e <arm_mat_inverse_f32+0x1ee>
 800a984:	429c      	cmp	r4, r3
 800a986:	f040 80e2 	bne.w	800ab4e <arm_mat_inverse_f32+0x1ee>
 800a98a:	9005      	str	r0, [sp, #20]
 800a98c:	b30c      	cbz	r4, 800a9d2 <arm_mat_inverse_f32+0x72>
 800a98e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a992:	1e67      	subs	r7, r4, #1
 800a994:	f846 bb04 	str.w	fp, [r6], #4
 800a998:	d01b      	beq.n	800a9d2 <arm_mat_inverse_f32+0x72>
 800a99a:	f04f 0801 	mov.w	r8, #1
 800a99e:	00ba      	lsls	r2, r7, #2
 800a9a0:	eb06 0a02 	add.w	sl, r6, r2
 800a9a4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	f000 f97e 	bl	800acac <memset>
 800a9b0:	eb0a 0605 	add.w	r6, sl, r5
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4650      	mov	r0, sl
 800a9ba:	f1b8 0f00 	cmp.w	r8, #0
 800a9be:	f000 80cb 	beq.w	800ab58 <arm_mat_inverse_f32+0x1f8>
 800a9c2:	f000 f973 	bl	800acac <memset>
 800a9c6:	3f01      	subs	r7, #1
 800a9c8:	f108 0801 	add.w	r8, r8, #1
 800a9cc:	f846 bb04 	str.w	fp, [r6], #4
 800a9d0:	d1e5      	bne.n	800a99e <arm_mat_inverse_f32+0x3e>
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80b5 	beq.w	800ab44 <arm_mat_inverse_f32+0x1e4>
 800a9da:	009d      	lsls	r5, r3, #2
 800a9dc:	eb09 0205 	add.w	r2, r9, r5
 800a9e0:	46cc      	mov	ip, r9
 800a9e2:	9202      	str	r2, [sp, #8]
 800a9e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a9e8:	1d2a      	adds	r2, r5, #4
 800a9ea:	9204      	str	r2, [sp, #16]
 800a9ec:	462f      	mov	r7, r5
 800a9ee:	469e      	mov	lr, r3
 800a9f0:	2600      	movs	r6, #0
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	eddc 6a00 	vldr	s13, [ip]
 800a9f8:	42b4      	cmp	r4, r6
 800a9fa:	eba3 0b07 	sub.w	fp, r3, r7
 800a9fe:	f000 80a1 	beq.w	800ab44 <arm_mat_inverse_f32+0x1e4>
 800aa02:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800ab68 <arm_mat_inverse_f32+0x208>
 800aa06:	4632      	mov	r2, r6
 800aa08:	4663      	mov	r3, ip
 800aa0a:	e00b      	b.n	800aa24 <arm_mat_inverse_f32+0xc4>
 800aa0c:	eef4 7a47 	vcmp.f32	s15, s14
 800aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa14:	f102 0201 	add.w	r2, r2, #1
 800aa18:	bfc8      	it	gt
 800aa1a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800aa1e:	42a2      	cmp	r2, r4
 800aa20:	442b      	add	r3, r5
 800aa22:	d014      	beq.n	800aa4e <arm_mat_inverse_f32+0xee>
 800aa24:	edd3 7a00 	vldr	s15, [r3]
 800aa28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa30:	eeb1 6a67 	vneg.f32	s12, s15
 800aa34:	dcea      	bgt.n	800aa0c <arm_mat_inverse_f32+0xac>
 800aa36:	eeb4 6a47 	vcmp.f32	s12, s14
 800aa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3e:	f102 0201 	add.w	r2, r2, #1
 800aa42:	bfc8      	it	gt
 800aa44:	eeb0 7a46 	vmovgt.f32	s14, s12
 800aa48:	42a2      	cmp	r2, r4
 800aa4a:	442b      	add	r3, r5
 800aa4c:	d1ea      	bne.n	800aa24 <arm_mat_inverse_f32+0xc4>
 800aa4e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aa52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa56:	d075      	beq.n	800ab44 <arm_mat_inverse_f32+0x1e4>
 800aa58:	eef5 6a40 	vcmp.f32	s13, #0.0
 800aa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa60:	d070      	beq.n	800ab44 <arm_mat_inverse_f32+0x1e4>
 800aa62:	4672      	mov	r2, lr
 800aa64:	4663      	mov	r3, ip
 800aa66:	ed93 7a00 	vldr	s14, [r3]
 800aa6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa6e:	3a01      	subs	r2, #1
 800aa70:	ece3 7a01 	vstmia	r3!, {s15}
 800aa74:	d1f7      	bne.n	800aa66 <arm_mat_inverse_f32+0x106>
 800aa76:	9901      	ldr	r1, [sp, #4]
 800aa78:	464b      	mov	r3, r9
 800aa7a:	ed93 7a00 	vldr	s14, [r3]
 800aa7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa82:	3901      	subs	r1, #1
 800aa84:	ece3 7a01 	vstmia	r3!, {s15}
 800aa88:	d1f7      	bne.n	800aa7a <arm_mat_inverse_f32+0x11a>
 800aa8a:	9803      	ldr	r0, [sp, #12]
 800aa8c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800aa90:	42b1      	cmp	r1, r6
 800aa92:	d039      	beq.n	800ab08 <arm_mat_inverse_f32+0x1a8>
 800aa94:	eddb 6a00 	vldr	s13, [fp]
 800aa98:	465a      	mov	r2, fp
 800aa9a:	4673      	mov	r3, lr
 800aa9c:	46e2      	mov	sl, ip
 800aa9e:	ecba 7a01 	vldmia	sl!, {s14}
 800aaa2:	edd2 7a00 	vldr	s15, [r2]
 800aaa6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aab0:	ece2 7a01 	vstmia	r2!, {s15}
 800aab4:	d1f3      	bne.n	800aa9e <arm_mat_inverse_f32+0x13e>
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	44bb      	add	fp, r7
 800aaba:	4602      	mov	r2, r0
 800aabc:	46ca      	mov	sl, r9
 800aabe:	ecba 7a01 	vldmia	sl!, {s14}
 800aac2:	edd2 7a00 	vldr	s15, [r2]
 800aac6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800aaca:	3b01      	subs	r3, #1
 800aacc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aad0:	ece2 7a01 	vstmia	r2!, {s15}
 800aad4:	d1f3      	bne.n	800aabe <arm_mat_inverse_f32+0x15e>
 800aad6:	4428      	add	r0, r5
 800aad8:	3101      	adds	r1, #1
 800aada:	428c      	cmp	r4, r1
 800aadc:	44c3      	add	fp, r8
 800aade:	d1d7      	bne.n	800aa90 <arm_mat_inverse_f32+0x130>
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	f1be 0e01 	subs.w	lr, lr, #1
 800aae6:	f106 0601 	add.w	r6, r6, #1
 800aaea:	449c      	add	ip, r3
 800aaec:	f1a7 0704 	sub.w	r7, r7, #4
 800aaf0:	44a9      	add	r9, r5
 800aaf2:	f47f af7e 	bne.w	800a9f2 <arm_mat_inverse_f32+0x92>
 800aaf6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800aafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafe:	d006      	beq.n	800ab0e <arm_mat_inverse_f32+0x1ae>
 800ab00:	2000      	movs	r0, #0
 800ab02:	b007      	add	sp, #28
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	44bb      	add	fp, r7
 800ab0a:	4428      	add	r0, r5
 800ab0c:	e7e4      	b.n	800aad8 <arm_mat_inverse_f32+0x178>
 800ab0e:	9b05      	ldr	r3, [sp, #20]
 800ab10:	9a01      	ldr	r2, [sp, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	edd3 7a00 	vldr	s15, [r3]
 800ab18:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab1c:	fb02 f204 	mul.w	r2, r2, r4
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	4614      	mov	r4, r2
 800ab26:	bf08      	it	eq
 800ab28:	3304      	addeq	r3, #4
 800ab2a:	d007      	beq.n	800ab3c <arm_mat_inverse_f32+0x1dc>
 800ab2c:	e7e8      	b.n	800ab00 <arm_mat_inverse_f32+0x1a0>
 800ab2e:	ecf3 7a01 	vldmia	r3!, {s15}
 800ab32:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	d1e1      	bne.n	800ab00 <arm_mat_inverse_f32+0x1a0>
 800ab3c:	f10e 0e01 	add.w	lr, lr, #1
 800ab40:	4574      	cmp	r4, lr
 800ab42:	d1f4      	bne.n	800ab2e <arm_mat_inverse_f32+0x1ce>
 800ab44:	f06f 0004 	mvn.w	r0, #4
 800ab48:	b007      	add	sp, #28
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	f06f 0002 	mvn.w	r0, #2
 800ab52:	b007      	add	sp, #28
 800ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab58:	4656      	mov	r6, sl
 800ab5a:	3f01      	subs	r7, #1
 800ab5c:	f846 bb04 	str.w	fp, [r6], #4
 800ab60:	f47f af1b 	bne.w	800a99a <arm_mat_inverse_f32+0x3a>
 800ab64:	e735      	b.n	800a9d2 <arm_mat_inverse_f32+0x72>
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000

0800ab6c <arm_mat_init_f32>:
 800ab6c:	8001      	strh	r1, [r0, #0]
 800ab6e:	8042      	strh	r2, [r0, #2]
 800ab70:	6043      	str	r3, [r0, #4]
 800ab72:	4770      	bx	lr

0800ab74 <arm_mat_add_f32>:
 800ab74:	b4f0      	push	{r4, r5, r6, r7}
 800ab76:	e9d1 4700 	ldrd	r4, r7, [r1]
 800ab7a:	6803      	ldr	r3, [r0, #0]
 800ab7c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ab80:	6856      	ldr	r6, [r2, #4]
 800ab82:	42a3      	cmp	r3, r4
 800ab84:	d15d      	bne.n	800ac42 <arm_mat_add_f32+0xce>
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d15a      	bne.n	800ac42 <arm_mat_add_f32+0xce>
 800ab8c:	8803      	ldrh	r3, [r0, #0]
 800ab8e:	8844      	ldrh	r4, [r0, #2]
 800ab90:	fb04 f403 	mul.w	r4, r4, r3
 800ab94:	08a5      	lsrs	r5, r4, #2
 800ab96:	d032      	beq.n	800abfe <arm_mat_add_f32+0x8a>
 800ab98:	f10c 0110 	add.w	r1, ip, #16
 800ab9c:	f107 0210 	add.w	r2, r7, #16
 800aba0:	f106 0310 	add.w	r3, r6, #16
 800aba4:	4628      	mov	r0, r5
 800aba6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800abaa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800abae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abb2:	3801      	subs	r0, #1
 800abb4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800abb8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800abbc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800abc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abc4:	f101 0110 	add.w	r1, r1, #16
 800abc8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800abcc:	ed12 7a02 	vldr	s14, [r2, #-8]
 800abd0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800abd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd8:	f102 0210 	add.w	r2, r2, #16
 800abdc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800abe0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800abe4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800abe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abec:	f103 0310 	add.w	r3, r3, #16
 800abf0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800abf4:	d1d7      	bne.n	800aba6 <arm_mat_add_f32+0x32>
 800abf6:	012b      	lsls	r3, r5, #4
 800abf8:	449c      	add	ip, r3
 800abfa:	441f      	add	r7, r3
 800abfc:	441e      	add	r6, r3
 800abfe:	f014 0403 	ands.w	r4, r4, #3
 800ac02:	d01b      	beq.n	800ac3c <arm_mat_add_f32+0xc8>
 800ac04:	edd7 7a00 	vldr	s15, [r7]
 800ac08:	ed9c 7a00 	vldr	s14, [ip]
 800ac0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac10:	3c01      	subs	r4, #1
 800ac12:	edc6 7a00 	vstr	s15, [r6]
 800ac16:	d011      	beq.n	800ac3c <arm_mat_add_f32+0xc8>
 800ac18:	eddc 7a01 	vldr	s15, [ip, #4]
 800ac1c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac24:	2c01      	cmp	r4, #1
 800ac26:	edc6 7a01 	vstr	s15, [r6, #4]
 800ac2a:	d007      	beq.n	800ac3c <arm_mat_add_f32+0xc8>
 800ac2c:	eddc 7a02 	vldr	s15, [ip, #8]
 800ac30:	ed97 7a02 	vldr	s14, [r7, #8]
 800ac34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac38:	edc6 7a02 	vstr	s15, [r6, #8]
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	bcf0      	pop	{r4, r5, r6, r7}
 800ac40:	4770      	bx	lr
 800ac42:	f06f 0002 	mvn.w	r0, #2
 800ac46:	e7fa      	b.n	800ac3e <arm_mat_add_f32+0xca>

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	; (800ac80 <__libc_init_array+0x38>)
 800ac4c:	4c0d      	ldr	r4, [pc, #52]	; (800ac84 <__libc_init_array+0x3c>)
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	2600      	movs	r6, #0
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	; (800ac88 <__libc_init_array+0x40>)
 800ac5a:	4c0c      	ldr	r4, [pc, #48]	; (800ac8c <__libc_init_array+0x44>)
 800ac5c:	f000 f82e 	bl	800acbc <_init>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	10a4      	asrs	r4, r4, #2
 800ac64:	2600      	movs	r6, #0
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	4798      	blx	r3
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	4798      	blx	r3
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	0800acfc 	.word	0x0800acfc
 800ac84:	0800acfc 	.word	0x0800acfc
 800ac88:	0800acfc 	.word	0x0800acfc
 800ac8c:	0800ad00 	.word	0x0800ad00

0800ac90 <memcpy>:
 800ac90:	440a      	add	r2, r1
 800ac92:	4291      	cmp	r1, r2
 800ac94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac98:	d100      	bne.n	800ac9c <memcpy+0xc>
 800ac9a:	4770      	bx	lr
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aca6:	4291      	cmp	r1, r2
 800aca8:	d1f9      	bne.n	800ac9e <memcpy+0xe>
 800acaa:	bd10      	pop	{r4, pc}

0800acac <memset>:
 800acac:	4402      	add	r2, r0
 800acae:	4603      	mov	r3, r0
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d100      	bne.n	800acb6 <memset+0xa>
 800acb4:	4770      	bx	lr
 800acb6:	f803 1b01 	strb.w	r1, [r3], #1
 800acba:	e7f9      	b.n	800acb0 <memset+0x4>

0800acbc <_init>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr

0800acc8 <_fini>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr
