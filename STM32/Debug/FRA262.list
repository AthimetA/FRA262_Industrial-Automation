
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af0c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c4  0800b0c4  00020418  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0cc  0800b0cc  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800b0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000418  0800b4ec  00020418  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800b4ec  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001729c  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f87  00000000  00000000  000376e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769c  00000000  00000000  0003c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015810  00000000  00000000  00053e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f29  00000000  00000000  0006966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fc595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  000fc65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00100f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000418 	.word	0x20000418
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b08c 	.word	0x0800b08c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000041c 	.word	0x2000041c
 80001d4:	0800b08c 	.word	0x0800b08c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a f8e6 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a f8dd 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a f8d4 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a f8cb 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a f8c2 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a f8b9 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a f8b0 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a f8a7 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a f89e 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a f895 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a f88c 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a f883 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a f87a 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a f871 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a f868 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a f85e 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a f854 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f00a f84a 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f00a f840 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f00a f836 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f00a f82c 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f00a f822 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f00a f818 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f00a f80e 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f00a f804 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f009 fffa 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f009 fff0 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f009 ffe6 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f009 ffdc 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f009 ffd2 	bl	800af3c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f009 ffc8 	bl	800af3c <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 fd52 	bl	800aa64 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 fd48 	bl	800aa64 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 fd3e 	bl	800aa64 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f009 fdf8 	bl	800abf0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f009 fdec 	bl	800abf0 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 fd5c 	bl	800abf0 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 fd4b 	bl	800abf0 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 fd3a 	bl	800abf0 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f009 fed3 	bl	800af44 <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 fd14 	bl	800abf0 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 fc99 	bl	800ab1c <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 fcf2 	bl	800abf0 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 fce1 	bl	800abf0 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f009 fe7a 	bl	800af44 <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 fd61 	bl	800ad30 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 fcb0 	bl	800abf0 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 fc9f 	bl	800abf0 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 fc8e 	bl	800abf0 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f009 fe27 	bl	800af44 <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fc6c 	bl	800abf0 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fbf1 	bl	800ab1c <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 fc4a 	bl	800abf0 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <PIDVelocityController_Init>:
 */

#include "PIDVelocity.h"
#include "Trajectory.h"

void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 80013ba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
//    	pidVelocity->KpUse = pidVelocity->Kp;
//    }

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*errorDZ) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 6a00 	vldr	s13, [r3]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * errorDZ);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 7a01 	vldr	s14, [r3, #4]
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = pidVelocity->Kd *(errorDZ -(2.0* pidVelocity->Last1Error) + pidVelocity->Last2Error)	;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f83d 	bl	80004a0 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f7ff f838 	bl	80004a0 <__aeabi_f2d>
 8001430:	4680      	mov	r8, r0
 8001432:	4689      	mov	r9, r1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f831 	bl	80004a0 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	f7fe fecf 	bl	80001e4 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4640      	mov	r0, r8
 800144c:	4649      	mov	r1, r9
 800144e:	f7fe fec7 	bl	80001e0 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4690      	mov	r8, r2
 8001458:	4699      	mov	r9, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f81e 	bl	80004a0 <__aeabi_f2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7ff f86a 	bl	8000550 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fa96 	bl	80009b4 <__aeabi_d2f>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ed93 7a07 	vldr	s14, [r3, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edd3 7a05 	vldr	s15, [r3, #20]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a4:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	dd04      	ble.n	80014d8 <PIDVelocityController_Update+0x11e>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	e00e      	b.n	80014f6 <PIDVelocityController_Update+0x13c>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d503      	bpl.n	80014f6 <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last1Error = errorDZ;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	621a      	str	r2, [r3, #32]

	return pidVelocity->ControllerOut;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001520 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	61da      	str	r2, [r3, #28]

	  Robot -> flagSethome = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  Robot -> flagStartTime = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  Robot -> RunningFlag = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	  Robot -> MotorIsOn = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001594:	edd7 7a01 	vldr	s15, [r7, #4]
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d50e      	bpl.n	80015c0 <AbsVal+0x36>
  {
    return number*-1.0;
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe ff7c 	bl	80004a0 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa00 	bl	80009b4 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef1 7a67 	vneg.f32	s15, s15
 80015be:	e001      	b.n	80015c4 <AbsVal+0x3a>
  }
  else
  {
    return number;
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015dc:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	traject -> Amax = 0.0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 0.0;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d502      	bpl.n	800163a <CoefficientAndTimeCalculation+0x6a>
	{
		gain = -1.0;
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <CoefficientAndTimeCalculation+0x19c>)
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e002      	b.n	8001640 <CoefficientAndTimeCalculation+0x70>
	}
	else
	{
		gain = 1.0;
 800163a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800163e:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float Vcheck = AbsVal(traject -> QRelative);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f7ff ff9e 	bl	800158a <AbsVal>
 800164e:	ed87 0a04 	vstr	s0, [r7, #16]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800165a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	db12      	blt.n	800168a <CoefficientAndTimeCalculation+0xba>
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d509      	bpl.n	800168a <CoefficientAndTimeCalculation+0xba>
	{
		traject -> Amax =  5.73;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 800167a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a3d      	ldr	r2, [pc, #244]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001680:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  3.0;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <CoefficientAndTimeCalculation+0x1a8>)
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e0a6      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 20.0  && Vcheck < 40.0)
 800168a:	edd7 7a04 	vldr	s15, [r7, #16]
 800168e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	db12      	blt.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d509      	bpl.n	80016c2 <CoefficientAndTimeCalculation+0xf2>
	{
		traject -> Amax =  5.73;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016b2:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016b8:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  6.0;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a30      	ldr	r2, [pc, #192]	; (8001780 <CoefficientAndTimeCalculation+0x1b0>)
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e08a      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 40.0  && Vcheck < 60.0)
 80016c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800177c <CoefficientAndTimeCalculation+0x1ac>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	db12      	blt.n	80016fa <CoefficientAndTimeCalculation+0x12a>
 80016d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d509      	bpl.n	80016fa <CoefficientAndTimeCalculation+0x12a>
	{
		traject -> Amax =  5.73;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 80016ea:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 80016f0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  9.0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <CoefficientAndTimeCalculation+0x1b8>)
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e06e      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 80016fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001784 <CoefficientAndTimeCalculation+0x1b4>
 8001702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	db12      	blt.n	8001732 <CoefficientAndTimeCalculation+0x162>
 800170c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001710:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 8001714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d509      	bpl.n	8001732 <CoefficientAndTimeCalculation+0x162>
	{
		traject -> Amax =  5.73;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <CoefficientAndTimeCalculation+0x1a0>)
 8001722:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <CoefficientAndTimeCalculation+0x1a4>)
 8001728:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  15.0;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <CoefficientAndTimeCalculation+0x1c0>)
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e052      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800178c <CoefficientAndTimeCalculation+0x1bc>
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	db2f      	blt.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
 8001744:	edd7 7a04 	vldr	s15, [r7, #16]
 8001748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d526      	bpl.n	80017a4 <CoefficientAndTimeCalculation+0x1d4>
	{
		traject -> Amax =  17.9;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <CoefficientAndTimeCalculation+0x1c4>)
 800175a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  286.5;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <CoefficientAndTimeCalculation+0x1c8>)
 8001760:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  24;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <CoefficientAndTimeCalculation+0x1cc>)
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e036      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 800176a:	bf00      	nop
 800176c:	bf800000 	.word	0xbf800000
 8001770:	40b75c29 	.word	0x40b75c29
 8001774:	42e53333 	.word	0x42e53333
 8001778:	40400000 	.word	0x40400000
 800177c:	42200000 	.word	0x42200000
 8001780:	40c00000 	.word	0x40c00000
 8001784:	42700000 	.word	0x42700000
 8001788:	41100000 	.word	0x41100000
 800178c:	42c80000 	.word	0x42c80000
 8001790:	41700000 	.word	0x41700000
 8001794:	418f3333 	.word	0x418f3333
 8001798:	438f4000 	.word	0x438f4000
 800179c:	41c00000 	.word	0x41c00000
 80017a0:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 80017a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a8:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80017a0 <CoefficientAndTimeCalculation+0x1d0>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	db10      	blt.n	80017d8 <CoefficientAndTimeCalculation+0x208>
	{
		traject -> Amax =  22.92;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <CoefficientAndTimeCalculation+0x1fc>)
 80017ba:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  573;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <CoefficientAndTimeCalculation+0x200>)
 80017c0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  54;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <CoefficientAndTimeCalculation+0x204>)
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <CoefficientAndTimeCalculation+0x208>
 80017ca:	bf00      	nop
 80017cc:	41b75c29 	.word	0x41b75c29
 80017d0:	440f4000 	.word	0x440f4000
 80017d4:	42580000 	.word	0x42580000
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a02 	vldr	s14, [r3, #8]
 80017de:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	ed93 7a01 	vldr	s14, [r3, #4]
 8001806:	edd7 7a05 	vldr	s15, [r7, #20]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edd3 6a00 	vldr	s13, [r3]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ed93 6a02 	vldr	s12, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edd3 6a02 	vldr	s13, [r3, #8]
 8001844:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 6a00 	vldr	s13, [r3]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	ed93 7a01 	vldr	s14, [r3, #4]
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 6a02 	vldr	s13, [r3, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 7a01 	vldr	s15, [r3, #4]
 800188a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	ed93 6a02 	vldr	s12, [r3, #8]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edd3 6a00 	vldr	s13, [r3]
 800189a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f852 	bl	80009b4 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef1 7a67 	vneg.f32	s15, s15
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fdb7 	bl	80004a0 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f83b 	bl	80009b4 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	edd3 6a01 	vldr	s13, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd75 	bl	80004a0 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7fe fff9 	bl	80009b4 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef1 7a67 	vneg.f32	s15, s15
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fd51 	bl	80004a0 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fbeb 	bl	80001e0 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7fe ffcf 	bl	80009b4 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001a92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 6a07 	vldr	s13, [r3, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001c60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001cf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001d12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001db8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001dc4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001de2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001e98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ea4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ebe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001eda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f84:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001f9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800200a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800200e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002012:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002016:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002038:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800204e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002058:	ee66 7a27 	vmul.f32	s15, s12, s15
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002064:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800207a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800207e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002082:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800209a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800209e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80020ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800212e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002138:	ee66 7a27 	vmul.f32	s15, s12, s15
 800213c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002140:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002144:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800215a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800215e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002162:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800216a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800217a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800219e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800220e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002218:	ee66 7a27 	vmul.f32	s15, s12, s15
 800221c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002220:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002224:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800223a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800223e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002242:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800225a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	0000      	movs	r0, r0
	...

08002278 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228c:	1a84      	subs	r4, r0, r2
 800228e:	eb61 0503 	sbc.w	r5, r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe f925 	bl	80004e4 <__aeabi_ul2d>
 800229a:	a396      	add	r3, pc, #600	; (adr r3, 80024f4 <TrajectoryEvaluation+0x27c>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa80 	bl	80007a4 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fb82 	bl	80009b4 <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a8f      	ldr	r2, [pc, #572]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	f2c0 8084 	blt.w	80023d0 <TrajectoryEvaluation+0x158>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd78      	ble.n	80023d0 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80022ee:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	ed93 7a03 	vldr	s14, [r3, #12]
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002310:	edd3 6a00 	vldr	s13, [r3]
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	edd3 6a03 	vldr	s13, [r3, #12]
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800235c:	ed93 6a00 	vldr	s12, [r3]
 8002360:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002378:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800237c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800238c:	ed93 6a00 	vldr	s12, [r3]
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800239e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80023ce:	e37e      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	f200 808a 	bhi.w	80024fc <TrajectoryEvaluation+0x284>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	dd7e      	ble.n	80024fc <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	ed93 7a04 	vldr	s14, [r3, #16]
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	ed93 7a04 	vldr	s14, [r3, #16]
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edd3 6a04 	vldr	s13, [r3, #16]
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800247c:	ed93 6a00 	vldr	s12, [r3]
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <TrajectoryEvaluation+0x278>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee26 6a27 	vmul.f32	s12, s12, s15
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <TrajectoryEvaluation+0x278>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002498:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800249c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024ac:	ed93 6a00 	vldr	s12, [r3]
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TrajectoryEvaluation+0x278>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80024ee:	e2ee      	b.n	8002ace <TrajectoryEvaluation+0x856>
 80024f0:	20000434 	.word	0x20000434
 80024f4:	00000000 	.word	0x00000000
 80024f8:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	f200 8084 	bhi.w	800261c <TrajectoryEvaluation+0x3a4>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd78      	ble.n	800261c <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ed93 7a05 	vldr	s14, [r3, #20]
 800253a:	4b80      	ldr	r3, [pc, #512]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	ed93 7a05 	vldr	s14, [r3, #20]
 800255a:	4b78      	ldr	r3, [pc, #480]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025a8:	ed93 6a00 	vldr	s12, [r3]
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025c4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025d8:	ed93 6a00 	vldr	s12, [r3]
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80025ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800261a:	e258      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	f200 8086 	bhi.w	8002740 <TrajectoryEvaluation+0x4c8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	dd7a      	ble.n	8002740 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	ed93 7a06 	vldr	s14, [r3, #24]
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	ed93 7a06 	vldr	s14, [r3, #24]
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800267c:	edd3 6a00 	vldr	s13, [r3]
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <TrajectoryEvaluation+0x4c4>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	edd3 6a06 	vldr	s13, [r3, #24]
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026c8:	ed93 6a00 	vldr	s12, [r3]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80026e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026f8:	ed93 6a00 	vldr	s12, [r3]
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <TrajectoryEvaluation+0x4c4>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800270e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <TrajectoryEvaluation+0x4c4>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800273a:	e1c8      	b.n	8002ace <TrajectoryEvaluation+0x856>
 800273c:	20000434 	.word	0x20000434
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002746:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	f200 8084 	bhi.w	8002860 <TrajectoryEvaluation+0x5e8>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	dd78      	ble.n	8002860 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	ed93 7a07 	vldr	s14, [r3, #28]
 800277e:	4b80      	ldr	r3, [pc, #512]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	ed93 7a07 	vldr	s14, [r3, #28]
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a0:	edd3 6a00 	vldr	s13, [r3]
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027ec:	ed93 6a00 	vldr	s12, [r3]
 80027f0:	4b63      	ldr	r3, [pc, #396]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <TrajectoryEvaluation+0x708>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002808:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800280c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <TrajectoryEvaluation+0x708>)
 800281c:	ed93 6a00 	vldr	s12, [r3]
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee66 7a27 	vmul.f32	s15, s12, s15
 800282a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002832:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800285e:	e136      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	f200 8086 	bhi.w	8002984 <TrajectoryEvaluation+0x70c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800287e:	4b40      	ldr	r3, [pc, #256]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	dd7a      	ble.n	8002984 <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ed93 7a08 	vldr	s14, [r3, #32]
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	ed93 7a08 	vldr	s14, [r3, #32]
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c0:	edd3 6a00 	vldr	s13, [r3]
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <TrajectoryEvaluation+0x708>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	edd3 6a08 	vldr	s13, [r3, #32]
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <TrajectoryEvaluation+0x708>)
 800290c:	ed93 6a00 	vldr	s12, [r3]
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <TrajectoryEvaluation+0x708>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002928:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800292c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <TrajectoryEvaluation+0x708>)
 800293c:	ed93 6a00 	vldr	s12, [r3]
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800294a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800294e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002952:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <TrajectoryEvaluation+0x708>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800297e:	e0a6      	b.n	8002ace <TrajectoryEvaluation+0x856>
 8002980:	20000434 	.word	0x20000434
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	f200 8084 	bhi.w	8002aa4 <TrajectoryEvaluation+0x82c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd78      	ble.n	8002aa4 <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a30:	ed93 6a00 	vldr	s12, [r3]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a4c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <TrajectoryEvaluation+0x860>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002aa2:	e014      	b.n	8002ace <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 8002ace:	bf00      	nop
}
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000434 	.word	0x20000434

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae2:	f002 f8f5 	bl	8004cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae6:	f000 f8ad 	bl	8002c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aea:	f000 fb2d 	bl	8003148 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aee:	f000 fb03 	bl	80030f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002af2:	f000 fad5 	bl	80030a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002af6:	f000 f90d 	bl	8002d14 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002afa:	f000 f939 	bl	8002d70 <MX_TIM1_Init>
  MX_TIM11_Init();
 8002afe:	f000 faab 	bl	8003058 <MX_TIM11_Init>
  MX_TIM2_Init();
 8002b02:	f000 f9b9 	bl	8002e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b06:	f000 fa0b 	bl	8002f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b0a:	f000 fa57 	bl	8002fbc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //----UART-----//
  Ringbuf_Init();
 8002b0e:	f000 fdab 	bl	8003668 <Ringbuf_Init>
  //  HAL_UART_Receive_DMA(&huart2, RxDataBuffer, 32);
  //----UART-----//
  KalmanMatrixInit(&KalmanVar);
 8002b12:	483c      	ldr	r0, [pc, #240]	; (8002c04 <main+0x128>)
 8002b14:	f7fe f920 	bl	8000d58 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	483b      	ldr	r0, [pc, #236]	; (8002c08 <main+0x12c>)
 8002b1c:	f005 fd4a 	bl	80085b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002b20:	483a      	ldr	r0, [pc, #232]	; (8002c0c <main+0x130>)
 8002b22:	f005 fc95 	bl	8008450 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b26:	213c      	movs	r1, #60	; 0x3c
 8002b28:	4839      	ldr	r0, [pc, #228]	; (8002c10 <main+0x134>)
 8002b2a:	f005 fe99 	bl	8008860 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <main+0x138>)
 8002b38:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <main+0x138>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <main+0x138>)
 8002b40:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <main+0x138>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <main+0x13c>)
 8002b48:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002b4a:	4834      	ldr	r0, [pc, #208]	; (8002c1c <main+0x140>)
 8002b4c:	f7fe fc0f 	bl	800136e <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 8002b50:	4833      	ldr	r0, [pc, #204]	; (8002c20 <main+0x144>)
 8002b52:	f7fe fc0c 	bl	800136e <PIDVelocityController_Init>

  UARTState = normOperation;
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <main+0x148>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
  RobotState = NormM;
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <main+0x14c>)
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RobotstateManagement();
 8002b62:	f001 fa7d 	bl	8004060 <RobotstateManagement>
	  EndEffstateManagement();
 8002b66:	f001 fc05 	bl	8004374 <EndEffstateManagement>
	  if(Micros() - ControlLoopTime >= 1000)
 8002b6a:	f000 fd65 	bl	8003638 <Micros>
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <main+0x150>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	1a84      	subs	r4, r0, r2
 8002b76:	eb61 0503 	sbc.w	r5, r1, r3
 8002b7a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002b7e:	f175 0300 	sbcs.w	r3, r5, #0
 8002b82:	d3ee      	bcc.n	8002b62 <main+0x86>
	  {
		ControlLoopTime  = Micros();
 8002b84:	f000 fd58 	bl	8003638 <Micros>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4927      	ldr	r1, [pc, #156]	; (8002c2c <main+0x150>)
 8002b8e:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002b92:	f000 fd51 	bl	8003638 <Micros>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4925      	ldr	r1, [pc, #148]	; (8002c30 <main+0x154>)
 8002b9c:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8002ba0:	f000 fb82 	bl	80032a8 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <main+0x158>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	4815      	ldr	r0, [pc, #84]	; (8002c04 <main+0x128>)
 8002bb0:	f7fe fab0 	bl	8001114 <KalmanFilterFunction>
//		KalmanFilterFunction(&KalmanVar,VelocityDeg);
		Robot.Position = PositionDeg[0];
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <main+0x158>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <main+0x15c>)
 8002bba:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <main+0x128>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <main+0x15c>)
 8002bc4:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8002bc6:	f000 fc57 	bl	8003478 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8002bca:	f000 fd35 	bl	8003638 <Micros>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	491a      	ldr	r1, [pc, #104]	; (8002c3c <main+0x160>)
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStopTime = Micros();
 8002bd8:	f000 fd2e 	bl	8003638 <Micros>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <main+0x160>)
 8002be2:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <main+0x160>)
 8002be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <main+0x154>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	ebb0 0802 	subs.w	r8, r0, r2
 8002bf6:	eb61 0903 	sbc.w	r9, r1, r3
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <main+0x164>)
 8002bfc:	e9c3 8900 	strd	r8, r9, [r3]
	  RobotstateManagement();
 8002c00:	e7af      	b.n	8002b62 <main+0x86>
 8002c02:	bf00      	nop
 8002c04:	20000020 	.word	0x20000020
 8002c08:	2000048c 	.word	0x2000048c
 8002c0c:	200005ac 	.word	0x200005ac
 8002c10:	200004d4 	.word	0x200004d4
 8002c14:	200007b0 	.word	0x200007b0
 8002c18:	200007bc 	.word	0x200007bc
 8002c1c:	200003a0 	.word	0x200003a0
 8002c20:	200003d4 	.word	0x200003d4
 8002c24:	20000728 	.word	0x20000728
 8002c28:	20000729 	.word	0x20000729
 8002c2c:	200007a0 	.word	0x200007a0
 8002c30:	20000898 	.word	0x20000898
 8002c34:	200007c0 	.word	0x200007c0
 8002c38:	200006f8 	.word	0x200006f8
 8002c3c:	200008a0 	.word	0x200008a0
 8002c40:	200008a8 	.word	0x200008a8

08002c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	; 0x50
 8002c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	2230      	movs	r2, #48	; 0x30
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 fa12 	bl	800b07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	; 0x40
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <SystemClock_Config+0xc8>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <SystemClock_Config+0xcc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002caa:	2302      	movs	r3, #2
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002cb8:	2364      	movs	r3, #100	; 0x64
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc4:	f107 0320 	add.w	r3, r7, #32
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fed9 	bl	8007a80 <HAL_RCC_OscConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cd4:	f001 fce1 	bl	800469a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd8:	230f      	movs	r3, #15
 8002cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 f93b 	bl	8007f70 <HAL_RCC_ClockConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d00:	f001 fccb 	bl	800469a <Error_Handler>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3750      	adds	r7, #80	; 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000

08002d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <MX_I2C1_Init+0x54>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <MX_I2C1_Init+0x58>)
 8002d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <MX_I2C1_Init+0x50>)
 8002d52:	f002 ff21 	bl	8005b98 <HAL_I2C_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d5c:	f001 fc9d 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000438 	.word	0x20000438
 8002d68:	40005400 	.word	0x40005400
 8002d6c:	00061a80 	.word	0x00061a80

08002d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	615a      	str	r2, [r3, #20]
 8002d92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	2220      	movs	r2, #32
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f008 f96e 	bl	800b07c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <MX_TIM1_Init+0x104>)
 8002da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002db4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dcc:	4828      	ldr	r0, [pc, #160]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dce:	f005 fba1 	bl	8008514 <HAL_TIM_PWM_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002dd8:	f001 fc5f 	bl	800469a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002de4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de8:	4619      	mov	r1, r3
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002dec:	f006 fb4c 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002df6:	f001 fc50 	bl	800469a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dfa:	2360      	movs	r3, #96	; 0x60
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e06:	2300      	movs	r3, #0
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4814      	ldr	r0, [pc, #80]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e20:	f005 feb4 	bl	8008b8c <HAL_TIM_PWM_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002e2a:	f001 fc36 	bl	800469a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e52:	f006 fb87 	bl	8009564 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002e5c:	f001 fc1d 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <MX_TIM1_Init+0x100>)
 8002e62:	f001 fd71 	bl	8004948 <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3748      	adds	r7, #72	; 0x48
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000048c 	.word	0x2000048c
 8002e74:	40010000 	.word	0x40010000

08002e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f008 f8f8 	bl	800b07c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eaa:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480d      	ldr	r0, [pc, #52]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002ee8:	f005 fc14 	bl	8008714 <HAL_TIM_Encoder_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ef2:	f001 fbd2 	bl	800469a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <MX_TIM2_Init+0xa4>)
 8002f04:	f006 fac0 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f0e:	f001 fbc4 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	; 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200004d4 	.word	0x200004d4

08002f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f34:	463b      	mov	r3, r7
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <MX_TIM3_Init+0x98>)
 8002f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f44:	2209      	movs	r2, #9
 8002f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f50:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f64:	f005 fa24 	bl	80083b0 <HAL_TIM_Base_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f6e:	f001 fb94 	bl	800469a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f80:	f005 fec6 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f8a:	f001 fb86 	bl	800469a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f96:	463b      	mov	r3, r7
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <MX_TIM3_Init+0x94>)
 8002f9c:	f006 fa74 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fa6:	f001 fb78 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000051c 	.word	0x2000051c
 8002fb8:	40000400 	.word	0x40000400

08002fbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd0:	463b      	mov	r3, r7
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <MX_TIM4_Init+0x98>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fe0:	2209      	movs	r2, #9
 8002fe2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <MX_TIM4_Init+0x94>)
 8002fec:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ff0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <MX_TIM4_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <MX_TIM4_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <MX_TIM4_Init+0x94>)
 8003000:	f005 f9d6 	bl	80083b0 <HAL_TIM_Base_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800300a:	f001 fb46 	bl	800469a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4619      	mov	r1, r3
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <MX_TIM4_Init+0x94>)
 800301c:	f005 fe78 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003026:	f001 fb38 	bl	800469a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003032:	463b      	mov	r3, r7
 8003034:	4619      	mov	r1, r3
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <MX_TIM4_Init+0x94>)
 8003038:	f006 fa26 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003042:	f001 fb2a 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000564 	.word	0x20000564
 8003054:	40000800 	.word	0x40000800

08003058 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_TIM11_Init+0x40>)
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <MX_TIM11_Init+0x44>)
 8003060:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <MX_TIM11_Init+0x40>)
 8003064:	2263      	movs	r2, #99	; 0x63
 8003066:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_TIM11_Init+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <MX_TIM11_Init+0x40>)
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_TIM11_Init+0x40>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_TIM11_Init+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_TIM11_Init+0x40>)
 8003084:	f005 f994 	bl	80083b0 <HAL_TIM_Base_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800308e:	f001 fb04 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200005ac 	.word	0x200005ac
 800309c:	40014800 	.word	0x40014800

080030a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <MX_USART2_UART_Init+0x54>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030ac:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80030b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030ca:	220c      	movs	r2, #12
 80030cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030dc:	f006 faa8 	bl	8009630 <HAL_UART_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80030e6:	f001 fad8 	bl	800469a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200005f4 	.word	0x200005f4
 80030f4:	40004400 	.word	0x40004400

080030f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <MX_DMA_Init+0x4c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <MX_DMA_Init+0x4c>)
 8003108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <MX_DMA_Init+0x4c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2010      	movs	r0, #16
 8003120:	f001 ff23 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003124:	2010      	movs	r0, #16
 8003126:	f001 ff3c 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2011      	movs	r0, #17
 8003130:	f001 ff1b 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003134:	2011      	movs	r0, #17
 8003136:	f001 ff34 	bl	8004fa2 <HAL_NVIC_EnableIRQ>

}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <MX_GPIO_Init+0x150>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <MX_GPIO_Init+0x150>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <MX_GPIO_Init+0x150>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <MX_GPIO_Init+0x150>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <MX_GPIO_Init+0x150>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <MX_GPIO_Init+0x150>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <MX_GPIO_Init+0x150>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a3e      	ldr	r2, [pc, #248]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <MX_GPIO_Init+0x150>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a37      	ldr	r2, [pc, #220]	; (8003298 <MX_GPIO_Init+0x150>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <MX_GPIO_Init+0x150>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80031d4:	4831      	ldr	r0, [pc, #196]	; (800329c <MX_GPIO_Init+0x154>)
 80031d6:	f002 fc93 	bl	8005b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	2118      	movs	r1, #24
 80031de:	4830      	ldr	r0, [pc, #192]	; (80032a0 <MX_GPIO_Init+0x158>)
 80031e0:	f002 fc8e 	bl	8005b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	482a      	ldr	r0, [pc, #168]	; (80032a4 <MX_GPIO_Init+0x15c>)
 80031fc:	f002 fafc 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8003200:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4820      	ldr	r0, [pc, #128]	; (800329c <MX_GPIO_Init+0x154>)
 800321a:	f002 faed 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003224:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4819      	ldr	r0, [pc, #100]	; (800329c <MX_GPIO_Init+0x154>)
 8003236:	f002 fadf 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 800323a:	2318      	movs	r3, #24
 800323c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323e:	2301      	movs	r3, #1
 8003240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4813      	ldr	r0, [pc, #76]	; (80032a0 <MX_GPIO_Init+0x158>)
 8003252:	f002 fad1 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8003256:	2320      	movs	r3, #32
 8003258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800325a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800325e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_GPIO_Init+0x158>)
 800326c:	f002 fac4 	bl	80057f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2017      	movs	r0, #23
 8003276:	f001 fe78 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800327a:	2017      	movs	r0, #23
 800327c:	f001 fe91 	bl	8004fa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2028      	movs	r0, #40	; 0x28
 8003286:	f001 fe70 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800328a:	2028      	movs	r0, #40	; 0x28
 800328c:	f001 fe89 	bl	8004fa2 <HAL_NVIC_EnableIRQ>

}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800

080032a8 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80032ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <EncoderRead+0xd8>)
 80032b6:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <EncoderRead+0xd8>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <EncoderRead+0xd8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <EncoderRead+0xdc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	425b      	negs	r3, r3
 80032c8:	429a      	cmp	r2, r3
 80032ca:	da07      	bge.n	80032dc <EncoderRead+0x34>
		WrappingStep+=12000;
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <EncoderRead+0xe0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80032d4:	3320      	adds	r3, #32
 80032d6:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <EncoderRead+0xe0>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00f      	b.n	80032fc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <EncoderRead+0xd8>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <EncoderRead+0xd8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <EncoderRead+0xdc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	db06      	blt.n	80032fc <EncoderRead+0x54>
		WrappingStep-=12000;
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <EncoderRead+0xe0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80032f6:	3b20      	subs	r3, #32
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <EncoderRead+0xe0>)
 80032fa:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <EncoderRead+0xd8>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <EncoderRead+0xe0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4413      	add	r3, r2
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <EncoderRead+0xe4>)
 8003308:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <EncoderRead+0xe4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f8b4 	bl	800047c <__aeabi_i2d>
 8003314:	a318      	add	r3, pc, #96	; (adr r3, 8003378 <EncoderRead+0xd0>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd fa43 	bl	80007a4 <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <EncoderRead+0xe8>)
 800332c:	f7fd f910 	bl	8000550 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fb3c 	bl	80009b4 <__aeabi_d2f>
 800333c:	4603      	mov	r3, r0
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <EncoderRead+0xec>)
 8003340:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <EncoderRead+0xec>)
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <EncoderRead+0xec>)
 800334a:	edd3 7a01 	vldr	s15, [r3, #4]
 800334e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003352:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003398 <EncoderRead+0xf0>
 8003356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <EncoderRead+0xf4>)
 800335c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <EncoderRead+0xd8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <EncoderRead+0xd8>)
 8003366:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <EncoderRead+0xec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <EncoderRead+0xec>)
 800336e:	6053      	str	r3, [r2, #4]
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	f3af 8000 	nop.w
 8003378:	00000000 	.word	0x00000000
 800337c:	40c77000 	.word	0x40c77000
 8003380:	200007b0 	.word	0x200007b0
 8003384:	20000408 	.word	0x20000408
 8003388:	200007b8 	.word	0x200007b8
 800338c:	200007bc 	.word	0x200007bc
 8003390:	40768000 	.word	0x40768000
 8003394:	200007c0 	.word	0x200007c0
 8003398:	3a83126f 	.word	0x3a83126f
 800339c:	200007c8 	.word	0x200007c8

080033a0 <Int32Abs>:

uint32_t Int32Abs(int32_t PWM)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da02      	bge.n	80033b4 <Int32Abs+0x14>
		return PWM*-1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	425b      	negs	r3, r3
 80033b2:	e000      	b.n	80033b6 <Int32Abs+0x16>
	}else{
		return PWM;
 80033b4:	687b      	ldr	r3, [r7, #4]
	}
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dc11      	bgt.n	80033f6 <Drivemotor+0x32>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <Drivemotor+0xa8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	db0d      	blt.n	80033f6 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <Drivemotor+0xac>)
 80033dc:	681c      	ldr	r4, [r3, #0]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffde 	bl	80033a0 <Int32Abs>
 80033e4:	4603      	mov	r3, r0
 80033e6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ee:	4821      	ldr	r0, [pc, #132]	; (8003474 <Drivemotor+0xb0>)
 80033f0:	f002 fb86 	bl	8005b00 <HAL_GPIO_WritePin>
 80033f4:	e036      	b.n	8003464 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <Drivemotor+0xa8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	da0b      	bge.n	8003416 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <Drivemotor+0xac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f242 7210 	movw	r2, #10000	; 0x2710
 8003406:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800340e:	4819      	ldr	r0, [pc, #100]	; (8003474 <Drivemotor+0xb0>)
 8003410:	f002 fb76 	bl	8005b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003414:	e026      	b.n	8003464 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db12      	blt.n	8003442 <Drivemotor+0x7e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003422:	4293      	cmp	r3, r2
 8003424:	dc0d      	bgt.n	8003442 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <Drivemotor+0xac>)
 8003428:	681c      	ldr	r4, [r3, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffb8 	bl	80033a0 <Int32Abs>
 8003430:	4603      	mov	r3, r0
 8003432:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800343a:	480e      	ldr	r0, [pc, #56]	; (8003474 <Drivemotor+0xb0>)
 800343c:	f002 fb60 	bl	8005b00 <HAL_GPIO_WritePin>
 8003440:	e010      	b.n	8003464 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f242 7210 	movw	r2, #10000	; 0x2710
 8003448:	4293      	cmp	r3, r2
 800344a:	dd0b      	ble.n	8003464 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <Drivemotor+0xac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f242 7210 	movw	r2, #10000	; 0x2710
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800345c:	4805      	ldr	r0, [pc, #20]	; (8003474 <Drivemotor+0xb0>)
 800345e:	f002 fb4f 	bl	8005b00 <HAL_GPIO_WritePin>
}
 8003462:	e7ff      	b.n	8003464 <Drivemotor+0xa0>
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	ffffd8f0 	.word	0xffffd8f0
 8003470:	2000048c 	.word	0x2000048c
 8003474:	40020000 	.word	0x40020000

08003478 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af02      	add	r7, sp, #8
//	setpoint = 40.0;
//	PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	PWMCHECKER = PidVelo.ControllerOut;
//	Drivemotor(PWMCHECKER);
	if(Robot.MotorIsOn == 1)
 800347e:	4b57      	ldr	r3, [pc, #348]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 8003480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 8098 	bne.w	80035ba <ControllLoopAndErrorHandler+0x142>
	{
		if (Robot.flagStartTime == 1)
 800348a:	4b54      	ldr	r3, [pc, #336]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 800348c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10a      	bne.n	80034aa <ControllLoopAndErrorHandler+0x32>
		{
			StartTime = Micros();
 8003494:	f000 f8d0 	bl	8003638 <Micros>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4950      	ldr	r1, [pc, #320]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 800349e:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
		CurrentTime = Micros();
 80034aa:	f000 f8c5 	bl	8003638 <Micros>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	494c      	ldr	r1, [pc, #304]	; (80035e4 <ControllLoopAndErrorHandler+0x16c>)
 80034b4:	e9c1 2300 	strd	r2, r3, [r1]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80034b8:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <ControllLoopAndErrorHandler+0x168>)
 80034ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <ControllLoopAndErrorHandler+0x16c>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	e9cd 2300 	strd	r2, r3, [sp]
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4846      	ldr	r0, [pc, #280]	; (80035e8 <ControllLoopAndErrorHandler+0x170>)
 80034ce:	f7fe fed3 	bl	8002278 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 80034d2:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <ControllLoopAndErrorHandler+0x170>)
 80034d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034d8:	4a40      	ldr	r2, [pc, #256]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034da:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <ControllLoopAndErrorHandler+0x170>)
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e2:	4a3e      	ldr	r2, [pc, #248]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034e4:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 80034e6:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80034ec:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	f7fe f846 	bl	800158a <AbsVal>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	d527      	bpl.n	8003560 <ControllLoopAndErrorHandler+0xe8>
 8003510:	4b32      	ldr	r3, [pc, #200]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 8003512:	edd3 7a01 	vldr	s15, [r3, #4]
 8003516:	eeb0 0a67 	vmov.f32	s0, s15
 800351a:	f7fe f836 	bl	800158a <AbsVal>
 800351e:	eef0 7a40 	vmov.f32	s15, s0
 8003522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	d517      	bpl.n	8003560 <ControllLoopAndErrorHandler+0xe8>
		{
			PWMCHECKER = 0.0;
 8003530:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003542:	ee17 0a90 	vmov	r0, s15
 8003546:	f7ff ff3d 	bl	80033c4 <Drivemotor>
			Robot.RunningFlag = 0;
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			goingToGoalFlag = 0;
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <ControllLoopAndErrorHandler+0x178>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
			endEffFlag = 1;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <ControllLoopAndErrorHandler+0x17c>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 800355e:	e039      	b.n	80035d4 <ControllLoopAndErrorHandler+0x15c>
			PIDVelocityController_Update(&PidPos, Robot.QX , Robot.Position);
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 8003562:	edd3 7a06 	vldr	s15, [r3, #24]
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	eef0 0a47 	vmov.f32	s1, s14
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	4820      	ldr	r0, [pc, #128]	; (80035f8 <ControllLoopAndErrorHandler+0x180>)
 8003576:	f7fd ff20 	bl	80013ba <PIDVelocityController_Update>
			PIDVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut  , Robot.Velocity);
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 800357c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <ControllLoopAndErrorHandler+0x180>)
 8003582:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <ControllLoopAndErrorHandler+0x164>)
 800358c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003590:	eef0 0a47 	vmov.f32	s1, s14
 8003594:	eeb0 0a67 	vmov.f32	s0, s15
 8003598:	4818      	ldr	r0, [pc, #96]	; (80035fc <ControllLoopAndErrorHandler+0x184>)
 800359a:	f7fd ff0e 	bl	80013ba <PIDVelocityController_Update>
			PWMCHECKER = PidVelo.ControllerOut;
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <ControllLoopAndErrorHandler+0x184>)
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 80035a4:	6013      	str	r3, [r2, #0]
			Drivemotor(PWMCHECKER);
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b0:	ee17 0a90 	vmov	r0, s15
 80035b4:	f7ff ff06 	bl	80033c4 <Drivemotor>
}
 80035b8:	e00c      	b.n	80035d4 <ControllLoopAndErrorHandler+0x15c>
		PWMCHECKER = 0.0;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <ControllLoopAndErrorHandler+0x174>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 0a90 	vmov	r0, s15
 80035d0:	f7ff fef8 	bl	80033c4 <Drivemotor>
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200006f8 	.word	0x200006f8
 80035e0:	20000888 	.word	0x20000888
 80035e4:	20000890 	.word	0x20000890
 80035e8:	200007d0 	.word	0x200007d0
 80035ec:	200007cc 	.word	0x200007cc
 80035f0:	2000079d 	.word	0x2000079d
 80035f4:	2000079a 	.word	0x2000079a
 80035f8:	200003d4 	.word	0x200003d4
 80035fc:	200003a0 	.word	0x200003a0

08003600 <HAL_TIM_PeriodElapsedCallback>:
{
	static float Voltage = 0;
	static float Pwm = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003600:	b4b0      	push	{r4, r5, r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10a      	bne.n	8003626 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800361a:	1854      	adds	r4, r2, r1
 800361c:	f143 0500 	adc.w	r5, r3, #0
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003622:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bcb0      	pop	{r4, r5, r7}
 800362e:	4770      	bx	lr
 8003630:	200005ac 	.word	0x200005ac
 8003634:	200007a8 	.word	0x200007a8

08003638 <Micros>:

uint64_t Micros(){
 8003638:	b4b0      	push	{r4, r5, r7}
 800363a:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <Micros+0x28>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2200      	movs	r2, #0
 8003642:	4618      	mov	r0, r3
 8003644:	4611      	mov	r1, r2
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <Micros+0x2c>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	1884      	adds	r4, r0, r2
 800364e:	eb41 0503 	adc.w	r5, r1, r3
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
}
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	bcb0      	pop	{r4, r5, r7}
 800365e:	4770      	bx	lr
 8003660:	40014800 	.word	0x40014800
 8003664:	200007a8 	.word	0x200007a8

08003668 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 800366c:	2214      	movs	r2, #20
 800366e:	2100      	movs	r1, #0
 8003670:	4811      	ldr	r0, [pc, #68]	; (80036b8 <Ringbuf_Init+0x50>)
 8003672:	f007 fd03 	bl	800b07c <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003676:	2228      	movs	r2, #40	; 0x28
 8003678:	2100      	movs	r1, #0
 800367a:	4810      	ldr	r0, [pc, #64]	; (80036bc <Ringbuf_Init+0x54>)
 800367c:	f007 fcfe 	bl	800b07c <memset>

	Head = Tail = 0;
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <Ringbuf_Init+0x58>)
 8003682:	2200      	movs	r2, #0
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <Ringbuf_Init+0x58>)
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <Ringbuf_Init+0x5c>)
 800368c:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <Ringbuf_Init+0x60>)
 8003690:	2200      	movs	r2, #0
 8003692:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <Ringbuf_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 800369a:	2214      	movs	r2, #20
 800369c:	4906      	ldr	r1, [pc, #24]	; (80036b8 <Ringbuf_Init+0x50>)
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <Ringbuf_Init+0x68>)
 80036a0:	f006 f892 	bl	80097c8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <Ringbuf_Init+0x6c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <Ringbuf_Init+0x6c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0208 	bic.w	r2, r2, #8
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2000072c 	.word	0x2000072c
 80036bc:	20000740 	.word	0x20000740
 80036c0:	20000770 	.word	0x20000770
 80036c4:	2000076e 	.word	0x2000076e
 80036c8:	2000076a 	.word	0x2000076a
 80036cc:	2000076c 	.word	0x2000076c
 80036d0:	200005f4 	.word	0x200005f4
 80036d4:	20000638 	.word	0x20000638

080036d8 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80036e8:	4b52      	ldr	r3, [pc, #328]	; (8003834 <checkSum+0x15c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d84f      	bhi.n	8003796 <checkSum+0xbe>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <checkSum+0x24>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	080037ed 	.word	0x080037ed
 8003700:	0800370d 	.word	0x0800370d
 8003704:	080037ed 	.word	0x080037ed
 8003708:	08003733 	.word	0x08003733
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f897 	bl	8003844 <checkAck>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d169      	bne.n	80037f0 <checkSum+0x118>
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <checkSum+0x160>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	4a42      	ldr	r2, [pc, #264]	; (8003834 <checkSum+0x15c>)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	7013      	strb	r3, [r2, #0]
		break;
 8003730:	e05e      	b.n	80037f0 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f884 	bl	8003844 <checkAck>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <checkSum+0x80>
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <checkSum+0x160>)
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	3302      	adds	r3, #2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	4a38      	ldr	r2, [pc, #224]	; (8003834 <checkSum+0x15c>)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003756:	e04c      	b.n	80037f2 <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003758:	4b37      	ldr	r3, [pc, #220]	; (8003838 <checkSum+0x160>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <checkSum+0x160>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	440b      	add	r3, r1
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4413      	add	r3, r2
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <checkSum+0x160>)
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	3302      	adds	r3, #2
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	440b      	add	r3, r1
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4413      	add	r3, r2
 8003782:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <checkSum+0x160>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <checkSum+0x15c>)
 8003792:	701a      	strb	r2, [r3, #0]
		break;
 8003794:	e02d      	b.n	80037f2 <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003796:	4b28      	ldr	r3, [pc, #160]	; (8003838 <checkSum+0x160>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <checkSum+0x15c>)
 80037a4:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	e019      	b.n	80037e0 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <checkSum+0x160>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <checkSum+0x164>)
 80037b6:	fb83 2301 	smull	r2, r3, r3, r1
 80037ba:	111a      	asrs	r2, r3, #4
 80037bc:	17cb      	asrs	r3, r1, #31
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1aca      	subs	r2, r1, r3
 80037ca:	1883      	adds	r3, r0, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	4413      	add	r3, r2
 80037d8:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbe0      	blt.n	80037ac <checkSum+0xd4>
 80037ea:	e002      	b.n	80037f2 <checkSum+0x11a>
		break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <checkSum+0x11a>
		break;
 80037f0:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <checkSum+0x160>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	1e59      	subs	r1, r3, #1
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <checkSum+0x164>)
 80037fe:	fb83 2301 	smull	r2, r3, r3, r1
 8003802:	111a      	asrs	r2, r3, #4
 8003804:	17cb      	asrs	r3, r1, #31
 8003806:	1ad2      	subs	r2, r2, r3
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	1aca      	subs	r2, r1, r3
 8003812:	1883      	adds	r3, r0, r2
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	43db      	mvns	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	429a      	cmp	r2, r3
 8003824:	d102      	bne.n	800382c <checkSum+0x154>
 8003826:	4806      	ldr	r0, [pc, #24]	; (8003840 <checkSum+0x168>)
 8003828:	f000 f89a 	bl	8003960 <UARTstateManagement>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000079f 	.word	0x2000079f
 8003838:	2000076a 	.word	0x2000076a
 800383c:	66666667 	.word	0x66666667
 8003840:	20000740 	.word	0x20000740

08003844 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <checkAck+0x40>)
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b58      	cmp	r3, #88	; 0x58
 800385e:	d109      	bne.n	8003874 <checkAck+0x30>
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <checkAck+0x40>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b75      	cmp	r3, #117	; 0x75
 800386e:	d101      	bne.n	8003874 <checkAck+0x30>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <checkAck+0x32>
	else return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000076a 	.word	0x2000076a

08003888 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_UARTEx_RxEventCallback+0xb4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d14a      	bne.n	8003934 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 800389e:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_UARTEx_RxEventCallback+0xb8>)
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038a4:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 80038a6:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	2b28      	cmp	r3, #40	; 0x28
 80038ba:	dd16      	ble.n	80038ea <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038be:	2200      	movs	r2, #0
 80038c0:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_UARTEx_RxEventCallback+0xc4>)
 80038ca:	4413      	add	r3, r2
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	491f      	ldr	r1, [pc, #124]	; (8003950 <HAL_UARTEx_RxEventCallback+0xc8>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f007 fbc4 	bl	800b060 <memcpy>
                        newPos = dataSize+oldPos;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038da:	881a      	ldrh	r2, [r3, #0]
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_UARTEx_RxEventCallback+0xb8>)
 80038e6:	801a      	strh	r2, [r3, #0]
 80038e8:	e012      	b.n	8003910 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_UARTEx_RxEventCallback+0xc4>)
 80038f2:	4413      	add	r3, r2
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	4915      	ldr	r1, [pc, #84]	; (8003950 <HAL_UARTEx_RxEventCallback+0xc8>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f007 fbb0 	bl	800b060 <memcpy>
                        newPos = dataSize+oldPos;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	4413      	add	r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_UARTEx_RxEventCallback+0xb8>)
 800390e:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	4619      	mov	r1, r3
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <HAL_UARTEx_RxEventCallback+0xc4>)
 8003916:	f7ff fedf 	bl	80036d8 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 800391a:	2214      	movs	r2, #20
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <HAL_UARTEx_RxEventCallback+0xc8>)
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003920:	f005 ff52 	bl	80097c8 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_UARTEx_RxEventCallback+0xd0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0208 	bic.w	r2, r2, #8
 8003932:	601a      	str	r2, [r3, #0]
        }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40004400 	.word	0x40004400
 8003940:	2000076c 	.word	0x2000076c
 8003944:	2000076a 	.word	0x2000076a
 8003948:	20000772 	.word	0x20000772
 800394c:	20000740 	.word	0x20000740
 8003950:	2000072c 	.word	0x2000072c
 8003954:	200005f4 	.word	0x200005f4
 8003958:	20000638 	.word	0x20000638
 800395c:	00000000 	.word	0x00000000

08003960 <UARTstateManagement>:
//		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
//		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
//	}
//}
void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	uint16_t rxDatalen = newPos - oldPos;
 8003968:	4bad      	ldr	r3, [pc, #692]	; (8003c20 <UARTstateManagement+0x2c0>)
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	4bad      	ldr	r3, [pc, #692]	; (8003c24 <UARTstateManagement+0x2c4>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	817b      	strh	r3, [r7, #10]
	switch (UARTState)
 8003974:	4bac      	ldr	r3, [pc, #688]	; (8003c28 <UARTstateManagement+0x2c8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d01d      	beq.n	80039b8 <UARTstateManagement+0x58>
 800397c:	2b02      	cmp	r3, #2
 800397e:	f300 8344 	bgt.w	800400a <UARTstateManagement+0x6aa>
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 833e 	beq.w	8004004 <UARTstateManagement+0x6a4>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d000      	beq.n	800398e <UARTstateManagement+0x2e>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 800398c:	e33d      	b.n	800400a <UARTstateManagement+0x6aa>
			if(Mainbuffer[oldPos] == 0b10010010)
 800398e:	4ba5      	ldr	r3, [pc, #660]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b92      	cmp	r3, #146	; 0x92
 800399c:	f040 8334 	bne.w	8004008 <UARTstateManagement+0x6a8>
				modeNo = 2;
 80039a0:	4ba2      	ldr	r3, [pc, #648]	; (8003c2c <UARTstateManagement+0x2cc>)
 80039a2:	2202      	movs	r2, #2
 80039a4:	701a      	strb	r2, [r3, #0]
				UARTState = normOperation;
 80039a6:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <UARTstateManagement+0x2c8>)
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80039ac:	2202      	movs	r2, #2
 80039ae:	49a0      	ldr	r1, [pc, #640]	; (8003c30 <UARTstateManagement+0x2d0>)
 80039b0:	48a0      	ldr	r0, [pc, #640]	; (8003c34 <UARTstateManagement+0x2d4>)
 80039b2:	f005 fe8b 	bl	80096cc <HAL_UART_Transmit_DMA>
			break;
 80039b6:	e327      	b.n	8004008 <UARTstateManagement+0x6a8>
			stateSwitch = modeByte;
 80039b8:	4b9f      	ldr	r3, [pc, #636]	; (8003c38 <UARTstateManagement+0x2d8>)
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	4b9f      	ldr	r3, [pc, #636]	; (8003c3c <UARTstateManagement+0x2dc>)
 80039be:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 80039c0:	4b9e      	ldr	r3, [pc, #632]	; (8003c3c <UARTstateManagement+0x2dc>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3b91      	subs	r3, #145	; 0x91
 80039c6:	2b0d      	cmp	r3, #13
 80039c8:	f200 831f 	bhi.w	800400a <UARTstateManagement+0x6aa>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UARTstateManagement+0x74>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	08003a1f 	.word	0x08003a1f
 80039dc:	08003a37 	.word	0x08003a37
 80039e0:	08003a4f 	.word	0x08003a4f
 80039e4:	08003aa3 	.word	0x08003aa3
 80039e8:	08003b13 	.word	0x08003b13
 80039ec:	08003b4b 	.word	0x08003b4b
 80039f0:	08003c61 	.word	0x08003c61
 80039f4:	08003c97 	.word	0x08003c97
 80039f8:	08003d39 	.word	0x08003d39
 80039fc:	08003ead 	.word	0x08003ead
 8003a00:	08003faf 	.word	0x08003faf
 8003a04:	08003fc7 	.word	0x08003fc7
 8003a08:	08003fdf 	.word	0x08003fdf
					modeNo = 1;
 8003a0c:	4b87      	ldr	r3, [pc, #540]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a12:	2202      	movs	r2, #2
 8003a14:	4986      	ldr	r1, [pc, #536]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003a16:	4887      	ldr	r0, [pc, #540]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003a18:	f005 fe58 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003a1c:	e2f5      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 2;
 8003a1e:	4b83      	ldr	r3, [pc, #524]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8003a24:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <UARTstateManagement+0x2c8>)
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4980      	ldr	r1, [pc, #512]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003a2e:	4881      	ldr	r0, [pc, #516]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003a30:	f005 fe4c 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003a34:	e2e9      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 3;
 8003a36:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003a38:	2203      	movs	r2, #3
 8003a3a:	701a      	strb	r2, [r3, #0]
					UARTState = MCDisCon;
 8003a3c:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <UARTstateManagement+0x2c8>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a42:	2202      	movs	r2, #2
 8003a44:	497a      	ldr	r1, [pc, #488]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003a46:	487b      	ldr	r0, [pc, #492]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003a48:	f005 fe40 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003a4c:	e2dd      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 4;
 8003a4e:	4b77      	ldr	r3, [pc, #476]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003a50:	2204      	movs	r2, #4
 8003a52:	701a      	strb	r2, [r3, #0]
					uartVelo = ((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003a54:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fd0b 	bl	800047c <__aeabi_i2d>
 8003a66:	a36a      	add	r3, pc, #424	; (adr r3, 8003c10 <UARTstateManagement+0x2b0>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fe9a 	bl	80007a4 <__aeabi_ddiv>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <UARTstateManagement+0x2e0>)
 8003a7e:	f7fc fd67 	bl	8000550 <__aeabi_dmul>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fc ff73 	bl	8000974 <__aeabi_d2uiz>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <UARTstateManagement+0x2e4>)
 8003a94:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003a96:	2202      	movs	r2, #2
 8003a98:	4965      	ldr	r1, [pc, #404]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003a9a:	4866      	ldr	r0, [pc, #408]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003a9c:	f005 fe16 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003aa0:	e2b3      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 5;
 8003aa2:	4b62      	ldr	r3, [pc, #392]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8003aa8:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <UARTstateManagement+0x2e8>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8003aae:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <UARTstateManagement+0x2ec>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
					uartPos = (uint16_t)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8003ab4:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	3202      	adds	r2, #2
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	440a      	add	r2, r1
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fcd3 	bl	800047c <__aeabi_i2d>
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <UARTstateManagement+0x2f0>)
 8003adc:	f7fc fd38 	bl	8000550 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	a34b      	add	r3, pc, #300	; (adr r3, 8003c18 <UARTstateManagement+0x2b8>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fe59 	bl	80007a4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7fc ff3b 	bl	8000974 <__aeabi_d2uiz>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <UARTstateManagement+0x2f4>)
 8003b04:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003b06:	2202      	movs	r2, #2
 8003b08:	4949      	ldr	r1, [pc, #292]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003b0a:	484a      	ldr	r0, [pc, #296]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003b0c:	f005 fdde 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003b10:	e27b      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 6;
 8003b12:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003b14:	2206      	movs	r2, #6
 8003b16:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8003b18:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <UARTstateManagement+0x2e8>)
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8003b1e:	220f      	movs	r2, #15
 8003b20:	2100      	movs	r1, #0
 8003b22:	484d      	ldr	r0, [pc, #308]	; (8003c58 <UARTstateManagement+0x2f8>)
 8003b24:	f007 faaa 	bl	800b07c <memset>
					goalAmount = 1;
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <UARTstateManagement+0x2ec>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	3302      	adds	r3, #2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <UARTstateManagement+0x2f8>)
 8003b3c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003b3e:	2202      	movs	r2, #2
 8003b40:	493b      	ldr	r1, [pc, #236]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003b42:	483c      	ldr	r0, [pc, #240]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003b44:	f005 fdc2 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003b48:	e25f      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 7;
 8003b4a:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <UARTstateManagement+0x2cc>)
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8003b50:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <UARTstateManagement+0x2e8>)
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8003b56:	220f      	movs	r2, #15
 8003b58:	2100      	movs	r1, #0
 8003b5a:	483f      	ldr	r0, [pc, #252]	; (8003c58 <UARTstateManagement+0x2f8>)
 8003b5c:	f007 fa8e 	bl	800b07c <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <UARTstateManagement+0x2ec>)
 8003b6e:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e03a      	b.n	8003bec <UARTstateManagement+0x28c>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1c99      	adds	r1, r3, #2
 8003b80:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <UARTstateManagement+0x2fc>)
 8003b82:	fb83 2301 	smull	r2, r3, r3, r1
 8003b86:	111a      	asrs	r2, r3, #4
 8003b88:	17cb      	asrs	r3, r1, #31
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1aca      	subs	r2, r1, r3
 8003b96:	1883      	adds	r3, r0, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	f002 020f 	and.w	r2, r2, #15
 8003ba8:	b2d1      	uxtb	r1, r2
 8003baa:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <UARTstateManagement+0x2f8>)
 8003bac:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <UARTstateManagement+0x2c4>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1c99      	adds	r1, r3, #2
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <UARTstateManagement+0x2fc>)
 8003bba:	fb83 2301 	smull	r2, r3, r3, r1
 8003bbe:	111a      	asrs	r2, r3, #4
 8003bc0:	17cb      	asrs	r3, r1, #31
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	1aca      	subs	r2, r1, r3
 8003bce:	1883      	adds	r3, r0, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	3301      	adds	r3, #1
 8003bde:	0912      	lsrs	r2, r2, #4
 8003be0:	b2d1      	uxtb	r1, r2
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <UARTstateManagement+0x2f8>)
 8003be4:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3301      	adds	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <UARTstateManagement+0x2ec>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	0fda      	lsrs	r2, r3, #31
 8003bf4:	4413      	add	r3, r2
 8003bf6:	105b      	asrs	r3, r3, #1
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	dbba      	blt.n	8003b76 <UARTstateManagement+0x216>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003c00:	2202      	movs	r2, #2
 8003c02:	490b      	ldr	r1, [pc, #44]	; (8003c30 <UARTstateManagement+0x2d0>)
 8003c04:	480b      	ldr	r0, [pc, #44]	; (8003c34 <UARTstateManagement+0x2d4>)
 8003c06:	f005 fd61 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003c0a:	e1fe      	b.n	800400a <UARTstateManagement+0x6aa>
 8003c0c:	f3af 8000 	nop.w
 8003c10:	00000000 	.word	0x00000000
 8003c14:	406fe000 	.word	0x406fe000
 8003c18:	00000000 	.word	0x00000000
 8003c1c:	40eeaa00 	.word	0x40eeaa00
 8003c20:	2000076c 	.word	0x2000076c
 8003c24:	2000076a 	.word	0x2000076a
 8003c28:	20000728 	.word	0x20000728
 8003c2c:	2000079e 	.word	0x2000079e
 8003c30:	20000004 	.word	0x20000004
 8003c34:	200005f4 	.word	0x200005f4
 8003c38:	2000079f 	.word	0x2000079f
 8003c3c:	20000769 	.word	0x20000769
 8003c40:	40240000 	.word	0x40240000
 8003c44:	20000784 	.word	0x20000784
 8003c48:	20000799 	.word	0x20000799
 8003c4c:	20000797 	.word	0x20000797
 8003c50:	40768000 	.word	0x40768000
 8003c54:	20000786 	.word	0x20000786
 8003c58:	20000788 	.word	0x20000788
 8003c5c:	66666667 	.word	0x66666667
					modeNo = 8;
 8003c60:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <UARTstateManagement+0x518>)
 8003c62:	2208      	movs	r2, #8
 8003c64:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0)
 8003c66:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <UARTstateManagement+0x51c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <UARTstateManagement+0x32a>
					goalIDX = 0;
 8003c6e:	4b84      	ldr	r3, [pc, #528]	; (8003e80 <UARTstateManagement+0x520>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
					Robot.flagStartTime = 1;
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <UARTstateManagement+0x524>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					Robot.RunningFlag = 1;
 8003c7c:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <UARTstateManagement+0x524>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					doingTaskFlag = 1;
 8003c84:	4b7d      	ldr	r3, [pc, #500]	; (8003e7c <UARTstateManagement+0x51c>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	497e      	ldr	r1, [pc, #504]	; (8003e88 <UARTstateManagement+0x528>)
 8003c8e:	487f      	ldr	r0, [pc, #508]	; (8003e8c <UARTstateManagement+0x52c>)
 8003c90:	f005 fd1c 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003c94:	e1b9      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 9;
 8003c96:	4b78      	ldr	r3, [pc, #480]	; (8003e78 <UARTstateManagement+0x518>)
 8003c98:	2209      	movs	r2, #9
 8003c9a:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <UARTstateManagement+0x530>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <UARTstateManagement+0x524>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1){
 8003ca8:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <UARTstateManagement+0x51c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d11f      	bne.n	8003cf0 <UARTstateManagement+0x390>
 8003cb0:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <UARTstateManagement+0x528>)
 8003cb2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003cb4:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <UARTstateManagement+0x534>)
 8003cb6:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 8003cb8:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <UARTstateManagement+0x534>)
 8003cba:	2299      	movs	r2, #153	; 0x99
 8003cbc:	709a      	strb	r2, [r3, #2]
						sendData[4] = Robot.CurrentStation; // set current goal
 8003cbe:	4b71      	ldr	r3, [pc, #452]	; (8003e84 <UARTstateManagement+0x524>)
 8003cc0:	891b      	ldrh	r3, [r3, #8]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <UARTstateManagement+0x534>)
 8003cc6:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003cc8:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <UARTstateManagement+0x534>)
 8003cca:	789a      	ldrb	r2, [r3, #2]
 8003ccc:	4b71      	ldr	r3, [pc, #452]	; (8003e94 <UARTstateManagement+0x534>)
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <UARTstateManagement+0x534>)
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <UARTstateManagement+0x534>)
 8003ce2:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	496b      	ldr	r1, [pc, #428]	; (8003e94 <UARTstateManagement+0x534>)
 8003ce8:	4868      	ldr	r0, [pc, #416]	; (8003e8c <UARTstateManagement+0x52c>)
 8003cea:	f005 fcef 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003cee:	e18c      	b.n	800400a <UARTstateManagement+0x6aa>
 8003cf0:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <UARTstateManagement+0x538>)
 8003cf2:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003cf4:	4b67      	ldr	r3, [pc, #412]	; (8003e94 <UARTstateManagement+0x534>)
 8003cf6:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <UARTstateManagement+0x53c>)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <UARTstateManagement+0x528>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	8013      	strh	r3, [r2, #0]
						sendData[4] = 153; // start-mode
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <UARTstateManagement+0x534>)
 8003d02:	2299      	movs	r2, #153	; 0x99
 8003d04:	711a      	strb	r2, [r3, #4]
						sendData[6] = Robot.CurrentStation; // set currentStation
 8003d06:	4b5f      	ldr	r3, [pc, #380]	; (8003e84 <UARTstateManagement+0x524>)
 8003d08:	891b      	ldrh	r3, [r3, #8]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <UARTstateManagement+0x534>)
 8003d0e:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[4]+sendData[5]+sendData[6]));
 8003d10:	4b60      	ldr	r3, [pc, #384]	; (8003e94 <UARTstateManagement+0x534>)
 8003d12:	791a      	ldrb	r2, [r3, #4]
 8003d14:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <UARTstateManagement+0x534>)
 8003d16:	795b      	ldrb	r3, [r3, #5]
 8003d18:	4413      	add	r3, r2
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <UARTstateManagement+0x534>)
 8003d1e:	799b      	ldrb	r3, [r3, #6]
 8003d20:	4413      	add	r3, r2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <UARTstateManagement+0x534>)
 8003d2a:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	4959      	ldr	r1, [pc, #356]	; (8003e94 <UARTstateManagement+0x534>)
 8003d30:	4856      	ldr	r0, [pc, #344]	; (8003e8c <UARTstateManagement+0x52c>)
 8003d32:	f005 fccb 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003d36:	e168      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 10;
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <UARTstateManagement+0x518>)
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <UARTstateManagement+0x530>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <UARTstateManagement+0x524>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fba9 	bl	80004a0 <__aeabi_f2d>
 8003d4e:	a346      	add	r3, pc, #280	; (adr r3, 8003e68 <UARTstateManagement+0x508>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fbfc 	bl	8000550 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	a343      	add	r3, pc, #268	; (adr r3, 8003e70 <UARTstateManagement+0x510>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fbf3 	bl	8000550 <__aeabi_dmul>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <UARTstateManagement+0x540>)
 8003d78:	f7fc fd14 	bl	80007a4 <__aeabi_ddiv>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc fdf6 	bl	8000974 <__aeabi_d2uiz>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <UARTstateManagement+0x544>)
 8003d8e:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1){
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <UARTstateManagement+0x51c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d126      	bne.n	8003de6 <UARTstateManagement+0x486>
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <UARTstateManagement+0x528>)
 8003d9a:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003d9c:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <UARTstateManagement+0x534>)
 8003d9e:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <UARTstateManagement+0x534>)
 8003da2:	229a      	movs	r2, #154	; 0x9a
 8003da4:	709a      	strb	r2, [r3, #2]
						sendData[3] = (posData) >> 8 ; // set high byte posData
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <UARTstateManagement+0x544>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <UARTstateManagement+0x534>)
 8003db2:	70da      	strb	r2, [r3, #3]
						sendData[4] = (posData) & 0xff; // set low byte posData
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <UARTstateManagement+0x544>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <UARTstateManagement+0x534>)
 8003dbc:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <UARTstateManagement+0x534>)
 8003dc0:	789a      	ldrb	r2, [r3, #2]
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <UARTstateManagement+0x534>)
 8003dc4:	78db      	ldrb	r3, [r3, #3]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <UARTstateManagement+0x534>)
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <UARTstateManagement+0x534>)
 8003dd8:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003dda:	2206      	movs	r2, #6
 8003ddc:	492d      	ldr	r1, [pc, #180]	; (8003e94 <UARTstateManagement+0x534>)
 8003dde:	482b      	ldr	r0, [pc, #172]	; (8003e8c <UARTstateManagement+0x52c>)
 8003de0:	f005 fc74 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003de4:	e111      	b.n	800400a <UARTstateManagement+0x6aa>
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <UARTstateManagement+0x538>)
 8003de8:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <UARTstateManagement+0x534>)
 8003dec:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003dee:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <UARTstateManagement+0x53c>)
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <UARTstateManagement+0x528>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	8013      	strh	r3, [r2, #0]
						sendData[4] = 154; // start-mode
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <UARTstateManagement+0x534>)
 8003df8:	229a      	movs	r2, #154	; 0x9a
 8003dfa:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <UARTstateManagement+0x548>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <UARTstateManagement+0x4c6>
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <UARTstateManagement+0x524>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	d806      	bhi.n	8003e26 <UARTstateManagement+0x4c6>
							sendData[5] = 0; // set high byte posData
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <UARTstateManagement+0x534>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	715a      	strb	r2, [r3, #5]
							sendData[6] = 0; // set low byte posData
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <UARTstateManagement+0x534>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	719a      	strb	r2, [r3, #6]
 8003e24:	e00b      	b.n	8003e3e <UARTstateManagement+0x4de>
							sendData[5] = (posData) >> 8 ; // set high byte posData
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <UARTstateManagement+0x544>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <UARTstateManagement+0x534>)
 8003e32:	715a      	strb	r2, [r3, #5]
							sendData[6] = (posData) & 0xff; // set low byte posData
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <UARTstateManagement+0x544>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <UARTstateManagement+0x534>)
 8003e3c:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[4]+sendData[5]+sendData[6]));
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <UARTstateManagement+0x534>)
 8003e40:	791a      	ldrb	r2, [r3, #4]
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <UARTstateManagement+0x534>)
 8003e44:	795b      	ldrb	r3, [r3, #5]
 8003e46:	4413      	add	r3, r2
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <UARTstateManagement+0x534>)
 8003e4c:	799b      	ldrb	r3, [r3, #6]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <UARTstateManagement+0x534>)
 8003e58:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	490d      	ldr	r1, [pc, #52]	; (8003e94 <UARTstateManagement+0x534>)
 8003e5e:	480b      	ldr	r0, [pc, #44]	; (8003e8c <UARTstateManagement+0x52c>)
 8003e60:	f005 fc34 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003e64:	e0d1      	b.n	800400a <UARTstateManagement+0x6aa>
 8003e66:	bf00      	nop
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	40c38800 	.word	0x40c38800
 8003e70:	54442d18 	.word	0x54442d18
 8003e74:	400921fb 	.word	0x400921fb
 8003e78:	2000079e 	.word	0x2000079e
 8003e7c:	2000079c 	.word	0x2000079c
 8003e80:	20000798 	.word	0x20000798
 8003e84:	200006f8 	.word	0x200006f8
 8003e88:	20000004 	.word	0x20000004
 8003e8c:	200005f4 	.word	0x200005f4
 8003e90:	20000768 	.word	0x20000768
 8003e94:	20000778 	.word	0x20000778
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	2000077a 	.word	0x2000077a
 8003ea0:	40668000 	.word	0x40668000
 8003ea4:	20000780 	.word	0x20000780
 8003ea8:	2000079b 	.word	0x2000079b
					modeNo = 11;
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <UARTstateManagement+0x6c8>)
 8003eae:	220b      	movs	r2, #11
 8003eb0:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8003eb2:	4b5e      	ldr	r3, [pc, #376]	; (800402c <UARTstateManagement+0x6cc>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
					veloData = (uint16_t)((((Robot.Velocity*30.0)/M_PI)/10.0)*255.0);
 8003eb8:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <UARTstateManagement+0x6d0>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc faef 	bl	80004a0 <__aeabi_f2d>
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <UARTstateManagement+0x6d4>)
 8003ec8:	f7fc fb42 	bl	8000550 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	a350      	add	r3, pc, #320	; (adr r3, 8004018 <UARTstateManagement+0x6b8>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f7fc fc63 	bl	80007a4 <__aeabi_ddiv>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <UARTstateManagement+0x6d8>)
 8003eec:	f7fc fc5a 	bl	80007a4 <__aeabi_ddiv>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	a349      	add	r3, pc, #292	; (adr r3, 8004020 <UARTstateManagement+0x6c0>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f7fc fb27 	bl	8000550 <__aeabi_dmul>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fd33 	bl	8000974 <__aeabi_d2uiz>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <UARTstateManagement+0x6dc>)
 8003f14:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1){
 8003f16:	4b4a      	ldr	r3, [pc, #296]	; (8004040 <UARTstateManagement+0x6e0>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d121      	bne.n	8003f62 <UARTstateManagement+0x602>
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <UARTstateManagement+0x6e4>)
 8003f20:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f24:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 8003f26:	4b48      	ldr	r3, [pc, #288]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f28:	229b      	movs	r2, #155	; 0x9b
 8003f2a:	709a      	strb	r2, [r3, #2]
						sendData[4] = veloData >> 8; // set low byte posData
 8003f2c:	4b43      	ldr	r3, [pc, #268]	; (800403c <UARTstateManagement+0x6dc>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b44      	ldr	r3, [pc, #272]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f38:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 8003f3a:	4b43      	ldr	r3, [pc, #268]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f3c:	789a      	ldrb	r2, [r3, #2]
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	4413      	add	r3, r2
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b40      	ldr	r3, [pc, #256]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f54:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, sendData, 6);
 8003f56:	2206      	movs	r2, #6
 8003f58:	493b      	ldr	r1, [pc, #236]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f5a:	483c      	ldr	r0, [pc, #240]	; (800404c <UARTstateManagement+0x6ec>)
 8003f5c:	f005 fbb6 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003f60:	e053      	b.n	800400a <UARTstateManagement+0x6aa>
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <UARTstateManagement+0x6f0>)
 8003f64:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f68:	801a      	strh	r2, [r3, #0]
						memcpy(sendData+2, ACK_1, 2);
 8003f6a:	4a3a      	ldr	r2, [pc, #232]	; (8004054 <UARTstateManagement+0x6f4>)
 8003f6c:	4b35      	ldr	r3, [pc, #212]	; (8004044 <UARTstateManagement+0x6e4>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	8013      	strh	r3, [r2, #0]
						sendData[4] = 155; // start-mode
 8003f72:	4b35      	ldr	r3, [pc, #212]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f74:	229b      	movs	r2, #155	; 0x9b
 8003f76:	711a      	strb	r2, [r3, #4]
						sendData[6] = (veloData) >> 8; // set low byte posData
 8003f78:	4b30      	ldr	r3, [pc, #192]	; (800403c <UARTstateManagement+0x6dc>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f84:	719a      	strb	r2, [r3, #6]
						sendData[7] = (uint8_t)(~(sendData[4]+sendData[5]+sendData[6]));
 8003f86:	4b30      	ldr	r3, [pc, #192]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f88:	791a      	ldrb	r2, [r3, #4]
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f8c:	795b      	ldrb	r3, [r3, #5]
 8003f8e:	4413      	add	r3, r2
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <UARTstateManagement+0x6e8>)
 8003f94:	799b      	ldrb	r3, [r3, #6]
 8003f96:	4413      	add	r3, r2
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <UARTstateManagement+0x6e8>)
 8003fa0:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, sendData, 8);
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	4928      	ldr	r1, [pc, #160]	; (8004048 <UARTstateManagement+0x6e8>)
 8003fa6:	4829      	ldr	r0, [pc, #164]	; (800404c <UARTstateManagement+0x6ec>)
 8003fa8:	f005 fb90 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003fac:	e02d      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 12;
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <UARTstateManagement+0x6c8>)
 8003fb0:	220c      	movs	r2, #12
 8003fb2:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <UARTstateManagement+0x6f8>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4921      	ldr	r1, [pc, #132]	; (8004044 <UARTstateManagement+0x6e4>)
 8003fbe:	4823      	ldr	r0, [pc, #140]	; (800404c <UARTstateManagement+0x6ec>)
 8003fc0:	f005 fb84 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003fc4:	e021      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 13;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <UARTstateManagement+0x6c8>)
 8003fc8:	220d      	movs	r2, #13
 8003fca:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <UARTstateManagement+0x6f8>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	491b      	ldr	r1, [pc, #108]	; (8004044 <UARTstateManagement+0x6e4>)
 8003fd6:	481d      	ldr	r0, [pc, #116]	; (800404c <UARTstateManagement+0x6ec>)
 8003fd8:	f005 fb78 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8003fdc:	e015      	b.n	800400a <UARTstateManagement+0x6aa>
					modeNo = 14;
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <UARTstateManagement+0x6c8>)
 8003fe0:	220e      	movs	r2, #14
 8003fe2:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon);
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <UARTstateManagement+0x6d0>)
 8003fe6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fea:	eeb0 0a67 	vmov.f32	s0, s15
 8003fee:	f000 fb21 	bl	8004634 <RobotRunToPositon>
					homingFlag = 1;
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <UARTstateManagement+0x6fc>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	4912      	ldr	r1, [pc, #72]	; (8004044 <UARTstateManagement+0x6e4>)
 8003ffc:	4813      	ldr	r0, [pc, #76]	; (800404c <UARTstateManagement+0x6ec>)
 8003ffe:	f005 fb65 	bl	80096cc <HAL_UART_Transmit_DMA>
					break;
 8004002:	e002      	b.n	800400a <UARTstateManagement+0x6aa>
			break;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <UARTstateManagement+0x6aa>
			break;
 8004008:	bf00      	nop
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	f3af 8000 	nop.w
 8004018:	54442d18 	.word	0x54442d18
 800401c:	400921fb 	.word	0x400921fb
 8004020:	00000000 	.word	0x00000000
 8004024:	406fe000 	.word	0x406fe000
 8004028:	2000079e 	.word	0x2000079e
 800402c:	20000768 	.word	0x20000768
 8004030:	200006f8 	.word	0x200006f8
 8004034:	403e0000 	.word	0x403e0000
 8004038:	40240000 	.word	0x40240000
 800403c:	20000782 	.word	0x20000782
 8004040:	2000079c 	.word	0x2000079c
 8004044:	20000004 	.word	0x20000004
 8004048:	20000778 	.word	0x20000778
 800404c:	200005f4 	.word	0x200005f4
 8004050:	20000008 	.word	0x20000008
 8004054:	2000077a 	.word	0x2000077a
 8004058:	2000079a 	.word	0x2000079a
 800405c:	2000079b 	.word	0x2000079b

08004060 <RobotstateManagement>:

void RobotstateManagement()
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	switch (RobotState)
 8004064:	4b85      	ldr	r3, [pc, #532]	; (800427c <RobotstateManagement+0x21c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b04      	cmp	r3, #4
 800406a:	f200 8105 	bhi.w	8004278 <RobotstateManagement+0x218>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <RobotstateManagement+0x14>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004089 	.word	0x08004089
 8004078:	080040af 	.word	0x080040af
 800407c:	08004185 	.word	0x08004185
 8004080:	0800426f 	.word	0x0800426f
 8004084:	0800426f 	.word	0x0800426f
	{
		case init:
			// Reset all Parameter
			Robotinit(&Robot);
 8004088:	487d      	ldr	r0, [pc, #500]	; (8004280 <RobotstateManagement+0x220>)
 800408a:	f7fd fa49 	bl	8001520 <Robotinit>
			Robot.MotorIsOn = 1;
 800408e:	4b7c      	ldr	r3, [pc, #496]	; (8004280 <RobotstateManagement+0x220>)
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2020 	strb.w	r2, [r3, #32]
			// Start Finding home Position
			Robot.flagSethome = 1;
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <RobotstateManagement+0x220>)
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			// Turn 360 Deg
			RobotRunToPositon(360.0);
 800409e:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8004284 <RobotstateManagement+0x224>
 80040a2:	f000 fac7 	bl	8004634 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 80040a6:	4b75      	ldr	r3, [pc, #468]	; (800427c <RobotstateManagement+0x21c>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
			break;
 80040ac:	e0e4      	b.n	8004278 <RobotstateManagement+0x218>
		case FindHome:
			if(Robot.RunningFlag == 0)
 80040ae:	4b74      	ldr	r3, [pc, #464]	; (8004280 <RobotstateManagement+0x220>)
 80040b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f040 80dc 	bne.w	8004272 <RobotstateManagement+0x212>
			{
				if(Robot.flagSethome == 2)
 80040ba:	4b71      	ldr	r3, [pc, #452]	; (8004280 <RobotstateManagement+0x220>)
 80040bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d10f      	bne.n	80040e4 <RobotstateManagement+0x84>
				{
					RobotRunToPositon(Robot.HomePositon);
 80040c4:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <RobotstateManagement+0x220>)
 80040c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80040ca:	eeb0 0a67 	vmov.f32	s0, s15
 80040ce:	f000 fab1 	bl	8004634 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80040d2:	4b6b      	ldr	r3, [pc, #428]	; (8004280 <RobotstateManagement+0x220>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					Robot.flagSethome = 3;
 80040da:	4b69      	ldr	r3, [pc, #420]	; (8004280 <RobotstateManagement+0x220>)
 80040dc:	2203      	movs	r2, #3
 80040de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					FlagAckFromUART = 1;
					UARTState = normOperation;
					RobotState = NormM;
				}
			}
			break;
 80040e2:	e0c6      	b.n	8004272 <RobotstateManagement+0x212>
				else if(Robot.flagSethome == 3)
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <RobotstateManagement+0x220>)
 80040e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	f040 80c1 	bne.w	8004272 <RobotstateManagement+0x212>
					TIM_ResetCounter(TIM2);
 80040f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80040f4:	f000 fac4 	bl	8004680 <TIM_ResetCounter>
					EncoderRawData[0] = 0;
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <RobotstateManagement+0x228>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
					EncoderRawData[1] = 0;
 80040fe:	4b62      	ldr	r3, [pc, #392]	; (8004288 <RobotstateManagement+0x228>)
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
					WrappingStep = 0;
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <RobotstateManagement+0x22c>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
					CoefficientAndTimeCalculation(&traject,0.0,0.0);
 800410a:	eddf 0a61 	vldr	s1, [pc, #388]	; 8004290 <RobotstateManagement+0x230>
 800410e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8004290 <RobotstateManagement+0x230>
 8004112:	4860      	ldr	r0, [pc, #384]	; (8004294 <RobotstateManagement+0x234>)
 8004114:	f7fd fa5c 	bl	80015d0 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <RobotstateManagement+0x220>)
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					StartTime = 0;
 8004120:	495d      	ldr	r1, [pc, #372]	; (8004298 <RobotstateManagement+0x238>)
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9c1 2300 	strd	r2, r3, [r1]
					CurrentTime = 0;
 800412e:	495b      	ldr	r1, [pc, #364]	; (800429c <RobotstateManagement+0x23c>)
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9c1 2300 	strd	r2, r3, [r1]
					PositionDeg[0] = 0;
 800413c:	4b58      	ldr	r3, [pc, #352]	; (80042a0 <RobotstateManagement+0x240>)
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
					PositionDeg[1] = 0;
 8004144:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <RobotstateManagement+0x240>)
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	605a      	str	r2, [r3, #4]
					KalmanMatrixReset(&KalmanVar, Pvar);
 800414c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80042a4 <RobotstateManagement+0x244>
 8004150:	4855      	ldr	r0, [pc, #340]	; (80042a8 <RobotstateManagement+0x248>)
 8004152:	f7fc ff65 	bl	8001020 <KalmanMatrixReset>
					Robotinit(&Robot);
 8004156:	484a      	ldr	r0, [pc, #296]	; (8004280 <RobotstateManagement+0x220>)
 8004158:	f7fd f9e2 	bl	8001520 <Robotinit>
					PIDVelocityController_Init(&PidVelo);
 800415c:	4853      	ldr	r0, [pc, #332]	; (80042ac <RobotstateManagement+0x24c>)
 800415e:	f7fd f906 	bl	800136e <PIDVelocityController_Init>
					PIDVelocityController_Init(&PidPos);
 8004162:	4853      	ldr	r0, [pc, #332]	; (80042b0 <RobotstateManagement+0x250>)
 8004164:	f7fd f903 	bl	800136e <PIDVelocityController_Init>
					Robot.MotorIsOn = 1;
 8004168:	4b45      	ldr	r3, [pc, #276]	; (8004280 <RobotstateManagement+0x220>)
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2020 	strb.w	r2, [r3, #32]
					FlagAckFromUART = 1;
 8004170:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <RobotstateManagement+0x254>)
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
					UARTState = normOperation;
 8004176:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <RobotstateManagement+0x258>)
 8004178:	2202      	movs	r2, #2
 800417a:	701a      	strb	r2, [r3, #0]
					RobotState = NormM;
 800417c:	4b3f      	ldr	r3, [pc, #252]	; (800427c <RobotstateManagement+0x21c>)
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
			break;
 8004182:	e076      	b.n	8004272 <RobotstateManagement+0x212>
		case NormM:
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8004184:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <RobotstateManagement+0x25c>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d154      	bne.n	8004236 <RobotstateManagement+0x1d6>
 800418c:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <RobotstateManagement+0x220>)
 800418e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004192:	2b01      	cmp	r3, #1
 8004194:	d14f      	bne.n	8004236 <RobotstateManagement+0x1d6>
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <RobotstateManagement+0x260>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d14b      	bne.n	8004236 <RobotstateManagement+0x1d6>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <RobotstateManagement+0x264>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d11d      	bne.n	80041e2 <RobotstateManagement+0x182>
 80041a6:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <RobotstateManagement+0x268>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d119      	bne.n	80041e2 <RobotstateManagement+0x182>
					goingToGoalFlag = 1;
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <RobotstateManagement+0x268>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 80041b4:	4b45      	ldr	r3, [pc, #276]	; (80042cc <RobotstateManagement+0x26c>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <RobotstateManagement+0x220>)
 80041c2:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <RobotstateManagement+0x220>)
 80041c8:	edd3 7a00 	vldr	s15, [r3]
 80041cc:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <RobotstateManagement+0x220>)
 80041ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80041d2:	eef0 0a47 	vmov.f32	s1, s14
 80041d6:	eeb0 0a67 	vmov.f32	s0, s15
 80041da:	482e      	ldr	r0, [pc, #184]	; (8004294 <RobotstateManagement+0x234>)
 80041dc:	f7fd f9f8 	bl	80015d0 <CoefficientAndTimeCalculation>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 80041e0:	e043      	b.n	800426a <RobotstateManagement+0x20a>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <RobotstateManagement+0x264>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d13f      	bne.n	800426a <RobotstateManagement+0x20a>
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <RobotstateManagement+0x268>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d13b      	bne.n	800426a <RobotstateManagement+0x20a>
					goingToGoalFlag = 1;
 80041f2:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <RobotstateManagement+0x268>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX-1]];
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <RobotstateManagement+0x270>)
 80041fa:	f993 3000 	ldrsb.w	r3, [r3]
 80041fe:	3b01      	subs	r3, #1
 8004200:	4a34      	ldr	r2, [pc, #208]	; (80042d4 <RobotstateManagement+0x274>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	461a      	mov	r2, r3
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <RobotstateManagement+0x278>)
 8004208:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <RobotstateManagement+0x220>)
 8004216:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <RobotstateManagement+0x220>)
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <RobotstateManagement+0x220>)
 8004222:	ed93 7a03 	vldr	s14, [r3, #12]
 8004226:	eef0 0a47 	vmov.f32	s1, s14
 800422a:	eeb0 0a67 	vmov.f32	s0, s15
 800422e:	4819      	ldr	r0, [pc, #100]	; (8004294 <RobotstateManagement+0x234>)
 8004230:	f7fd f9ce 	bl	80015d0 <CoefficientAndTimeCalculation>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8004234:	e019      	b.n	800426a <RobotstateManagement+0x20a>
				}
			}

			else if(doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <RobotstateManagement+0x25c>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d11b      	bne.n	8004276 <RobotstateManagement+0x216>
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <RobotstateManagement+0x220>)
 8004240:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <RobotstateManagement+0x216>
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <RobotstateManagement+0x260>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d112      	bne.n	8004276 <RobotstateManagement+0x216>
				RobotState = EndEff;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <RobotstateManagement+0x21c>)
 8004252:	2203      	movs	r2, #3
 8004254:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <RobotstateManagement+0x27c>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <RobotstateManagement+0x280>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <RobotstateManagement+0x284>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004268:	e005      	b.n	8004276 <RobotstateManagement+0x216>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 800426a:	bf00      	nop
			break;
 800426c:	e003      	b.n	8004276 <RobotstateManagement+0x216>
		case EndEff:
			break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <RobotstateManagement+0x218>
			break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <RobotstateManagement+0x218>
			break;
 8004276:	bf00      	nop
		case emergency:
			break;
	}
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000729 	.word	0x20000729
 8004280:	200006f8 	.word	0x200006f8
 8004284:	43b40000 	.word	0x43b40000
 8004288:	200007b0 	.word	0x200007b0
 800428c:	200007b8 	.word	0x200007b8
 8004290:	00000000 	.word	0x00000000
 8004294:	200007d0 	.word	0x200007d0
 8004298:	20000888 	.word	0x20000888
 800429c:	20000890 	.word	0x20000890
 80042a0:	200007c0 	.word	0x200007c0
 80042a4:	447a0000 	.word	0x447a0000
 80042a8:	20000020 	.word	0x20000020
 80042ac:	200003a0 	.word	0x200003a0
 80042b0:	200003d4 	.word	0x200003d4
 80042b4:	20000768 	.word	0x20000768
 80042b8:	20000728 	.word	0x20000728
 80042bc:	2000079c 	.word	0x2000079c
 80042c0:	2000079a 	.word	0x2000079a
 80042c4:	20000799 	.word	0x20000799
 80042c8:	2000079d 	.word	0x2000079d
 80042cc:	20000786 	.word	0x20000786
 80042d0:	20000798 	.word	0x20000798
 80042d4:	20000788 	.word	0x20000788
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	200008b2 	.word	0x200008b2
 80042e0:	200008b1 	.word	0x200008b1
 80042e4:	20000000 	.word	0x20000000

080042e8 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80042f0:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <I2CWriteFcn+0x40>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d112      	bne.n	800431e <I2CWriteFcn+0x36>
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <I2CWriteFcn+0x44>)
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d10c      	bne.n	800431e <I2CWriteFcn+0x36>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <I2CWriteFcn+0x48>)
 800430a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 800430c:	2301      	movs	r3, #1
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <I2CWriteFcn+0x48>)
 8004310:	2146      	movs	r1, #70	; 0x46
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <I2CWriteFcn+0x44>)
 8004314:	f001 fd84 	bl	8005e20 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <I2CWriteFcn+0x40>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
	}
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200008b2 	.word	0x200008b2
 800432c:	20000438 	.word	0x20000438
 8004330:	200008bc 	.word	0x200008bc

08004334 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <I2CReadFcn+0x38>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10e      	bne.n	8004362 <I2CReadFcn+0x2e>
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <I2CReadFcn+0x3c>)
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d108      	bne.n	8004362 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004350:	2301      	movs	r3, #1
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	2146      	movs	r1, #70	; 0x46
 8004356:	4806      	ldr	r0, [pc, #24]	; (8004370 <I2CReadFcn+0x3c>)
 8004358:	f001 fe08 	bl	8005f6c <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <I2CReadFcn+0x38>)
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
	}
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200008b1 	.word	0x200008b1
 8004370:	20000438 	.word	0x20000438

08004374 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8004378:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <EndEffstateManagement+0x1b0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	f200 80cf 	bhi.w	8004520 <EndEffstateManagement+0x1ac>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <EndEffstateManagement+0x14>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	0800439d 	.word	0x0800439d
 800438c:	080043a5 	.word	0x080043a5
 8004390:	08004413 	.word	0x08004413
 8004394:	08004439 	.word	0x08004439
 8004398:	0800445f 	.word	0x0800445f
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 800439c:	4b62      	ldr	r3, [pc, #392]	; (8004528 <EndEffstateManagement+0x1b4>)
 800439e:	2203      	movs	r2, #3
 80043a0:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 80043a2:	e0bd      	b.n	8004520 <EndEffstateManagement+0x1ac>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80043a4:	4b61      	ldr	r3, [pc, #388]	; (800452c <EndEffstateManagement+0x1b8>)
 80043a6:	2223      	movs	r2, #35	; 0x23
 80043a8:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80043aa:	4860      	ldr	r0, [pc, #384]	; (800452c <EndEffstateManagement+0x1b8>)
 80043ac:	f7ff ff9c 	bl	80042e8 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80043b0:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <EndEffstateManagement+0x1bc>)
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f040 80aa 	bne.w	8004512 <EndEffstateManagement+0x19e>
			{
				I2CReadFcn(I2CRxDataBuffer);
 80043be:	485d      	ldr	r0, [pc, #372]	; (8004534 <EndEffstateManagement+0x1c0>)
 80043c0:	f7ff ffb8 	bl	8004334 <I2CReadFcn>
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80043c4:	4b5a      	ldr	r3, [pc, #360]	; (8004530 <EndEffstateManagement+0x1bc>)
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	f040 80a0 	bne.w	8004512 <EndEffstateManagement+0x19e>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 80043d2:	4b58      	ldr	r3, [pc, #352]	; (8004534 <EndEffstateManagement+0x1c0>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b78      	cmp	r3, #120	; 0x78
 80043d8:	d117      	bne.n	800440a <EndEffstateManagement+0x96>
					{
						EndEffState = OpenLaser;
 80043da:	4b52      	ldr	r3, [pc, #328]	; (8004524 <EndEffstateManagement+0x1b0>)
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80043e0:	4b55      	ldr	r3, [pc, #340]	; (8004538 <EndEffstateManagement+0x1c4>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80043e6:	4b55      	ldr	r3, [pc, #340]	; (800453c <EndEffstateManagement+0x1c8>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

						if(doingTaskFlag == 1){
 80043ec:	4b54      	ldr	r3, [pc, #336]	; (8004540 <EndEffstateManagement+0x1cc>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	f040 808e 	bne.w	8004512 <EndEffstateManagement+0x19e>
							goalIDX++;
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <EndEffstateManagement+0x1d0>)
 80043f8:	f993 3000 	ldrsb.w	r3, [r3]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	b25a      	sxtb	r2, r3
 8004404:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <EndEffstateManagement+0x1d0>)
 8004406:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004408:	e083      	b.n	8004512 <EndEffstateManagement+0x19e>
						EndEffState = idle;
 800440a:	4b46      	ldr	r3, [pc, #280]	; (8004524 <EndEffstateManagement+0x1b0>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
		break;
 8004410:	e07f      	b.n	8004512 <EndEffstateManagement+0x19e>
		case OpenLaser:
			// Open Laser
			I2CTxDataBuffer[0] = 0x45;
 8004412:	4b46      	ldr	r3, [pc, #280]	; (800452c <EndEffstateManagement+0x1b8>)
 8004414:	2245      	movs	r2, #69	; 0x45
 8004416:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004418:	4844      	ldr	r0, [pc, #272]	; (800452c <EndEffstateManagement+0x1b8>)
 800441a:	f7ff ff65 	bl	80042e8 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800441e:	4b44      	ldr	r3, [pc, #272]	; (8004530 <EndEffstateManagement+0x1bc>)
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	d175      	bne.n	8004516 <EndEffstateManagement+0x1a2>
			{
				EndEffState = SetupReadStatus;
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <EndEffstateManagement+0x1b0>)
 800442c:	2203      	movs	r2, #3
 800442e:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <EndEffstateManagement+0x1c4>)
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004436:	e06e      	b.n	8004516 <EndEffstateManagement+0x1a2>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004438:	4b3c      	ldr	r3, [pc, #240]	; (800452c <EndEffstateManagement+0x1b8>)
 800443a:	2223      	movs	r2, #35	; 0x23
 800443c:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800443e:	483b      	ldr	r0, [pc, #236]	; (800452c <EndEffstateManagement+0x1b8>)
 8004440:	f7ff ff52 	bl	80042e8 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004444:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <EndEffstateManagement+0x1bc>)
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b20      	cmp	r3, #32
 800444e:	d164      	bne.n	800451a <EndEffstateManagement+0x1a6>
			{
				EndEffState = ReadStatus;
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <EndEffstateManagement+0x1b0>)
 8004452:	2204      	movs	r2, #4
 8004454:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <EndEffstateManagement+0x1c8>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800445c:	e05d      	b.n	800451a <EndEffstateManagement+0x1a6>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 800445e:	4835      	ldr	r0, [pc, #212]	; (8004534 <EndEffstateManagement+0x1c0>)
 8004460:	f7ff ff68 	bl	8004334 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <EndEffstateManagement+0x1bc>)
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b20      	cmp	r3, #32
 800446e:	d156      	bne.n	800451e <EndEffstateManagement+0x1aa>
			{
				I2CEndEffectorReadFlag =  1;
 8004470:	4b32      	ldr	r3, [pc, #200]	; (800453c <EndEffstateManagement+0x1c8>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <EndEffstateManagement+0x1c0>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b78      	cmp	r3, #120	; 0x78
 800447c:	d11f      	bne.n	80044be <EndEffstateManagement+0x14a>
				{
					EndEffState = idle;
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <EndEffstateManagement+0x1b0>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <EndEffstateManagement+0x1b4>)
 8004486:	2203      	movs	r2, #3
 8004488:	701a      	strb	r2, [r3, #0]
					RobotState = NormM;
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <EndEffstateManagement+0x1d4>)
 800448c:	2202      	movs	r2, #2
 800448e:	701a      	strb	r2, [r3, #0]
					if(goalIDX > goalAmount-1){
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <EndEffstateManagement+0x1d8>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <EndEffstateManagement+0x1d0>)
 8004498:	f993 3000 	ldrsb.w	r3, [r3]
 800449c:	429a      	cmp	r2, r3
 800449e:	dc06      	bgt.n	80044ae <EndEffstateManagement+0x13a>
						goalFlag = 0;
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <EndEffstateManagement+0x1dc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
						doingTaskFlag = 0;
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <EndEffstateManagement+0x1cc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e003      	b.n	80044b6 <EndEffstateManagement+0x142>
					}
					else Robot.RunningFlag = 1;
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <EndEffstateManagement+0x1e0>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					endEffFlag = 0;
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <EndEffstateManagement+0x1e4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 80044bc:	e02f      	b.n	800451e <EndEffstateManagement+0x1aa>
				else if(I2CRxDataBuffer[0] == 0x12)
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <EndEffstateManagement+0x1c0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b12      	cmp	r3, #18
 80044c4:	d109      	bne.n	80044da <EndEffstateManagement+0x166>
					EndEffStatus = Opening;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <EndEffstateManagement+0x1b4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 80044cc:	4b15      	ldr	r3, [pc, #84]	; (8004524 <EndEffstateManagement+0x1b0>)
 80044ce:	2203      	movs	r2, #3
 80044d0:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <EndEffstateManagement+0x1c4>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
			break;
 80044d8:	e021      	b.n	800451e <EndEffstateManagement+0x1aa>
				else if(I2CRxDataBuffer[0] == 0x34)
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <EndEffstateManagement+0x1c0>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b34      	cmp	r3, #52	; 0x34
 80044e0:	d109      	bne.n	80044f6 <EndEffstateManagement+0x182>
					EndEffStatus = Working;
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <EndEffstateManagement+0x1b4>)
 80044e4:	2202      	movs	r2, #2
 80044e6:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <EndEffstateManagement+0x1b0>)
 80044ea:	2203      	movs	r2, #3
 80044ec:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <EndEffstateManagement+0x1c4>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
			break;
 80044f4:	e013      	b.n	800451e <EndEffstateManagement+0x1aa>
				else if(I2CRxDataBuffer[0] == 0x56)
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <EndEffstateManagement+0x1c0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b56      	cmp	r3, #86	; 0x56
 80044fc:	d10f      	bne.n	800451e <EndEffstateManagement+0x1aa>
					EndEffStatus = Closing;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <EndEffstateManagement+0x1b4>)
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <EndEffstateManagement+0x1b0>)
 8004506:	2203      	movs	r2, #3
 8004508:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <EndEffstateManagement+0x1c4>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
			break;
 8004510:	e005      	b.n	800451e <EndEffstateManagement+0x1aa>
		break;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <EndEffstateManagement+0x1ac>
			break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <EndEffstateManagement+0x1ac>
			break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <EndEffstateManagement+0x1ac>
			break;
 800451e:	bf00      	nop
	}
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000000 	.word	0x20000000
 8004528:	20000001 	.word	0x20000001
 800452c:	200008b8 	.word	0x200008b8
 8004530:	20000438 	.word	0x20000438
 8004534:	200008b4 	.word	0x200008b4
 8004538:	200008b2 	.word	0x200008b2
 800453c:	200008b1 	.word	0x200008b1
 8004540:	2000079c 	.word	0x2000079c
 8004544:	20000798 	.word	0x20000798
 8004548:	20000729 	.word	0x20000729
 800454c:	20000797 	.word	0x20000797
 8004550:	20000799 	.word	0x20000799
 8004554:	200006f8 	.word	0x200006f8
 8004558:	2000079a 	.word	0x2000079a

0800455c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	80fb      	strh	r3, [r7, #6]
//	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
//	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d142      	bne.n	80045f4 <HAL_GPIO_EXTI_Callback+0x98>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004570:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004574:	2b01      	cmp	r3, #1
 8004576:	d139      	bne.n	80045ec <HAL_GPIO_EXTI_Callback+0x90>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_GPIO_EXTI_Callback+0xc0>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4928      	ldr	r1, [pc, #160]	; (8004624 <HAL_GPIO_EXTI_Callback+0xc8>)
 8004584:	0083      	lsls	r3, r0, #2
 8004586:	440b      	add	r3, r1
 8004588:	601a      	str	r2, [r3, #0]
			homeFF++;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_GPIO_EXTI_Callback+0xc0>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_GPIO_EXTI_Callback+0xc0>)
 8004594:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_GPIO_EXTI_Callback+0xc0>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d126      	bne.n	80045ec <HAL_GPIO_EXTI_Callback+0x90>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_GPIO_EXTI_Callback+0xc8>)
 80045a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80045a4:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <HAL_GPIO_EXTI_Callback+0xc8>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004628 <HAL_GPIO_EXTI_Callback+0xcc>
 80045b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	dd04      	ble.n	80045c6 <HAL_GPIO_EXTI_Callback+0x6a>
				{
					Robot.HomePositon =  0;
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <HAL_GPIO_EXTI_Callback+0xbc>)
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
 80045c4:	e00e      	b.n	80045e4 <HAL_GPIO_EXTI_Callback+0x88>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <HAL_GPIO_EXTI_Callback+0xc8>)
 80045c8:	ed93 7a00 	vldr	s14, [r3]
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_GPIO_EXTI_Callback+0xc8>)
 80045ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80045d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80045da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_GPIO_EXTI_Callback+0xbc>)
 80045e0:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_GPIO_EXTI_Callback+0xbc>)
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80045ec:	2108      	movs	r1, #8
 80045ee:	480f      	ldr	r0, [pc, #60]	; (800462c <HAL_GPIO_EXTI_Callback+0xd0>)
 80045f0:	f001 fa9f 	bl	8005b32 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d109      	bne.n	800460e <HAL_GPIO_EXTI_Callback+0xb2>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80045fa:	2110      	movs	r1, #16
 80045fc:	480b      	ldr	r0, [pc, #44]	; (800462c <HAL_GPIO_EXTI_Callback+0xd0>)
 80045fe:	f001 fa98 	bl	8005b32 <HAL_GPIO_TogglePin>
		btncheck++;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_GPIO_EXTI_Callback+0xd4>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_GPIO_EXTI_Callback+0xd4>)
 800460c:	701a      	strb	r2, [r3, #0]
	}
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200006f8 	.word	0x200006f8
 800461c:	2000071c 	.word	0x2000071c
 8004620:	200007c0 	.word	0x200007c0
 8004624:	20000720 	.word	0x20000720
 8004628:	43340000 	.word	0x43340000
 800462c:	40020400 	.word	0x40020400
 8004630:	200008b0 	.word	0x200008b0

08004634 <RobotRunToPositon>:
void RobotRunToPositon(float Destination)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	ed87 0a01 	vstr	s0, [r7, #4]
	Robot.GoalPositon = Destination;
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <RobotRunToPositon+0x44>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60d3      	str	r3, [r2, #12]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <RobotRunToPositon+0x44>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <RobotRunToPositon+0x44>)
 800464c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004650:	eef0 0a47 	vmov.f32	s1, s14
 8004654:	eeb0 0a67 	vmov.f32	s0, s15
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <RobotRunToPositon+0x48>)
 800465a:	f7fc ffb9 	bl	80015d0 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.flagStartTime = 1;
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <RobotRunToPositon+0x44>)
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Robot.RunningFlag = 1;
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <RobotRunToPositon+0x44>)
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200006f8 	.word	0x200006f8
 800467c:	200007d0 	.word	0x200007d0

08004680 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800469e:	b672      	cpsid	i
}
 80046a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046a2:	e7fe      	b.n	80046a2 <Error_Handler+0x8>

080046a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_MspInit+0x4c>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <HAL_MspInit+0x4c>)
 80046b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <HAL_MspInit+0x4c>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_MspInit+0x4c>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <HAL_MspInit+0x4c>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_MspInit+0x4c>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80046e2:	2007      	movs	r0, #7
 80046e4:	f000 fc36 	bl	8004f54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800

080046f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <HAL_I2C_MspInit+0xa4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d13c      	bne.n	8004790 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_I2C_MspInit+0xa8>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4a1f      	ldr	r2, [pc, #124]	; (800479c <HAL_I2C_MspInit+0xa8>)
 8004720:	f043 0302 	orr.w	r3, r3, #2
 8004724:	6313      	str	r3, [r2, #48]	; 0x30
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_I2C_MspInit+0xa8>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004738:	2312      	movs	r3, #18
 800473a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004740:	2303      	movs	r3, #3
 8004742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004744:	2304      	movs	r3, #4
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4619      	mov	r1, r3
 800474e:	4814      	ldr	r0, [pc, #80]	; (80047a0 <HAL_I2C_MspInit+0xac>)
 8004750:	f001 f852 	bl	80057f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_I2C_MspInit+0xa8>)
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	4a0f      	ldr	r2, [pc, #60]	; (800479c <HAL_I2C_MspInit+0xa8>)
 800475e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004762:	6413      	str	r3, [r2, #64]	; 0x40
 8004764:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_I2C_MspInit+0xa8>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004770:	2200      	movs	r2, #0
 8004772:	2100      	movs	r1, #0
 8004774:	201f      	movs	r0, #31
 8004776:	f000 fbf8 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800477a:	201f      	movs	r0, #31
 800477c:	f000 fc11 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	2100      	movs	r1, #0
 8004784:	2020      	movs	r0, #32
 8004786:	f000 fbf0 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800478a:	2020      	movs	r0, #32
 800478c:	f000 fc09 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004790:	bf00      	nop
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40005400 	.word	0x40005400
 800479c:	40023800 	.word	0x40023800
 80047a0:	40020400 	.word	0x40020400

080047a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <HAL_TIM_PWM_MspInit+0x48>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d115      	bne.n	80047e2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6453      	str	r3, [r2, #68]	; 0x44
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80047d2:	2200      	movs	r2, #0
 80047d4:	2100      	movs	r1, #0
 80047d6:	201a      	movs	r0, #26
 80047d8:	f000 fbc7 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047dc:	201a      	movs	r0, #26
 80047de:	f000 fbe0 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40023800 	.word	0x40023800

080047f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d12b      	bne.n	800486e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6313      	str	r3, [r2, #48]	; 0x30
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_TIM_Encoder_MspInit+0x84>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800484e:	2303      	movs	r3, #3
 8004850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	2302      	movs	r3, #2
 8004854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800485e:	2301      	movs	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	4619      	mov	r1, r3
 8004868:	4804      	ldr	r0, [pc, #16]	; (800487c <HAL_TIM_Encoder_MspInit+0x88>)
 800486a:	f000 ffc5 	bl	80057f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800486e:	bf00      	nop
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	40020000 	.word	0x40020000

08004880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_TIM_Base_MspInit+0xb8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d116      	bne.n	80048c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a28      	ldr	r2, [pc, #160]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	201d      	movs	r0, #29
 80048b4:	f000 fb59 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048b8:	201d      	movs	r0, #29
 80048ba:	f000 fb72 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80048be:	e036      	b.n	800492e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_TIM_Base_MspInit+0xc0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d116      	bne.n	80048f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	6413      	str	r3, [r2, #64]	; 0x40
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2100      	movs	r1, #0
 80048ea:	201e      	movs	r0, #30
 80048ec:	f000 fb3d 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80048f0:	201e      	movs	r0, #30
 80048f2:	f000 fb56 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
}
 80048f6:	e01a      	b.n	800492e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_TIM_Base_MspInit+0xc4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d115      	bne.n	800492e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	4a0c      	ldr	r2, [pc, #48]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 800490c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004910:	6453      	str	r3, [r2, #68]	; 0x44
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_TIM_Base_MspInit+0xbc>)
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	201a      	movs	r0, #26
 8004924:	f000 fb21 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004928:	201a      	movs	r0, #26
 800492a:	f000 fb3a 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40000400 	.word	0x40000400
 800493c:	40023800 	.word	0x40023800
 8004940:	40000800 	.word	0x40000800
 8004944:	40014800 	.word	0x40014800

08004948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <HAL_TIM_MspPostInit+0x68>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d11e      	bne.n	80049a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_TIM_MspPostInit+0x6c>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HAL_TIM_MspPostInit+0x6c>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_TIM_MspPostInit+0x6c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004994:	2300      	movs	r3, #0
 8004996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004998:	2301      	movs	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	4619      	mov	r1, r3
 80049a2:	4805      	ldr	r0, [pc, #20]	; (80049b8 <HAL_TIM_MspPostInit+0x70>)
 80049a4:	f000 ff28 	bl	80057f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40020000 	.word	0x40020000

080049bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4b      	ldr	r2, [pc, #300]	; (8004b08 <HAL_UART_MspInit+0x14c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f040 8090 	bne.w	8004b00 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <HAL_UART_MspInit+0x150>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	4a48      	ldr	r2, [pc, #288]	; (8004b0c <HAL_UART_MspInit+0x150>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ee:	6413      	str	r3, [r2, #64]	; 0x40
 80049f0:	4b46      	ldr	r3, [pc, #280]	; (8004b0c <HAL_UART_MspInit+0x150>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <HAL_UART_MspInit+0x150>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	4a41      	ldr	r2, [pc, #260]	; (8004b0c <HAL_UART_MspInit+0x150>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0c:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <HAL_UART_MspInit+0x150>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a18:	230c      	movs	r3, #12
 8004a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a24:	2303      	movs	r3, #3
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a28:	2307      	movs	r3, #7
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4619      	mov	r1, r3
 8004a32:	4837      	ldr	r0, [pc, #220]	; (8004b10 <HAL_UART_MspInit+0x154>)
 8004a34:	f000 fee0 	bl	80057f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a38:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a3a:	4a37      	ldr	r2, [pc, #220]	; (8004b18 <HAL_UART_MspInit+0x15c>)
 8004a3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a3e:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a44:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4c:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a60:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a6c:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a78:	4826      	ldr	r0, [pc, #152]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a7a:	f000 faad 	bl	8004fd8 <HAL_DMA_Init>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004a84:	f7ff fe09 	bl	800469a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a8e:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_UART_MspInit+0x158>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004a96:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <HAL_UART_MspInit+0x164>)
 8004a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004a9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004aa4:	2240      	movs	r2, #64	; 0x40
 8004aa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ad4:	4811      	ldr	r0, [pc, #68]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ad6:	f000 fa7f 	bl	8004fd8 <HAL_DMA_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004ae0:	f7ff fddb 	bl	800469a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <HAL_UART_MspInit+0x160>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	2026      	movs	r0, #38	; 0x26
 8004af6:	f000 fa38 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004afa:	2026      	movs	r0, #38	; 0x26
 8004afc:	f000 fa51 	bl	8004fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b00:	bf00      	nop
 8004b02:	3728      	adds	r7, #40	; 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40004400 	.word	0x40004400
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	20000638 	.word	0x20000638
 8004b18:	40026088 	.word	0x40026088
 8004b1c:	20000698 	.word	0x20000698
 8004b20:	400260a0 	.word	0x400260a0

08004b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b28:	e7fe      	b.n	8004b28 <NMI_Handler+0x4>

08004b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b2e:	e7fe      	b.n	8004b2e <HardFault_Handler+0x4>

08004b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b34:	e7fe      	b.n	8004b34 <MemManage_Handler+0x4>

08004b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b3a:	e7fe      	b.n	8004b3a <BusFault_Handler+0x4>

08004b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <UsageFault_Handler+0x4>

08004b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b70:	f000 f900 	bl	8004d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <SysTick_Handler+0x18>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	4a02      	ldr	r2, [pc, #8]	; (8004b84 <SysTick_Handler+0x18>)
 8004b7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000774 	.word	0x20000774

08004b88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <DMA1_Stream5_IRQHandler+0x10>)
 8004b8e:	f000 fbbb 	bl	8005308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000638 	.word	0x20000638

08004b9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <DMA1_Stream6_IRQHandler+0x10>)
 8004ba2:	f000 fbb1 	bl	8005308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000698 	.word	0x20000698

08004bb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8004bb4:	2020      	movs	r0, #32
 8004bb6:	f000 ffd7 	bl	8005b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bc4:	4803      	ldr	r0, [pc, #12]	; (8004bd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004bc6:	f003 fed9 	bl	800897c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004bca:	4803      	ldr	r0, [pc, #12]	; (8004bd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004bcc:	f003 fed6 	bl	800897c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2000048c 	.word	0x2000048c
 8004bd8:	200005ac 	.word	0x200005ac

08004bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004be0:	4802      	ldr	r0, [pc, #8]	; (8004bec <TIM3_IRQHandler+0x10>)
 8004be2:	f003 fecb 	bl	800897c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	2000051c 	.word	0x2000051c

08004bf0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004bf4:	4802      	ldr	r0, [pc, #8]	; (8004c00 <TIM4_IRQHandler+0x10>)
 8004bf6:	f003 fec1 	bl	800897c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000564 	.word	0x20000564

08004c04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004c08:	4802      	ldr	r0, [pc, #8]	; (8004c14 <I2C1_EV_IRQHandler+0x10>)
 8004c0a:	f001 fa5d 	bl	80060c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000438 	.word	0x20000438

08004c18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004c1c:	4802      	ldr	r0, [pc, #8]	; (8004c28 <I2C1_ER_IRQHandler+0x10>)
 8004c1e:	f001 fbc4 	bl	80063aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000438 	.word	0x20000438

08004c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c30:	4802      	ldr	r0, [pc, #8]	; (8004c3c <USART2_IRQHandler+0x10>)
 8004c32:	f004 fe2f 	bl	8009894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200005f4 	.word	0x200005f4

08004c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8004c44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c48:	f000 ff8e 	bl	8005b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c50:	f000 ff8a 	bl	8005b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <SystemInit+0x20>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <SystemInit+0x20>)
 8004c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <Reset_Handler>:
 8004c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb4 <LoopFillZerobss+0x12>
 8004c80:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <LoopFillZerobss+0x16>)
 8004c82:	490e      	ldr	r1, [pc, #56]	; (8004cbc <LoopFillZerobss+0x1a>)
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <LoopFillZerobss+0x1e>)
 8004c86:	2300      	movs	r3, #0
 8004c88:	e002      	b.n	8004c90 <LoopCopyDataInit>

08004c8a <CopyDataInit>:
 8004c8a:	58d4      	ldr	r4, [r2, r3]
 8004c8c:	50c4      	str	r4, [r0, r3]
 8004c8e:	3304      	adds	r3, #4

08004c90 <LoopCopyDataInit>:
 8004c90:	18c4      	adds	r4, r0, r3
 8004c92:	428c      	cmp	r4, r1
 8004c94:	d3f9      	bcc.n	8004c8a <CopyDataInit>
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <LoopFillZerobss+0x22>)
 8004c98:	4c0b      	ldr	r4, [pc, #44]	; (8004cc8 <LoopFillZerobss+0x26>)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e001      	b.n	8004ca2 <LoopFillZerobss>

08004c9e <FillZerobss>:
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	3204      	adds	r2, #4

08004ca2 <LoopFillZerobss>:
 8004ca2:	42a2      	cmp	r2, r4
 8004ca4:	d3fb      	bcc.n	8004c9e <FillZerobss>
 8004ca6:	f7ff ffd7 	bl	8004c58 <SystemInit>
 8004caa:	f006 f9b5 	bl	800b018 <__libc_init_array>
 8004cae:	f7fd ff15 	bl	8002adc <main>
 8004cb2:	4770      	bx	lr
 8004cb4:	20020000 	.word	0x20020000
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	20000418 	.word	0x20000418
 8004cc0:	0800b0d4 	.word	0x0800b0d4
 8004cc4:	20000418 	.word	0x20000418
 8004cc8:	200008c4 	.word	0x200008c4

08004ccc <ADC_IRQHandler>:
 8004ccc:	e7fe      	b.n	8004ccc <ADC_IRQHandler>
	...

08004cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <HAL_Init+0x40>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <HAL_Init+0x40>)
 8004cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_Init+0x40>)
 8004ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_Init+0x40>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <HAL_Init+0x40>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f000 f92b 	bl	8004f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f000 f808 	bl	8004d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d04:	f7ff fcce 	bl	80046a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_InitTick+0x54>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_InitTick+0x58>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	4619      	mov	r1, r3
 8004d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f943 	bl	8004fbe <HAL_SYSTICK_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00e      	b.n	8004d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b0f      	cmp	r3, #15
 8004d46:	d80a      	bhi.n	8004d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	f000 f90b 	bl	8004f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d54:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <HAL_InitTick+0x5c>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	2000040c 	.word	0x2000040c
 8004d6c:	20000414 	.word	0x20000414
 8004d70:	20000410 	.word	0x20000410

08004d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_IncTick+0x20>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_IncTick+0x24>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_IncTick+0x24>)
 8004d86:	6013      	str	r3, [r2, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000414 	.word	0x20000414
 8004d98:	200008c0 	.word	0x200008c0

08004d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_GetTick+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	200008c0 	.word	0x200008c0

08004db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004de6:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <__NVIC_SetPriorityGrouping+0x44>)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	60d3      	str	r3, [r2, #12]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <__NVIC_GetPriorityGrouping+0x18>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	0a1b      	lsrs	r3, r3, #8
 8004e06:	f003 0307 	and.w	r3, r3, #7
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db0b      	blt.n	8004e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	4907      	ldr	r1, [pc, #28]	; (8004e50 <__NVIC_EnableIRQ+0x38>)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	2001      	movs	r0, #1
 8004e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e100 	.word	0xe000e100

08004e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	db0a      	blt.n	8004e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <__NVIC_SetPriority+0x4c>)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	440b      	add	r3, r1
 8004e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e7c:	e00a      	b.n	8004e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <__NVIC_SetPriority+0x50>)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	761a      	strb	r2, [r3, #24]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e100 	.word	0xe000e100
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f1c3 0307 	rsb	r3, r3, #7
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf28      	it	cs
 8004ec6:	2304      	movcs	r3, #4
 8004ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d902      	bls.n	8004ed8 <NVIC_EncodePriority+0x30>
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3b03      	subs	r3, #3
 8004ed6:	e000      	b.n	8004eda <NVIC_EncodePriority+0x32>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	401a      	ands	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43d9      	mvns	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	4313      	orrs	r3, r2
         );
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3724      	adds	r7, #36	; 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f20:	d301      	bcc.n	8004f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f22:	2301      	movs	r3, #1
 8004f24:	e00f      	b.n	8004f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <SysTick_Config+0x40>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f2e:	210f      	movs	r1, #15
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	f7ff ff8e 	bl	8004e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Config+0x40>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <SysTick_Config+0x40>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff29 	bl	8004db4 <__NVIC_SetPriorityGrouping>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f7c:	f7ff ff3e 	bl	8004dfc <__NVIC_GetPriorityGrouping>
 8004f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	6978      	ldr	r0, [r7, #20]
 8004f88:	f7ff ff8e 	bl	8004ea8 <NVIC_EncodePriority>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ff5d 	bl	8004e54 <__NVIC_SetPriority>
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff31 	bl	8004e18 <__NVIC_EnableIRQ>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ffa2 	bl	8004f10 <SysTick_Config>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7ff feda 	bl	8004d9c <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e099      	b.n	8005128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005014:	e00f      	b.n	8005036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005016:	f7ff fec1 	bl	8004d9c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b05      	cmp	r3, #5
 8005022:	d908      	bls.n	8005036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e078      	b.n	8005128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e8      	bne.n	8005016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_DMA_Init+0x158>)
 8005050:	4013      	ands	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4313      	orrs	r3, r2
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d117      	bne.n	80050fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb0f 	bl	8005700 <DMA_CheckFifoParam>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050f6:	2301      	movs	r3, #1
 80050f8:	e016      	b.n	8005128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fac6 	bl	8005694 <DMA_CalcBaseAndBitshift>
 8005108:	4603      	mov	r3, r0
 800510a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	223f      	movs	r2, #63	; 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	f010803f 	.word	0xf010803f

08005134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_DMA_Start_IT+0x26>
 8005156:	2302      	movs	r3, #2
 8005158:	e040      	b.n	80051dc <HAL_DMA_Start_IT+0xa8>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d12f      	bne.n	80051ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fa58 	bl	8005638 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	223f      	movs	r2, #63	; 0x3f
 800518e:	409a      	lsls	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0216 	orr.w	r2, r2, #22
 80051a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e005      	b.n	80051da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051f2:	f7ff fdd3 	bl	8004d9c <HAL_GetTick>
 80051f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d008      	beq.n	8005216 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e052      	b.n	80052bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0216 	bic.w	r2, r2, #22
 8005224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_DMA_Abort+0x62>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0208 	bic.w	r2, r2, #8
 8005254:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005266:	e013      	b.n	8005290 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005268:	f7ff fd98 	bl	8004d9c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b05      	cmp	r3, #5
 8005274:	d90c      	bls.n	8005290 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2203      	movs	r2, #3
 8005280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e015      	b.n	80052bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e4      	bne.n	8005268 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	223f      	movs	r2, #63	; 0x3f
 80052a4:	409a      	lsls	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d004      	beq.n	80052e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2280      	movs	r2, #128	; 0x80
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e00c      	b.n	80052fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2205      	movs	r2, #5
 80052e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005314:	4b8e      	ldr	r3, [pc, #568]	; (8005550 <HAL_DMA_IRQHandler+0x248>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a8e      	ldr	r2, [pc, #568]	; (8005554 <HAL_DMA_IRQHandler+0x24c>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0a9b      	lsrs	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	2208      	movs	r2, #8
 8005334:	409a      	lsls	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01a      	beq.n	8005374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2208      	movs	r2, #8
 8005362:	409a      	lsls	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	2201      	movs	r2, #1
 8005398:	409a      	lsls	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0202 	orr.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ae:	2204      	movs	r2, #4
 80053b0:	409a      	lsls	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d012      	beq.n	80053e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2204      	movs	r2, #4
 80053ce:	409a      	lsls	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	2210      	movs	r2, #16
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d043      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03c      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	2210      	movs	r2, #16
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d024      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
 8005436:	e01f      	b.n	8005478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
 8005448:	e016      	b.n	8005478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d107      	bne.n	8005468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0208 	bic.w	r2, r2, #8
 8005466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2220      	movs	r2, #32
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 808f 	beq.w	80055a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8087 	beq.w	80055a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549e:	2220      	movs	r2, #32
 80054a0:	409a      	lsls	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d136      	bne.n	8005520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0216 	bic.w	r2, r2, #22
 80054c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <HAL_DMA_IRQHandler+0x1da>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0208 	bic.w	r2, r2, #8
 80054f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	223f      	movs	r2, #63	; 0x3f
 80054f8:	409a      	lsls	r2, r3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	2b00      	cmp	r3, #0
 8005514:	d07e      	beq.n	8005614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
        }
        return;
 800551e:	e079      	b.n	8005614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01d      	beq.n	800556a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	2b00      	cmp	r3, #0
 8005542:	d031      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
 800554c:	e02c      	b.n	80055a8 <HAL_DMA_IRQHandler+0x2a0>
 800554e:	bf00      	nop
 8005550:	2000040c 	.word	0x2000040c
 8005554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
 8005568:	e01e      	b.n	80055a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0210 	bic.w	r2, r2, #16
 8005586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d032      	beq.n	8005616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d022      	beq.n	8005602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2205      	movs	r2, #5
 80055c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d307      	bcc.n	80055f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f2      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x2cc>
 80055ee:	e000      	b.n	80055f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
 8005612:	e000      	b.n	8005616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005614:	bf00      	nop
    }
  }
}
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562a:	b2db      	uxtb	r3, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005654:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d108      	bne.n	8005678 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005676:	e007      	b.n	8005688 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3b10      	subs	r3, #16
 80056a4:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <DMA_CalcBaseAndBitshift+0x64>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <DMA_CalcBaseAndBitshift+0x68>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d909      	bls.n	80056d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	1d1a      	adds	r2, r3, #4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	659a      	str	r2, [r3, #88]	; 0x58
 80056d4:	e007      	b.n	80056e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	aaaaaaab 	.word	0xaaaaaaab
 80056fc:	0800b0bc 	.word	0x0800b0bc

08005700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d11f      	bne.n	800575a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d856      	bhi.n	80057ce <DMA_CheckFifoParam+0xce>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <DMA_CheckFifoParam+0x28>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005739 	.word	0x08005739
 800572c:	0800574b 	.word	0x0800574b
 8005730:	08005739 	.word	0x08005739
 8005734:	080057cf 	.word	0x080057cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d046      	beq.n	80057d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005748:	e043      	b.n	80057d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005752:	d140      	bne.n	80057d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005758:	e03d      	b.n	80057d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d121      	bne.n	80057a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d837      	bhi.n	80057da <DMA_CheckFifoParam+0xda>
 800576a:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <DMA_CheckFifoParam+0x70>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005781 	.word	0x08005781
 8005774:	08005787 	.word	0x08005787
 8005778:	08005781 	.word	0x08005781
 800577c:	08005799 	.word	0x08005799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e030      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d025      	beq.n	80057de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005796:	e022      	b.n	80057de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a0:	d11f      	bne.n	80057e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057a6:	e01c      	b.n	80057e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d903      	bls.n	80057b6 <DMA_CheckFifoParam+0xb6>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d003      	beq.n	80057bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057b4:	e018      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      break;
 80057ba:	e015      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e00b      	b.n	80057e6 <DMA_CheckFifoParam+0xe6>
      break;
 80057ce:	bf00      	nop
 80057d0:	e00a      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;
 80057d2:	bf00      	nop
 80057d4:	e008      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;
 80057d6:	bf00      	nop
 80057d8:	e006      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <DMA_CheckFifoParam+0xe8>
      break;
 80057e6:	bf00      	nop
    }
  } 
  
  return status; 
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e159      	b.n	8005ac8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005814:	2201      	movs	r2, #1
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4013      	ands	r3, r2
 8005826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	429a      	cmp	r2, r3
 800582e:	f040 8148 	bne.w	8005ac2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d005      	beq.n	800584a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005846:	2b02      	cmp	r3, #2
 8005848:	d130      	bne.n	80058ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	2203      	movs	r2, #3
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005880:	2201      	movs	r2, #1
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 0201 	and.w	r2, r3, #1
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d017      	beq.n	80058e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	2203      	movs	r2, #3
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d123      	bne.n	800593c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	08da      	lsrs	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3208      	adds	r2, #8
 80058fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	220f      	movs	r2, #15
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	08da      	lsrs	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3208      	adds	r2, #8
 8005936:	69b9      	ldr	r1, [r7, #24]
 8005938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	2203      	movs	r2, #3
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0203 	and.w	r2, r3, #3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80a2 	beq.w	8005ac2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	4b57      	ldr	r3, [pc, #348]	; (8005ae0 <HAL_GPIO_Init+0x2e8>)
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	4a56      	ldr	r2, [pc, #344]	; (8005ae0 <HAL_GPIO_Init+0x2e8>)
 8005988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800598c:	6453      	str	r3, [r2, #68]	; 0x44
 800598e:	4b54      	ldr	r3, [pc, #336]	; (8005ae0 <HAL_GPIO_Init+0x2e8>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800599a:	4a52      	ldr	r2, [pc, #328]	; (8005ae4 <HAL_GPIO_Init+0x2ec>)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	3302      	adds	r3, #2
 80059a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	220f      	movs	r2, #15
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a49      	ldr	r2, [pc, #292]	; (8005ae8 <HAL_GPIO_Init+0x2f0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d019      	beq.n	80059fa <HAL_GPIO_Init+0x202>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a48      	ldr	r2, [pc, #288]	; (8005aec <HAL_GPIO_Init+0x2f4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <HAL_GPIO_Init+0x1fe>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a47      	ldr	r2, [pc, #284]	; (8005af0 <HAL_GPIO_Init+0x2f8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00d      	beq.n	80059f2 <HAL_GPIO_Init+0x1fa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a46      	ldr	r2, [pc, #280]	; (8005af4 <HAL_GPIO_Init+0x2fc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <HAL_GPIO_Init+0x1f6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a45      	ldr	r2, [pc, #276]	; (8005af8 <HAL_GPIO_Init+0x300>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_GPIO_Init+0x1f2>
 80059e6:	2304      	movs	r3, #4
 80059e8:	e008      	b.n	80059fc <HAL_GPIO_Init+0x204>
 80059ea:	2307      	movs	r3, #7
 80059ec:	e006      	b.n	80059fc <HAL_GPIO_Init+0x204>
 80059ee:	2303      	movs	r3, #3
 80059f0:	e004      	b.n	80059fc <HAL_GPIO_Init+0x204>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e002      	b.n	80059fc <HAL_GPIO_Init+0x204>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_GPIO_Init+0x204>
 80059fa:	2300      	movs	r3, #0
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	f002 0203 	and.w	r2, r2, #3
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	4093      	lsls	r3, r2
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a0c:	4935      	ldr	r1, [pc, #212]	; (8005ae4 <HAL_GPIO_Init+0x2ec>)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	089b      	lsrs	r3, r3, #2
 8005a12:	3302      	adds	r3, #2
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a3e:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a44:	4b2d      	ldr	r3, [pc, #180]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a68:	4a24      	ldr	r2, [pc, #144]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a6e:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a92:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005abc:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <HAL_GPIO_Init+0x304>)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b0f      	cmp	r3, #15
 8005acc:	f67f aea2 	bls.w	8005814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	3724      	adds	r7, #36	; 0x24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	40020000 	.word	0x40020000
 8005aec:	40020400 	.word	0x40020400
 8005af0:	40020800 	.word	0x40020800
 8005af4:	40020c00 	.word	0x40020c00
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b10:	787b      	ldrb	r3, [r7, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b1c:	e003      	b.n	8005b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b1e:	887b      	ldrh	r3, [r7, #2]
 8005b20:	041a      	lsls	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b44:	887a      	ldrh	r2, [r7, #2]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	041a      	lsls	r2, r3, #16
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	400b      	ands	r3, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b7e:	4a05      	ldr	r2, [pc, #20]	; (8005b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fce8 	bl	800455c <HAL_GPIO_EXTI_Callback>
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40013c00 	.word	0x40013c00

08005b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e12b      	b.n	8005e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe fd98 	bl	80046f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f002 fbb0 	bl	8008360 <HAL_RCC_GetPCLK1Freq>
 8005c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4a81      	ldr	r2, [pc, #516]	; (8005e0c <HAL_I2C_Init+0x274>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d807      	bhi.n	8005c1c <HAL_I2C_Init+0x84>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a80      	ldr	r2, [pc, #512]	; (8005e10 <HAL_I2C_Init+0x278>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	bf94      	ite	ls
 8005c14:	2301      	movls	r3, #1
 8005c16:	2300      	movhi	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e006      	b.n	8005c2a <HAL_I2C_Init+0x92>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a7d      	ldr	r2, [pc, #500]	; (8005e14 <HAL_I2C_Init+0x27c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bf94      	ite	ls
 8005c24:	2301      	movls	r3, #1
 8005c26:	2300      	movhi	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0e7      	b.n	8005e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a78      	ldr	r2, [pc, #480]	; (8005e18 <HAL_I2C_Init+0x280>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0c9b      	lsrs	r3, r3, #18
 8005c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a6a      	ldr	r2, [pc, #424]	; (8005e0c <HAL_I2C_Init+0x274>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <HAL_I2C_Init+0xd4>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	e009      	b.n	8005c80 <HAL_I2C_Init+0xe8>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	4a69      	ldr	r2, [pc, #420]	; (8005e1c <HAL_I2C_Init+0x284>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	099b      	lsrs	r3, r3, #6
 8005c7e:	3301      	adds	r3, #1
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	495c      	ldr	r1, [pc, #368]	; (8005e0c <HAL_I2C_Init+0x274>)
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	d819      	bhi.n	8005cd4 <HAL_I2C_Init+0x13c>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1e59      	subs	r1, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_I2C_Init+0x138>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1e59      	subs	r1, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cce:	e051      	b.n	8005d74 <HAL_I2C_Init+0x1dc>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	e04f      	b.n	8005d74 <HAL_I2C_Init+0x1dc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d111      	bne.n	8005d00 <HAL_I2C_Init+0x168>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1e58      	subs	r0, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6859      	ldr	r1, [r3, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	440b      	add	r3, r1
 8005cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	e012      	b.n	8005d26 <HAL_I2C_Init+0x18e>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1e58      	subs	r0, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6859      	ldr	r1, [r3, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	0099      	lsls	r1, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d16:	3301      	adds	r3, #1
 8005d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_I2C_Init+0x196>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e022      	b.n	8005d74 <HAL_I2C_Init+0x1dc>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10e      	bne.n	8005d54 <HAL_I2C_Init+0x1bc>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1e58      	subs	r0, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6859      	ldr	r1, [r3, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	440b      	add	r3, r1
 8005d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d52:	e00f      	b.n	8005d74 <HAL_I2C_Init+0x1dc>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1e58      	subs	r0, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	0099      	lsls	r1, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	6809      	ldr	r1, [r1, #0]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6911      	ldr	r1, [r2, #16]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68d2      	ldr	r2, [r2, #12]
 8005dae:	4311      	orrs	r1, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	000186a0 	.word	0x000186a0
 8005e10:	001e847f 	.word	0x001e847f
 8005e14:	003d08ff 	.word	0x003d08ff
 8005e18:	431bde83 	.word	0x431bde83
 8005e1c:	10624dd3 	.word	0x10624dd3

08005e20 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	817b      	strh	r3, [r7, #10]
 8005e30:	4613      	mov	r3, r2
 8005e32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	f040 8085 	bne.w	8005f50 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e46:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	4a45      	ldr	r2, [pc, #276]	; (8005f64 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	0a1a      	lsrs	r2, r3, #8
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009a      	lsls	r2, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d116      	bne.n	8005e9a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e05b      	b.n	8005f52 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d0db      	beq.n	8005e60 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_I2C_Master_Transmit_IT+0x96>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e04d      	b.n	8005f52 <HAL_I2C_Master_Transmit_IT+0x132>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d007      	beq.n	8005edc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2221      	movs	r2, #33	; 0x21
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	893a      	ldrh	r2, [r7, #8]
 8005f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005f1e:	897a      	ldrh	r2, [r7, #10]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005f3a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	2000040c 	.word	0x2000040c
 8005f64:	14f8b589 	.word	0x14f8b589
 8005f68:	ffff0000 	.word	0xffff0000

08005f6c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	461a      	mov	r2, r3
 8005f78:	460b      	mov	r3, r1
 8005f7a:	817b      	strh	r3, [r7, #10]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	f040 808d 	bne.w	80060ac <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f92:	4b4a      	ldr	r3, [pc, #296]	; (80060bc <HAL_I2C_Master_Receive_IT+0x150>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	4a49      	ldr	r2, [pc, #292]	; (80060c0 <HAL_I2C_Master_Receive_IT+0x154>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0a1a      	lsrs	r2, r3, #8
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009a      	lsls	r2, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d116      	bne.n	8005fe6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e063      	b.n	80060ae <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d0db      	beq.n	8005fac <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Master_Receive_IT+0x96>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e055      	b.n	80060ae <HAL_I2C_Master_Receive_IT+0x142>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d007      	beq.n	8006028 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2222      	movs	r2, #34	; 0x22
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2210      	movs	r2, #16
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	893a      	ldrh	r2, [r7, #8]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_I2C_Master_Receive_IT+0x158>)
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800606a:	897a      	ldrh	r2, [r7, #10]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006086:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006096:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000040c 	.word	0x2000040c
 80060c0:	14f8b589 	.word	0x14f8b589
 80060c4:	ffff0000 	.word	0xffff0000

080060c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d003      	beq.n	8006100 <HAL_I2C_EV_IRQHandler+0x38>
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	f040 80c1 	bne.w	8006282 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <HAL_I2C_EV_IRQHandler+0x6e>
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006120:	d003      	beq.n	800612a <HAL_I2C_EV_IRQHandler+0x62>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006128:	d101      	bne.n	800612e <HAL_I2C_EV_IRQHandler+0x66>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <HAL_I2C_EV_IRQHandler+0x68>
 800612e:	2300      	movs	r3, #0
 8006130:	2b01      	cmp	r3, #1
 8006132:	f000 8132 	beq.w	800639a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0x92>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	0a5b      	lsrs	r3, r3, #9
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d006      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fc7b 	bl	8007a48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd83 	bl	8006c5e <I2C_Master_SB>
 8006158:	e092      	b.n	8006280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	08db      	lsrs	r3, r3, #3
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_I2C_EV_IRQHandler+0xb2>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fdf9 	bl	8006d6a <I2C_Master_ADD10>
 8006178:	e082      	b.n	8006280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_I2C_EV_IRQHandler+0xd2>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fe13 	bl	8006dbe <I2C_Master_ADDR>
 8006198:	e072      	b.n	8006280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03b      	beq.n	800621e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b4:	f000 80f3 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	09db      	lsrs	r3, r3, #7
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00f      	beq.n	80061e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	0a9b      	lsrs	r3, r3, #10
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9f3 	bl	80065c8 <I2C_MasterTransmit_TXE>
 80061e2:	e04d      	b.n	8006280 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80d6 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	0a5b      	lsrs	r3, r3, #9
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80cf 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d103      	bne.n	800620e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa7a 	bl	8006700 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800620c:	e0c7      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	f040 80c4 	bne.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fae8 	bl	80067ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800621c:	e0bf      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622c:	f000 80b7 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <HAL_I2C_EV_IRQHandler+0x194>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	0a9b      	lsrs	r3, r3, #10
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_I2C_EV_IRQHandler+0x194>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb5d 	bl	8006914 <I2C_MasterReceive_RXNE>
 800625a:	e011      	b.n	8006280 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 809a 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	0a5b      	lsrs	r3, r3, #9
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8093 	beq.w	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc06 	bl	8006a8a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800627e:	e08e      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006280:	e08d      	b.n	800639e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	e007      	b.n	80062a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d012      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	0a5b      	lsrs	r3, r3, #9
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ffc4 	bl	800725c <I2C_Slave_ADDR>
 80062d4:	e066      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	0a5b      	lsrs	r3, r3, #9
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fffe 	bl	80072f0 <I2C_Slave_STOPF>
 80062f4:	e056      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b21      	cmp	r3, #33	; 0x21
 80062fa:	d002      	beq.n	8006302 <HAL_I2C_EV_IRQHandler+0x23a>
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b29      	cmp	r3, #41	; 0x29
 8006300:	d125      	bne.n	800634e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00f      	beq.n	800632e <HAL_I2C_EV_IRQHandler+0x266>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	0a9b      	lsrs	r3, r3, #10
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_I2C_EV_IRQHandler+0x266>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 feda 	bl	80070e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632c:	e039      	b.n	80063a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d033      	beq.n	80063a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	0a5b      	lsrs	r3, r3, #9
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02d      	beq.n	80063a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 ff07 	bl	800715a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800634c:	e029      	b.n	80063a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	099b      	lsrs	r3, r3, #6
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00f      	beq.n	800637a <HAL_I2C_EV_IRQHandler+0x2b2>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	0a9b      	lsrs	r3, r3, #10
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 ff12 	bl	800719c <I2C_SlaveReceive_RXNE>
 8006378:	e014      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	0a5b      	lsrs	r3, r3, #9
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 ff40 	bl	8007218 <I2C_SlaveReceive_BTF>
 8006398:	e004      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08a      	sub	sp, #40	; 0x28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	0a1b      	lsrs	r3, r3, #8
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00e      	beq.n	80063f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	0a5b      	lsrs	r3, r3, #9
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <HAL_I2C_ER_IRQHandler+0x78>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	f043 0302 	orr.w	r3, r3, #2
 8006416:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006420:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	0a9b      	lsrs	r3, r3, #10
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d03f      	beq.n	80064ae <HAL_I2C_ER_IRQHandler+0x104>
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d039      	beq.n	80064ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800643a:	7efb      	ldrb	r3, [r7, #27]
 800643c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006454:	7ebb      	ldrb	r3, [r7, #26]
 8006456:	2b20      	cmp	r3, #32
 8006458:	d112      	bne.n	8006480 <HAL_I2C_ER_IRQHandler+0xd6>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10f      	bne.n	8006480 <HAL_I2C_ER_IRQHandler+0xd6>
 8006460:	7cfb      	ldrb	r3, [r7, #19]
 8006462:	2b21      	cmp	r3, #33	; 0x21
 8006464:	d008      	beq.n	8006478 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	2b29      	cmp	r3, #41	; 0x29
 800646a:	d005      	beq.n	8006478 <HAL_I2C_ER_IRQHandler+0xce>
 800646c:	7cfb      	ldrb	r3, [r7, #19]
 800646e:	2b28      	cmp	r3, #40	; 0x28
 8006470:	d106      	bne.n	8006480 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b21      	cmp	r3, #33	; 0x21
 8006476:	d103      	bne.n	8006480 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 f869 	bl	8007550 <I2C_Slave_AF>
 800647e:	e016      	b.n	80064ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006488:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006492:	7efb      	ldrb	r3, [r7, #27]
 8006494:	2b10      	cmp	r3, #16
 8006496:	d002      	beq.n	800649e <HAL_I2C_ER_IRQHandler+0xf4>
 8006498:	7efb      	ldrb	r3, [r7, #27]
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d107      	bne.n	80064ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	0adb      	lsrs	r3, r3, #11
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80064d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f8a0 	bl	8007630 <I2C_ITError>
  }
}
 80064f0:	bf00      	nop
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
 8006554:	4613      	mov	r3, r2
 8006556:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d150      	bne.n	8006690 <I2C_MasterTransmit_TXE+0xc8>
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b21      	cmp	r3, #33	; 0x21
 80065f2:	d14d      	bne.n	8006690 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d01d      	beq.n	8006636 <I2C_MasterTransmit_TXE+0x6e>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d01a      	beq.n	8006636 <I2C_MasterTransmit_TXE+0x6e>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006606:	d016      	beq.n	8006636 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006616:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2211      	movs	r2, #17
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff ff62 	bl	80064f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006634:	e060      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006644:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d107      	bne.n	8006680 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff7d 	bl	8006578 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800667e:	e03b      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff35 	bl	80064f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800668e:	e033      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b21      	cmp	r3, #33	; 0x21
 8006694:	d005      	beq.n	80066a2 <I2C_MasterTransmit_TXE+0xda>
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d12d      	bne.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b22      	cmp	r3, #34	; 0x22
 80066a0:	d12a      	bne.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80066bc:	e01c      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d103      	bne.n	80066d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f88e 	bl	80067ec <I2C_MemoryTransmit_TXE_BTF>
}
 80066d0:	e012      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066f6:	e7ff      	b.n	80066f8 <I2C_MasterTransmit_TXE+0x130>
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b21      	cmp	r3, #33	; 0x21
 8006718:	d164      	bne.n	80067e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d012      	beq.n	800674a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006748:	e04c      	b.n	80067e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d01d      	beq.n	800678c <I2C_MasterTransmit_BTF+0x8c>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b20      	cmp	r3, #32
 8006754:	d01a      	beq.n	800678c <I2C_MasterTransmit_BTF+0x8c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800675c:	d016      	beq.n	800678c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800676c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2211      	movs	r2, #17
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff feb7 	bl	80064f8 <HAL_I2C_MasterTxCpltCallback>
}
 800678a:	e02b      	b.n	80067e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800679a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d107      	bne.n	80067d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff fed2 	bl	8006578 <HAL_I2C_MemTxCpltCallback>
}
 80067d4:	e006      	b.n	80067e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fe8a 	bl	80064f8 <HAL_I2C_MasterTxCpltCallback>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11d      	bne.n	8006840 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d10b      	bne.n	8006824 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006810:	b2da      	uxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	1c9a      	adds	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006822:	e073      	b.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	b29b      	uxth	r3, r3
 800682a:	121b      	asrs	r3, r3, #8
 800682c:	b2da      	uxtb	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800683e:	e065      	b.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	2b01      	cmp	r3, #1
 8006846:	d10b      	bne.n	8006860 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800685e:	e055      	b.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	2b02      	cmp	r3, #2
 8006866:	d151      	bne.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b22      	cmp	r3, #34	; 0x22
 800686c:	d10d      	bne.n	800688a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800687c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006888:	e040      	b.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b21      	cmp	r3, #33	; 0x21
 8006898:	d112      	bne.n	80068c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068be:	e025      	b.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d120      	bne.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b21      	cmp	r3, #33	; 0x21
 80068ce:	d11d      	bne.n	800690c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fe36 	bl	8006578 <HAL_I2C_MemTxCpltCallback>
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b22      	cmp	r3, #34	; 0x22
 8006926:	f040 80ac 	bne.w	8006a82 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d921      	bls.n	800697c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	f040 808c 	bne.w	8006a82 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006978:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800697a:	e082      	b.n	8006a82 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	2b02      	cmp	r3, #2
 8006982:	d075      	beq.n	8006a70 <I2C_MasterReceive_RXNE+0x15c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d002      	beq.n	8006990 <I2C_MasterReceive_RXNE+0x7c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d16f      	bne.n	8006a70 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f827 	bl	80079e4 <I2C_WaitOnSTOPRequestThroughIT>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d142      	bne.n	8006a22 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d10a      	bne.n	8006a0c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fdc1 	bl	800658c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a0a:	e03a      	b.n	8006a82 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2212      	movs	r2, #18
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fd76 	bl	800650c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a20:	e02f      	b.n	8006a82 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fd99 	bl	80065a0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a6e:	e008      	b.n	8006a82 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7e:	605a      	str	r2, [r3, #4]
}
 8006a80:	e7ff      	b.n	8006a82 <I2C_MasterReceive_RXNE+0x16e>
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d11b      	bne.n	8006ada <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ad8:	e0bd      	b.n	8006c56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d129      	bne.n	8006b38 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00a      	beq.n	8006b10 <I2C_MasterReceive_BTF+0x86>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d007      	beq.n	8006b10 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b36:	e08e      	b.n	8006c56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d176      	bne.n	8006c30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d002      	beq.n	8006b4e <I2C_MasterReceive_BTF+0xc4>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d108      	bne.n	8006b60 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e019      	b.n	8006b94 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d002      	beq.n	8006b6c <I2C_MasterReceive_BTF+0xe2>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d108      	bne.n	8006b7e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	e00a      	b.n	8006b94 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d007      	beq.n	8006b94 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d10a      	bne.n	8006c1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff fcba 	bl	800658c <HAL_I2C_MemRxCpltCallback>
}
 8006c18:	e01d      	b.n	8006c56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2212      	movs	r2, #18
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fc6f 	bl	800650c <HAL_I2C_MasterRxCpltCallback>
}
 8006c2e:	e012      	b.n	8006c56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d117      	bne.n	8006ca2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006c8c:	e067      	b.n	8006d5e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]
}
 8006ca0:	e05d      	b.n	8006d5e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006caa:	d133      	bne.n	8006d14 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b21      	cmp	r3, #33	; 0x21
 8006cb6:	d109      	bne.n	8006ccc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cc8:	611a      	str	r2, [r3, #16]
 8006cca:	e008      	b.n	8006cde <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <I2C_Master_SB+0x92>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d032      	beq.n	8006d5e <I2C_Master_SB+0x100>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02d      	beq.n	8006d5e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d10:	605a      	str	r2, [r3, #4]
}
 8006d12:	e024      	b.n	8006d5e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10e      	bne.n	8006d3a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	11db      	asrs	r3, r3, #7
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f063 030f 	orn	r3, r3, #15
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	611a      	str	r2, [r3, #16]
}
 8006d38:	e011      	b.n	8006d5e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10d      	bne.n	8006d5e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	11db      	asrs	r3, r3, #7
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0306 	and.w	r3, r3, #6
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f063 030e 	orn	r3, r3, #14
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	611a      	str	r2, [r3, #16]
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <I2C_Master_ADD10+0x26>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d108      	bne.n	8006da2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <I2C_Master_ADD10+0x48>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db0:	605a      	str	r2, [r3, #4]
  }
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b091      	sub	sp, #68	; 0x44
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b22      	cmp	r3, #34	; 0x22
 8006de6:	f040 8169 	bne.w	80070bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10f      	bne.n	8006e12 <I2C_Master_ADDR+0x54>
 8006df2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d10b      	bne.n	8006e12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	e160      	b.n	80070d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d11d      	bne.n	8006e56 <I2C_Master_ADDR+0x98>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e22:	d118      	bne.n	8006e56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e24:	2300      	movs	r3, #0
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50
 8006e54:	e13e      	b.n	80070d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d113      	bne.n	8006e88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e60:	2300      	movs	r3, #0
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e115      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	f040 808a 	bne.w	8006fa8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e9a:	d137      	bne.n	8006f0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d113      	bne.n	8006ee4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	e0e7      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	623b      	str	r3, [r7, #32]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	623b      	str	r3, [r7, #32]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e0d3      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d02e      	beq.n	8006f70 <I2C_Master_ADDR+0x1b2>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d02b      	beq.n	8006f70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	2b12      	cmp	r3, #18
 8006f1c:	d102      	bne.n	8006f24 <I2C_Master_ADDR+0x166>
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d125      	bne.n	8006f70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d00e      	beq.n	8006f48 <I2C_Master_ADDR+0x18a>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d00b      	beq.n	8006f48 <I2C_Master_ADDR+0x18a>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d008      	beq.n	8006f48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e007      	b.n	8006f58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	e0a1      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e085      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d14d      	bne.n	800704e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d016      	beq.n	8006fe6 <I2C_Master_ADDR+0x228>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d013      	beq.n	8006fe6 <I2C_Master_ADDR+0x228>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d010      	beq.n	8006fe6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e007      	b.n	8006ff6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ff4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007004:	d117      	bne.n	8007036 <I2C_Master_ADDR+0x278>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800700c:	d00b      	beq.n	8007026 <I2C_Master_ADDR+0x268>
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2b01      	cmp	r3, #1
 8007012:	d008      	beq.n	8007026 <I2C_Master_ADDR+0x268>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	2b08      	cmp	r3, #8
 8007018:	d005      	beq.n	8007026 <I2C_Master_ADDR+0x268>
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	2b10      	cmp	r3, #16
 800701e:	d002      	beq.n	8007026 <I2C_Master_ADDR+0x268>
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	2b20      	cmp	r3, #32
 8007024:	d107      	bne.n	8007036 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007034:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	e032      	b.n	80070b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800705c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706c:	d117      	bne.n	800709e <I2C_Master_ADDR+0x2e0>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007074:	d00b      	beq.n	800708e <I2C_Master_ADDR+0x2d0>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b01      	cmp	r3, #1
 800707a:	d008      	beq.n	800708e <I2C_Master_ADDR+0x2d0>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	2b08      	cmp	r3, #8
 8007080:	d005      	beq.n	800708e <I2C_Master_ADDR+0x2d0>
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b10      	cmp	r3, #16
 8007086:	d002      	beq.n	800708e <I2C_Master_ADDR+0x2d0>
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	2b20      	cmp	r3, #32
 800708c:	d107      	bne.n	800709e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800709c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80070ba:	e00b      	b.n	80070d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
}
 80070d2:	e7ff      	b.n	80070d4 <I2C_Master_ADDR+0x316>
 80070d4:	bf00      	nop
 80070d6:	3744      	adds	r7, #68	; 0x44
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02b      	beq.n	8007152 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d114      	bne.n	8007152 <I2C_SlaveTransmit_TXE+0x72>
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b29      	cmp	r3, #41	; 0x29
 800712c:	d111      	bne.n	8007152 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2221      	movs	r2, #33	; 0x21
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2228      	movs	r2, #40	; 0x28
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f9e7 	bl	8006520 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02c      	beq.n	8007210 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d114      	bne.n	8007210 <I2C_SlaveReceive_RXNE+0x74>
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ea:	d111      	bne.n	8007210 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2222      	movs	r2, #34	; 0x22
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2228      	movs	r2, #40	; 0x28
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff f992 	bl	8006534 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d012      	beq.n	8007250 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007276:	2b28      	cmp	r3, #40	; 0x28
 8007278:	d127      	bne.n	80072ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007288:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	089b      	lsrs	r3, r3, #2
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	09db      	lsrs	r3, r3, #7
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	81bb      	strh	r3, [r7, #12]
 80072ac:	e002      	b.n	80072b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072bc:	89ba      	ldrh	r2, [r7, #12]
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff f940 	bl	8006548 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072c8:	e00e      	b.n	80072e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800730e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734c:	d172      	bne.n	8007434 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b22      	cmp	r3, #34	; 0x22
 8007352:	d002      	beq.n	800735a <I2C_Slave_STOPF+0x6a>
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d135      	bne.n	80073c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800738c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe f942 	bl	800561c <HAL_DMA_GetState>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d049      	beq.n	8007432 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	4a69      	ldr	r2, [pc, #420]	; (8007548 <I2C_Slave_STOPF+0x258>)
 80073a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd ff8a 	bl	80052c4 <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d03d      	beq.n	8007432 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073c4:	e035      	b.n	8007432 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0204 	orr.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe f90c 	bl	800561c <HAL_DMA_GetState>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d014      	beq.n	8007434 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	4a4e      	ldr	r2, [pc, #312]	; (8007548 <I2C_Slave_STOPF+0x258>)
 8007410:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd ff54 	bl	80052c4 <HAL_DMA_Abort_IT>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	e000      	b.n	8007434 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007432:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03e      	beq.n	80074bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b04      	cmp	r3, #4
 800744a:	d112      	bne.n	8007472 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d112      	bne.n	80074a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f043 0204 	orr.w	r2, r3, #4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8b3 	bl	8007630 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80074ca:	e039      	b.n	8007540 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b2a      	cmp	r3, #42	; 0x2a
 80074d0:	d109      	bne.n	80074e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2228      	movs	r2, #40	; 0x28
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f827 	bl	8006534 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b28      	cmp	r3, #40	; 0x28
 80074f0:	d111      	bne.n	8007516 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a15      	ldr	r2, [pc, #84]	; (800754c <I2C_Slave_STOPF+0x25c>)
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f828 	bl	8006564 <HAL_I2C_ListenCpltCallback>
}
 8007514:	e014      	b.n	8007540 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	2b22      	cmp	r3, #34	; 0x22
 800751c:	d002      	beq.n	8007524 <I2C_Slave_STOPF+0x234>
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b22      	cmp	r3, #34	; 0x22
 8007522:	d10d      	bne.n	8007540 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fe fffa 	bl	8006534 <HAL_I2C_SlaveRxCpltCallback>
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	08007895 	.word	0x08007895
 800754c:	ffff0000 	.word	0xffff0000

08007550 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d002      	beq.n	8007572 <I2C_Slave_AF+0x22>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b20      	cmp	r3, #32
 8007570:	d129      	bne.n	80075c6 <I2C_Slave_AF+0x76>
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b28      	cmp	r3, #40	; 0x28
 8007576:	d126      	bne.n	80075c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2c      	ldr	r2, [pc, #176]	; (800762c <I2C_Slave_AF+0xdc>)
 800757c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800758c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007596:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe ffd0 	bl	8006564 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80075c4:	e02e      	b.n	8007624 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b21      	cmp	r3, #33	; 0x21
 80075ca:	d126      	bne.n	800761a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a17      	ldr	r2, [pc, #92]	; (800762c <I2C_Slave_AF+0xdc>)
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2221      	movs	r2, #33	; 0x21
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007600:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007610:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe ff84 	bl	8006520 <HAL_I2C_SlaveTxCpltCallback>
}
 8007618:	e004      	b.n	8007624 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007622:	615a      	str	r2, [r3, #20]
}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	ffff0000 	.word	0xffff0000

08007630 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007646:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b10      	cmp	r3, #16
 800764c:	d002      	beq.n	8007654 <I2C_ITError+0x24>
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d10a      	bne.n	800766a <I2C_ITError+0x3a>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b22      	cmp	r3, #34	; 0x22
 8007658:	d107      	bne.n	800766a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007668:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007670:	2b28      	cmp	r3, #40	; 0x28
 8007672:	d107      	bne.n	8007684 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2228      	movs	r2, #40	; 0x28
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007682:	e015      	b.n	80076b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007692:	d00a      	beq.n	80076aa <I2C_ITError+0x7a>
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b60      	cmp	r3, #96	; 0x60
 8007698:	d007      	beq.n	80076aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076be:	d162      	bne.n	8007786 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d020      	beq.n	8007720 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	4a6a      	ldr	r2, [pc, #424]	; (800788c <I2C_ITError+0x25c>)
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fd fdea 	bl	80052c4 <HAL_DMA_Abort_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 8089 	beq.w	800780a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800771a:	4610      	mov	r0, r2
 800771c:	4798      	blx	r3
 800771e:	e074      	b.n	800780a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	4a59      	ldr	r2, [pc, #356]	; (800788c <I2C_ITError+0x25c>)
 8007726:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	4618      	mov	r0, r3
 800772e:	f7fd fdc9 	bl	80052c4 <HAL_DMA_Abort_IT>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d068      	beq.n	800780a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d10b      	bne.n	800775e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	e041      	b.n	800780a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b60      	cmp	r3, #96	; 0x60
 8007790:	d125      	bne.n	80077de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d10b      	bne.n	80077c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fe feec 	bl	80065b4 <HAL_I2C_AbortCpltCallback>
 80077dc:	e015      	b.n	800780a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d10b      	bne.n	8007804 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fecb 	bl	80065a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10e      	bne.n	8007838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007820:	2b00      	cmp	r3, #0
 8007822:	d109      	bne.n	8007838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007846:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b04      	cmp	r3, #4
 800785a:	d113      	bne.n	8007884 <I2C_ITError+0x254>
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b28      	cmp	r3, #40	; 0x28
 8007860:	d110      	bne.n	8007884 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <I2C_ITError+0x260>)
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fe fe70 	bl	8006564 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08007895 	.word	0x08007895
 8007890:	ffff0000 	.word	0xffff0000

08007894 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80078ae:	4b4b      	ldr	r3, [pc, #300]	; (80079dc <I2C_DMAAbort+0x148>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	4a4a      	ldr	r2, [pc, #296]	; (80079e0 <I2C_DMAAbort+0x14c>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	0a1a      	lsrs	r2, r3, #8
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	00da      	lsls	r2, r3, #3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80078da:	e00a      	b.n	80078f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3b01      	subs	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d0ea      	beq.n	80078c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	2200      	movs	r2, #0
 8007900:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	2200      	movs	r2, #0
 8007910:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007920:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	2200      	movs	r2, #0
 8007936:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	2200      	movs	r2, #0
 8007946:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b60      	cmp	r3, #96	; 0x60
 8007962:	d10e      	bne.n	8007982 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f7fe fe1a 	bl	80065b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007980:	e027      	b.n	80079d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007982:	7cfb      	ldrb	r3, [r7, #19]
 8007984:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007988:	2b28      	cmp	r3, #40	; 0x28
 800798a:	d117      	bne.n	80079bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2228      	movs	r2, #40	; 0x28
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079ba:	e007      	b.n	80079cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80079cc:	6978      	ldr	r0, [r7, #20]
 80079ce:	f7fe fde7 	bl	80065a0 <HAL_I2C_ErrorCallback>
}
 80079d2:	bf00      	nop
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	2000040c 	.word	0x2000040c
 80079e0:	14f8b589 	.word	0x14f8b589

080079e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	0a1a      	lsrs	r2, r3, #8
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d107      	bne.n	8007a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f043 0220 	orr.w	r2, r3, #32
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e008      	b.n	8007a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a30:	d0e9      	beq.n	8007a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	2000040c 	.word	0x2000040c
 8007a44:	14f8b589 	.word	0x14f8b589

08007a48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a58:	d103      	bne.n	8007a62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007a60:	e007      	b.n	8007a72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007a6a:	d102      	bne.n	8007a72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2208      	movs	r2, #8
 8007a70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
	...

08007a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e267      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d075      	beq.n	8007b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a9e:	4b88      	ldr	r3, [pc, #544]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d00c      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aaa:	4b85      	ldr	r3, [pc, #532]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d112      	bne.n	8007adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ab6:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac2:	d10b      	bne.n	8007adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac4:	4b7e      	ldr	r3, [pc, #504]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05b      	beq.n	8007b88 <HAL_RCC_OscConfig+0x108>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d157      	bne.n	8007b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e242      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d106      	bne.n	8007af4 <HAL_RCC_OscConfig+0x74>
 8007ae6:	4b76      	ldr	r3, [pc, #472]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a75      	ldr	r2, [pc, #468]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	e01d      	b.n	8007b30 <HAL_RCC_OscConfig+0xb0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCC_OscConfig+0x98>
 8007afe:	4b70      	ldr	r3, [pc, #448]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6f      	ldr	r2, [pc, #444]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	4b6d      	ldr	r3, [pc, #436]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6c      	ldr	r2, [pc, #432]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e00b      	b.n	8007b30 <HAL_RCC_OscConfig+0xb0>
 8007b18:	4b69      	ldr	r3, [pc, #420]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a68      	ldr	r2, [pc, #416]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	4b66      	ldr	r3, [pc, #408]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a65      	ldr	r2, [pc, #404]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d013      	beq.n	8007b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b38:	f7fd f930 	bl	8004d9c <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b40:	f7fd f92c 	bl	8004d9c <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	; 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e207      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b52:	4b5b      	ldr	r3, [pc, #364]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0xc0>
 8007b5e:	e014      	b.n	8007b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b60:	f7fd f91c 	bl	8004d9c <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b68:	f7fd f918 	bl	8004d9c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e1f3      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b7a:	4b51      	ldr	r3, [pc, #324]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0xe8>
 8007b86:	e000      	b.n	8007b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d063      	beq.n	8007c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b96:	4b4a      	ldr	r3, [pc, #296]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ba2:	4b47      	ldr	r3, [pc, #284]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d11c      	bne.n	8007be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bae:	4b44      	ldr	r3, [pc, #272]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d116      	bne.n	8007be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bba:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x152>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d001      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e1c7      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd2:	4b3b      	ldr	r3, [pc, #236]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4937      	ldr	r1, [pc, #220]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007be6:	e03a      	b.n	8007c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d020      	beq.n	8007c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bf0:	4b34      	ldr	r3, [pc, #208]	; (8007cc4 <HAL_RCC_OscConfig+0x244>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf6:	f7fd f8d1 	bl	8004d9c <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfc:	e008      	b.n	8007c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bfe:	f7fd f8cd 	bl	8004d9c <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e1a8      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0f0      	beq.n	8007bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1c:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	4925      	ldr	r1, [pc, #148]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	600b      	str	r3, [r1, #0]
 8007c30:	e015      	b.n	8007c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <HAL_RCC_OscConfig+0x244>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fd f8b0 	bl	8004d9c <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c40:	f7fd f8ac 	bl	8004d9c <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e187      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c52:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d036      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <HAL_RCC_OscConfig+0x248>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c78:	f7fd f890 	bl	8004d9c <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c80:	f7fd f88c 	bl	8004d9c <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e167      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c92:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <HAL_RCC_OscConfig+0x240>)
 8007c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f0      	beq.n	8007c80 <HAL_RCC_OscConfig+0x200>
 8007c9e:	e01b      	b.n	8007cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca0:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <HAL_RCC_OscConfig+0x248>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ca6:	f7fd f879 	bl	8004d9c <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cac:	e00e      	b.n	8007ccc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cae:	f7fd f875 	bl	8004d9c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d907      	bls.n	8007ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e150      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	42470000 	.word	0x42470000
 8007cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ccc:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ea      	bne.n	8007cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8097 	beq.w	8007e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cea:	4b81      	ldr	r3, [pc, #516]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10f      	bne.n	8007d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60bb      	str	r3, [r7, #8]
 8007cfa:	4b7d      	ldr	r3, [pc, #500]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	4a7c      	ldr	r2, [pc, #496]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d04:	6413      	str	r3, [r2, #64]	; 0x40
 8007d06:	4b7a      	ldr	r3, [pc, #488]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d16:	4b77      	ldr	r3, [pc, #476]	; (8007ef4 <HAL_RCC_OscConfig+0x474>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d118      	bne.n	8007d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d22:	4b74      	ldr	r3, [pc, #464]	; (8007ef4 <HAL_RCC_OscConfig+0x474>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <HAL_RCC_OscConfig+0x474>)
 8007d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d2e:	f7fd f835 	bl	8004d9c <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d34:	e008      	b.n	8007d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d36:	f7fd f831 	bl	8004d9c <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e10c      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d48:	4b6a      	ldr	r3, [pc, #424]	; (8007ef4 <HAL_RCC_OscConfig+0x474>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d106      	bne.n	8007d6a <HAL_RCC_OscConfig+0x2ea>
 8007d5c:	4b64      	ldr	r3, [pc, #400]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	4a63      	ldr	r2, [pc, #396]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	6713      	str	r3, [r2, #112]	; 0x70
 8007d68:	e01c      	b.n	8007da4 <HAL_RCC_OscConfig+0x324>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	d10c      	bne.n	8007d8c <HAL_RCC_OscConfig+0x30c>
 8007d72:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	4a5e      	ldr	r2, [pc, #376]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d78:	f043 0304 	orr.w	r3, r3, #4
 8007d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7e:	4b5c      	ldr	r3, [pc, #368]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	4a5b      	ldr	r2, [pc, #364]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8a:	e00b      	b.n	8007da4 <HAL_RCC_OscConfig+0x324>
 8007d8c:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	4a57      	ldr	r2, [pc, #348]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	6713      	str	r3, [r2, #112]	; 0x70
 8007d98:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4a54      	ldr	r2, [pc, #336]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007d9e:	f023 0304 	bic.w	r3, r3, #4
 8007da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dac:	f7fc fff6 	bl	8004d9c <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db2:	e00a      	b.n	8007dca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007db4:	f7fc fff2 	bl	8004d9c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e0cb      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dca:	4b49      	ldr	r3, [pc, #292]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0ee      	beq.n	8007db4 <HAL_RCC_OscConfig+0x334>
 8007dd6:	e014      	b.n	8007e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd8:	f7fc ffe0 	bl	8004d9c <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dde:	e00a      	b.n	8007df6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007de0:	f7fc ffdc 	bl	8004d9c <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e0b5      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df6:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ee      	bne.n	8007de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e08:	4b39      	ldr	r3, [pc, #228]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	4a38      	ldr	r2, [pc, #224]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80a1 	beq.w	8007f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e1e:	4b34      	ldr	r3, [pc, #208]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 030c 	and.w	r3, r3, #12
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d05c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d141      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e32:	4b31      	ldr	r3, [pc, #196]	; (8007ef8 <HAL_RCC_OscConfig+0x478>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e38:	f7fc ffb0 	bl	8004d9c <HAL_GetTick>
 8007e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e40:	f7fc ffac 	bl	8004d9c <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e087      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e52:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f0      	bne.n	8007e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	019b      	lsls	r3, r3, #6
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	085b      	lsrs	r3, r3, #1
 8007e76:	3b01      	subs	r3, #1
 8007e78:	041b      	lsls	r3, r3, #16
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	061b      	lsls	r3, r3, #24
 8007e82:	491b      	ldr	r1, [pc, #108]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <HAL_RCC_OscConfig+0x478>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e8e:	f7fc ff85 	bl	8004d9c <HAL_GetTick>
 8007e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e94:	e008      	b.n	8007ea8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e96:	f7fc ff81 	bl	8004d9c <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e05c      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea8:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0f0      	beq.n	8007e96 <HAL_RCC_OscConfig+0x416>
 8007eb4:	e054      	b.n	8007f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <HAL_RCC_OscConfig+0x478>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ebc:	f7fc ff6e 	bl	8004d9c <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ec4:	f7fc ff6a 	bl	8004d9c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e045      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <HAL_RCC_OscConfig+0x470>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x444>
 8007ee2:	e03d      	b.n	8007f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d107      	bne.n	8007efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e038      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	40007000 	.word	0x40007000
 8007ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <HAL_RCC_OscConfig+0x4ec>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d028      	beq.n	8007f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d121      	bne.n	8007f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d11a      	bne.n	8007f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d111      	bne.n	8007f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	3b01      	subs	r3, #1
 8007f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d107      	bne.n	8007f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d001      	beq.n	8007f60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40023800 	.word	0x40023800

08007f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0cc      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f84:	4b68      	ldr	r3, [pc, #416]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d90c      	bls.n	8007fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f92:	4b65      	ldr	r3, [pc, #404]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9a:	4b63      	ldr	r3, [pc, #396]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0b8      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fc4:	4b59      	ldr	r3, [pc, #356]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	4a58      	ldr	r2, [pc, #352]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fdc:	4b53      	ldr	r3, [pc, #332]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4a52      	ldr	r2, [pc, #328]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe8:	4b50      	ldr	r3, [pc, #320]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	494d      	ldr	r1, [pc, #308]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d044      	beq.n	8008090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d107      	bne.n	800801e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800e:	4b47      	ldr	r3, [pc, #284]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d119      	bne.n	800804e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e07f      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d003      	beq.n	800802e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802e:	4b3f      	ldr	r3, [pc, #252]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e06f      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803e:	4b3b      	ldr	r3, [pc, #236]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e067      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804e:	4b37      	ldr	r3, [pc, #220]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 0203 	bic.w	r2, r3, #3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4934      	ldr	r1, [pc, #208]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 800805c:	4313      	orrs	r3, r2
 800805e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008060:	f7fc fe9c 	bl	8004d9c <HAL_GetTick>
 8008064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008066:	e00a      	b.n	800807e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008068:	f7fc fe98 	bl	8004d9c <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	; 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e04f      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807e:	4b2b      	ldr	r3, [pc, #172]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 020c 	and.w	r2, r3, #12
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	429a      	cmp	r2, r3
 800808e:	d1eb      	bne.n	8008068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008090:	4b25      	ldr	r3, [pc, #148]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d20c      	bcs.n	80080b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <HAL_RCC_ClockConfig+0x1b8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d001      	beq.n	80080b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e032      	b.n	800811e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	4916      	ldr	r1, [pc, #88]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	490e      	ldr	r1, [pc, #56]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080f6:	f000 f821 	bl	800813c <HAL_RCC_GetSysClockFreq>
 80080fa:	4602      	mov	r2, r0
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <HAL_RCC_ClockConfig+0x1bc>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	091b      	lsrs	r3, r3, #4
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	490a      	ldr	r1, [pc, #40]	; (8008130 <HAL_RCC_ClockConfig+0x1c0>)
 8008108:	5ccb      	ldrb	r3, [r1, r3]
 800810a:	fa22 f303 	lsr.w	r3, r2, r3
 800810e:	4a09      	ldr	r2, [pc, #36]	; (8008134 <HAL_RCC_ClockConfig+0x1c4>)
 8008110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <HAL_RCC_ClockConfig+0x1c8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fc fdfc 	bl	8004d14 <HAL_InitTick>

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40023c00 	.word	0x40023c00
 800812c:	40023800 	.word	0x40023800
 8008130:	0800b0a4 	.word	0x0800b0a4
 8008134:	2000040c 	.word	0x2000040c
 8008138:	20000410 	.word	0x20000410

0800813c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800813c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008140:	b094      	sub	sp, #80	; 0x50
 8008142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	647b      	str	r3, [r7, #68]	; 0x44
 8008148:	2300      	movs	r3, #0
 800814a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800814c:	2300      	movs	r3, #0
 800814e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008154:	4b79      	ldr	r3, [pc, #484]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f003 030c 	and.w	r3, r3, #12
 800815c:	2b08      	cmp	r3, #8
 800815e:	d00d      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0x40>
 8008160:	2b08      	cmp	r3, #8
 8008162:	f200 80e1 	bhi.w	8008328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_RCC_GetSysClockFreq+0x34>
 800816a:	2b04      	cmp	r3, #4
 800816c:	d003      	beq.n	8008176 <HAL_RCC_GetSysClockFreq+0x3a>
 800816e:	e0db      	b.n	8008328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008170:	4b73      	ldr	r3, [pc, #460]	; (8008340 <HAL_RCC_GetSysClockFreq+0x204>)
 8008172:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008174:	e0db      	b.n	800832e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008176:	4b73      	ldr	r3, [pc, #460]	; (8008344 <HAL_RCC_GetSysClockFreq+0x208>)
 8008178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800817a:	e0d8      	b.n	800832e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800817c:	4b6f      	ldr	r3, [pc, #444]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008184:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008186:	4b6d      	ldr	r3, [pc, #436]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d063      	beq.n	800825a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008192:	4b6a      	ldr	r3, [pc, #424]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	2200      	movs	r2, #0
 800819a:	63bb      	str	r3, [r7, #56]	; 0x38
 800819c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	633b      	str	r3, [r7, #48]	; 0x30
 80081a6:	2300      	movs	r3, #0
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
 80081aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80081ae:	4622      	mov	r2, r4
 80081b0:	462b      	mov	r3, r5
 80081b2:	f04f 0000 	mov.w	r0, #0
 80081b6:	f04f 0100 	mov.w	r1, #0
 80081ba:	0159      	lsls	r1, r3, #5
 80081bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081c0:	0150      	lsls	r0, r2, #5
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4621      	mov	r1, r4
 80081c8:	1a51      	subs	r1, r2, r1
 80081ca:	6139      	str	r1, [r7, #16]
 80081cc:	4629      	mov	r1, r5
 80081ce:	eb63 0301 	sbc.w	r3, r3, r1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081e0:	4659      	mov	r1, fp
 80081e2:	018b      	lsls	r3, r1, #6
 80081e4:	4651      	mov	r1, sl
 80081e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081ea:	4651      	mov	r1, sl
 80081ec:	018a      	lsls	r2, r1, #6
 80081ee:	4651      	mov	r1, sl
 80081f0:	ebb2 0801 	subs.w	r8, r2, r1
 80081f4:	4659      	mov	r1, fp
 80081f6:	eb63 0901 	sbc.w	r9, r3, r1
 80081fa:	f04f 0200 	mov.w	r2, #0
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800820a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800820e:	4690      	mov	r8, r2
 8008210:	4699      	mov	r9, r3
 8008212:	4623      	mov	r3, r4
 8008214:	eb18 0303 	adds.w	r3, r8, r3
 8008218:	60bb      	str	r3, [r7, #8]
 800821a:	462b      	mov	r3, r5
 800821c:	eb49 0303 	adc.w	r3, r9, r3
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800822e:	4629      	mov	r1, r5
 8008230:	024b      	lsls	r3, r1, #9
 8008232:	4621      	mov	r1, r4
 8008234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008238:	4621      	mov	r1, r4
 800823a:	024a      	lsls	r2, r1, #9
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008242:	2200      	movs	r2, #0
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28
 8008246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800824c:	f7f8 fc02 	bl	8000a54 <__aeabi_uldivmod>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4613      	mov	r3, r2
 8008256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008258:	e058      	b.n	800830c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800825a:	4b38      	ldr	r3, [pc, #224]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	099b      	lsrs	r3, r3, #6
 8008260:	2200      	movs	r2, #0
 8008262:	4618      	mov	r0, r3
 8008264:	4611      	mov	r1, r2
 8008266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800826a:	623b      	str	r3, [r7, #32]
 800826c:	2300      	movs	r3, #0
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	f04f 0000 	mov.w	r0, #0
 800827c:	f04f 0100 	mov.w	r1, #0
 8008280:	0159      	lsls	r1, r3, #5
 8008282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008286:	0150      	lsls	r0, r2, #5
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4641      	mov	r1, r8
 800828e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008292:	4649      	mov	r1, r9
 8008294:	eb63 0b01 	sbc.w	fp, r3, r1
 8008298:	f04f 0200 	mov.w	r2, #0
 800829c:	f04f 0300 	mov.w	r3, #0
 80082a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082ac:	ebb2 040a 	subs.w	r4, r2, sl
 80082b0:	eb63 050b 	sbc.w	r5, r3, fp
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	00eb      	lsls	r3, r5, #3
 80082be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082c2:	00e2      	lsls	r2, r4, #3
 80082c4:	4614      	mov	r4, r2
 80082c6:	461d      	mov	r5, r3
 80082c8:	4643      	mov	r3, r8
 80082ca:	18e3      	adds	r3, r4, r3
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	464b      	mov	r3, r9
 80082d0:	eb45 0303 	adc.w	r3, r5, r3
 80082d4:	607b      	str	r3, [r7, #4]
 80082d6:	f04f 0200 	mov.w	r2, #0
 80082da:	f04f 0300 	mov.w	r3, #0
 80082de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082e2:	4629      	mov	r1, r5
 80082e4:	028b      	lsls	r3, r1, #10
 80082e6:	4621      	mov	r1, r4
 80082e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082ec:	4621      	mov	r1, r4
 80082ee:	028a      	lsls	r2, r1, #10
 80082f0:	4610      	mov	r0, r2
 80082f2:	4619      	mov	r1, r3
 80082f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f6:	2200      	movs	r2, #0
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	61fa      	str	r2, [r7, #28]
 80082fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008300:	f7f8 fba8 	bl	8000a54 <__aeabi_uldivmod>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4613      	mov	r3, r2
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_RCC_GetSysClockFreq+0x200>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	0c1b      	lsrs	r3, r3, #16
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	3301      	adds	r3, #1
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800831c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800831e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008320:	fbb2 f3f3 	udiv	r3, r2, r3
 8008324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008326:	e002      	b.n	800832e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <HAL_RCC_GetSysClockFreq+0x204>)
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800832c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800832e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008330:	4618      	mov	r0, r3
 8008332:	3750      	adds	r7, #80	; 0x50
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop
 800833c:	40023800 	.word	0x40023800
 8008340:	00f42400 	.word	0x00f42400
 8008344:	007a1200 	.word	0x007a1200

08008348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800834c:	4b03      	ldr	r3, [pc, #12]	; (800835c <HAL_RCC_GetHCLKFreq+0x14>)
 800834e:	681b      	ldr	r3, [r3, #0]
}
 8008350:	4618      	mov	r0, r3
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	2000040c 	.word	0x2000040c

08008360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008364:	f7ff fff0 	bl	8008348 <HAL_RCC_GetHCLKFreq>
 8008368:	4602      	mov	r2, r0
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	0a9b      	lsrs	r3, r3, #10
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	4903      	ldr	r1, [pc, #12]	; (8008384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008376:	5ccb      	ldrb	r3, [r1, r3]
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800837c:	4618      	mov	r0, r3
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40023800 	.word	0x40023800
 8008384:	0800b0b4 	.word	0x0800b0b4

08008388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800838c:	f7ff ffdc 	bl	8008348 <HAL_RCC_GetHCLKFreq>
 8008390:	4602      	mov	r2, r0
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	0b5b      	lsrs	r3, r3, #13
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	4903      	ldr	r1, [pc, #12]	; (80083ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800839e:	5ccb      	ldrb	r3, [r1, r3]
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	40023800 	.word	0x40023800
 80083ac:	0800b0b4 	.word	0x0800b0b4

080083b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e041      	b.n	8008446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fc fa52 	bl	8004880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f000 fd7e 	bl	8008ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	d001      	beq.n	8008468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e044      	b.n	80084f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1e      	ldr	r2, [pc, #120]	; (8008500 <HAL_TIM_Base_Start_IT+0xb0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d018      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x6c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d013      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x6c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <HAL_TIM_Base_Start_IT+0xb4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00e      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x6c>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a19      	ldr	r2, [pc, #100]	; (8008508 <HAL_TIM_Base_Start_IT+0xb8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d009      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x6c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a17      	ldr	r2, [pc, #92]	; (800850c <HAL_TIM_Base_Start_IT+0xbc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d004      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x6c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a16      	ldr	r2, [pc, #88]	; (8008510 <HAL_TIM_Base_Start_IT+0xc0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d111      	bne.n	80084e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b06      	cmp	r3, #6
 80084cc:	d010      	beq.n	80084f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f042 0201 	orr.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084de:	e007      	b.n	80084f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40010000 	.word	0x40010000
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40014000 	.word	0x40014000

08008514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e041      	b.n	80085aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fc f932 	bl	80047a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3304      	adds	r3, #4
 8008550:	4619      	mov	r1, r3
 8008552:	4610      	mov	r0, r2
 8008554:	f000 fccc 	bl	8008ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <HAL_TIM_PWM_Start+0x24>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	bf14      	ite	ne
 80085d0:	2301      	movne	r3, #1
 80085d2:	2300      	moveq	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	e022      	b.n	800861e <HAL_TIM_PWM_Start+0x6a>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d109      	bne.n	80085f2 <HAL_TIM_PWM_Start+0x3e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	bf14      	ite	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	2300      	moveq	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	e015      	b.n	800861e <HAL_TIM_PWM_Start+0x6a>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d109      	bne.n	800860c <HAL_TIM_PWM_Start+0x58>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	bf14      	ite	ne
 8008604:	2301      	movne	r3, #1
 8008606:	2300      	moveq	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	e008      	b.n	800861e <HAL_TIM_PWM_Start+0x6a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	bf14      	ite	ne
 8008618:	2301      	movne	r3, #1
 800861a:	2300      	moveq	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e068      	b.n	80086f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <HAL_TIM_PWM_Start+0x82>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008634:	e013      	b.n	800865e <HAL_TIM_PWM_Start+0xaa>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d104      	bne.n	8008646 <HAL_TIM_PWM_Start+0x92>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008644:	e00b      	b.n	800865e <HAL_TIM_PWM_Start+0xaa>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b08      	cmp	r3, #8
 800864a:	d104      	bne.n	8008656 <HAL_TIM_PWM_Start+0xa2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008654:	e003      	b.n	800865e <HAL_TIM_PWM_Start+0xaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fee8 	bl	800943c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a23      	ldr	r2, [pc, #140]	; (8008700 <HAL_TIM_PWM_Start+0x14c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d107      	bne.n	8008686 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1d      	ldr	r2, [pc, #116]	; (8008700 <HAL_TIM_PWM_Start+0x14c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x10e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008698:	d013      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x10e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a19      	ldr	r2, [pc, #100]	; (8008704 <HAL_TIM_PWM_Start+0x150>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00e      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x10e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a17      	ldr	r2, [pc, #92]	; (8008708 <HAL_TIM_PWM_Start+0x154>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d009      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x10e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a16      	ldr	r2, [pc, #88]	; (800870c <HAL_TIM_PWM_Start+0x158>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x10e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a14      	ldr	r2, [pc, #80]	; (8008710 <HAL_TIM_PWM_Start+0x15c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d111      	bne.n	80086e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d010      	beq.n	80086f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e4:	e007      	b.n	80086f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40010000 	.word	0x40010000
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40014000 	.word	0x40014000

08008714 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e097      	b.n	8008858 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d106      	bne.n	8008742 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fc f859 	bl	80047f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008758:	f023 0307 	bic.w	r3, r3, #7
 800875c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f000 fbc1 	bl	8008ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	4313      	orrs	r3, r2
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80087b4:	f023 030c 	bic.w	r3, r3, #12
 80087b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	4313      	orrs	r3, r2
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	011a      	lsls	r2, r3, #4
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	031b      	lsls	r3, r3, #12
 80087e4:	4313      	orrs	r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80087fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	4313      	orrs	r3, r2
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008870:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008878:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008880:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008888:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d110      	bne.n	80088b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d102      	bne.n	800889c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008896:	7b7b      	ldrb	r3, [r7, #13]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e069      	b.n	8008974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088b0:	e031      	b.n	8008916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d110      	bne.n	80088da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d102      	bne.n	80088c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088be:	7b3b      	ldrb	r3, [r7, #12]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d001      	beq.n	80088c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e055      	b.n	8008974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088d8:	e01d      	b.n	8008916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d108      	bne.n	80088f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d105      	bne.n	80088f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088e6:	7b7b      	ldrb	r3, [r7, #13]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d102      	bne.n	80088f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088ec:	7b3b      	ldrb	r3, [r7, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d001      	beq.n	80088f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e03e      	b.n	8008974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_TIM_Encoder_Start+0xc4>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b04      	cmp	r3, #4
 8008920:	d008      	beq.n	8008934 <HAL_TIM_Encoder_Start+0xd4>
 8008922:	e00f      	b.n	8008944 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2201      	movs	r2, #1
 800892a:	2100      	movs	r1, #0
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fd85 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008932:	e016      	b.n	8008962 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2201      	movs	r2, #1
 800893a:	2104      	movs	r1, #4
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fd7d 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008942:	e00e      	b.n	8008962 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2201      	movs	r2, #1
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fd75 	bl	800943c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2201      	movs	r2, #1
 8008958:	2104      	movs	r1, #4
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fd6e 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008960:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0201 	orr.w	r2, r2, #1
 8008970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b02      	cmp	r3, #2
 8008990:	d122      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b02      	cmp	r3, #2
 800899e:	d11b      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0202 	mvn.w	r2, #2
 80089a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa77 	bl	8008eb2 <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa69 	bl	8008e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa7a 	bl	8008ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0304 	and.w	r3, r3, #4
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0204 	mvn.w	r2, #4
 80089fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa4d 	bl	8008eb2 <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa3f 	bl	8008e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fa50 	bl	8008ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	d122      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d11b      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0208 	mvn.w	r2, #8
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2204      	movs	r2, #4
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa23 	bl	8008eb2 <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa15 	bl	8008e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa26 	bl	8008ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b10      	cmp	r3, #16
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0210 	mvn.w	r2, #16
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9f9 	bl	8008eb2 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9eb 	bl	8008e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f9fc 	bl	8008ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d10e      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d107      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0201 	mvn.w	r2, #1
 8008af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fa fd80 	bl	8003600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d10e      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d107      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fd78 	bl	800961c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d10e      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d107      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f9c1 	bl	8008eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d10e      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d107      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0220 	mvn.w	r2, #32
 8008b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fd42 	bl	8009608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0ae      	b.n	8008d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b0c      	cmp	r3, #12
 8008bb6:	f200 809f 	bhi.w	8008cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008cf9 	.word	0x08008cf9
 8008bc8:	08008cf9 	.word	0x08008cf9
 8008bcc:	08008cf9 	.word	0x08008cf9
 8008bd0:	08008c35 	.word	0x08008c35
 8008bd4:	08008cf9 	.word	0x08008cf9
 8008bd8:	08008cf9 	.word	0x08008cf9
 8008bdc:	08008cf9 	.word	0x08008cf9
 8008be0:	08008c77 	.word	0x08008c77
 8008be4:	08008cf9 	.word	0x08008cf9
 8008be8:	08008cf9 	.word	0x08008cf9
 8008bec:	08008cf9 	.word	0x08008cf9
 8008bf0:	08008cb7 	.word	0x08008cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f9f8 	bl	8008ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0208 	orr.w	r2, r2, #8
 8008c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0204 	bic.w	r2, r2, #4
 8008c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6999      	ldr	r1, [r3, #24]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	619a      	str	r2, [r3, #24]
      break;
 8008c32:	e064      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fa3e 	bl	80090bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6999      	ldr	r1, [r3, #24]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	021a      	lsls	r2, r3, #8
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	619a      	str	r2, [r3, #24]
      break;
 8008c74:	e043      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fa89 	bl	8009194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0208 	orr.w	r2, r2, #8
 8008c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0204 	bic.w	r2, r2, #4
 8008ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69d9      	ldr	r1, [r3, #28]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	61da      	str	r2, [r3, #28]
      break;
 8008cb4:	e023      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fad3 	bl	8009268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69d9      	ldr	r1, [r3, #28]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	021a      	lsls	r2, r3, #8
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	61da      	str	r2, [r3, #28]
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_TIM_ConfigClockSource+0x1c>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e0b4      	b.n	8008e96 <HAL_TIM_ConfigClockSource+0x186>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d64:	d03e      	beq.n	8008de4 <HAL_TIM_ConfigClockSource+0xd4>
 8008d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d6a:	f200 8087 	bhi.w	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d72:	f000 8086 	beq.w	8008e82 <HAL_TIM_ConfigClockSource+0x172>
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d87f      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d7c:	2b70      	cmp	r3, #112	; 0x70
 8008d7e:	d01a      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0xa6>
 8008d80:	2b70      	cmp	r3, #112	; 0x70
 8008d82:	d87b      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d84:	2b60      	cmp	r3, #96	; 0x60
 8008d86:	d050      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x11a>
 8008d88:	2b60      	cmp	r3, #96	; 0x60
 8008d8a:	d877      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d8c:	2b50      	cmp	r3, #80	; 0x50
 8008d8e:	d03c      	beq.n	8008e0a <HAL_TIM_ConfigClockSource+0xfa>
 8008d90:	2b50      	cmp	r3, #80	; 0x50
 8008d92:	d873      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d058      	beq.n	8008e4a <HAL_TIM_ConfigClockSource+0x13a>
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d86f      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d064      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008da0:	2b30      	cmp	r3, #48	; 0x30
 8008da2:	d86b      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d060      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d867      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05c      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d05a      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008db4:	e062      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6899      	ldr	r1, [r3, #8]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f000 fb19 	bl	80093fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	609a      	str	r2, [r3, #8]
      break;
 8008de2:	e04f      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	6899      	ldr	r1, [r3, #8]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f000 fb02 	bl	80093fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e06:	609a      	str	r2, [r3, #8]
      break;
 8008e08:	e03c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	6859      	ldr	r1, [r3, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f000 fa76 	bl	8009308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2150      	movs	r1, #80	; 0x50
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 facf 	bl	80093c6 <TIM_ITRx_SetConfig>
      break;
 8008e28:	e02c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6859      	ldr	r1, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f000 fa95 	bl	8009366 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2160      	movs	r1, #96	; 0x60
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fabf 	bl	80093c6 <TIM_ITRx_SetConfig>
      break;
 8008e48:	e01c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6859      	ldr	r1, [r3, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f000 fa56 	bl	8009308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2140      	movs	r1, #64	; 0x40
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 faaf 	bl	80093c6 <TIM_ITRx_SetConfig>
      break;
 8008e68:	e00c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f000 faa6 	bl	80093c6 <TIM_ITRx_SetConfig>
      break;
 8008e7a:	e003      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e80:	e000      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a34      	ldr	r2, [pc, #208]	; (8008fd4 <TIM_Base_SetConfig+0xe4>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00f      	beq.n	8008f28 <TIM_Base_SetConfig+0x38>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0e:	d00b      	beq.n	8008f28 <TIM_Base_SetConfig+0x38>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a31      	ldr	r2, [pc, #196]	; (8008fd8 <TIM_Base_SetConfig+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_Base_SetConfig+0x38>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a30      	ldr	r2, [pc, #192]	; (8008fdc <TIM_Base_SetConfig+0xec>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_Base_SetConfig+0x38>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a2f      	ldr	r2, [pc, #188]	; (8008fe0 <TIM_Base_SetConfig+0xf0>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d108      	bne.n	8008f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a25      	ldr	r2, [pc, #148]	; (8008fd4 <TIM_Base_SetConfig+0xe4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d01b      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f48:	d017      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <TIM_Base_SetConfig+0xe8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d013      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a21      	ldr	r2, [pc, #132]	; (8008fdc <TIM_Base_SetConfig+0xec>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00f      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a20      	ldr	r2, [pc, #128]	; (8008fe0 <TIM_Base_SetConfig+0xf0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00b      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a1f      	ldr	r2, [pc, #124]	; (8008fe4 <TIM_Base_SetConfig+0xf4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d007      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <TIM_Base_SetConfig+0xf8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_Base_SetConfig+0x8a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <TIM_Base_SetConfig+0xfc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d108      	bne.n	8008f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a08      	ldr	r2, [pc, #32]	; (8008fd4 <TIM_Base_SetConfig+0xe4>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d103      	bne.n	8008fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	615a      	str	r2, [r3, #20]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40010000 	.word	0x40010000
 8008fd8:	40000400 	.word	0x40000400
 8008fdc:	40000800 	.word	0x40000800
 8008fe0:	40000c00 	.word	0x40000c00
 8008fe4:	40014000 	.word	0x40014000
 8008fe8:	40014400 	.word	0x40014400
 8008fec:	40014800 	.word	0x40014800

08008ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0201 	bic.w	r2, r3, #1
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0303 	bic.w	r3, r3, #3
 8009026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f023 0302 	bic.w	r3, r3, #2
 8009038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <TIM_OC1_SetConfig+0xc8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d10c      	bne.n	8009066 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0308 	bic.w	r3, r3, #8
 8009052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f023 0304 	bic.w	r3, r3, #4
 8009064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a13      	ldr	r2, [pc, #76]	; (80090b8 <TIM_OC1_SetConfig+0xc8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d111      	bne.n	8009092 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800907c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	621a      	str	r2, [r3, #32]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40010000 	.word	0x40010000

080090bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f023 0210 	bic.w	r2, r3, #16
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f023 0320 	bic.w	r3, r3, #32
 8009106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <TIM_OC2_SetConfig+0xd4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d10d      	bne.n	8009138 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	4313      	orrs	r3, r2
 800912e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a15      	ldr	r2, [pc, #84]	; (8009190 <TIM_OC2_SetConfig+0xd4>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d113      	bne.n	8009168 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800914e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	4313      	orrs	r3, r2
 800915a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	4313      	orrs	r3, r2
 8009166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	621a      	str	r2, [r3, #32]
}
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	40010000 	.word	0x40010000

08009194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <TIM_OC3_SetConfig+0xd0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d10d      	bne.n	800920e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800920c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <TIM_OC3_SetConfig+0xd0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d113      	bne.n	800923e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800921c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	621a      	str	r2, [r3, #32]
}
 8009258:	bf00      	nop
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	40010000 	.word	0x40010000

08009268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800929e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	031b      	lsls	r3, r3, #12
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a10      	ldr	r2, [pc, #64]	; (8009304 <TIM_OC4_SetConfig+0x9c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d109      	bne.n	80092dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40010000 	.word	0x40010000

08009308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f023 0201 	bic.w	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f023 030a 	bic.w	r3, r3, #10
 8009344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009366:	b480      	push	{r7}
 8009368:	b087      	sub	sp, #28
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	f023 0210 	bic.w	r2, r3, #16
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	031b      	lsls	r3, r3, #12
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	621a      	str	r2, [r3, #32]
}
 80093ba:	bf00      	nop
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f043 0307 	orr.w	r3, r3, #7
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	609a      	str	r2, [r3, #8]
}
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	021a      	lsls	r2, r3, #8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	431a      	orrs	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4313      	orrs	r3, r2
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	609a      	str	r2, [r3, #8]
}
 8009430:	bf00      	nop
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	2201      	movs	r2, #1
 8009450:	fa02 f303 	lsl.w	r3, r2, r3
 8009454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	43db      	mvns	r3, r3
 800945e:	401a      	ands	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	fa01 f303 	lsl.w	r3, r1, r3
 8009474:	431a      	orrs	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	621a      	str	r2, [r3, #32]
}
 800947a:	bf00      	nop
 800947c:	371c      	adds	r7, #28
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
	...

08009488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800949c:	2302      	movs	r3, #2
 800949e:	e050      	b.n	8009542 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a1c      	ldr	r2, [pc, #112]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d018      	beq.n	8009516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ec:	d013      	beq.n	8009516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a18      	ldr	r2, [pc, #96]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00e      	beq.n	8009516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a16      	ldr	r2, [pc, #88]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d009      	beq.n	8009516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d004      	beq.n	8009516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d10c      	bne.n	8009530 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800951c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	4313      	orrs	r3, r2
 8009526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	40010000 	.word	0x40010000
 8009554:	40000400 	.word	0x40000400
 8009558:	40000800 	.word	0x40000800
 800955c:	40000c00 	.word	0x40000c00
 8009560:	40014000 	.word	0x40014000

08009564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800957c:	2302      	movs	r3, #2
 800957e:	e03d      	b.n	80095fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e03f      	b.n	80096c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fb f9b0 	bl	80049bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2224      	movs	r2, #36	; 0x24
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 ff81 	bl	800a57c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08c      	sub	sp, #48	; 0x30
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	4613      	mov	r3, r2
 80096d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d165      	bne.n	80097b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <HAL_UART_Transmit_DMA+0x26>
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e05e      	b.n	80097b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Transmit_DMA+0x38>
 8009700:	2302      	movs	r3, #2
 8009702:	e057      	b.n	80097b4 <HAL_UART_Transmit_DMA+0xe8>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	88fa      	ldrh	r2, [r7, #6]
 8009716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2221      	movs	r2, #33	; 0x21
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009730:	4a22      	ldr	r2, [pc, #136]	; (80097bc <HAL_UART_Transmit_DMA+0xf0>)
 8009732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009738:	4a21      	ldr	r2, [pc, #132]	; (80097c0 <HAL_UART_Transmit_DMA+0xf4>)
 800973a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	4a20      	ldr	r2, [pc, #128]	; (80097c4 <HAL_UART_Transmit_DMA+0xf8>)
 8009742:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	2200      	movs	r2, #0
 800974a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	6819      	ldr	r1, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3304      	adds	r3, #4
 8009760:	461a      	mov	r2, r3
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	f7fb fce6 	bl	8005134 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009770:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3314      	adds	r3, #20
 8009780:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3314      	adds	r3, #20
 8009798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979a:	627a      	str	r2, [r7, #36]	; 0x24
 800979c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6a39      	ldr	r1, [r7, #32]
 80097a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e5      	bne.n	800977a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e000      	b.n	80097b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80097b2:	2302      	movs	r3, #2
  }
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3730      	adds	r7, #48	; 0x30
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	08009e15 	.word	0x08009e15
 80097c0:	08009eaf 	.word	0x08009eaf
 80097c4:	0800a027 	.word	0x0800a027

080097c8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08c      	sub	sp, #48	; 0x30
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d152      	bne.n	8009888 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e04b      	b.n	800988a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e044      	b.n	800988a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	461a      	mov	r2, r3
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 fc51 	bl	800a0bc <UART_Start_Receive_DMA>
 800981a:	4603      	mov	r3, r0
 800981c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009824:	2b00      	cmp	r3, #0
 8009826:	d12c      	bne.n	8009882 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	2b01      	cmp	r3, #1
 800982e:	d125      	bne.n	800987c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	617b      	str	r3, [r7, #20]
   return(result);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f043 0310 	orr.w	r3, r3, #16
 800985c:	62bb      	str	r3, [r7, #40]	; 0x28
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009866:	627a      	str	r2, [r7, #36]	; 0x24
 8009868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6a39      	ldr	r1, [r7, #32]
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	61fb      	str	r3, [r7, #28]
   return(result);
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800987a:	e002      	b.n	8009882 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009886:	e000      	b.n	800988a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3730      	adds	r7, #48	; 0x30
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b0ba      	sub	sp, #232	; 0xe8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80098d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10f      	bne.n	80098fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <HAL_UART_IRQHandler+0x66>
 80098e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fd87 	bl	800a406 <UART_Receive_IT>
      return;
 80098f8:	e256      	b.n	8009da8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80de 	beq.w	8009ac0 <HAL_UART_IRQHandler+0x22c>
 8009904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80d1 	beq.w	8009ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <HAL_UART_IRQHandler+0xae>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	f043 0201 	orr.w	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <HAL_UART_IRQHandler+0xd2>
 800994e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	f043 0202 	orr.w	r2, r3, #2
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <HAL_UART_IRQHandler+0xf6>
 8009972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f043 0204 	orr.w	r2, r3, #4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800998a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800998e:	f003 0308 	and.w	r3, r3, #8
 8009992:	2b00      	cmp	r3, #0
 8009994:	d011      	beq.n	80099ba <HAL_UART_IRQHandler+0x126>
 8009996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999a:	f003 0320 	and.w	r3, r3, #32
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f043 0208 	orr.w	r2, r3, #8
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 81ed 	beq.w	8009d9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d008      	beq.n	80099e2 <HAL_UART_IRQHandler+0x14e>
 80099d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fd12 	bl	800a406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	bf0c      	ite	eq
 80099f0:	2301      	moveq	r3, #1
 80099f2:	2300      	movne	r3, #0
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d103      	bne.n	8009a0e <HAL_UART_IRQHandler+0x17a>
 8009a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d04f      	beq.n	8009aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fc1a 	bl	800a248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1e:	2b40      	cmp	r3, #64	; 0x40
 8009a20:	d141      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3314      	adds	r3, #20
 8009a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1d9      	bne.n	8009a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d013      	beq.n	8009a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	4a7d      	ldr	r2, [pc, #500]	; (8009c70 <HAL_UART_IRQHandler+0x3dc>)
 8009a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fb fc1e 	bl	80052c4 <HAL_DMA_Abort_IT>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d016      	beq.n	8009abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a9c:	e00e      	b.n	8009abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f9ae 	bl	8009e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa4:	e00a      	b.n	8009abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f9aa 	bl	8009e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aac:	e006      	b.n	8009abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f9a6 	bl	8009e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009aba:	e170      	b.n	8009d9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	bf00      	nop
    return;
 8009abe:	e16e      	b.n	8009d9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	f040 814a 	bne.w	8009d5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8143 	beq.w	8009d5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 813c 	beq.w	8009d5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60bb      	str	r3, [r7, #8]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	60bb      	str	r3, [r7, #8]
 8009afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	f040 80b4 	bne.w	8009c74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 8140 	beq.w	8009da2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	f080 8139 	bcs.w	8009da2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b42:	f000 8088 	beq.w	8009c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1d9      	bne.n	8009b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3314      	adds	r3, #20
 8009b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e1      	bne.n	8009b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3314      	adds	r3, #20
 8009bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3314      	adds	r3, #20
 8009bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e3      	bne.n	8009bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	330c      	adds	r3, #12
 8009c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c26:	f023 0310 	bic.w	r3, r3, #16
 8009c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c38:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e3      	bne.n	8009c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fb fac7 	bl	80051e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7f9 fe0e 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c6c:	e099      	b.n	8009da2 <HAL_UART_IRQHandler+0x50e>
 8009c6e:	bf00      	nop
 8009c70:	0800a30f 	.word	0x0800a30f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 808b 	beq.w	8009da6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8086 	beq.w	8009da6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	330c      	adds	r3, #12
 8009ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009cbe:	647a      	str	r2, [r7, #68]	; 0x44
 8009cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e3      	bne.n	8009c9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3314      	adds	r3, #20
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e3      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	330c      	adds	r3, #12
 8009d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0310 	bic.w	r3, r3, #16
 8009d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d3c:	61fa      	str	r2, [r7, #28]
 8009d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69b9      	ldr	r1, [r7, #24]
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	617b      	str	r3, [r7, #20]
   return(result);
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e3      	bne.n	8009d18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7f9 fd96 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d5c:	e023      	b.n	8009da6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d009      	beq.n	8009d7e <HAL_UART_IRQHandler+0x4ea>
 8009d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fadd 	bl	800a336 <UART_Transmit_IT>
    return;
 8009d7c:	e014      	b.n	8009da8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00e      	beq.n	8009da8 <HAL_UART_IRQHandler+0x514>
 8009d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d008      	beq.n	8009da8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb1d 	bl	800a3d6 <UART_EndTransmit_IT>
    return;
 8009d9c:	e004      	b.n	8009da8 <HAL_UART_IRQHandler+0x514>
    return;
 8009d9e:	bf00      	nop
 8009da0:	e002      	b.n	8009da8 <HAL_UART_IRQHandler+0x514>
      return;
 8009da2:	bf00      	nop
 8009da4:	e000      	b.n	8009da8 <HAL_UART_IRQHandler+0x514>
      return;
 8009da6:	bf00      	nop
  }
}
 8009da8:	37e8      	adds	r7, #232	; 0xe8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop

08009db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b090      	sub	sp, #64	; 0x40
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d137      	bne.n	8009ea0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e32:	2200      	movs	r2, #0
 8009e34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3314      	adds	r3, #20
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	623b      	str	r3, [r7, #32]
   return(result);
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3314      	adds	r3, #20
 8009e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e56:	633a      	str	r2, [r7, #48]	; 0x30
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e5      	bne.n	8009e36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	330c      	adds	r3, #12
 8009e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e80:	637b      	str	r3, [r7, #52]	; 0x34
 8009e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	330c      	adds	r3, #12
 8009e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e8a:	61fa      	str	r2, [r7, #28]
 8009e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	69b9      	ldr	r1, [r7, #24]
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	617b      	str	r3, [r7, #20]
   return(result);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e5      	bne.n	8009e6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e9e:	e002      	b.n	8009ea6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ea0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ea2:	f7ff ff85 	bl	8009db0 <HAL_UART_TxCpltCallback>
}
 8009ea6:	bf00      	nop
 8009ea8:	3740      	adds	r7, #64	; 0x40
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f7ff ff81 	bl	8009dc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b09c      	sub	sp, #112	; 0x70
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d172      	bne.n	8009fcc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee8:	2200      	movs	r2, #0
 8009eea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	330c      	adds	r3, #12
 8009f0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e5      	bne.n	8009eec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	667b      	str	r3, [r7, #100]	; 0x64
 8009f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f40:	647a      	str	r2, [r7, #68]	; 0x44
 8009f42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3314      	adds	r3, #20
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	623b      	str	r3, [r7, #32]
   return(result);
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8009f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3314      	adds	r3, #20
 8009f72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f74:	633a      	str	r2, [r7, #48]	; 0x30
 8009f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e5      	bne.n	8009f54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d119      	bne.n	8009fcc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	330c      	adds	r3, #12
 8009f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0310 	bic.w	r3, r3, #16
 8009fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fb8:	61fa      	str	r2, [r7, #28]
 8009fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69b9      	ldr	r1, [r7, #24]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e5      	bne.n	8009f98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d106      	bne.n	8009fe2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009fdc:	f7f9 fc54 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fe0:	e002      	b.n	8009fe8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009fe2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009fe4:	f7ff fef8 	bl	8009dd8 <HAL_UART_RxCpltCallback>
}
 8009fe8:	bf00      	nop
 8009fea:	3770      	adds	r7, #112	; 0x70
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	2b01      	cmp	r3, #1
 800a004:	d108      	bne.n	800a018 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4619      	mov	r1, r3
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7f9 fc39 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a016:	e002      	b.n	800a01e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff fee7 	bl	8009dec <HAL_UART_RxHalfCpltCallback>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a036:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	bf0c      	ite	eq
 800a046:	2301      	moveq	r3, #1
 800a048:	2300      	movne	r3, #0
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b21      	cmp	r3, #33	; 0x21
 800a058:	d108      	bne.n	800a06c <UART_DMAError+0x46>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2200      	movs	r2, #0
 800a064:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f000 f8c6 	bl	800a1f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b22      	cmp	r3, #34	; 0x22
 800a08c:	d108      	bne.n	800a0a0 <UART_DMAError+0x7a>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2200      	movs	r2, #0
 800a098:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f000 f8d4 	bl	800a248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	f043 0210 	orr.w	r2, r3, #16
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	f7ff fea7 	bl	8009e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b098      	sub	sp, #96	; 0x60
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	88fa      	ldrh	r2, [r7, #6]
 800a0d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2222      	movs	r2, #34	; 0x22
 800a0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	4a40      	ldr	r2, [pc, #256]	; (800a1ec <UART_Start_Receive_DMA+0x130>)
 800a0ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f0:	4a3f      	ldr	r2, [pc, #252]	; (800a1f0 <UART_Start_Receive_DMA+0x134>)
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f8:	4a3e      	ldr	r2, [pc, #248]	; (800a1f4 <UART_Start_Receive_DMA+0x138>)
 800a0fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	2200      	movs	r2, #0
 800a102:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a104:	f107 0308 	add.w	r3, r7, #8
 800a108:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	f7fb f80a 	bl	8005134 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a120:	2300      	movs	r3, #0
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	613b      	str	r3, [r7, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	613b      	str	r3, [r7, #16]
 800a134:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d019      	beq.n	800a17a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a166:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a168:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a16c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3314      	adds	r3, #20
 800a180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	657b      	str	r3, [r7, #84]	; 0x54
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3314      	adds	r3, #20
 800a198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a19a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e5      	bne.n	800a17a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3314      	adds	r3, #20
 800a1b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a1d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6a39      	ldr	r1, [r7, #32]
 800a1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3760      	adds	r7, #96	; 0x60
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	08009ecb 	.word	0x08009ecb
 800a1f0:	08009ff1 	.word	0x08009ff1
 800a1f4:	0800a027 	.word	0x0800a027

0800a1f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	330c      	adds	r3, #12
 800a206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a216:	61fb      	str	r3, [r7, #28]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	61ba      	str	r2, [r7, #24]
 800a222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	6979      	ldr	r1, [r7, #20]
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	613b      	str	r3, [r7, #16]
   return(result);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e5      	bne.n	800a200 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a23c:	bf00      	nop
 800a23e:	3724      	adds	r7, #36	; 0x24
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b095      	sub	sp, #84	; 0x54
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	330c      	adds	r3, #12
 800a256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a270:	643a      	str	r2, [r7, #64]	; 0x40
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3314      	adds	r3, #20
 800a28a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	61fb      	str	r3, [r7, #28]
   return(result);
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d119      	bne.n	800a2f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	e853 3f00 	ldrex	r3, [r3]
 800a2ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f023 0310 	bic.w	r3, r3, #16
 800a2d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2e0:	61ba      	str	r2, [r7, #24]
 800a2e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6979      	ldr	r1, [r7, #20]
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e5      	bne.n	800a2c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a302:	bf00      	nop
 800a304:	3754      	adds	r7, #84	; 0x54
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fd69 	bl	8009e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b21      	cmp	r3, #33	; 0x21
 800a348:	d13e      	bne.n	800a3c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a352:	d114      	bne.n	800a37e <UART_Transmit_IT+0x48>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d110      	bne.n	800a37e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	1c9a      	adds	r2, r3, #2
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	621a      	str	r2, [r3, #32]
 800a37c:	e008      	b.n	800a390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	1c59      	adds	r1, r3, #1
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6211      	str	r1, [r2, #32]
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a394:	b29b      	uxth	r3, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	4619      	mov	r1, r3
 800a39e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10f      	bne.n	800a3c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e000      	b.n	800a3ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3c8:	2302      	movs	r3, #2
  }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68da      	ldr	r2, [r3, #12]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fcda 	bl	8009db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b08c      	sub	sp, #48	; 0x30
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b22      	cmp	r3, #34	; 0x22
 800a418:	f040 80ab 	bne.w	800a572 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a424:	d117      	bne.n	800a456 <UART_Receive_IT+0x50>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d113      	bne.n	800a456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a444:	b29a      	uxth	r2, r3
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	1c9a      	adds	r2, r3, #2
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	629a      	str	r2, [r3, #40]	; 0x28
 800a454:	e026      	b.n	800a4a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a468:	d007      	beq.n	800a47a <UART_Receive_IT+0x74>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <UART_Receive_IT+0x82>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	b2da      	uxtb	r2, r3
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e008      	b.n	800a49a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a494:	b2da      	uxtb	r2, r3
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d15a      	bne.n	800a56e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0220 	bic.w	r2, r2, #32
 800a4c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695a      	ldr	r2, [r3, #20]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0201 	bic.w	r2, r2, #1
 800a4e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d135      	bne.n	800a564 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	613b      	str	r3, [r7, #16]
   return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f023 0310 	bic.w	r3, r3, #16
 800a514:	627b      	str	r3, [r7, #36]	; 0x24
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51e:	623a      	str	r2, [r7, #32]
 800a520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	69f9      	ldr	r1, [r7, #28]
 800a524:	6a3a      	ldr	r2, [r7, #32]
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b10      	cmp	r3, #16
 800a53e:	d10a      	bne.n	800a556 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f9 f993 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 800a562:	e002      	b.n	800a56a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff fc37 	bl	8009dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	e002      	b.n	800a574 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	e000      	b.n	800a574 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a572:	2302      	movs	r3, #2
  }
}
 800a574:	4618      	mov	r0, r3
 800a576:	3730      	adds	r7, #48	; 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a57c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a580:	b0c0      	sub	sp, #256	; 0x100
 800a582:	af00      	add	r7, sp, #0
 800a584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a598:	68d9      	ldr	r1, [r3, #12]
 800a59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	ea40 0301 	orr.w	r3, r0, r1
 800a5a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5d4:	f021 010c 	bic.w	r1, r1, #12
 800a5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5e2:	430b      	orrs	r3, r1
 800a5e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f6:	6999      	ldr	r1, [r3, #24]
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	ea40 0301 	orr.w	r3, r0, r1
 800a602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	4b8f      	ldr	r3, [pc, #572]	; (800a848 <UART_SetConfig+0x2cc>)
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d005      	beq.n	800a61c <UART_SetConfig+0xa0>
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	4b8d      	ldr	r3, [pc, #564]	; (800a84c <UART_SetConfig+0x2d0>)
 800a618:	429a      	cmp	r2, r3
 800a61a:	d104      	bne.n	800a626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a61c:	f7fd feb4 	bl	8008388 <HAL_RCC_GetPCLK2Freq>
 800a620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a624:	e003      	b.n	800a62e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a626:	f7fd fe9b 	bl	8008360 <HAL_RCC_GetPCLK1Freq>
 800a62a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a638:	f040 810c 	bne.w	800a854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a63c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a640:	2200      	movs	r2, #0
 800a642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a64a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a64e:	4622      	mov	r2, r4
 800a650:	462b      	mov	r3, r5
 800a652:	1891      	adds	r1, r2, r2
 800a654:	65b9      	str	r1, [r7, #88]	; 0x58
 800a656:	415b      	adcs	r3, r3
 800a658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a65a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a65e:	4621      	mov	r1, r4
 800a660:	eb12 0801 	adds.w	r8, r2, r1
 800a664:	4629      	mov	r1, r5
 800a666:	eb43 0901 	adc.w	r9, r3, r1
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a67a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a67e:	4690      	mov	r8, r2
 800a680:	4699      	mov	r9, r3
 800a682:	4623      	mov	r3, r4
 800a684:	eb18 0303 	adds.w	r3, r8, r3
 800a688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a68c:	462b      	mov	r3, r5
 800a68e:	eb49 0303 	adc.w	r3, r9, r3
 800a692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a6a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	18db      	adds	r3, r3, r3
 800a6ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	eb42 0303 	adc.w	r3, r2, r3
 800a6b6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6c0:	f7f6 f9c8 	bl	8000a54 <__aeabi_uldivmod>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4b61      	ldr	r3, [pc, #388]	; (800a850 <UART_SetConfig+0x2d4>)
 800a6ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	011c      	lsls	r4, r3, #4
 800a6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a6e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	1891      	adds	r1, r2, r2
 800a6ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800a6ec:	415b      	adcs	r3, r3
 800a6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	eb12 0a01 	adds.w	sl, r2, r1
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	eb43 0b01 	adc.w	fp, r3, r1
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a70c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a714:	4692      	mov	sl, r2
 800a716:	469b      	mov	fp, r3
 800a718:	4643      	mov	r3, r8
 800a71a:	eb1a 0303 	adds.w	r3, sl, r3
 800a71e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a722:	464b      	mov	r3, r9
 800a724:	eb4b 0303 	adc.w	r3, fp, r3
 800a728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a73c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a740:	460b      	mov	r3, r1
 800a742:	18db      	adds	r3, r3, r3
 800a744:	643b      	str	r3, [r7, #64]	; 0x40
 800a746:	4613      	mov	r3, r2
 800a748:	eb42 0303 	adc.w	r3, r2, r3
 800a74c:	647b      	str	r3, [r7, #68]	; 0x44
 800a74e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a756:	f7f6 f97d 	bl	8000a54 <__aeabi_uldivmod>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4611      	mov	r1, r2
 800a760:	4b3b      	ldr	r3, [pc, #236]	; (800a850 <UART_SetConfig+0x2d4>)
 800a762:	fba3 2301 	umull	r2, r3, r3, r1
 800a766:	095b      	lsrs	r3, r3, #5
 800a768:	2264      	movs	r2, #100	; 0x64
 800a76a:	fb02 f303 	mul.w	r3, r2, r3
 800a76e:	1acb      	subs	r3, r1, r3
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a776:	4b36      	ldr	r3, [pc, #216]	; (800a850 <UART_SetConfig+0x2d4>)
 800a778:	fba3 2302 	umull	r2, r3, r3, r2
 800a77c:	095b      	lsrs	r3, r3, #5
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a784:	441c      	add	r4, r3
 800a786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	1891      	adds	r1, r2, r2
 800a79e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7a0:	415b      	adcs	r3, r3
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	1851      	adds	r1, r2, r1
 800a7ac:	6339      	str	r1, [r7, #48]	; 0x30
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	414b      	adcs	r3, r1
 800a7b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b4:	f04f 0200 	mov.w	r2, #0
 800a7b8:	f04f 0300 	mov.w	r3, #0
 800a7bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7c0:	4659      	mov	r1, fp
 800a7c2:	00cb      	lsls	r3, r1, #3
 800a7c4:	4651      	mov	r1, sl
 800a7c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7ca:	4651      	mov	r1, sl
 800a7cc:	00ca      	lsls	r2, r1, #3
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	4642      	mov	r2, r8
 800a7d6:	189b      	adds	r3, r3, r2
 800a7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7dc:	464b      	mov	r3, r9
 800a7de:	460a      	mov	r2, r1
 800a7e0:	eb42 0303 	adc.w	r3, r2, r3
 800a7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a7f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a7f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	18db      	adds	r3, r3, r3
 800a800:	62bb      	str	r3, [r7, #40]	; 0x28
 800a802:	4613      	mov	r3, r2
 800a804:	eb42 0303 	adc.w	r3, r2, r3
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a80a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a80e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a812:	f7f6 f91f 	bl	8000a54 <__aeabi_uldivmod>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <UART_SetConfig+0x2d4>)
 800a81c:	fba3 1302 	umull	r1, r3, r3, r2
 800a820:	095b      	lsrs	r3, r3, #5
 800a822:	2164      	movs	r1, #100	; 0x64
 800a824:	fb01 f303 	mul.w	r3, r1, r3
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	3332      	adds	r3, #50	; 0x32
 800a82e:	4a08      	ldr	r2, [pc, #32]	; (800a850 <UART_SetConfig+0x2d4>)
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	095b      	lsrs	r3, r3, #5
 800a836:	f003 0207 	and.w	r2, r3, #7
 800a83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4422      	add	r2, r4
 800a842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a844:	e105      	b.n	800aa52 <UART_SetConfig+0x4d6>
 800a846:	bf00      	nop
 800a848:	40011000 	.word	0x40011000
 800a84c:	40011400 	.word	0x40011400
 800a850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a85e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a866:	4642      	mov	r2, r8
 800a868:	464b      	mov	r3, r9
 800a86a:	1891      	adds	r1, r2, r2
 800a86c:	6239      	str	r1, [r7, #32]
 800a86e:	415b      	adcs	r3, r3
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
 800a872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a876:	4641      	mov	r1, r8
 800a878:	1854      	adds	r4, r2, r1
 800a87a:	4649      	mov	r1, r9
 800a87c:	eb43 0501 	adc.w	r5, r3, r1
 800a880:	f04f 0200 	mov.w	r2, #0
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	00eb      	lsls	r3, r5, #3
 800a88a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a88e:	00e2      	lsls	r2, r4, #3
 800a890:	4614      	mov	r4, r2
 800a892:	461d      	mov	r5, r3
 800a894:	4643      	mov	r3, r8
 800a896:	18e3      	adds	r3, r4, r3
 800a898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a89c:	464b      	mov	r3, r9
 800a89e:	eb45 0303 	adc.w	r3, r5, r3
 800a8a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	f04f 0300 	mov.w	r3, #0
 800a8be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	008b      	lsls	r3, r1, #2
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	008a      	lsls	r2, r1, #2
 800a8d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8d4:	f7f6 f8be 	bl	8000a54 <__aeabi_uldivmod>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4b60      	ldr	r3, [pc, #384]	; (800aa60 <UART_SetConfig+0x4e4>)
 800a8de:	fba3 2302 	umull	r2, r3, r3, r2
 800a8e2:	095b      	lsrs	r3, r3, #5
 800a8e4:	011c      	lsls	r4, r3, #4
 800a8e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a8f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a8f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	1891      	adds	r1, r2, r2
 800a8fe:	61b9      	str	r1, [r7, #24]
 800a900:	415b      	adcs	r3, r3
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a908:	4641      	mov	r1, r8
 800a90a:	1851      	adds	r1, r2, r1
 800a90c:	6139      	str	r1, [r7, #16]
 800a90e:	4649      	mov	r1, r9
 800a910:	414b      	adcs	r3, r1
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a920:	4659      	mov	r1, fp
 800a922:	00cb      	lsls	r3, r1, #3
 800a924:	4651      	mov	r1, sl
 800a926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a92a:	4651      	mov	r1, sl
 800a92c:	00ca      	lsls	r2, r1, #3
 800a92e:	4610      	mov	r0, r2
 800a930:	4619      	mov	r1, r3
 800a932:	4603      	mov	r3, r0
 800a934:	4642      	mov	r2, r8
 800a936:	189b      	adds	r3, r3, r2
 800a938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a93c:	464b      	mov	r3, r9
 800a93e:	460a      	mov	r2, r1
 800a940:	eb42 0303 	adc.w	r3, r2, r3
 800a944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	67bb      	str	r3, [r7, #120]	; 0x78
 800a952:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a960:	4649      	mov	r1, r9
 800a962:	008b      	lsls	r3, r1, #2
 800a964:	4641      	mov	r1, r8
 800a966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a96a:	4641      	mov	r1, r8
 800a96c:	008a      	lsls	r2, r1, #2
 800a96e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a972:	f7f6 f86f 	bl	8000a54 <__aeabi_uldivmod>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4b39      	ldr	r3, [pc, #228]	; (800aa60 <UART_SetConfig+0x4e4>)
 800a97c:	fba3 1302 	umull	r1, r3, r3, r2
 800a980:	095b      	lsrs	r3, r3, #5
 800a982:	2164      	movs	r1, #100	; 0x64
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	3332      	adds	r3, #50	; 0x32
 800a98e:	4a34      	ldr	r2, [pc, #208]	; (800aa60 <UART_SetConfig+0x4e4>)
 800a990:	fba2 2303 	umull	r2, r3, r2, r3
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a99a:	441c      	add	r4, r3
 800a99c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	673b      	str	r3, [r7, #112]	; 0x70
 800a9a4:	677a      	str	r2, [r7, #116]	; 0x74
 800a9a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a9aa:	4642      	mov	r2, r8
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	1891      	adds	r1, r2, r2
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	415b      	adcs	r3, r3
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	1851      	adds	r1, r2, r1
 800a9be:	6039      	str	r1, [r7, #0]
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	414b      	adcs	r3, r1
 800a9c4:	607b      	str	r3, [r7, #4]
 800a9c6:	f04f 0200 	mov.w	r2, #0
 800a9ca:	f04f 0300 	mov.w	r3, #0
 800a9ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9d2:	4659      	mov	r1, fp
 800a9d4:	00cb      	lsls	r3, r1, #3
 800a9d6:	4651      	mov	r1, sl
 800a9d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9dc:	4651      	mov	r1, sl
 800a9de:	00ca      	lsls	r2, r1, #3
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4642      	mov	r2, r8
 800a9e8:	189b      	adds	r3, r3, r2
 800a9ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	eb42 0303 	adc.w	r3, r2, r3
 800a9f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	663b      	str	r3, [r7, #96]	; 0x60
 800aa00:	667a      	str	r2, [r7, #100]	; 0x64
 800aa02:	f04f 0200 	mov.w	r2, #0
 800aa06:	f04f 0300 	mov.w	r3, #0
 800aa0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa0e:	4649      	mov	r1, r9
 800aa10:	008b      	lsls	r3, r1, #2
 800aa12:	4641      	mov	r1, r8
 800aa14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa18:	4641      	mov	r1, r8
 800aa1a:	008a      	lsls	r2, r1, #2
 800aa1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa20:	f7f6 f818 	bl	8000a54 <__aeabi_uldivmod>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <UART_SetConfig+0x4e4>)
 800aa2a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa2e:	095b      	lsrs	r3, r3, #5
 800aa30:	2164      	movs	r1, #100	; 0x64
 800aa32:	fb01 f303 	mul.w	r3, r1, r3
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	3332      	adds	r3, #50	; 0x32
 800aa3c:	4a08      	ldr	r2, [pc, #32]	; (800aa60 <UART_SetConfig+0x4e4>)
 800aa3e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4422      	add	r2, r4
 800aa50:	609a      	str	r2, [r3, #8]
}
 800aa52:	bf00      	nop
 800aa54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa5e:	bf00      	nop
 800aa60:	51eb851f 	.word	0x51eb851f

0800aa64 <arm_mat_trans_f32>:
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	8802      	ldrh	r2, [r0, #0]
 800aa6a:	884b      	ldrh	r3, [r1, #2]
 800aa6c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aa70:	684f      	ldr	r7, [r1, #4]
 800aa72:	8840      	ldrh	r0, [r0, #2]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	b083      	sub	sp, #12
 800aa78:	d14c      	bne.n	800ab14 <arm_mat_trans_f32+0xb0>
 800aa7a:	f8b1 e000 	ldrh.w	lr, [r1]
 800aa7e:	4586      	cmp	lr, r0
 800aa80:	d148      	bne.n	800ab14 <arm_mat_trans_f32+0xb0>
 800aa82:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800aa86:	009c      	lsls	r4, r3, #2
 800aa88:	f00e 0e03 	and.w	lr, lr, #3
 800aa8c:	fb08 f904 	mul.w	r9, r8, r4
 800aa90:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800aa94:	011d      	lsls	r5, r3, #4
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800aa9c:	eb07 0a04 	add.w	sl, r7, r4
 800aaa0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800aaa4:	9201      	str	r2, [sp, #4]
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	f1b8 0f00 	cmp.w	r8, #0
 800aaae:	d01d      	beq.n	800aaec <arm_mat_trans_f32+0x88>
 800aab0:	9900      	ldr	r1, [sp, #0]
 800aab2:	f10c 0210 	add.w	r2, ip, #16
 800aab6:	4439      	add	r1, r7
 800aab8:	4640      	mov	r0, r8
 800aaba:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800aabe:	601e      	str	r6, [r3, #0]
 800aac0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800aac4:	191e      	adds	r6, r3, r4
 800aac6:	edc6 7a00 	vstr	s15, [r6]
 800aaca:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800aace:	600e      	str	r6, [r1, #0]
 800aad0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800aad4:	190e      	adds	r6, r1, r4
 800aad6:	3801      	subs	r0, #1
 800aad8:	442b      	add	r3, r5
 800aada:	f102 0210 	add.w	r2, r2, #16
 800aade:	edc6 7a00 	vstr	s15, [r6]
 800aae2:	4429      	add	r1, r5
 800aae4:	d1e9      	bne.n	800aaba <arm_mat_trans_f32+0x56>
 800aae6:	44dc      	add	ip, fp
 800aae8:	eb09 0307 	add.w	r3, r9, r7
 800aaec:	f1be 0f00 	cmp.w	lr, #0
 800aaf0:	d009      	beq.n	800ab06 <arm_mat_trans_f32+0xa2>
 800aaf2:	4672      	mov	r2, lr
 800aaf4:	4661      	mov	r1, ip
 800aaf6:	f851 0b04 	ldr.w	r0, [r1], #4
 800aafa:	6018      	str	r0, [r3, #0]
 800aafc:	3a01      	subs	r2, #1
 800aafe:	4423      	add	r3, r4
 800ab00:	d1f9      	bne.n	800aaf6 <arm_mat_trans_f32+0x92>
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	449c      	add	ip, r3
 800ab06:	3704      	adds	r7, #4
 800ab08:	4557      	cmp	r7, sl
 800ab0a:	d1cd      	bne.n	800aaa8 <arm_mat_trans_f32+0x44>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	b003      	add	sp, #12
 800ab10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab14:	f06f 0002 	mvn.w	r0, #2
 800ab18:	e7f9      	b.n	800ab0e <arm_mat_trans_f32+0xaa>
 800ab1a:	bf00      	nop

0800ab1c <arm_mat_sub_f32>:
 800ab1c:	b4f0      	push	{r4, r5, r6, r7}
 800ab1e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800ab22:	6803      	ldr	r3, [r0, #0]
 800ab24:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ab28:	6856      	ldr	r6, [r2, #4]
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	d15d      	bne.n	800abea <arm_mat_sub_f32+0xce>
 800ab2e:	6812      	ldr	r2, [r2, #0]
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d15a      	bne.n	800abea <arm_mat_sub_f32+0xce>
 800ab34:	8803      	ldrh	r3, [r0, #0]
 800ab36:	8844      	ldrh	r4, [r0, #2]
 800ab38:	fb04 f403 	mul.w	r4, r4, r3
 800ab3c:	08a5      	lsrs	r5, r4, #2
 800ab3e:	d032      	beq.n	800aba6 <arm_mat_sub_f32+0x8a>
 800ab40:	f10c 0110 	add.w	r1, ip, #16
 800ab44:	f107 0210 	add.w	r2, r7, #16
 800ab48:	f106 0310 	add.w	r3, r6, #16
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ab52:	ed51 7a04 	vldr	s15, [r1, #-16]
 800ab56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab5a:	3801      	subs	r0, #1
 800ab5c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ab60:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ab64:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ab68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab6c:	f101 0110 	add.w	r1, r1, #16
 800ab70:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ab74:	ed12 7a02 	vldr	s14, [r2, #-8]
 800ab78:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800ab7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab80:	f102 0210 	add.w	r2, r2, #16
 800ab84:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ab88:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800ab8c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ab90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab94:	f103 0310 	add.w	r3, r3, #16
 800ab98:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ab9c:	d1d7      	bne.n	800ab4e <arm_mat_sub_f32+0x32>
 800ab9e:	012b      	lsls	r3, r5, #4
 800aba0:	449c      	add	ip, r3
 800aba2:	441f      	add	r7, r3
 800aba4:	441e      	add	r6, r3
 800aba6:	f014 0403 	ands.w	r4, r4, #3
 800abaa:	d01b      	beq.n	800abe4 <arm_mat_sub_f32+0xc8>
 800abac:	eddc 7a00 	vldr	s15, [ip]
 800abb0:	ed97 7a00 	vldr	s14, [r7]
 800abb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abb8:	3c01      	subs	r4, #1
 800abba:	edc6 7a00 	vstr	s15, [r6]
 800abbe:	d011      	beq.n	800abe4 <arm_mat_sub_f32+0xc8>
 800abc0:	eddc 7a01 	vldr	s15, [ip, #4]
 800abc4:	ed97 7a01 	vldr	s14, [r7, #4]
 800abc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abcc:	2c01      	cmp	r4, #1
 800abce:	edc6 7a01 	vstr	s15, [r6, #4]
 800abd2:	d007      	beq.n	800abe4 <arm_mat_sub_f32+0xc8>
 800abd4:	eddc 7a02 	vldr	s15, [ip, #8]
 800abd8:	ed97 7a02 	vldr	s14, [r7, #8]
 800abdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abe0:	edc6 7a02 	vstr	s15, [r6, #8]
 800abe4:	2000      	movs	r0, #0
 800abe6:	bcf0      	pop	{r4, r5, r6, r7}
 800abe8:	4770      	bx	lr
 800abea:	f06f 0002 	mvn.w	r0, #2
 800abee:	e7fa      	b.n	800abe6 <arm_mat_sub_f32+0xca>

0800abf0 <arm_mat_mult_f32>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	8845      	ldrh	r5, [r0, #2]
 800abf6:	880b      	ldrh	r3, [r1, #0]
 800abf8:	8806      	ldrh	r6, [r0, #0]
 800abfa:	6847      	ldr	r7, [r0, #4]
 800abfc:	6854      	ldr	r4, [r2, #4]
 800abfe:	6848      	ldr	r0, [r1, #4]
 800ac00:	b08b      	sub	sp, #44	; 0x2c
 800ac02:	42ab      	cmp	r3, r5
 800ac04:	9109      	str	r1, [sp, #36]	; 0x24
 800ac06:	9604      	str	r6, [sp, #16]
 800ac08:	8849      	ldrh	r1, [r1, #2]
 800ac0a:	f040 808a 	bne.w	800ad22 <arm_mat_mult_f32+0x132>
 800ac0e:	8815      	ldrh	r5, [r2, #0]
 800ac10:	42b5      	cmp	r5, r6
 800ac12:	f040 8086 	bne.w	800ad22 <arm_mat_mult_f32+0x132>
 800ac16:	8852      	ldrh	r2, [r2, #2]
 800ac18:	428a      	cmp	r2, r1
 800ac1a:	f040 8082 	bne.w	800ad22 <arm_mat_mult_f32+0x132>
 800ac1e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ac22:	1d01      	adds	r1, r0, #4
 800ac24:	0116      	lsls	r6, r2, #4
 800ac26:	9108      	str	r1, [sp, #32]
 800ac28:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800ac2c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800ac30:	9101      	str	r1, [sp, #4]
 800ac32:	fb06 f108 	mul.w	r1, r6, r8
 800ac36:	0095      	lsls	r5, r2, #2
 800ac38:	9103      	str	r1, [sp, #12]
 800ac3a:	00d2      	lsls	r2, r2, #3
 800ac3c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800ac40:	f003 0903 	and.w	r9, r3, #3
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	f107 0b10 	add.w	fp, r7, #16
 800ac4a:	eb04 0a05 	add.w	sl, r4, r5
 800ac4e:	9107      	str	r1, [sp, #28]
 800ac50:	9202      	str	r2, [sp, #8]
 800ac52:	9306      	str	r3, [sp, #24]
 800ac54:	f1ab 0310 	sub.w	r3, fp, #16
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	9b07      	ldr	r3, [sp, #28]
 800ac5c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ac60:	eb03 0c0a 	add.w	ip, r3, sl
 800ac64:	eddf 7a31 	vldr	s15, [pc, #196]	; 800ad2c <arm_mat_mult_f32+0x13c>
 800ac68:	f1b8 0f00 	cmp.w	r8, #0
 800ac6c:	d053      	beq.n	800ad16 <arm_mat_mult_f32+0x126>
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	4644      	mov	r4, r8
 800ac72:	18c1      	adds	r1, r0, r3
 800ac74:	4602      	mov	r2, r0
 800ac76:	465b      	mov	r3, fp
 800ac78:	ed92 6a00 	vldr	s12, [r2]
 800ac7c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ac80:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ac84:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ac88:	ed91 5a00 	vldr	s10, [r1]
 800ac8c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ac90:	1957      	adds	r7, r2, r5
 800ac92:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ac96:	ed97 6a00 	vldr	s12, [r7]
 800ac9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac9e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aca2:	194f      	adds	r7, r1, r5
 800aca4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aca8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800acac:	edd7 7a00 	vldr	s15, [r7]
 800acb0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800acb4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acb8:	3c01      	subs	r4, #1
 800acba:	4432      	add	r2, r6
 800acbc:	4431      	add	r1, r6
 800acbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acc2:	f103 0310 	add.w	r3, r3, #16
 800acc6:	d1d7      	bne.n	800ac78 <arm_mat_mult_f32+0x88>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	9a01      	ldr	r2, [sp, #4]
 800accc:	4418      	add	r0, r3
 800acce:	f1b9 0f00 	cmp.w	r9, #0
 800acd2:	d00b      	beq.n	800acec <arm_mat_mult_f32+0xfc>
 800acd4:	464b      	mov	r3, r9
 800acd6:	edd0 6a00 	vldr	s13, [r0]
 800acda:	ecb2 7a01 	vldmia	r2!, {s14}
 800acde:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ace2:	3b01      	subs	r3, #1
 800ace4:	4428      	add	r0, r5
 800ace6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acea:	d1f4      	bne.n	800acd6 <arm_mat_mult_f32+0xe6>
 800acec:	ecec 7a01 	vstmia	ip!, {s15}
 800acf0:	45d4      	cmp	ip, sl
 800acf2:	4670      	mov	r0, lr
 800acf4:	f10e 0e04 	add.w	lr, lr, #4
 800acf8:	d1b4      	bne.n	800ac64 <arm_mat_mult_f32+0x74>
 800acfa:	9a01      	ldr	r2, [sp, #4]
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	4611      	mov	r1, r2
 800ad00:	4419      	add	r1, r3
 800ad02:	449b      	add	fp, r3
 800ad04:	9b04      	ldr	r3, [sp, #16]
 800ad06:	9101      	str	r1, [sp, #4]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	44aa      	add	sl, r5
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	d004      	beq.n	800ad1a <arm_mat_mult_f32+0x12a>
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	6858      	ldr	r0, [r3, #4]
 800ad14:	e79e      	b.n	800ac54 <arm_mat_mult_f32+0x64>
 800ad16:	9a05      	ldr	r2, [sp, #20]
 800ad18:	e7d9      	b.n	800acce <arm_mat_mult_f32+0xde>
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	b00b      	add	sp, #44	; 0x2c
 800ad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad22:	f06f 0002 	mvn.w	r0, #2
 800ad26:	b00b      	add	sp, #44	; 0x2c
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	00000000 	.word	0x00000000

0800ad30 <arm_mat_inverse_f32>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	8843      	ldrh	r3, [r0, #2]
 800ad36:	8804      	ldrh	r4, [r0, #0]
 800ad38:	684e      	ldr	r6, [r1, #4]
 800ad3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ad3e:	b087      	sub	sp, #28
 800ad40:	429c      	cmp	r4, r3
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	9603      	str	r6, [sp, #12]
 800ad46:	f040 80ea 	bne.w	800af1e <arm_mat_inverse_f32+0x1ee>
 800ad4a:	880a      	ldrh	r2, [r1, #0]
 800ad4c:	884b      	ldrh	r3, [r1, #2]
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	f040 80e5 	bne.w	800af1e <arm_mat_inverse_f32+0x1ee>
 800ad54:	429c      	cmp	r4, r3
 800ad56:	f040 80e2 	bne.w	800af1e <arm_mat_inverse_f32+0x1ee>
 800ad5a:	9005      	str	r0, [sp, #20]
 800ad5c:	b30c      	cbz	r4, 800ada2 <arm_mat_inverse_f32+0x72>
 800ad5e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800ad62:	1e67      	subs	r7, r4, #1
 800ad64:	f846 bb04 	str.w	fp, [r6], #4
 800ad68:	d01b      	beq.n	800ada2 <arm_mat_inverse_f32+0x72>
 800ad6a:	f04f 0801 	mov.w	r8, #1
 800ad6e:	00ba      	lsls	r2, r7, #2
 800ad70:	eb06 0a02 	add.w	sl, r6, r2
 800ad74:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800ad78:	4630      	mov	r0, r6
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	f000 f97e 	bl	800b07c <memset>
 800ad80:	eb0a 0605 	add.w	r6, sl, r5
 800ad84:	462a      	mov	r2, r5
 800ad86:	2100      	movs	r1, #0
 800ad88:	4650      	mov	r0, sl
 800ad8a:	f1b8 0f00 	cmp.w	r8, #0
 800ad8e:	f000 80cb 	beq.w	800af28 <arm_mat_inverse_f32+0x1f8>
 800ad92:	f000 f973 	bl	800b07c <memset>
 800ad96:	3f01      	subs	r7, #1
 800ad98:	f108 0801 	add.w	r8, r8, #1
 800ad9c:	f846 bb04 	str.w	fp, [r6], #4
 800ada0:	d1e5      	bne.n	800ad6e <arm_mat_inverse_f32+0x3e>
 800ada2:	9b01      	ldr	r3, [sp, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 80b5 	beq.w	800af14 <arm_mat_inverse_f32+0x1e4>
 800adaa:	009d      	lsls	r5, r3, #2
 800adac:	eb09 0205 	add.w	r2, r9, r5
 800adb0:	46cc      	mov	ip, r9
 800adb2:	9202      	str	r2, [sp, #8]
 800adb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800adb8:	1d2a      	adds	r2, r5, #4
 800adba:	9204      	str	r2, [sp, #16]
 800adbc:	462f      	mov	r7, r5
 800adbe:	469e      	mov	lr, r3
 800adc0:	2600      	movs	r6, #0
 800adc2:	9b02      	ldr	r3, [sp, #8]
 800adc4:	eddc 6a00 	vldr	s13, [ip]
 800adc8:	42b4      	cmp	r4, r6
 800adca:	eba3 0b07 	sub.w	fp, r3, r7
 800adce:	f000 80a1 	beq.w	800af14 <arm_mat_inverse_f32+0x1e4>
 800add2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800af38 <arm_mat_inverse_f32+0x208>
 800add6:	4632      	mov	r2, r6
 800add8:	4663      	mov	r3, ip
 800adda:	e00b      	b.n	800adf4 <arm_mat_inverse_f32+0xc4>
 800addc:	eef4 7a47 	vcmp.f32	s15, s14
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	f102 0201 	add.w	r2, r2, #1
 800ade8:	bfc8      	it	gt
 800adea:	eeb0 7a67 	vmovgt.f32	s14, s15
 800adee:	42a2      	cmp	r2, r4
 800adf0:	442b      	add	r3, r5
 800adf2:	d014      	beq.n	800ae1e <arm_mat_inverse_f32+0xee>
 800adf4:	edd3 7a00 	vldr	s15, [r3]
 800adf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae00:	eeb1 6a67 	vneg.f32	s12, s15
 800ae04:	dcea      	bgt.n	800addc <arm_mat_inverse_f32+0xac>
 800ae06:	eeb4 6a47 	vcmp.f32	s12, s14
 800ae0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0e:	f102 0201 	add.w	r2, r2, #1
 800ae12:	bfc8      	it	gt
 800ae14:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ae18:	42a2      	cmp	r2, r4
 800ae1a:	442b      	add	r3, r5
 800ae1c:	d1ea      	bne.n	800adf4 <arm_mat_inverse_f32+0xc4>
 800ae1e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ae22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae26:	d075      	beq.n	800af14 <arm_mat_inverse_f32+0x1e4>
 800ae28:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	d070      	beq.n	800af14 <arm_mat_inverse_f32+0x1e4>
 800ae32:	4672      	mov	r2, lr
 800ae34:	4663      	mov	r3, ip
 800ae36:	ed93 7a00 	vldr	s14, [r3]
 800ae3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae3e:	3a01      	subs	r2, #1
 800ae40:	ece3 7a01 	vstmia	r3!, {s15}
 800ae44:	d1f7      	bne.n	800ae36 <arm_mat_inverse_f32+0x106>
 800ae46:	9901      	ldr	r1, [sp, #4]
 800ae48:	464b      	mov	r3, r9
 800ae4a:	ed93 7a00 	vldr	s14, [r3]
 800ae4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae52:	3901      	subs	r1, #1
 800ae54:	ece3 7a01 	vstmia	r3!, {s15}
 800ae58:	d1f7      	bne.n	800ae4a <arm_mat_inverse_f32+0x11a>
 800ae5a:	9803      	ldr	r0, [sp, #12]
 800ae5c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800ae60:	42b1      	cmp	r1, r6
 800ae62:	d039      	beq.n	800aed8 <arm_mat_inverse_f32+0x1a8>
 800ae64:	eddb 6a00 	vldr	s13, [fp]
 800ae68:	465a      	mov	r2, fp
 800ae6a:	4673      	mov	r3, lr
 800ae6c:	46e2      	mov	sl, ip
 800ae6e:	ecba 7a01 	vldmia	sl!, {s14}
 800ae72:	edd2 7a00 	vldr	s15, [r2]
 800ae76:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae80:	ece2 7a01 	vstmia	r2!, {s15}
 800ae84:	d1f3      	bne.n	800ae6e <arm_mat_inverse_f32+0x13e>
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	44bb      	add	fp, r7
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	46ca      	mov	sl, r9
 800ae8e:	ecba 7a01 	vldmia	sl!, {s14}
 800ae92:	edd2 7a00 	vldr	s15, [r2]
 800ae96:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aea0:	ece2 7a01 	vstmia	r2!, {s15}
 800aea4:	d1f3      	bne.n	800ae8e <arm_mat_inverse_f32+0x15e>
 800aea6:	4428      	add	r0, r5
 800aea8:	3101      	adds	r1, #1
 800aeaa:	428c      	cmp	r4, r1
 800aeac:	44c3      	add	fp, r8
 800aeae:	d1d7      	bne.n	800ae60 <arm_mat_inverse_f32+0x130>
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	f1be 0e01 	subs.w	lr, lr, #1
 800aeb6:	f106 0601 	add.w	r6, r6, #1
 800aeba:	449c      	add	ip, r3
 800aebc:	f1a7 0704 	sub.w	r7, r7, #4
 800aec0:	44a9      	add	r9, r5
 800aec2:	f47f af7e 	bne.w	800adc2 <arm_mat_inverse_f32+0x92>
 800aec6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	d006      	beq.n	800aede <arm_mat_inverse_f32+0x1ae>
 800aed0:	2000      	movs	r0, #0
 800aed2:	b007      	add	sp, #28
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed8:	44bb      	add	fp, r7
 800aeda:	4428      	add	r0, r5
 800aedc:	e7e4      	b.n	800aea8 <arm_mat_inverse_f32+0x178>
 800aede:	9b05      	ldr	r3, [sp, #20]
 800aee0:	9a01      	ldr	r2, [sp, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	edd3 7a00 	vldr	s15, [r3]
 800aee8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aeec:	fb02 f204 	mul.w	r2, r2, r4
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	4614      	mov	r4, r2
 800aef6:	bf08      	it	eq
 800aef8:	3304      	addeq	r3, #4
 800aefa:	d007      	beq.n	800af0c <arm_mat_inverse_f32+0x1dc>
 800aefc:	e7e8      	b.n	800aed0 <arm_mat_inverse_f32+0x1a0>
 800aefe:	ecf3 7a01 	vldmia	r3!, {s15}
 800af02:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0a:	d1e1      	bne.n	800aed0 <arm_mat_inverse_f32+0x1a0>
 800af0c:	f10e 0e01 	add.w	lr, lr, #1
 800af10:	4574      	cmp	r4, lr
 800af12:	d1f4      	bne.n	800aefe <arm_mat_inverse_f32+0x1ce>
 800af14:	f06f 0004 	mvn.w	r0, #4
 800af18:	b007      	add	sp, #28
 800af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1e:	f06f 0002 	mvn.w	r0, #2
 800af22:	b007      	add	sp, #28
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	4656      	mov	r6, sl
 800af2a:	3f01      	subs	r7, #1
 800af2c:	f846 bb04 	str.w	fp, [r6], #4
 800af30:	f47f af1b 	bne.w	800ad6a <arm_mat_inverse_f32+0x3a>
 800af34:	e735      	b.n	800ada2 <arm_mat_inverse_f32+0x72>
 800af36:	bf00      	nop
 800af38:	00000000 	.word	0x00000000

0800af3c <arm_mat_init_f32>:
 800af3c:	8001      	strh	r1, [r0, #0]
 800af3e:	8042      	strh	r2, [r0, #2]
 800af40:	6043      	str	r3, [r0, #4]
 800af42:	4770      	bx	lr

0800af44 <arm_mat_add_f32>:
 800af44:	b4f0      	push	{r4, r5, r6, r7}
 800af46:	e9d1 4700 	ldrd	r4, r7, [r1]
 800af4a:	6803      	ldr	r3, [r0, #0]
 800af4c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800af50:	6856      	ldr	r6, [r2, #4]
 800af52:	42a3      	cmp	r3, r4
 800af54:	d15d      	bne.n	800b012 <arm_mat_add_f32+0xce>
 800af56:	6812      	ldr	r2, [r2, #0]
 800af58:	4293      	cmp	r3, r2
 800af5a:	d15a      	bne.n	800b012 <arm_mat_add_f32+0xce>
 800af5c:	8803      	ldrh	r3, [r0, #0]
 800af5e:	8844      	ldrh	r4, [r0, #2]
 800af60:	fb04 f403 	mul.w	r4, r4, r3
 800af64:	08a5      	lsrs	r5, r4, #2
 800af66:	d032      	beq.n	800afce <arm_mat_add_f32+0x8a>
 800af68:	f10c 0110 	add.w	r1, ip, #16
 800af6c:	f107 0210 	add.w	r2, r7, #16
 800af70:	f106 0310 	add.w	r3, r6, #16
 800af74:	4628      	mov	r0, r5
 800af76:	ed12 7a04 	vldr	s14, [r2, #-16]
 800af7a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800af7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af82:	3801      	subs	r0, #1
 800af84:	ed43 7a04 	vstr	s15, [r3, #-16]
 800af88:	ed12 7a03 	vldr	s14, [r2, #-12]
 800af8c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800af90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af94:	f101 0110 	add.w	r1, r1, #16
 800af98:	ed43 7a03 	vstr	s15, [r3, #-12]
 800af9c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800afa0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800afa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afa8:	f102 0210 	add.w	r2, r2, #16
 800afac:	ed43 7a02 	vstr	s15, [r3, #-8]
 800afb0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800afb4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800afb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afbc:	f103 0310 	add.w	r3, r3, #16
 800afc0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800afc4:	d1d7      	bne.n	800af76 <arm_mat_add_f32+0x32>
 800afc6:	012b      	lsls	r3, r5, #4
 800afc8:	449c      	add	ip, r3
 800afca:	441f      	add	r7, r3
 800afcc:	441e      	add	r6, r3
 800afce:	f014 0403 	ands.w	r4, r4, #3
 800afd2:	d01b      	beq.n	800b00c <arm_mat_add_f32+0xc8>
 800afd4:	edd7 7a00 	vldr	s15, [r7]
 800afd8:	ed9c 7a00 	vldr	s14, [ip]
 800afdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afe0:	3c01      	subs	r4, #1
 800afe2:	edc6 7a00 	vstr	s15, [r6]
 800afe6:	d011      	beq.n	800b00c <arm_mat_add_f32+0xc8>
 800afe8:	eddc 7a01 	vldr	s15, [ip, #4]
 800afec:	ed97 7a01 	vldr	s14, [r7, #4]
 800aff0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aff4:	2c01      	cmp	r4, #1
 800aff6:	edc6 7a01 	vstr	s15, [r6, #4]
 800affa:	d007      	beq.n	800b00c <arm_mat_add_f32+0xc8>
 800affc:	eddc 7a02 	vldr	s15, [ip, #8]
 800b000:	ed97 7a02 	vldr	s14, [r7, #8]
 800b004:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b008:	edc6 7a02 	vstr	s15, [r6, #8]
 800b00c:	2000      	movs	r0, #0
 800b00e:	bcf0      	pop	{r4, r5, r6, r7}
 800b010:	4770      	bx	lr
 800b012:	f06f 0002 	mvn.w	r0, #2
 800b016:	e7fa      	b.n	800b00e <arm_mat_add_f32+0xca>

0800b018 <__libc_init_array>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	4d0d      	ldr	r5, [pc, #52]	; (800b050 <__libc_init_array+0x38>)
 800b01c:	4c0d      	ldr	r4, [pc, #52]	; (800b054 <__libc_init_array+0x3c>)
 800b01e:	1b64      	subs	r4, r4, r5
 800b020:	10a4      	asrs	r4, r4, #2
 800b022:	2600      	movs	r6, #0
 800b024:	42a6      	cmp	r6, r4
 800b026:	d109      	bne.n	800b03c <__libc_init_array+0x24>
 800b028:	4d0b      	ldr	r5, [pc, #44]	; (800b058 <__libc_init_array+0x40>)
 800b02a:	4c0c      	ldr	r4, [pc, #48]	; (800b05c <__libc_init_array+0x44>)
 800b02c:	f000 f82e 	bl	800b08c <_init>
 800b030:	1b64      	subs	r4, r4, r5
 800b032:	10a4      	asrs	r4, r4, #2
 800b034:	2600      	movs	r6, #0
 800b036:	42a6      	cmp	r6, r4
 800b038:	d105      	bne.n	800b046 <__libc_init_array+0x2e>
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b040:	4798      	blx	r3
 800b042:	3601      	adds	r6, #1
 800b044:	e7ee      	b.n	800b024 <__libc_init_array+0xc>
 800b046:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04a:	4798      	blx	r3
 800b04c:	3601      	adds	r6, #1
 800b04e:	e7f2      	b.n	800b036 <__libc_init_array+0x1e>
 800b050:	0800b0cc 	.word	0x0800b0cc
 800b054:	0800b0cc 	.word	0x0800b0cc
 800b058:	0800b0cc 	.word	0x0800b0cc
 800b05c:	0800b0d0 	.word	0x0800b0d0

0800b060 <memcpy>:
 800b060:	440a      	add	r2, r1
 800b062:	4291      	cmp	r1, r2
 800b064:	f100 33ff 	add.w	r3, r0, #4294967295
 800b068:	d100      	bne.n	800b06c <memcpy+0xc>
 800b06a:	4770      	bx	lr
 800b06c:	b510      	push	{r4, lr}
 800b06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b072:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b076:	4291      	cmp	r1, r2
 800b078:	d1f9      	bne.n	800b06e <memcpy+0xe>
 800b07a:	bd10      	pop	{r4, pc}

0800b07c <memset>:
 800b07c:	4402      	add	r2, r0
 800b07e:	4603      	mov	r3, r0
 800b080:	4293      	cmp	r3, r2
 800b082:	d100      	bne.n	800b086 <memset+0xa>
 800b084:	4770      	bx	lr
 800b086:	f803 1b01 	strb.w	r1, [r3], #1
 800b08a:	e7f9      	b.n	800b080 <memset+0x4>

0800b08c <_init>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	bf00      	nop
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr

0800b098 <_fini>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	bf00      	nop
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr
