
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a040  0800a040  0002044c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a048  0800a048  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000044c  20000000  0800a050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000450  0800a49c  00020450  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800a49c  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d27  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee6  00000000  00000000  000371a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017687  00000000  00000000  0003c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015300  00000000  00000000  000537c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c57  00000000  00000000  00068ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fb71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  000fb7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000fff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000450 	.word	0x20000450
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a008 	.word	0x0800a008

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000454 	.word	0x20000454
 80001d4:	0800a008 	.word	0x0800a008

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f009 f8c4 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f009 f8bb 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f009 f8b2 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 700d 	add.w	r0, r3, #564	; 0x234
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f009 f8a9 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 1, 1, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 700f 	add.w	r0, r3, #572	; 0x23c
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2201      	movs	r2, #1
 8000d72:	2101      	movs	r1, #1
 8000d74:	f009 f8a0 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3344      	adds	r3, #68	; 0x44
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f009 f897 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 1, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3348      	adds	r3, #72	; 0x48
 8000d94:	2201      	movs	r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	f009 f88e 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3354      	adds	r3, #84	; 0x54
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f009 f885 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3360      	adds	r3, #96	; 0x60
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f009 f87c 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 7019 	add.w	r0, r3, #612	; 0x264
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	336c      	adds	r3, #108	; 0x6c
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f009 f873 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3390      	adds	r3, #144	; 0x90
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f009 f86a 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 701d 	add.w	r0, r3, #628	; 0x274
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33b4      	adds	r3, #180	; 0xb4
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f009 f861 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33b8      	adds	r3, #184	; 0xb8
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f009 f858 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33bc      	adds	r3, #188	; 0xbc
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f009 f84f 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33c0      	adds	r3, #192	; 0xc0
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f009 f846 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	33cc      	adds	r3, #204	; 0xcc
 8000e36:	2203      	movs	r2, #3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	f009 f83d 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	33f0      	adds	r3, #240	; 0xf0
 8000e48:	2203      	movs	r2, #3
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	f009 f834 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 1, 3, KalmanVar ->MatGt_Data);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	2101      	movs	r1, #1
 8000e60:	f009 f82a 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 1, KalmanVar ->MatGQ_Data);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000e70:	2201      	movs	r2, #1
 8000e72:	2103      	movs	r1, #3
 8000e74:	f009 f820 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e84:	2201      	movs	r2, #1
 8000e86:	2103      	movs	r1, #3
 8000e88:	f009 f816 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e98:	2203      	movs	r2, #3
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	f009 f80c 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000eac:	2201      	movs	r2, #1
 8000eae:	2101      	movs	r1, #1
 8000eb0:	f009 f802 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	f008 fff8 	bl	8009eb8 <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	f008 ffee 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000ee8:	2203      	movs	r2, #3
 8000eea:	2103      	movs	r1, #3
 8000eec:	f008 ffe4 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	f008 ffda 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f10:	2201      	movs	r2, #1
 8000f12:	2101      	movs	r1, #1
 8000f14:	f008 ffd0 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f24:	2201      	movs	r2, #1
 8000f26:	2103      	movs	r1, #3
 8000f28:	f008 ffc6 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	f008 ffbc 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	2103      	movs	r1, #3
 8000f50:	f008 ffb2 	bl	8009eb8 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f60:	2203      	movs	r2, #3
 8000f62:	2103      	movs	r1, #3
 8000f64:	f008 ffa8 	bl	8009eb8 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f008 fd32 	bl	80099e0 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f008 fd28 	bl	80099e0 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f008 fd1e 	bl	80099e0 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f008 fdd8 	bl	8009b6c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f008 fdcc 	bl	8009b6c <arm_mat_mult_f32>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f008 fdb6 	bl	8009b6c <arm_mat_mult_f32>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f503 711b 	add.w	r1, r3, #620	; 0x26c
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 800101c:	461a      	mov	r2, r3
 800101e:	f008 fda5 	bl	8009b6c <arm_mat_mult_f32>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800103e:	461a      	mov	r2, r3
 8001040:	f008 fd94 	bl	8009b6c <arm_mat_mult_f32>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001060:	461a      	mov	r2, r3
 8001062:	f008 ff2d 	bl	8009ec0 <arm_mat_add_f32>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f503 7115 	add.w	r1, r3, #596	; 0x254
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800108a:	461a      	mov	r2, r3
 800108c:	f008 fd6e 	bl	8009b6c <arm_mat_mult_f32>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f503 7139 	add.w	r1, r3, #740	; 0x2e4
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 731d 	add.w	r3, r3, #628	; 0x274
 80010ac:	461a      	mov	r2, r3
 80010ae:	f008 fcf3 	bl	8009a98 <arm_mat_sub_f32>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 7119 	add.w	r1, r3, #612	; 0x264
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80010ce:	461a      	mov	r2, r3
 80010d0:	f008 fd4c 	bl	8009b6c <arm_mat_mult_f32>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80010f0:	461a      	mov	r2, r3
 80010f2:	f008 fd3b 	bl	8009b6c <arm_mat_mult_f32>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f503 7111 	add.w	r1, r3, #580	; 0x244
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001112:	461a      	mov	r2, r3
 8001114:	f008 fed4 	bl	8009ec0 <arm_mat_add_f32>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f008 fdbb 	bl	8009cac <arm_mat_inverse_f32>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f503 7019 	add.w	r0, r3, #612	; 0x264
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8001152:	461a      	mov	r2, r3
 8001154:	f008 fd0a 	bl	8009b6c <arm_mat_mult_f32>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001174:	461a      	mov	r2, r3
 8001176:	f008 fcf9 	bl	8009b6c <arm_mat_mult_f32>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001196:	461a      	mov	r2, r3
 8001198:	f008 fce8 	bl	8009b6c <arm_mat_mult_f32>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f503 7115 	add.w	r1, r3, #596	; 0x254
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80011b8:	461a      	mov	r2, r3
 80011ba:	f008 fe81 	bl	8009ec0 <arm_mat_add_f32>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80011da:	461a      	mov	r2, r3
 80011dc:	f008 fcc6 	bl	8009b6c <arm_mat_mult_f32>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 7141 	add.w	r1, r3, #772	; 0x304
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80011fc:	461a      	mov	r2, r3
 80011fe:	f008 fc4b 	bl	8009a98 <arm_mat_sub_f32>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 7119 	add.w	r1, r3, #612	; 0x264
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800121e:	461a      	mov	r2, r3
 8001220:	f008 fca4 	bl	8009b6c <arm_mat_mult_f32>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <PIDVelocityController_Init>:
 */

#include "PIDVelocity.h"
#include "Trajectory.h"

void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	0000      	movs	r0, r0
 8001284:	0000      	movs	r0, r0
	...

08001288 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	ed87 0a02 	vstr	s0, [r7, #8]
 8001296:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 800129a:	ed97 7a02 	vldr	s14, [r7, #8]
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorLow = setpoint*0.1;
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff f8f8 	bl	80004a0 <__aeabi_f2d>
 80012b0:	a367      	add	r3, pc, #412	; (adr r3, 8001450 <PIDVelocityController_Update+0x1c8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f94b 	bl	8000550 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fb57 	bl	8000974 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
    float errorHigh = setpoint*0.9;
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff f8e8 	bl	80004a0 <__aeabi_f2d>
 80012d0:	a361      	add	r3, pc, #388	; (adr r3, 8001458 <PIDVelocityController_Update+0x1d0>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f93b 	bl	8000550 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb47 	bl	8000974 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]
//    	pidVelocity->KpUse = pidVelocity->Kp;
//    }

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edd3 6a00 	vldr	s13, [r3]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edd3 7a08 	vldr	s15, [r3, #32]
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * error);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	ed93 7a01 	vldr	s14, [r3, #4]
 8001318:	edd7 7a07 	vldr	s15, [r7, #28]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	ed93 7a02 	vldr	s14, [r3, #8]
 800132c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f8b2 	bl	80004a0 <__aeabi_f2d>
 800133c:	4604      	mov	r4, r0
 800133e:	460d      	mov	r5, r1
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ab 	bl	80004a0 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f7fe ff49 	bl	80001e4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4690      	mov	r8, r2
 8001358:	4699      	mov	r9, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f89e 	bl	80004a0 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4640      	mov	r0, r8
 800136a:	4649      	mov	r1, r9
 800136c:	f7ff f8f0 	bl	8000550 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7fe ff32 	bl	80001e0 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4614      	mov	r4, r2
 8001382:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error))	;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	ed93 7a02 	vldr	s14, [r3, #8]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	ee17 0a90 	vmov	r0, s15
 8001398:	f7ff f882 	bl	80004a0 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7fe ff1e 	bl	80001e4 <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fae0 	bl	8000974 <__aeabi_d2f>
 80013b4:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd04      	ble.n	8001404 <PIDVelocityController_Update+0x17c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
 8001402:	e00e      	b.n	8001422 <PIDVelocityController_Update+0x19a>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d503      	bpl.n	8001422 <PIDVelocityController_Update+0x19a>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last1Error = error;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

	return pidVelocity->ControllerOut;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	9999999a 	.word	0x9999999a
 8001454:	3fb99999 	.word	0x3fb99999
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	3feccccc 	.word	0x3feccccc

08001460 <AbsVal>:

#include "Trajectory.h"


float AbsVal(float number)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d50e      	bpl.n	8001496 <AbsVal+0x36>
  {
    return number*-1.0;
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff f811 	bl	80004a0 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fa75 	bl	8000974 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef1 7a67 	vneg.f32	s15, s15
 8001494:	e001      	b.n	800149a <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80014a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80014b2:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80014d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	float gain = 0.0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
	// Check Direction
	if(traject -> QRelative < 0.0)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80014e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d508      	bpl.n	8001504 <CoefficientAndTimeCalculation+0x60>
	{
		gain = -1.0;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <CoefficientAndTimeCalculation+0x138>)
 80014f4:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  -17.19; // 0.3 rad/s^2 to deg/sec^2
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <CoefficientAndTimeCalculation+0x13c>)
 80014fa:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  -114.6; // 2.0 rad/s^3 to deg/sec^3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <CoefficientAndTimeCalculation+0x140>)
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e008      	b.n	8001516 <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 8001504:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001508:	61fb      	str	r3, [r7, #28]
		traject -> Amax =  17.19; // 0.3 rad/s^2 to deg/sec^2
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <CoefficientAndTimeCalculation+0x144>)
 800150e:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6; // 2.0 rad/s^3 to deg/sec^3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <CoefficientAndTimeCalculation+0x148>)
 8001514:	605a      	str	r2, [r3, #4]
	}
	// Find Speed limit
	float Vmax = 0.0;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
	float Vcheck = AbsVal(traject -> QRelative);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f7ff ff9b 	bl	8001460 <AbsVal>
 800152a:	ed87 0a05 	vstr	s0, [r7, #20]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 800152e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db0b      	blt.n	8001558 <CoefficientAndTimeCalculation+0xb4>
 8001540:	edd7 7a05 	vldr	s15, [r7, #20]
 8001544:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d502      	bpl.n	8001558 <CoefficientAndTimeCalculation+0xb4>
	{
		Vmax = 0.4f;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <CoefficientAndTimeCalculation+0x14c>)
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e061      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 20.0  && Vcheck < 60.0)
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	db0c      	blt.n	8001584 <CoefficientAndTimeCalculation+0xe0>
 800156a:	edd7 7a05 	vldr	s15, [r7, #20]
 800156e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80015f4 <CoefficientAndTimeCalculation+0x150>
 8001572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d503      	bpl.n	8001584 <CoefficientAndTimeCalculation+0xe0>
	{
		Vmax = 2.0f;
 800157c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e04b      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 8001584:	edd7 7a05 	vldr	s15, [r7, #20]
 8001588:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015f4 <CoefficientAndTimeCalculation+0x150>
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	db0c      	blt.n	80015b0 <CoefficientAndTimeCalculation+0x10c>
 8001596:	edd7 7a05 	vldr	s15, [r7, #20]
 800159a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80015f8 <CoefficientAndTimeCalculation+0x154>
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d503      	bpl.n	80015b0 <CoefficientAndTimeCalculation+0x10c>
	{
		Vmax = 4.0f;
 80015a8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	e035      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 80015b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015f8 <CoefficientAndTimeCalculation+0x154>
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	db20      	blt.n	8001604 <CoefficientAndTimeCalculation+0x160>
 80015c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001600 <CoefficientAndTimeCalculation+0x15c>
 80015ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d517      	bpl.n	8001604 <CoefficientAndTimeCalculation+0x160>
	{
		Vmax = 6.0f;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <CoefficientAndTimeCalculation+0x158>)
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	e020      	b.n	800161c <CoefficientAndTimeCalculation+0x178>
 80015da:	bf00      	nop
 80015dc:	bf800000 	.word	0xbf800000
 80015e0:	c189851f 	.word	0xc189851f
 80015e4:	c2e53333 	.word	0xc2e53333
 80015e8:	4189851f 	.word	0x4189851f
 80015ec:	42e53333 	.word	0x42e53333
 80015f0:	3ecccccd 	.word	0x3ecccccd
 80015f4:	42700000 	.word	0x42700000
 80015f8:	42c80000 	.word	0x42c80000
 80015fc:	40c00000 	.word	0x40c00000
 8001600:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 8001604:	edd7 7a05 	vldr	s15, [r7, #20]
 8001608:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001600 <CoefficientAndTimeCalculation+0x15c>
 800160c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	db02      	blt.n	800161c <CoefficientAndTimeCalculation+0x178>
	{
		Vmax = 8.0f;
 8001616:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800161a:	61bb      	str	r3, [r7, #24]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  (Vmax *360.0/60.0)*gain;
 800161c:	69b8      	ldr	r0, [r7, #24]
 800161e:	f7fe ff3f 	bl	80004a0 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4bc8      	ldr	r3, [pc, #800]	; (8001948 <CoefficientAndTimeCalculation+0x4a4>)
 8001628:	f7fe ff92 	bl	8000550 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4bc4      	ldr	r3, [pc, #784]	; (800194c <CoefficientAndTimeCalculation+0x4a8>)
 800163a:	f7ff f8b3 	bl	80007a4 <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	69f8      	ldr	r0, [r7, #28]
 8001648:	f7fe ff2a 	bl	80004a0 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4640      	mov	r0, r8
 8001652:	4649      	mov	r1, r9
 8001654:	f7fe ff7c 	bl	8000550 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff f988 	bl	8000974 <__aeabi_d2f>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	609a      	str	r2, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	edd3 7a01 	vldr	s15, [r3, #4]
 8001676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	ed93 6a02 	vldr	s12, [r3, #8]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	edd3 6a00 	vldr	s13, [r3]
 8001686:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800168a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edd3 6a02 	vldr	s13, [r3, #8]
 800169a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 6a00 	vldr	s13, [r3]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edd3 6a00 	vldr	s13, [r3]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ed93 6a02 	vldr	s12, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fea3 	bl	80004a0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f907 	bl	8000974 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef1 7a67 	vneg.f32	s15, s15
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe8c 	bl	80004a0 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f8f0 	bl	8000974 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef1 7a67 	vneg.f32	s15, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80017d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80017f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe4a 	bl	80004a0 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f8ae 	bl	8000974 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef1 7a67 	vneg.f32	s15, s15
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe37 	bl	80004a0 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4614      	mov	r4, r2
 8001838:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	ee17 0a90 	vmov	r0, s15
 8001850:	f7fe fe26 	bl	80004a0 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fcc0 	bl	80001e0 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f884 	bl	8000974 <__aeabi_d2f>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001898:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018b6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018d8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80018e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001918:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001936:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001946:	e003      	b.n	8001950 <CoefficientAndTimeCalculation+0x4ac>
 8001948:	40768000 	.word	0x40768000
 800194c:	404e0000 	.word	0x404e0000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001956:	ee66 7a27 	vmul.f32	s15, s12, s15
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001962:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001972:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	ed93 7a05 	vldr	s14, [r3, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80019c0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 6a06 	vldr	s13, [r3, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019e2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80019f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001a72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 6a08 	vldr	s13, [r3, #32]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ad6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ade:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ae2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001af2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001b40:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c24:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c42:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cb6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d04:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d22:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d92:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 6a06 	vldr	s13, [r3, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001de4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dfe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e02:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ec4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001eda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ede:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ee2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001efa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fa4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001fba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fc2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001fda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800202a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800202e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002032:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002036:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800204a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800206e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002084:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800209a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800209e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80020a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80020ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020d6:	bf00      	nop

080020d8 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80020e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	1a84      	subs	r4, r0, r2
 80020ee:	eb61 0503 	sbc.w	r5, r1, r3
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f9f5 	bl	80004e4 <__aeabi_ul2d>
 80020fa:	a396      	add	r3, pc, #600	; (adr r3, 8002354 <TrajectoryEvaluation+0x27c>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fb50 	bl	80007a4 <__aeabi_ddiv>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fc32 	bl	8000974 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a8f      	ldr	r2, [pc, #572]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002114:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	f2c0 8084 	blt.w	8002230 <TrajectoryEvaluation+0x158>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	dd78      	ble.n	8002230 <TrajectoryEvaluation+0x158>
	{
		traject -> QJ = traject -> A[0];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	ed93 7a03 	vldr	s14, [r3, #12]
 800214e:	4b80      	ldr	r3, [pc, #512]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	ed93 7a03 	vldr	s14, [r3, #12]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	4b76      	ldr	r3, [pc, #472]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80021ba:	4b65      	ldr	r3, [pc, #404]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021bc:	ed93 6a00 	vldr	s12, [r3]
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021ca:	4b61      	ldr	r3, [pc, #388]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80021dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80021ea:	4b59      	ldr	r3, [pc, #356]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021ec:	ed93 6a00 	vldr	s12, [r3]
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <TrajectoryEvaluation+0x278>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002210:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800222e:	e37e      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	f200 808a 	bhi.w	800235c <TrajectoryEvaluation+0x284>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	dd7e      	ble.n	800235c <TrajectoryEvaluation+0x284>
	{
		traject -> QJ = traject -> A[1];
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	ed93 7a04 	vldr	s14, [r3, #16]
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	ed93 7a04 	vldr	s14, [r3, #16]
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002290:	edd3 6a00 	vldr	s13, [r3]
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	edd3 6a04 	vldr	s13, [r3, #16]
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022dc:	ed93 6a00 	vldr	s12, [r3]
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <TrajectoryEvaluation+0x278>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80022fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <TrajectoryEvaluation+0x278>)
 800230c:	ed93 6a00 	vldr	s12, [r3]
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	ee66 7a27 	vmul.f32	s15, s12, s15
 800231a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800231e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002322:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <TrajectoryEvaluation+0x278>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800234e:	e2ee      	b.n	800292e <TrajectoryEvaluation+0x856>
 8002350:	2000046c 	.word	0x2000046c
 8002354:	00000000 	.word	0x00000000
 8002358:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002362:	4b8e      	ldr	r3, [pc, #568]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	f200 8084 	bhi.w	800247c <TrajectoryEvaluation+0x3a4>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	dd78      	ble.n	800247c <TrajectoryEvaluation+0x3a4>
	{
		traject -> QJ = traject -> A[2];
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ed93 7a05 	vldr	s14, [r3, #20]
 800239a:	4b80      	ldr	r3, [pc, #512]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023bc:	edd3 6a00 	vldr	s13, [r3]
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023dc:	4b6f      	ldr	r3, [pc, #444]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	edd3 6a05 	vldr	s13, [r3, #20]
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002408:	ed93 6a00 	vldr	s12, [r3]
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002420:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002424:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002428:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800242c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002438:	ed93 6a00 	vldr	s12, [r3]
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800244a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800244e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800247a:	e258      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	f200 8086 	bhi.w	80025a0 <TrajectoryEvaluation+0x4c8>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	dd7a      	ble.n	80025a0 <TrajectoryEvaluation+0x4c8>
	{
		traject -> QJ = traject -> A[3];
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024dc:	edd3 6a00 	vldr	s13, [r3]
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <TrajectoryEvaluation+0x4c4>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	edd3 6a06 	vldr	s13, [r3, #24]
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002528:	ed93 6a00 	vldr	s12, [r3]
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002544:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002548:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <TrajectoryEvaluation+0x4c4>)
 8002558:	ed93 6a00 	vldr	s12, [r3]
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002566:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800256a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800256e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <TrajectoryEvaluation+0x4c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800259a:	e1c8      	b.n	800292e <TrajectoryEvaluation+0x856>
 800259c:	2000046c 	.word	0x2000046c
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	f200 8084 	bhi.w	80026c0 <TrajectoryEvaluation+0x5e8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd78      	ble.n	80026c0 <TrajectoryEvaluation+0x5e8>
	{
		traject -> QJ = traject -> A[4];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	ed93 7a07 	vldr	s14, [r3, #28]
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80025fe:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002600:	edd3 6a00 	vldr	s13, [r3]
 8002604:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	edd3 6a07 	vldr	s13, [r3, #28]
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800264c:	ed93 6a00 	vldr	s12, [r3]
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee26 6a27 	vmul.f32	s12, s12, s15
 800265a:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002668:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800266c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800267c:	ed93 6a00 	vldr	s12, [r3]
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee66 7a27 	vmul.f32	s15, s12, s15
 800268a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800268e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002692:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80026be:	e136      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	f200 8086 	bhi.w	80027e4 <TrajectoryEvaluation+0x70c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd7a      	ble.n	80027e4 <TrajectoryEvaluation+0x70c>
	{
		traject -> QJ = traject -> A[5];
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ed93 7a08 	vldr	s14, [r3, #32]
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	edd3 6a08 	vldr	s13, [r3, #32]
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800276c:	ed93 6a00 	vldr	s12, [r3]
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <TrajectoryEvaluation+0x708>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee26 6a27 	vmul.f32	s12, s12, s15
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002788:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800278c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <TrajectoryEvaluation+0x708>)
 800279c:	ed93 6a00 	vldr	s12, [r3]
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80027b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <TrajectoryEvaluation+0x708>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80027de:	e0a6      	b.n	800292e <TrajectoryEvaluation+0x856>
 80027e0:	2000046c 	.word	0x2000046c
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <TrajectoryEvaluation+0x860>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	f200 8084 	bhi.w	8002904 <TrajectoryEvaluation+0x82c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	dd78      	ble.n	8002904 <TrajectoryEvaluation+0x82c>
	{
		traject -> QJ = traject -> A[6];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002822:	4b45      	ldr	r3, [pc, #276]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002844:	edd3 6a00 	vldr	s13, [r3]
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <TrajectoryEvaluation+0x860>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800285a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002890:	ed93 6a00 	vldr	s12, [r3]
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <TrajectoryEvaluation+0x860>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028ac:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80028b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028c0:	ed93 6a00 	vldr	s12, [r3]
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80028d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <TrajectoryEvaluation+0x860>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8002902:	e014      	b.n	800292e <TrajectoryEvaluation+0x856>
	}
	else
	{
		traject -> QJ = 0;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QX = traject -> Qfinal;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}

	return 1.0;
 800292e:	bf00      	nop
}
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bdb0      	pop	{r4, r5, r7, pc}
 8002936:	bf00      	nop
 8002938:	2000046c 	.word	0x2000046c

0800293c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002940:	f001 fb78 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002944:	f000 f864 	bl	8002a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002948:	f000 fadc 	bl	8002f04 <MX_GPIO_Init>
  MX_DMA_Init();
 800294c:	f000 faba 	bl	8002ec4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002950:	f000 fa8c 	bl	8002e6c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002954:	f000 f8f2 	bl	8002b3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002958:	f000 f974 	bl	8002c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800295c:	f000 f9c6 	bl	8002cec <MX_TIM3_Init>
  MX_TIM11_Init();
 8002960:	f000 fa60 	bl	8002e24 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002964:	f000 fa10 	bl	8002d88 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002968:	f000 f8ba 	bl	8002ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //----UART-----//
  Ringbuf_Init();
 800296c:	f000 fda6 	bl	80034bc <Ringbuf_Init>
  //  HAL_UART_Receive_DMA(&huart2, RxDataBuffer, 32);
  //----UART-----//
  KalmanMatrixInit(&KalmanVar);
 8002970:	4819      	ldr	r0, [pc, #100]	; (80029d8 <main+0x9c>)
 8002972:	f7fe f9d1 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002976:	2100      	movs	r1, #0
 8002978:	4818      	ldr	r0, [pc, #96]	; (80029dc <main+0xa0>)
 800297a:	f004 fe79 	bl	8007670 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 800297e:	4818      	ldr	r0, [pc, #96]	; (80029e0 <main+0xa4>)
 8002980:	f004 fdc4 	bl	800750c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002984:	4817      	ldr	r0, [pc, #92]	; (80029e4 <main+0xa8>)
 8002986:	f004 fdc1 	bl	800750c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4);
 800298a:	4817      	ldr	r0, [pc, #92]	; (80029e8 <main+0xac>)
 800298c:	f004 fdbe 	bl	800750c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002990:	213c      	movs	r1, #60	; 0x3c
 8002992:	4816      	ldr	r0, [pc, #88]	; (80029ec <main+0xb0>)
 8002994:	f004 ffc2 	bl	800791c <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	461a      	mov	r2, r3
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <main+0xb4>)
 80029a2:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <main+0xb4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <main+0xb4>)
 80029aa:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <main+0xb4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <main+0xb8>)
 80029b2:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <main+0xbc>)
 80029b6:	f7fe fc3e 	bl	8001236 <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <main+0xc0>)
 80029bc:	f7fe fc3b 	bl	8001236 <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,testDes);
 80029c0:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002a00 <main+0xc4>
 80029c4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002a04 <main+0xc8>
 80029c8:	480f      	ldr	r0, [pc, #60]	; (8002a08 <main+0xcc>)
 80029ca:	f7fe fd6b 	bl	80014a4 <CoefficientAndTimeCalculation>

  btncheck = 0;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <main+0xd0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <main+0x98>
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008
 80029dc:	200004c4 	.word	0x200004c4
 80029e0:	200005e4 	.word	0x200005e4
 80029e4:	20000554 	.word	0x20000554
 80029e8:	2000059c 	.word	0x2000059c
 80029ec:	2000050c 	.word	0x2000050c
 80029f0:	20000730 	.word	0x20000730
 80029f4:	2000073c 	.word	0x2000073c
 80029f8:	20000320 	.word	0x20000320
 80029fc:	20000354 	.word	0x20000354
 8002a00:	42b40000 	.word	0x42b40000
 8002a04:	00000000 	.word	0x00000000
 8002a08:	20000388 	.word	0x20000388
 8002a0c:	20000780 	.word	0x20000780

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	; 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0320 	add.w	r3, r7, #32
 8002a1a:	2230      	movs	r2, #48	; 0x30
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f007 faea 	bl	8009ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <SystemClock_Config+0xc8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <SystemClock_Config+0xcc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a20      	ldr	r2, [pc, #128]	; (8002adc <SystemClock_Config+0xcc>)
 8002a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <SystemClock_Config+0xcc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a70:	2301      	movs	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	2310      	movs	r3, #16
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 f851 	bl	8006b3c <HAL_RCC_OscConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002aa0:	f000 fff0 	bl	8003a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	2103      	movs	r1, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fab3 	bl	800702c <HAL_RCC_ClockConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002acc:	f000 ffda 	bl	8003a84 <Error_Handler>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3750      	adds	r7, #80	; 0x50
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000

08002ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <MX_I2C1_Init+0x54>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_I2C1_Init+0x58>)
 8002aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b1e:	f002 f9ed 	bl	8004efc <HAL_I2C_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b28:	f000 ffac 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000470 	.word	0x20000470
 8002b34:	40005400 	.word	0x40005400
 8002b38:	00061a80 	.word	0x00061a80

08002b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b092      	sub	sp, #72	; 0x48
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2220      	movs	r2, #32
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fa46 	bl	8009ff8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6c:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b6e:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <MX_TIM1_Init+0x104>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b98:	4828      	ldr	r0, [pc, #160]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002b9a:	f004 fd19 	bl	80075d0 <HAL_TIM_PWM_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ba4:	f000 ff6e 	bl	8003a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4821      	ldr	r0, [pc, #132]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002bb8:	f005 fcc4 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bc2:	f000 ff5f 	bl	8003a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc6:	2360      	movs	r3, #96	; 0x60
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	4814      	ldr	r0, [pc, #80]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002bec:	f005 f82c 	bl	8007c48 <HAL_TIM_PWM_ConfigChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002bf6:	f000 ff45 	bl	8003a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4807      	ldr	r0, [pc, #28]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002c1e:	f005 fcff 	bl	8008620 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c28:	f000 ff2c 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <MX_TIM1_Init+0x100>)
 8002c2e:	f001 f881 	bl	8003d34 <HAL_TIM_MspPostInit>

}
 8002c32:	bf00      	nop
 8002c34:	3748      	adds	r7, #72	; 0x48
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004c4 	.word	0x200004c4
 8002c40:	40010000 	.word	0x40010000

08002c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f007 f9d0 	bl	8009ff8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c76:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002cb4:	f004 fd8c 	bl	80077d0 <HAL_TIM_Encoder_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cbe:	f000 fee1 	bl	8003a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <MX_TIM2_Init+0xa4>)
 8002cd0:	f005 fc38 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002cda:	f000 fed3 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	3730      	adds	r7, #48	; 0x30
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000050c 	.word	0x2000050c

08002cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <MX_TIM3_Init+0x98>)
 8002d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d10:	2209      	movs	r2, #9
 8002d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d30:	f004 fb9c 	bl	800746c <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d3a:	f000 fea3 	bl	8003a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d4c:	f005 f83e 	bl	8007dcc <HAL_TIM_ConfigClockSource>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d56:	f000 fe95 	bl	8003a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d62:	463b      	mov	r3, r7
 8002d64:	4619      	mov	r1, r3
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <MX_TIM3_Init+0x94>)
 8002d68:	f005 fbec 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d72:	f000 fe87 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000554 	.word	0x20000554
 8002d84:	40000400 	.word	0x40000400

08002d88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <MX_TIM4_Init+0x98>)
 8002da8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dac:	2209      	movs	r2, #9
 8002dae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002db8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002dcc:	f004 fb4e 	bl	800746c <HAL_TIM_Base_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002dd6:	f000 fe55 	bl	8003a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002de8:	f004 fff0 	bl	8007dcc <HAL_TIM_ConfigClockSource>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002df2:	f000 fe47 	bl	8003a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_TIM4_Init+0x94>)
 8002e04:	f005 fb9e 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002e0e:	f000 fe39 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000059c 	.word	0x2000059c
 8002e20:	40000800 	.word	0x40000800

08002e24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <MX_TIM11_Init+0x44>)
 8002e2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e30:	2263      	movs	r2, #99	; 0x63
 8002e32:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e40:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_TIM11_Init+0x40>)
 8002e50:	f004 fb0c 	bl	800746c <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002e5a:	f000 fe13 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200005e4 	.word	0x200005e4
 8002e68:	40014800 	.word	0x40014800

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <MX_USART2_UART_Init+0x54>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e78:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e84:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002ea8:	f005 fc20 	bl	80086ec <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002eb2:	f000 fde7 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000062c 	.word	0x2000062c
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_DMA_Init+0x3c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2010      	movs	r0, #16
 8002eec:	f001 f9ef 	bl	80042ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ef0:	2010      	movs	r0, #16
 8002ef2:	f001 fa08 	bl	8004306 <HAL_NVIC_EnableIRQ>

}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	f107 0314 	add.w	r3, r7, #20
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a45      	ldr	r2, [pc, #276]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a37      	ldr	r2, [pc, #220]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b35      	ldr	r3, [pc, #212]	; (8003054 <MX_GPIO_Init+0x150>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002f90:	4831      	ldr	r0, [pc, #196]	; (8003058 <MX_GPIO_Init+0x154>)
 8002f92:	f001 ff67 	bl	8004e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_Relay1_Pin|Pin_Relay2_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2118      	movs	r1, #24
 8002f9a:	4830      	ldr	r0, [pc, #192]	; (800305c <MX_GPIO_Init+0x158>)
 8002f9c:	f001 ff62 	bl	8004e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	482a      	ldr	r0, [pc, #168]	; (8003060 <MX_GPIO_Init+0x15c>)
 8002fb8:	f001 fdd0 	bl	8004b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002fbc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4820      	ldr	r0, [pc, #128]	; (8003058 <MX_GPIO_Init+0x154>)
 8002fd6:	f001 fdc1 	bl	8004b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8002fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4819      	ldr	r0, [pc, #100]	; (8003058 <MX_GPIO_Init+0x154>)
 8002ff2:	f001 fdb3 	bl	8004b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Relay1_Pin Pin_Relay2_Pin */
  GPIO_InitStruct.Pin = Pin_Relay1_Pin|Pin_Relay2_Pin;
 8002ff6:	2318      	movs	r3, #24
 8002ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 0314 	add.w	r3, r7, #20
 800300a:	4619      	mov	r1, r3
 800300c:	4813      	ldr	r0, [pc, #76]	; (800305c <MX_GPIO_Init+0x158>)
 800300e:	f001 fda5 	bl	8004b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8003012:	2320      	movs	r3, #32
 8003014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003016:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800301a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	480d      	ldr	r0, [pc, #52]	; (800305c <MX_GPIO_Init+0x158>)
 8003028:	f001 fd98 	bl	8004b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	2017      	movs	r0, #23
 8003032:	f001 f94c 	bl	80042ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003036:	2017      	movs	r0, #23
 8003038:	f001 f965 	bl	8004306 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	2028      	movs	r0, #40	; 0x28
 8003042:	f001 f944 	bl	80042ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003046:	2028      	movs	r0, #40	; 0x28
 8003048:	f001 f95d 	bl	8004306 <HAL_NVIC_EnableIRQ>

}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	00000000 	.word	0x00000000

08003068 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800306c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	461a      	mov	r2, r3
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <EncoderRead+0xf8>)
 8003076:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <EncoderRead+0xf8>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <EncoderRead+0xf8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	1ad2      	subs	r2, r2, r3
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <EncoderRead+0xfc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	425b      	negs	r3, r3
 8003088:	429a      	cmp	r2, r3
 800308a:	da07      	bge.n	800309c <EncoderRead+0x34>
		WrappingStep+=12000;
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <EncoderRead+0x100>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003094:	3320      	adds	r3, #32
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <EncoderRead+0x100>)
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e00f      	b.n	80030bc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <EncoderRead+0xf8>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <EncoderRead+0xf8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <EncoderRead+0xfc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	db06      	blt.n	80030bc <EncoderRead+0x54>
		WrappingStep-=12000;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <EncoderRead+0x100>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80030b6:	3b20      	subs	r3, #32
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <EncoderRead+0x100>)
 80030ba:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <EncoderRead+0xf8>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <EncoderRead+0x100>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <EncoderRead+0x104>)
 80030c8:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <EncoderRead+0x104>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f9d4 	bl	800047c <__aeabi_i2d>
 80030d4:	a320      	add	r3, pc, #128	; (adr r3, 8003158 <EncoderRead+0xf0>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd fb63 	bl	80007a4 <__aeabi_ddiv>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <EncoderRead+0x108>)
 80030ec:	f7fd fa30 	bl	8000550 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fd fc3c 	bl	8000974 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <EncoderRead+0x10c>)
 8003100:	6013      	str	r3, [r2, #0]
	if(PositionDeg[0] != PositionDeg[1])
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <EncoderRead+0x10c>)
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <EncoderRead+0x10c>)
 800310a:	edd3 7a01 	vldr	s15, [r3, #4]
 800310e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d00f      	beq.n	8003138 <EncoderRead+0xd0>
	{
		VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <EncoderRead+0x10c>)
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <EncoderRead+0x10c>)
 8003120:	edd3 7a01 	vldr	s15, [r3, #4]
 8003124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003128:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003178 <EncoderRead+0x110>
 800312c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <EncoderRead+0x114>)
 8003132:	edc3 7a00 	vstr	s15, [r3]
 8003136:	e003      	b.n	8003140 <EncoderRead+0xd8>
	}
	else
	{
		VelocityDeg = VelocityDeg;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <EncoderRead+0x114>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <EncoderRead+0x114>)
 800313e:	6013      	str	r3, [r2, #0]
	}
	EncoderRawData[1] = EncoderRawData[0];
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <EncoderRead+0xf8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a06      	ldr	r2, [pc, #24]	; (8003160 <EncoderRead+0xf8>)
 8003146:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <EncoderRead+0x10c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a09      	ldr	r2, [pc, #36]	; (8003174 <EncoderRead+0x10c>)
 800314e:	6053      	str	r3, [r2, #4]
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	f3af 8000 	nop.w
 8003158:	00000000 	.word	0x00000000
 800315c:	40c77000 	.word	0x40c77000
 8003160:	20000730 	.word	0x20000730
 8003164:	2000043c 	.word	0x2000043c
 8003168:	20000738 	.word	0x20000738
 800316c:	2000073c 	.word	0x2000073c
 8003170:	40768000 	.word	0x40768000
 8003174:	20000740 	.word	0x20000740
 8003178:	3a83126f 	.word	0x3a83126f
 800317c:	20000748 	.word	0x20000748

08003180 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da02      	bge.n	8003194 <PWMAbs+0x14>
		return PWM*-1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	425b      	negs	r3, r3
 8003192:	e000      	b.n	8003196 <PWMAbs+0x16>
	}else{
		return PWM;
 8003194:	687b      	ldr	r3, [r7, #4]
	}
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	dc11      	bgt.n	80031d6 <Drivemotor+0x32>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a25      	ldr	r2, [pc, #148]	; (800324c <Drivemotor+0xa8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	db0d      	blt.n	80031d6 <Drivemotor+0x32>
			htim1.Instance->CCR1=PWMAbs(PWM);
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <Drivemotor+0xac>)
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffde 	bl	8003180 <PWMAbs>
 80031c4:	4603      	mov	r3, r0
 80031c6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ce:	4821      	ldr	r0, [pc, #132]	; (8003254 <Drivemotor+0xb0>)
 80031d0:	f001 fe48 	bl	8004e64 <HAL_GPIO_WritePin>
 80031d4:	e036      	b.n	8003244 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <Drivemotor+0xa8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	da0b      	bge.n	80031f6 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <Drivemotor+0xac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ee:	4819      	ldr	r0, [pc, #100]	; (8003254 <Drivemotor+0xb0>)
 80031f0:	f001 fe38 	bl	8004e64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 80031f4:	e026      	b.n	8003244 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db12      	blt.n	8003222 <Drivemotor+0x7e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003202:	4293      	cmp	r3, r2
 8003204:	dc0d      	bgt.n	8003222 <Drivemotor+0x7e>
			htim1.Instance->CCR1=PWMAbs(PWM);
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <Drivemotor+0xac>)
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffb8 	bl	8003180 <PWMAbs>
 8003210:	4603      	mov	r3, r0
 8003212:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003214:	2201      	movs	r2, #1
 8003216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321a:	480e      	ldr	r0, [pc, #56]	; (8003254 <Drivemotor+0xb0>)
 800321c:	f001 fe22 	bl	8004e64 <HAL_GPIO_WritePin>
 8003220:	e010      	b.n	8003244 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f242 7210 	movw	r2, #10000	; 0x2710
 8003228:	4293      	cmp	r3, r2
 800322a:	dd0b      	ble.n	8003244 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <Drivemotor+0xac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f242 7210 	movw	r2, #10000	; 0x2710
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <Drivemotor+0xb0>)
 800323e:	f001 fe11 	bl	8004e64 <HAL_GPIO_WritePin>
}
 8003242:	e7ff      	b.n	8003244 <Drivemotor+0xa0>
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	ffffd8f0 	.word	0xffffd8f0
 8003250:	200004c4 	.word	0x200004c4
 8003254:	40020000 	.word	0x40020000

08003258 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af02      	add	r7, sp, #8
//	setpoint = 180.0;
//	PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	PWMCHECKER = PidVelo.ControllerOut;
//	Drivemotor(2500.0);
	  if (flagT == 0)
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <ControllLoopAndErrorHandler+0x110>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <ControllLoopAndErrorHandler+0x22>
	  {
	    StartTime = Micros();
 8003266:	f000 f911 	bl	800348c <Micros>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	493f      	ldr	r1, [pc, #252]	; (800336c <ControllLoopAndErrorHandler+0x114>)
 8003270:	e9c1 2300 	strd	r2, r3, [r1]
	    flagT =1;
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <ControllLoopAndErrorHandler+0x110>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
	  }
		CurrentTime = Micros();
 800327a:	f000 f907 	bl	800348c <Micros>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	493b      	ldr	r1, [pc, #236]	; (8003370 <ControllLoopAndErrorHandler+0x118>)
 8003284:	e9c1 2300 	strd	r2, r3, [r1]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <ControllLoopAndErrorHandler+0x114>)
 800328a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <ControllLoopAndErrorHandler+0x118>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	e9cd 2300 	strd	r2, r3, [sp]
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4835      	ldr	r0, [pc, #212]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 800329e:	f7fe ff1b 	bl	80020d8 <TrajectoryEvaluation>
	  if(AbsVal(testDes - PositionDeg[0]) < 0.5 && AbsVal(KalmanVar.MatState_Data[1]) < 1.0)
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <ControllLoopAndErrorHandler+0x120>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800337c <ControllLoopAndErrorHandler+0x124>
 80032ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b0:	eeb0 0a67 	vmov.f32	s0, s15
 80032b4:	f7fe f8d4 	bl	8001460 <AbsVal>
 80032b8:	eef0 7a40 	vmov.f32	s15, s0
 80032bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	d51d      	bpl.n	8003306 <ControllLoopAndErrorHandler+0xae>
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <ControllLoopAndErrorHandler+0x128>)
 80032cc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	f7fe f8c4 	bl	8001460 <AbsVal>
 80032d8:	eef0 7a40 	vmov.f32	s15, s0
 80032dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d50d      	bpl.n	8003306 <ControllLoopAndErrorHandler+0xae>
	  {
	    PWMCHECKER = 0.0;
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	    Drivemotor(PWMCHECKER);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fc:	ee17 0a90 	vmov	r0, s15
 8003300:	f7ff ff50 	bl	80031a4 <Drivemotor>
 8003304:	e02c      	b.n	8003360 <ControllLoopAndErrorHandler+0x108>
	  }
	  else
	  {
		PIDVelocityController_Update(&PidPos,traject.QX, PositionDeg[0]);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 8003308:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <ControllLoopAndErrorHandler+0x120>)
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	eef0 0a47 	vmov.f32	s1, s14
 8003316:	eeb0 0a67 	vmov.f32	s0, s15
 800331a:	481b      	ldr	r0, [pc, #108]	; (8003388 <ControllLoopAndErrorHandler+0x130>)
 800331c:	f7fd ffb4 	bl	8001288 <PIDVelocityController_Update>
		PIDVelocityController_Update(&PidVelo, traject.QV + PidPos.ControllerOut  , KalmanVar.MatState_Data[1]);
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <ControllLoopAndErrorHandler+0x11c>)
 8003322:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <ControllLoopAndErrorHandler+0x130>)
 8003328:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <ControllLoopAndErrorHandler+0x128>)
 8003332:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003336:	eef0 0a47 	vmov.f32	s1, s14
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	4813      	ldr	r0, [pc, #76]	; (800338c <ControllLoopAndErrorHandler+0x134>)
 8003340:	f7fd ffa2 	bl	8001288 <PIDVelocityController_Update>
		PWMCHECKER = PidVelo.ControllerOut;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <ControllLoopAndErrorHandler+0x134>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 800334a:	6013      	str	r3, [r2, #0]
		Drivemotor(PWMCHECKER);
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <ControllLoopAndErrorHandler+0x12c>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7ff ff23 	bl	80031a4 <Drivemotor>
	  }
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000750 	.word	0x20000750
 800336c:	20000758 	.word	0x20000758
 8003370:	20000760 	.word	0x20000760
 8003374:	20000388 	.word	0x20000388
 8003378:	20000740 	.word	0x20000740
 800337c:	42b40000 	.word	0x42b40000
 8003380:	20000008 	.word	0x20000008
 8003384:	2000074c 	.word	0x2000074c
 8003388:	20000354 	.word	0x20000354
 800338c:	20000320 	.word	0x20000320

08003390 <HAL_GPIO_EXTI_Callback>:
		I2CEndEffectorReadFlag = 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
//		I2CEndEffectorWriteFlag = 1;
//		I2CWriteFcn(dumdata,len,Endeff_ADDR);
////		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, 0b01000101, 1);
////		HAL_I2C_Mem_Write_IT(&hi2c1, Endeff_ADDR, Endeff_TEST, I2C_MEMADD_SIZE_16BIT, pData, Size);
//	}
	if(GPIO_Pin == GPIO_PIN_10)
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d103      	bne.n	80033aa <HAL_GPIO_EXTI_Callback+0x1a>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80033a2:	2108      	movs	r1, #8
 80033a4:	4809      	ldr	r0, [pc, #36]	; (80033cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80033a6:	f001 fd76 	bl	8004e96 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5)
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d109      	bne.n	80033c4 <HAL_GPIO_EXTI_Callback+0x34>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80033b0:	2110      	movs	r1, #16
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80033b4:	f001 fd6f 	bl	8004e96 <HAL_GPIO_TogglePin>
		btncheck++;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80033c2:	701a      	strb	r2, [r3, #0]
	}
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40020400 	.word	0x40020400
 80033d0:	20000780 	.word	0x20000780

080033d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10c      	bne.n	8003400 <HAL_TIM_PeriodElapsedCallback+0x2c>
		_micro += 65535;
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033f0:	eb12 0801 	adds.w	r8, r2, r1
 80033f4:	f143 0900 	adc.w	r9, r3, #0
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80033fa:	e9c3 8900 	strd	r8, r9, [r3]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
	}
	else if (htim == &htim4) {

		}
}
 80033fe:	e030      	b.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x8e>
	else if (htim == &htim3) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d12c      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x8e>
		CheckLoopStartTime = Micros();
 8003408:	f000 f840 	bl	800348c <Micros>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4919      	ldr	r1, [pc, #100]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003412:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003416:	f7ff fe27 	bl	8003068 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb0 0a67 	vmov.f32	s0, s15
 8003424:	4816      	ldr	r0, [pc, #88]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003426:	f7fd fdd9 	bl	8000fdc <KalmanFilterFunction>
		ControllLoopAndErrorHandler();
 800342a:	f7ff ff15 	bl	8003258 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 800342e:	f000 f82d 	bl	800348c <Micros>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4913      	ldr	r1, [pc, #76]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStopTime = Micros();
 800343c:	f000 f826 	bl	800348c <Micros>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	490f      	ldr	r1, [pc, #60]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003446:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800344c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	1a84      	subs	r4, r0, r2
 8003458:	eb61 0503 	sbc.w	r5, r1, r3
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800345e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800346c:	200005e4 	.word	0x200005e4
 8003470:	20000728 	.word	0x20000728
 8003474:	20000554 	.word	0x20000554
 8003478:	20000768 	.word	0x20000768
 800347c:	20000740 	.word	0x20000740
 8003480:	20000008 	.word	0x20000008
 8003484:	20000770 	.word	0x20000770
 8003488:	20000778 	.word	0x20000778

0800348c <Micros>:

uint64_t Micros(){
 800348c:	b4b0      	push	{r4, r5, r7}
 800348e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <Micros+0x28>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2200      	movs	r2, #0
 8003496:	4618      	mov	r0, r3
 8003498:	4611      	mov	r1, r2
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <Micros+0x2c>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	1884      	adds	r4, r0, r2
 80034a2:	eb41 0503 	adc.w	r5, r1, r3
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
}
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bcb0      	pop	{r4, r5, r7}
 80034b2:	4770      	bx	lr
 80034b4:	40014800 	.word	0x40014800
 80034b8:	20000728 	.word	0x20000728

080034bc <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 80034c0:	2214      	movs	r2, #20
 80034c2:	2100      	movs	r1, #0
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <Ringbuf_Init+0x50>)
 80034c6:	f006 fd97 	bl	8009ff8 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 80034ca:	2228      	movs	r2, #40	; 0x28
 80034cc:	2100      	movs	r1, #0
 80034ce:	4810      	ldr	r0, [pc, #64]	; (8003510 <Ringbuf_Init+0x54>)
 80034d0:	f006 fd92 	bl	8009ff8 <memset>

	Head = Tail = 0;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <Ringbuf_Init+0x58>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <Ringbuf_Init+0x58>)
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <Ringbuf_Init+0x5c>)
 80034e0:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <Ringbuf_Init+0x60>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <Ringbuf_Init+0x64>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 80034ee:	2214      	movs	r2, #20
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <Ringbuf_Init+0x50>)
 80034f2:	480c      	ldr	r0, [pc, #48]	; (8003524 <Ringbuf_Init+0x68>)
 80034f4:	f005 f98c 	bl	8008810 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <Ringbuf_Init+0x6c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <Ringbuf_Init+0x6c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0208 	bic.w	r2, r2, #8
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200006d0 	.word	0x200006d0
 8003510:	200006e4 	.word	0x200006e4
 8003514:	20000712 	.word	0x20000712
 8003518:	20000710 	.word	0x20000710
 800351c:	2000070c 	.word	0x2000070c
 8003520:	2000070e 	.word	0x2000070e
 8003524:	2000062c 	.word	0x2000062c
 8003528:	20000670 	.word	0x20000670

0800352c <checkSum>:
	oldPos = 0;
	newPos = 0;
}

uint8_t checkSum (uint8_t *buffertoCheckSum , int bufferSize)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
	for (int index = 0; index < bufferSize-1; ++index)
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	e009      	b.n	8003554 <checkSum+0x28>
	{
		sum = sum + buffertoCheckSum[index];
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	4413      	add	r3, r2
 800354c:	73fb      	strb	r3, [r7, #15]
	for (int index = 0; index < bufferSize-1; ++index)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbf0      	blt.n	8003540 <checkSum+0x14>
	}
	if((uint8_t)(buffertoCheckSum[bufferSize-1])==(uint8_t)(~sum))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	43db      	mvns	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	429a      	cmp	r2, r3
 8003570:	d101      	bne.n	8003576 <checkSum+0x4a>
	{
		return 1;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <checkSum+0x4c>
	}
	else
	{
		return 0;
 8003576:	2300      	movs	r3, #0
	}
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
		oldPos = newPos;  // Update the last position before copying new data
 8003590:	4b3e      	ldr	r3, [pc, #248]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003596:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	4413      	add	r3, r2
 80035a2:	2b28      	cmp	r3, #40	; 0x28
 80035a4:	dd22      	ble.n	80035ec <HAL_UARTEx_RxEventCallback+0x68>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80035ae:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, datatocopy);  // copy data in that remaining space
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035b8:	4413      	add	r3, r2
 80035ba:	89fa      	ldrh	r2, [r7, #14]
 80035bc:	4936      	ldr	r1, [pc, #216]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035be:	4618      	mov	r0, r3
 80035c0:	f006 fd0c 	bl	8009fdc <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80035ca:	89fb      	ldrh	r3, [r7, #14]
 80035cc:	4a32      	ldr	r2, [pc, #200]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035ce:	1899      	adds	r1, r3, r2
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035da:	f006 fcff 	bl	8009fdc <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	89fb      	ldrh	r3, [r7, #14]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e010      	b.n	800360e <HAL_UARTEx_RxEventCallback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_UARTEx_RxEventCallback+0x110>)
 80035f4:	4413      	add	r3, r2
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	4927      	ldr	r1, [pc, #156]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f006 fcee 	bl	8009fdc <memcpy>
			newPos = Size+oldPos;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4413      	add	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 800360c:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4413      	add	r3, r2
 8003618:	2b27      	cmp	r3, #39	; 0x27
 800361a:	dc07      	bgt.n	800362c <HAL_UARTEx_RxEventCallback+0xa8>
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	4413      	add	r3, r2
 8003624:	b29a      	uxth	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e008      	b.n	800363e <HAL_UARTEx_RxEventCallback+0xba>
		else Head = Head+Size - MainBuf_SIZE;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4413      	add	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b28      	subs	r3, #40	; 0x28
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_UARTEx_RxEventCallback+0x118>)
 800363c:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 800363e:	2214      	movs	r2, #20
 8003640:	4915      	ldr	r1, [pc, #84]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 8003642:	4817      	ldr	r0, [pc, #92]	; (80036a0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8003644:	f005 f8e4 	bl	8008810 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_UARTEx_RxEventCallback+0x120>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_UARTEx_RxEventCallback+0x120>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0208 	bic.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]


	/****************** PROCESS (Little) THE DATA HERE *********************/
		if(checkSum(RxBuf, newPos-oldPos))
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	4619      	mov	r1, r3
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 8003668:	f7ff ff60 	bl	800352c <checkSum>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_UARTEx_RxEventCallback+0xfe>
		{
		stateManagement(RxBuf,newPos,oldPos);
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_UARTEx_RxEventCallback+0x108>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4806      	ldr	r0, [pc, #24]	; (8003698 <HAL_UARTEx_RxEventCallback+0x114>)
 800367e:	f000 f813 	bl	80036a8 <stateManagement>
		}
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000070e 	.word	0x2000070e
 8003690:	2000070c 	.word	0x2000070c
 8003694:	200006e4 	.word	0x200006e4
 8003698:	200006d0 	.word	0x200006d0
 800369c:	20000710 	.word	0x20000710
 80036a0:	2000062c 	.word	0x2000062c
 80036a4:	20000670 	.word	0x20000670

080036a8 <stateManagement>:

void stateManagement(uint8_t *Rxbuffer , uint16_t rxDataCurPos , uint16_t rxDataLastPos)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	803b      	strh	r3, [r7, #0]
	uint16_t rxDatalen = rxDataCurPos - rxDataLastPos;
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	883b      	ldrh	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	81fb      	strh	r3, [r7, #14]
	switch (MainState) {
 80036c0:	4ba2      	ldr	r3, [pc, #648]	; (800394c <stateManagement+0x2a4>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	f000 81c5 	beq.w	8003a54 <stateManagement+0x3ac>
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f300 81c5 	bgt.w	8003a5a <stateManagement+0x3b2>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <stateManagement+0x32>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00e      	beq.n	80036f6 <stateManagement+0x4e>
					homingFlag = 1;
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
					break;
				}
	}
}
 80036d8:	e1bf      	b.n	8003a5a <stateManagement+0x3b2>
			if(Rxbuffer[0] == 0b10010010)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b92      	cmp	r3, #146	; 0x92
 80036e0:	f040 81ba 	bne.w	8003a58 <stateManagement+0x3b0>
				MainState = normOperation;
 80036e4:	4b99      	ldr	r3, [pc, #612]	; (800394c <stateManagement+0x2a4>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 80036ea:	2202      	movs	r2, #2
 80036ec:	4998      	ldr	r1, [pc, #608]	; (8003950 <stateManagement+0x2a8>)
 80036ee:	4899      	ldr	r0, [pc, #612]	; (8003954 <stateManagement+0x2ac>)
 80036f0:	f005 f849 	bl	8008786 <HAL_UART_Transmit_IT>
			break;
 80036f4:	e1b0      	b.n	8003a58 <stateManagement+0x3b0>
			switch (Rxbuffer[0])
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3b91      	subs	r3, #145	; 0x91
 80036fc:	2b0d      	cmp	r3, #13
 80036fe:	f200 81ac 	bhi.w	8003a5a <stateManagement+0x3b2>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <stateManagement+0x60>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003741 	.word	0x08003741
 800370c:	0800374d 	.word	0x0800374d
 8003710:	0800375f 	.word	0x0800375f
 8003714:	08003771 	.word	0x08003771
 8003718:	08003795 	.word	0x08003795
 800371c:	08003a5b 	.word	0x08003a5b
 8003720:	08003a5b 	.word	0x08003a5b
 8003724:	080037b9 	.word	0x080037b9
 8003728:	080037cb 	.word	0x080037cb
 800372c:	08003857 	.word	0x08003857
 8003730:	0800397d 	.word	0x0800397d
 8003734:	08003a2b 	.word	0x08003a2b
 8003738:	08003a37 	.word	0x08003a37
 800373c:	08003a43 	.word	0x08003a43
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003740:	2202      	movs	r2, #2
 8003742:	4983      	ldr	r1, [pc, #524]	; (8003950 <stateManagement+0x2a8>)
 8003744:	4883      	ldr	r0, [pc, #524]	; (8003954 <stateManagement+0x2ac>)
 8003746:	f005 f81e 	bl	8008786 <HAL_UART_Transmit_IT>
				break;
 800374a:	e186      	b.n	8003a5a <stateManagement+0x3b2>
					MainState = normOperation;
 800374c:	4b7f      	ldr	r3, [pc, #508]	; (800394c <stateManagement+0x2a4>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003752:	2202      	movs	r2, #2
 8003754:	497e      	ldr	r1, [pc, #504]	; (8003950 <stateManagement+0x2a8>)
 8003756:	487f      	ldr	r0, [pc, #508]	; (8003954 <stateManagement+0x2ac>)
 8003758:	f005 f815 	bl	8008786 <HAL_UART_Transmit_IT>
				break;
 800375c:	e17d      	b.n	8003a5a <stateManagement+0x3b2>
					MainState = MCDisCon;
 800375e:	4b7b      	ldr	r3, [pc, #492]	; (800394c <stateManagement+0x2a4>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&UART, ACK_1, 2);
 8003764:	2202      	movs	r2, #2
 8003766:	497a      	ldr	r1, [pc, #488]	; (8003950 <stateManagement+0x2a8>)
 8003768:	487a      	ldr	r0, [pc, #488]	; (8003954 <stateManagement+0x2ac>)
 800376a:	f005 f80c 	bl	8008786 <HAL_UART_Transmit_IT>
				break;
 800376e:	e174      	b.n	8003a5a <stateManagement+0x3b2>
					uartVelo = Rxbuffer[1]+Rxbuffer[2];
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3302      	adds	r3, #2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	4413      	add	r3, r2
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b74      	ldr	r3, [pc, #464]	; (8003958 <stateManagement+0x2b0>)
 8003786:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003788:	2202      	movs	r2, #2
 800378a:	4971      	ldr	r1, [pc, #452]	; (8003950 <stateManagement+0x2a8>)
 800378c:	4871      	ldr	r0, [pc, #452]	; (8003954 <stateManagement+0x2ac>)
 800378e:	f004 fffa 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003792:	e162      	b.n	8003a5a <stateManagement+0x3b2>
					uartPos = Rxbuffer[1]+Rxbuffer[2];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3301      	adds	r3, #1
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3302      	adds	r3, #2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	4b6c      	ldr	r3, [pc, #432]	; (800395c <stateManagement+0x2b4>)
 80037aa:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 80037ac:	2202      	movs	r2, #2
 80037ae:	4968      	ldr	r1, [pc, #416]	; (8003950 <stateManagement+0x2a8>)
 80037b0:	4868      	ldr	r0, [pc, #416]	; (8003954 <stateManagement+0x2ac>)
 80037b2:	f004 ffe8 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 80037b6:	e150      	b.n	8003a5a <stateManagement+0x3b2>
					runningFlag = 1;
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <stateManagement+0x2b8>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 80037be:	2202      	movs	r2, #2
 80037c0:	4963      	ldr	r1, [pc, #396]	; (8003950 <stateManagement+0x2a8>)
 80037c2:	4864      	ldr	r0, [pc, #400]	; (8003954 <stateManagement+0x2ac>)
 80037c4:	f004 ffdf 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 80037c8:	e147      	b.n	8003a5a <stateManagement+0x3b2>
					goalData = 10;
 80037ca:	4b66      	ldr	r3, [pc, #408]	; (8003964 <stateManagement+0x2bc>)
 80037cc:	220a      	movs	r2, #10
 80037ce:	701a      	strb	r2, [r3, #0]
					if(runningFlag == 1){
 80037d0:	4b63      	ldr	r3, [pc, #396]	; (8003960 <stateManagement+0x2b8>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d11c      	bne.n	8003812 <stateManagement+0x16a>
 80037d8:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <stateManagement+0x2a8>)
 80037da:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <stateManagement+0x2c0>)
 80037de:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <stateManagement+0x2c0>)
 80037e2:	2299      	movs	r2, #153	; 0x99
 80037e4:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 80037e6:	4b60      	ldr	r3, [pc, #384]	; (8003968 <stateManagement+0x2c0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	70da      	strb	r2, [r3, #3]
						sendData[4] = goalData; // set current goal
 80037ec:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <stateManagement+0x2bc>)
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	4b5d      	ldr	r3, [pc, #372]	; (8003968 <stateManagement+0x2c0>)
 80037f2:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 80037f4:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <stateManagement+0x2c0>)
 80037f6:	789a      	ldrb	r2, [r3, #2]
 80037f8:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <stateManagement+0x2c0>)
 80037fa:	78db      	ldrb	r3, [r3, #3]
 80037fc:	4413      	add	r3, r2
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <stateManagement+0x2c0>)
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	4413      	add	r3, r2
 8003806:	b2db      	uxtb	r3, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b56      	ldr	r3, [pc, #344]	; (8003968 <stateManagement+0x2c0>)
 800380e:	715a      	strb	r2, [r3, #5]
 8003810:	e01b      	b.n	800384a <stateManagement+0x1a2>
 8003812:	4b56      	ldr	r3, [pc, #344]	; (800396c <stateManagement+0x2c4>)
 8003814:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 8003816:	4b54      	ldr	r3, [pc, #336]	; (8003968 <stateManagement+0x2c0>)
 8003818:	801a      	strh	r2, [r3, #0]
						sendData[2] = 153; // start-mode
 800381a:	4b53      	ldr	r3, [pc, #332]	; (8003968 <stateManagement+0x2c0>)
 800381c:	2299      	movs	r2, #153	; 0x99
 800381e:	709a      	strb	r2, [r3, #2]
						sendData[3] = 0;
 8003820:	4b51      	ldr	r3, [pc, #324]	; (8003968 <stateManagement+0x2c0>)
 8003822:	2200      	movs	r2, #0
 8003824:	70da      	strb	r2, [r3, #3]
						sendData[4] = goalData; // set current goal
 8003826:	4b4f      	ldr	r3, [pc, #316]	; (8003964 <stateManagement+0x2bc>)
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <stateManagement+0x2c0>)
 800382c:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 800382e:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <stateManagement+0x2c0>)
 8003830:	789a      	ldrb	r2, [r3, #2]
 8003832:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <stateManagement+0x2c0>)
 8003834:	78db      	ldrb	r3, [r3, #3]
 8003836:	4413      	add	r3, r2
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <stateManagement+0x2c0>)
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	4413      	add	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b48      	ldr	r3, [pc, #288]	; (8003968 <stateManagement+0x2c0>)
 8003848:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 800384a:	2206      	movs	r2, #6
 800384c:	4946      	ldr	r1, [pc, #280]	; (8003968 <stateManagement+0x2c0>)
 800384e:	4841      	ldr	r0, [pc, #260]	; (8003954 <stateManagement+0x2ac>)
 8003850:	f004 ff99 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003854:	e101      	b.n	8003a5a <stateManagement+0x3b2>
					modeNo = 10;
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <stateManagement+0x2c8>)
 8003858:	220a      	movs	r2, #10
 800385a:	701a      	strb	r2, [r3, #0]
					posData = 10271; // data from zhong
 800385c:	4b45      	ldr	r3, [pc, #276]	; (8003974 <stateManagement+0x2cc>)
 800385e:	f642 021f 	movw	r2, #10271	; 0x281f
 8003862:	801a      	strh	r2, [r3, #0]
					if(runningFlag == 1){
 8003864:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <stateManagement+0x2b8>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d134      	bne.n	80038d6 <stateManagement+0x22e>
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <stateManagement+0x2a8>)
 800386e:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003870:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <stateManagement+0x2c0>)
 8003872:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 8003874:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <stateManagement+0x2c0>)
 8003876:	229a      	movs	r2, #154	; 0x9a
 8003878:	709a      	strb	r2, [r3, #2]
						sendData[3] = ((posData*65535)/16000) & 255; // set low byte posData
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <stateManagement+0x2cc>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	4613      	mov	r3, r2
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	4a3c      	ldr	r2, [pc, #240]	; (8003978 <stateManagement+0x2d0>)
 8003888:	fb82 1203 	smull	r1, r2, r2, r3
 800388c:	1292      	asrs	r2, r2, #10
 800388e:	17db      	asrs	r3, r3, #31
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <stateManagement+0x2c0>)
 8003896:	70da      	strb	r2, [r3, #3]
						sendData[4] = ((posData*65535)/16000) >> 8; // set high byte posData
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <stateManagement+0x2cc>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4613      	mov	r3, r2
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	4a34      	ldr	r2, [pc, #208]	; (8003978 <stateManagement+0x2d0>)
 80038a6:	fb82 1203 	smull	r1, r2, r2, r3
 80038aa:	1292      	asrs	r2, r2, #10
 80038ac:	17db      	asrs	r3, r3, #31
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	121b      	asrs	r3, r3, #8
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <stateManagement+0x2c0>)
 80038b6:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <stateManagement+0x2c0>)
 80038ba:	789a      	ldrb	r2, [r3, #2]
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <stateManagement+0x2c0>)
 80038be:	78db      	ldrb	r3, [r3, #3]
 80038c0:	4413      	add	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <stateManagement+0x2c0>)
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <stateManagement+0x2c0>)
 80038d2:	715a      	strb	r2, [r3, #5]
 80038d4:	e033      	b.n	800393e <stateManagement+0x296>
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <stateManagement+0x2c4>)
 80038d8:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <stateManagement+0x2c0>)
 80038dc:	801a      	strh	r2, [r3, #0]
						sendData[2] = 154; // start-mode
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <stateManagement+0x2c0>)
 80038e0:	229a      	movs	r2, #154	; 0x9a
 80038e2:	709a      	strb	r2, [r3, #2]
						sendData[3] = ((posData*65535)/16000) & 255; // set low byte posData
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <stateManagement+0x2cc>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	4613      	mov	r3, r2
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <stateManagement+0x2d0>)
 80038f2:	fb82 1203 	smull	r1, r2, r2, r3
 80038f6:	1292      	asrs	r2, r2, #10
 80038f8:	17db      	asrs	r3, r3, #31
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <stateManagement+0x2c0>)
 8003900:	70da      	strb	r2, [r3, #3]
						sendData[4] = ((posData*65535)/16000) >> 8; // set high byte posData
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <stateManagement+0x2cc>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <stateManagement+0x2d0>)
 8003910:	fb82 1203 	smull	r1, r2, r2, r3
 8003914:	1292      	asrs	r2, r2, #10
 8003916:	17db      	asrs	r3, r3, #31
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	121b      	asrs	r3, r3, #8
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <stateManagement+0x2c0>)
 8003920:	711a      	strb	r2, [r3, #4]
						sendData[5] = (uint8_t)(~(sendData[2]+sendData[3]+sendData[4]));
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <stateManagement+0x2c0>)
 8003924:	789a      	ldrb	r2, [r3, #2]
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <stateManagement+0x2c0>)
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	4413      	add	r3, r2
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <stateManagement+0x2c0>)
 8003930:	791b      	ldrb	r3, [r3, #4]
 8003932:	4413      	add	r3, r2
 8003934:	b2db      	uxtb	r3, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <stateManagement+0x2c0>)
 800393c:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 800393e:	2206      	movs	r2, #6
 8003940:	4909      	ldr	r1, [pc, #36]	; (8003968 <stateManagement+0x2c0>)
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <stateManagement+0x2ac>)
 8003944:	f004 ff1f 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003948:	e087      	b.n	8003a5a <stateManagement+0x3b2>
 800394a:	bf00      	nop
 800394c:	20000006 	.word	0x20000006
 8003950:	20000000 	.word	0x20000000
 8003954:	2000062c 	.word	0x2000062c
 8003958:	20000720 	.word	0x20000720
 800395c:	20000722 	.word	0x20000722
 8003960:	20000724 	.word	0x20000724
 8003964:	2000071a 	.word	0x2000071a
 8003968:	20000714 	.word	0x20000714
 800396c:	20000004 	.word	0x20000004
 8003970:	20000726 	.word	0x20000726
 8003974:	2000071c 	.word	0x2000071c
 8003978:	10624dd3 	.word	0x10624dd3
					veloData = 2496;
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <stateManagement+0x3bc>)
 800397e:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
 8003982:	801a      	strh	r2, [r3, #0]
					if(runningFlag == 1){
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <stateManagement+0x3c0>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d124      	bne.n	80039d6 <stateManagement+0x32e>
 800398c:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <stateManagement+0x3c4>)
 800398e:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_1, 2);
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <stateManagement+0x3c8>)
 8003992:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <stateManagement+0x3c8>)
 8003996:	229b      	movs	r2, #155	; 0x9b
 8003998:	709a      	strb	r2, [r3, #2]
						sendData[4] = ((veloData*255)/16000) & 255; // set low byte posData
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <stateManagement+0x3bc>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	4a33      	ldr	r2, [pc, #204]	; (8003a74 <stateManagement+0x3cc>)
 80039a8:	fb82 1203 	smull	r1, r2, r2, r3
 80039ac:	1292      	asrs	r2, r2, #10
 80039ae:	17db      	asrs	r3, r3, #31
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <stateManagement+0x3c8>)
 80039b6:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 80039b8:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <stateManagement+0x3c8>)
 80039ba:	789a      	ldrb	r2, [r3, #2]
 80039bc:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <stateManagement+0x3c8>)
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	4413      	add	r3, r2
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <stateManagement+0x3c8>)
 80039c6:	791b      	ldrb	r3, [r3, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <stateManagement+0x3c8>)
 80039d2:	715a      	strb	r2, [r3, #5]
 80039d4:	e023      	b.n	8003a1e <stateManagement+0x376>
 80039d6:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <stateManagement+0x3d0>)
 80039d8:	881a      	ldrh	r2, [r3, #0]
						memcpy(sendData, ACK_2, 2);
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <stateManagement+0x3c8>)
 80039dc:	801a      	strh	r2, [r3, #0]
						sendData[2] = 155;
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <stateManagement+0x3c8>)
 80039e0:	229b      	movs	r2, #155	; 0x9b
 80039e2:	709a      	strb	r2, [r3, #2]
						sendData[4] = ((veloData*255)/16000) & 255; // set low byte posData
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <stateManagement+0x3bc>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	4a20      	ldr	r2, [pc, #128]	; (8003a74 <stateManagement+0x3cc>)
 80039f2:	fb82 1203 	smull	r1, r2, r2, r3
 80039f6:	1292      	asrs	r2, r2, #10
 80039f8:	17db      	asrs	r3, r3, #31
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <stateManagement+0x3c8>)
 8003a00:	711a      	strb	r2, [r3, #4]
						sendData[5] = (~(sendData[2]+sendData[3]+sendData[4]));
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <stateManagement+0x3c8>)
 8003a04:	789a      	ldrb	r2, [r3, #2]
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <stateManagement+0x3c8>)
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <stateManagement+0x3c8>)
 8003a10:	791b      	ldrb	r3, [r3, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <stateManagement+0x3c8>)
 8003a1c:	715a      	strb	r2, [r3, #5]
					HAL_UART_Transmit_IT(&huart2, sendData, 6);
 8003a1e:	2206      	movs	r2, #6
 8003a20:	4913      	ldr	r1, [pc, #76]	; (8003a70 <stateManagement+0x3c8>)
 8003a22:	4816      	ldr	r0, [pc, #88]	; (8003a7c <stateManagement+0x3d4>)
 8003a24:	f004 feaf 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003a28:	e017      	b.n	8003a5a <stateManagement+0x3b2>
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	490f      	ldr	r1, [pc, #60]	; (8003a6c <stateManagement+0x3c4>)
 8003a2e:	4813      	ldr	r0, [pc, #76]	; (8003a7c <stateManagement+0x3d4>)
 8003a30:	f004 fea9 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003a34:	e011      	b.n	8003a5a <stateManagement+0x3b2>
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a36:	2202      	movs	r2, #2
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <stateManagement+0x3c4>)
 8003a3a:	4810      	ldr	r0, [pc, #64]	; (8003a7c <stateManagement+0x3d4>)
 8003a3c:	f004 fea3 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003a40:	e00b      	b.n	8003a5a <stateManagement+0x3b2>
					homingFlag = 1;
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <stateManagement+0x3d8>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, ACK_1, 2);
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4908      	ldr	r1, [pc, #32]	; (8003a6c <stateManagement+0x3c4>)
 8003a4c:	480b      	ldr	r0, [pc, #44]	; (8003a7c <stateManagement+0x3d4>)
 8003a4e:	f004 fe9a 	bl	8008786 <HAL_UART_Transmit_IT>
					break;
 8003a52:	e002      	b.n	8003a5a <stateManagement+0x3b2>
			break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <stateManagement+0x3b2>
			break;
 8003a58:	bf00      	nop
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000071e 	.word	0x2000071e
 8003a68:	20000724 	.word	0x20000724
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000714 	.word	0x20000714
 8003a74:	10624dd3 	.word	0x10624dd3
 8003a78:	20000004 	.word	0x20000004
 8003a7c:	2000062c 	.word	0x2000062c
 8003a80:	20000725 	.word	0x20000725

08003a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a88:	b672      	cpsid	i
}
 8003a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <Error_Handler+0x8>
	...

08003a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_MspInit+0x4c>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_MspInit+0x4c>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_MspInit+0x4c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_MspInit+0x4c>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_MspInit+0x4c>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_MspInit+0x4c>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ace:	2007      	movs	r0, #7
 8003ad0:	f000 fbf2 	bl	80042b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800

08003ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_I2C_MspInit+0xa4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d13c      	bne.n	8003b7c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b24:	2312      	movs	r3, #18
 8003b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b30:	2304      	movs	r3, #4
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4814      	ldr	r0, [pc, #80]	; (8003b8c <HAL_I2C_MspInit+0xac>)
 8003b3c:	f001 f80e 	bl	8004b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_I2C_MspInit+0xa8>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	201f      	movs	r0, #31
 8003b62:	f000 fbb4 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b66:	201f      	movs	r0, #31
 8003b68:	f000 fbcd 	bl	8004306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2020      	movs	r0, #32
 8003b72:	f000 fbac 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b76:	2020      	movs	r0, #32
 8003b78:	f000 fbc5 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b7c:	bf00      	nop
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40005400 	.word	0x40005400
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40020400 	.word	0x40020400

08003b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <HAL_TIM_PWM_MspInit+0x48>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d115      	bne.n	8003bce <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_TIM_PWM_MspInit+0x4c>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <HAL_TIM_PWM_MspInit+0x4c>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_TIM_PWM_MspInit+0x4c>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	201a      	movs	r0, #26
 8003bc4:	f000 fb83 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003bc8:	201a      	movs	r0, #26
 8003bca:	f000 fb9c 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d12b      	bne.n	8003c5a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	4804      	ldr	r0, [pc, #16]	; (8003c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8003c56:	f000 ff81 	bl	8004b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c5a:	bf00      	nop
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020000 	.word	0x40020000

08003c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <HAL_TIM_Base_MspInit+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d116      	bne.n	8003cac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	201d      	movs	r0, #29
 8003ca0:	f000 fb15 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ca4:	201d      	movs	r0, #29
 8003ca6:	f000 fb2e 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003caa:	e036      	b.n	8003d1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIM_Base_MspInit+0xc0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d116      	bne.n	8003ce4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	201e      	movs	r0, #30
 8003cd8:	f000 faf9 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cdc:	201e      	movs	r0, #30
 8003cde:	f000 fb12 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8003ce2:	e01a      	b.n	8003d1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_TIM_Base_MspInit+0xc4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d115      	bne.n	8003d1a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_TIM_Base_MspInit+0xbc>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	201a      	movs	r0, #26
 8003d10:	f000 fadd 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003d14:	201a      	movs	r0, #26
 8003d16:	f000 faf6 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40014800 	.word	0x40014800

08003d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_TIM_MspPostInit+0x68>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d11e      	bne.n	8003d94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_TIM_MspPostInit+0x6c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_TIM_MspPostInit+0x6c>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_TIM_MspPostInit+0x6c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4805      	ldr	r0, [pc, #20]	; (8003da4 <HAL_TIM_MspPostInit+0x70>)
 8003d90:	f000 fee4 	bl	8004b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d94:	bf00      	nop
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40020000 	.word	0x40020000

08003da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <HAL_UART_MspInit+0xf0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d161      	bne.n	8003e8e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6313      	str	r3, [r2, #48]	; 0x30
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <HAL_UART_MspInit+0xf4>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e02:	230c      	movs	r3, #12
 8003e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e12:	2307      	movs	r3, #7
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4820      	ldr	r0, [pc, #128]	; (8003ea0 <HAL_UART_MspInit+0xf8>)
 8003e1e:	f000 fe9d 	bl	8004b5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e24:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_UART_MspInit+0x100>)
 8003e26:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e42:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e4a:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e62:	4810      	ldr	r0, [pc, #64]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e64:	f000 fa6a 	bl	800433c <HAL_DMA_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003e6e:	f7ff fe09 	bl	8003a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
 8003e78:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <HAL_UART_MspInit+0xfc>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2026      	movs	r0, #38	; 0x26
 8003e84:	f000 fa23 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e88:	2026      	movs	r0, #38	; 0x26
 8003e8a:	f000 fa3c 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	20000670 	.word	0x20000670
 8003ea8:	40026088 	.word	0x40026088

08003eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <NMI_Handler+0x4>

08003eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb6:	e7fe      	b.n	8003eb6 <HardFault_Handler+0x4>

08003eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ebc:	e7fe      	b.n	8003ebc <MemManage_Handler+0x4>

08003ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec2:	e7fe      	b.n	8003ec2 <BusFault_Handler+0x4>

08003ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <UsageFault_Handler+0x4>

08003eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef8:	f000 f8ee 	bl	80040d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <DMA1_Stream5_IRQHandler+0x10>)
 8003f06:	f000 fbb1 	bl	800466c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000670 	.word	0x20000670

08003f14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8003f18:	2020      	movs	r0, #32
 8003f1a:	f000 ffd7 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f28:	4803      	ldr	r0, [pc, #12]	; (8003f38 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003f2a:	f003 fd85 	bl	8007a38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003f2e:	4803      	ldr	r0, [pc, #12]	; (8003f3c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003f30:	f003 fd82 	bl	8007a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200004c4 	.word	0x200004c4
 8003f3c:	200005e4 	.word	0x200005e4

08003f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <TIM3_IRQHandler+0x10>)
 8003f46:	f003 fd77 	bl	8007a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000554 	.word	0x20000554

08003f54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <TIM4_IRQHandler+0x10>)
 8003f5a:	f003 fd6d 	bl	8007a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000059c 	.word	0x2000059c

08003f68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <I2C1_EV_IRQHandler+0x10>)
 8003f6e:	f001 f909 	bl	8005184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000470 	.word	0x20000470

08003f7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <I2C1_ER_IRQHandler+0x10>)
 8003f82:	f001 fa70 	bl	8005466 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000470 	.word	0x20000470

08003f90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <USART2_IRQHandler+0x10>)
 8003f96:	f004 fca1 	bl	80088dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000062c 	.word	0x2000062c

08003fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8003fa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fac:	f000 ff8e 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003fb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fb4:	f000 ff8a 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <SystemInit+0x20>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <SystemInit+0x20>)
 8003fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <Reset_Handler>:
 8003fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004018 <LoopFillZerobss+0x12>
 8003fe4:	480d      	ldr	r0, [pc, #52]	; (800401c <LoopFillZerobss+0x16>)
 8003fe6:	490e      	ldr	r1, [pc, #56]	; (8004020 <LoopFillZerobss+0x1a>)
 8003fe8:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <LoopFillZerobss+0x1e>)
 8003fea:	2300      	movs	r3, #0
 8003fec:	e002      	b.n	8003ff4 <LoopCopyDataInit>

08003fee <CopyDataInit>:
 8003fee:	58d4      	ldr	r4, [r2, r3]
 8003ff0:	50c4      	str	r4, [r0, r3]
 8003ff2:	3304      	adds	r3, #4

08003ff4 <LoopCopyDataInit>:
 8003ff4:	18c4      	adds	r4, r0, r3
 8003ff6:	428c      	cmp	r4, r1
 8003ff8:	d3f9      	bcc.n	8003fee <CopyDataInit>
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <LoopFillZerobss+0x22>)
 8003ffc:	4c0b      	ldr	r4, [pc, #44]	; (800402c <LoopFillZerobss+0x26>)
 8003ffe:	2300      	movs	r3, #0
 8004000:	e001      	b.n	8004006 <LoopFillZerobss>

08004002 <FillZerobss>:
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	3204      	adds	r2, #4

08004006 <LoopFillZerobss>:
 8004006:	42a2      	cmp	r2, r4
 8004008:	d3fb      	bcc.n	8004002 <FillZerobss>
 800400a:	f7ff ffd7 	bl	8003fbc <SystemInit>
 800400e:	f005 ffc1 	bl	8009f94 <__libc_init_array>
 8004012:	f7fe fc93 	bl	800293c <main>
 8004016:	4770      	bx	lr
 8004018:	20020000 	.word	0x20020000
 800401c:	20000000 	.word	0x20000000
 8004020:	2000044c 	.word	0x2000044c
 8004024:	0800a050 	.word	0x0800a050
 8004028:	20000450 	.word	0x20000450
 800402c:	20000788 	.word	0x20000788

08004030 <ADC_IRQHandler>:
 8004030:	e7fe      	b.n	8004030 <ADC_IRQHandler>
	...

08004034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_Init+0x40>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_Init+0x40>)
 800403e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_Init+0x40>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_Init+0x40>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 f92b 	bl	80042b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	2000      	movs	r0, #0
 8004064:	f000 f808 	bl	8004078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7ff fd12 	bl	8003a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_InitTick+0x54>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_InitTick+0x58>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800408e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f943 	bl	8004322 <HAL_SYSTICK_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00e      	b.n	80040c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d80a      	bhi.n	80040c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f000 f90b 	bl	80042ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <HAL_InitTick+0x5c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000440 	.word	0x20000440
 80040d0:	20000448 	.word	0x20000448
 80040d4:	20000444 	.word	0x20000444

080040d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_IncTick+0x20>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_IncTick+0x24>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_IncTick+0x24>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000448 	.word	0x20000448
 80040fc:	20000784 	.word	0x20000784

08004100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return uwTick;
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <HAL_GetTick+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000784 	.word	0x20000784

08004118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <__NVIC_SetPriorityGrouping+0x44>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414a:	4a04      	ldr	r2, [pc, #16]	; (800415c <__NVIC_SetPriorityGrouping+0x44>)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	60d3      	str	r3, [r2, #12]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <__NVIC_GetPriorityGrouping+0x18>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	f003 0307 	and.w	r3, r3, #7
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db0b      	blt.n	80041a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4907      	ldr	r1, [pc, #28]	; (80041b4 <__NVIC_EnableIRQ+0x38>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2001      	movs	r0, #1
 800419e:	fa00 f202 	lsl.w	r2, r0, r2
 80041a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000e100 	.word	0xe000e100

080041b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	db0a      	blt.n	80041e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	490c      	ldr	r1, [pc, #48]	; (8004204 <__NVIC_SetPriority+0x4c>)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	440b      	add	r3, r1
 80041dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e0:	e00a      	b.n	80041f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4908      	ldr	r1, [pc, #32]	; (8004208 <__NVIC_SetPriority+0x50>)
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3b04      	subs	r3, #4
 80041f0:	0112      	lsls	r2, r2, #4
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	440b      	add	r3, r1
 80041f6:	761a      	strb	r2, [r3, #24]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000e100 	.word	0xe000e100
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f1c3 0307 	rsb	r3, r3, #7
 8004226:	2b04      	cmp	r3, #4
 8004228:	bf28      	it	cs
 800422a:	2304      	movcs	r3, #4
 800422c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3304      	adds	r3, #4
 8004232:	2b06      	cmp	r3, #6
 8004234:	d902      	bls.n	800423c <NVIC_EncodePriority+0x30>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3b03      	subs	r3, #3
 800423a:	e000      	b.n	800423e <NVIC_EncodePriority+0x32>
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	401a      	ands	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004254:	f04f 31ff 	mov.w	r1, #4294967295
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	43d9      	mvns	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	4313      	orrs	r3, r2
         );
}
 8004266:	4618      	mov	r0, r3
 8004268:	3724      	adds	r7, #36	; 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004284:	d301      	bcc.n	800428a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004286:	2301      	movs	r3, #1
 8004288:	e00f      	b.n	80042aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <SysTick_Config+0x40>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004292:	210f      	movs	r1, #15
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	f7ff ff8e 	bl	80041b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <SysTick_Config+0x40>)
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SysTick_Config+0x40>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000e010 	.word	0xe000e010

080042b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff29 	bl	8004118 <__NVIC_SetPriorityGrouping>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e0:	f7ff ff3e 	bl	8004160 <__NVIC_GetPriorityGrouping>
 80042e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff8e 	bl	800420c <NVIC_EncodePriority>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff5d 	bl	80041b8 <__NVIC_SetPriority>
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff31 	bl	800417c <__NVIC_EnableIRQ>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ffa2 	bl	8004274 <SysTick_Config>
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004348:	f7ff feda 	bl	8004100 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e099      	b.n	800448c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004378:	e00f      	b.n	800439a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800437a:	f7ff fec1 	bl	8004100 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b05      	cmp	r3, #5
 8004386:	d908      	bls.n	800439a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e078      	b.n	800448c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e8      	bne.n	800437a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_DMA_Init+0x158>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d107      	bne.n	8004404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	4313      	orrs	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b04      	cmp	r3, #4
 800442c:	d117      	bne.n	800445e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fb0f 	bl	8004a64 <DMA_CheckFifoParam>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2240      	movs	r2, #64	; 0x40
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800445a:	2301      	movs	r3, #1
 800445c:	e016      	b.n	800448c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fac6 	bl	80049f8 <DMA_CalcBaseAndBitshift>
 800446c:	4603      	mov	r3, r0
 800446e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	223f      	movs	r2, #63	; 0x3f
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	f010803f 	.word	0xf010803f

08004498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_DMA_Start_IT+0x26>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e040      	b.n	8004540 <HAL_DMA_Start_IT+0xa8>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d12f      	bne.n	8004532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa58 	bl	800499c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	409a      	lsls	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0216 	orr.w	r2, r2, #22
 8004506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0208 	orr.w	r2, r2, #8
 800451e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e005      	b.n	800453e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800453a:	2302      	movs	r3, #2
 800453c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004556:	f7ff fdd3 	bl	8004100 <HAL_GetTick>
 800455a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d008      	beq.n	800457a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e052      	b.n	8004620 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0216 	bic.w	r2, r2, #22
 8004588:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004598:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_DMA_Abort+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0208 	bic.w	r2, r2, #8
 80045b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ca:	e013      	b.n	80045f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045cc:	f7ff fd98 	bl	8004100 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d90c      	bls.n	80045f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e015      	b.n	8004620 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e4      	bne.n	80045cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	223f      	movs	r2, #63	; 0x3f
 8004608:	409a      	lsls	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d004      	beq.n	8004646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2280      	movs	r2, #128	; 0x80
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00c      	b.n	8004660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2205      	movs	r2, #5
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004678:	4b8e      	ldr	r3, [pc, #568]	; (80048b4 <HAL_DMA_IRQHandler+0x248>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a8e      	ldr	r2, [pc, #568]	; (80048b8 <HAL_DMA_IRQHandler+0x24c>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0a9b      	lsrs	r3, r3, #10
 8004684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	2208      	movs	r2, #8
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01a      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	2208      	movs	r2, #8
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d012      	beq.n	800470e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	2204      	movs	r2, #4
 8004714:	409a      	lsls	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	2204      	movs	r2, #4
 8004732:	409a      	lsls	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	2210      	movs	r2, #16
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d043      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03c      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	2210      	movs	r2, #16
 8004768:	409a      	lsls	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d018      	beq.n	80047ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d024      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
 800479a:	e01f      	b.n	80047dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01b      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
 80047ac:	e016      	b.n	80047dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d107      	bne.n	80047cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0208 	bic.w	r2, r2, #8
 80047ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	2220      	movs	r2, #32
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 808f 	beq.w	800490c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8087 	beq.w	800490c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004802:	2220      	movs	r2, #32
 8004804:	409a      	lsls	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b05      	cmp	r3, #5
 8004814:	d136      	bne.n	8004884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0216 	bic.w	r2, r2, #22
 8004824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_DMA_IRQHandler+0x1da>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0208 	bic.w	r2, r2, #8
 8004854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485a:	223f      	movs	r2, #63	; 0x3f
 800485c:	409a      	lsls	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d07e      	beq.n	8004978 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
        }
        return;
 8004882:	e079      	b.n	8004978 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d031      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
 80048b0:	e02c      	b.n	800490c <HAL_DMA_IRQHandler+0x2a0>
 80048b2:	bf00      	nop
 80048b4:	20000440 	.word	0x20000440
 80048b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
 80048cc:	e01e      	b.n	800490c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0210 	bic.w	r2, r2, #16
 80048ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	2b00      	cmp	r3, #0
 8004912:	d032      	beq.n	800497a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2205      	movs	r2, #5
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3301      	adds	r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	d307      	bcc.n	8004954 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f2      	bne.n	8004938 <HAL_DMA_IRQHandler+0x2cc>
 8004952:	e000      	b.n	8004956 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004954:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e000      	b.n	800497a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004978:	bf00      	nop
    }
  }
}
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498e:	b2db      	uxtb	r3, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d108      	bne.n	80049dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049da:	e007      	b.n	80049ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	3b10      	subs	r3, #16
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <DMA_CalcBaseAndBitshift+0x64>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <DMA_CalcBaseAndBitshift+0x68>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d909      	bls.n	8004a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	659a      	str	r2, [r3, #88]	; 0x58
 8004a38:	e007      	b.n	8004a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	aaaaaaab 	.word	0xaaaaaaab
 8004a60:	0800a038 	.word	0x0800a038

08004a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11f      	bne.n	8004abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d856      	bhi.n	8004b32 <DMA_CheckFifoParam+0xce>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <DMA_CheckFifoParam+0x28>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aaf 	.word	0x08004aaf
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	08004b33 	.word	0x08004b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d046      	beq.n	8004b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aac:	e043      	b.n	8004b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ab6:	d140      	bne.n	8004b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e03d      	b.n	8004b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d121      	bne.n	8004b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d837      	bhi.n	8004b3e <DMA_CheckFifoParam+0xda>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <DMA_CheckFifoParam+0x70>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004aeb 	.word	0x08004aeb
 8004adc:	08004ae5 	.word	0x08004ae5
 8004ae0:	08004afd 	.word	0x08004afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e030      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d025      	beq.n	8004b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afa:	e022      	b.n	8004b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b04:	d11f      	bne.n	8004b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b0a:	e01c      	b.n	8004b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d903      	bls.n	8004b1a <DMA_CheckFifoParam+0xb6>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d003      	beq.n	8004b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b18:	e018      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1e:	e015      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e00b      	b.n	8004b4a <DMA_CheckFifoParam+0xe6>
      break;
 8004b32:	bf00      	nop
 8004b34:	e00a      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;
 8004b36:	bf00      	nop
 8004b38:	e008      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e006      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e004      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;
 8004b42:	bf00      	nop
 8004b44:	e002      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <DMA_CheckFifoParam+0xe8>
      break;
 8004b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e159      	b.n	8004e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b78:	2201      	movs	r2, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f040 8148 	bne.w	8004e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d005      	beq.n	8004bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d130      	bne.n	8004c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004be4:	2201      	movs	r2, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 0201 	and.w	r2, r3, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d017      	beq.n	8004c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	2203      	movs	r2, #3
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d123      	bne.n	8004ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	220f      	movs	r2, #15
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	08da      	lsrs	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3208      	adds	r2, #8
 8004c9a:	69b9      	ldr	r1, [r7, #24]
 8004c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 0203 	and.w	r2, r3, #3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a2 	beq.w	8004e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	4b57      	ldr	r3, [pc, #348]	; (8004e44 <HAL_GPIO_Init+0x2e8>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	4a56      	ldr	r2, [pc, #344]	; (8004e44 <HAL_GPIO_Init+0x2e8>)
 8004cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <HAL_GPIO_Init+0x2e8>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cfe:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_GPIO_Init+0x2ec>)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	3302      	adds	r3, #2
 8004d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	220f      	movs	r2, #15
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a49      	ldr	r2, [pc, #292]	; (8004e4c <HAL_GPIO_Init+0x2f0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d019      	beq.n	8004d5e <HAL_GPIO_Init+0x202>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a48      	ldr	r2, [pc, #288]	; (8004e50 <HAL_GPIO_Init+0x2f4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_GPIO_Init+0x1fe>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a47      	ldr	r2, [pc, #284]	; (8004e54 <HAL_GPIO_Init+0x2f8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00d      	beq.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a46      	ldr	r2, [pc, #280]	; (8004e58 <HAL_GPIO_Init+0x2fc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d007      	beq.n	8004d52 <HAL_GPIO_Init+0x1f6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a45      	ldr	r2, [pc, #276]	; (8004e5c <HAL_GPIO_Init+0x300>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_GPIO_Init+0x1f2>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	e008      	b.n	8004d60 <HAL_GPIO_Init+0x204>
 8004d4e:	2307      	movs	r3, #7
 8004d50:	e006      	b.n	8004d60 <HAL_GPIO_Init+0x204>
 8004d52:	2303      	movs	r3, #3
 8004d54:	e004      	b.n	8004d60 <HAL_GPIO_Init+0x204>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_Init+0x204>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_GPIO_Init+0x204>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	f002 0203 	and.w	r2, r2, #3
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	4093      	lsls	r3, r2
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d70:	4935      	ldr	r1, [pc, #212]	; (8004e48 <HAL_GPIO_Init+0x2ec>)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	3302      	adds	r3, #2
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004da8:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_GPIO_Init+0x304>)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	f67f aea2 	bls.w	8004b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3724      	adds	r7, #36	; 0x24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	40020400 	.word	0x40020400
 8004e54:	40020800 	.word	0x40020800
 8004e58:	40020c00 	.word	0x40020c00
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40013c00 	.word	0x40013c00

08004e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	807b      	strh	r3, [r7, #2]
 8004e70:	4613      	mov	r3, r2
 8004e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e74:	787b      	ldrb	r3, [r7, #1]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e7a:	887a      	ldrh	r2, [r7, #2]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e80:	e003      	b.n	8004e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	041a      	lsls	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	619a      	str	r2, [r3, #24]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ea8:	887a      	ldrh	r2, [r7, #2]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4013      	ands	r3, r2
 8004eae:	041a      	lsls	r2, r3, #16
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	619a      	str	r2, [r3, #24]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fa50 	bl	8003390 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40013c00 	.word	0x40013c00

08004efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e12b      	b.n	8005166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fe fddc 	bl	8003ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f60:	f002 fa5c 	bl	800741c <HAL_RCC_GetPCLK1Freq>
 8004f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4a81      	ldr	r2, [pc, #516]	; (8005170 <HAL_I2C_Init+0x274>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d807      	bhi.n	8004f80 <HAL_I2C_Init+0x84>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a80      	ldr	r2, [pc, #512]	; (8005174 <HAL_I2C_Init+0x278>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bf94      	ite	ls
 8004f78:	2301      	movls	r3, #1
 8004f7a:	2300      	movhi	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	e006      	b.n	8004f8e <HAL_I2C_Init+0x92>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a7d      	ldr	r2, [pc, #500]	; (8005178 <HAL_I2C_Init+0x27c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	bf94      	ite	ls
 8004f88:	2301      	movls	r3, #1
 8004f8a:	2300      	movhi	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0e7      	b.n	8005166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a78      	ldr	r2, [pc, #480]	; (800517c <HAL_I2C_Init+0x280>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0c9b      	lsrs	r3, r3, #18
 8004fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a6a      	ldr	r2, [pc, #424]	; (8005170 <HAL_I2C_Init+0x274>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d802      	bhi.n	8004fd0 <HAL_I2C_Init+0xd4>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	e009      	b.n	8004fe4 <HAL_I2C_Init+0xe8>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	4a69      	ldr	r2, [pc, #420]	; (8005180 <HAL_I2C_Init+0x284>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	495c      	ldr	r1, [pc, #368]	; (8005170 <HAL_I2C_Init+0x274>)
 8005000:	428b      	cmp	r3, r1
 8005002:	d819      	bhi.n	8005038 <HAL_I2C_Init+0x13c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1e59      	subs	r1, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005018:	400b      	ands	r3, r1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_I2C_Init+0x138>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1e59      	subs	r1, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fbb1 f3f3 	udiv	r3, r1, r3
 800502c:	3301      	adds	r3, #1
 800502e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005032:	e051      	b.n	80050d8 <HAL_I2C_Init+0x1dc>
 8005034:	2304      	movs	r3, #4
 8005036:	e04f      	b.n	80050d8 <HAL_I2C_Init+0x1dc>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d111      	bne.n	8005064 <HAL_I2C_Init+0x168>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1e58      	subs	r0, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	440b      	add	r3, r1
 800504e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005052:	3301      	adds	r3, #1
 8005054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e012      	b.n	800508a <HAL_I2C_Init+0x18e>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1e58      	subs	r0, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	0099      	lsls	r1, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	fbb0 f3f3 	udiv	r3, r0, r3
 800507a:	3301      	adds	r3, #1
 800507c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Init+0x196>
 800508e:	2301      	movs	r3, #1
 8005090:	e022      	b.n	80050d8 <HAL_I2C_Init+0x1dc>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10e      	bne.n	80050b8 <HAL_I2C_Init+0x1bc>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1e58      	subs	r0, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	440b      	add	r3, r1
 80050a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ac:	3301      	adds	r3, #1
 80050ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	e00f      	b.n	80050d8 <HAL_I2C_Init+0x1dc>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1e58      	subs	r0, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	0099      	lsls	r1, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ce:	3301      	adds	r3, #1
 80050d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	6809      	ldr	r1, [r1, #0]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6911      	ldr	r1, [r2, #16]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	4311      	orrs	r1, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	430b      	orrs	r3, r1
 800511a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	000186a0 	.word	0x000186a0
 8005174:	001e847f 	.word	0x001e847f
 8005178:	003d08ff 	.word	0x003d08ff
 800517c:	431bde83 	.word	0x431bde83
 8005180:	10624dd3 	.word	0x10624dd3

08005184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d003      	beq.n	80051bc <HAL_I2C_EV_IRQHandler+0x38>
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	f040 80c1 	bne.w	800533e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051dc:	d003      	beq.n	80051e6 <HAL_I2C_EV_IRQHandler+0x62>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051e4:	d101      	bne.n	80051ea <HAL_I2C_EV_IRQHandler+0x66>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_I2C_EV_IRQHandler+0x68>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	f000 8132 	beq.w	8005456 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00c      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x92>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	0a5b      	lsrs	r3, r3, #9
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fc7b 	bl	8006b04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fd83 	bl	8005d1a <I2C_Master_SB>
 8005214:	e092      	b.n	800533c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0xb2>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fdf9 	bl	8005e26 <I2C_Master_ADD10>
 8005234:	e082      	b.n	800533c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0xd2>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	0a5b      	lsrs	r3, r3, #9
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fe13 	bl	8005e7a <I2C_Master_ADDR>
 8005254:	e072      	b.n	800533c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03b      	beq.n	80052da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	f000 80f3 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	09db      	lsrs	r3, r3, #7
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00f      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f9f3 	bl	8005684 <I2C_MasterTransmit_TXE>
 800529e:	e04d      	b.n	800533c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	089b      	lsrs	r3, r3, #2
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80d6 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80cf 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b21      	cmp	r3, #33	; 0x21
 80052c0:	d103      	bne.n	80052ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa7a 	bl	80057bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c8:	e0c7      	b.n	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	f040 80c4 	bne.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fae8 	bl	80058a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d8:	e0bf      	b.n	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	f000 80b7 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	099b      	lsrs	r3, r3, #6
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00f      	beq.n	8005318 <HAL_I2C_EV_IRQHandler+0x194>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	0a9b      	lsrs	r3, r3, #10
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_I2C_EV_IRQHandler+0x194>
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fb5d 	bl	80059d0 <I2C_MasterReceive_RXNE>
 8005316:	e011      	b.n	800533c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 809a 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	0a5b      	lsrs	r3, r3, #9
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8093 	beq.w	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fc06 	bl	8005b46 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800533a:	e08e      	b.n	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
 800533c:	e08d      	b.n	800545a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	e007      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <HAL_I2C_EV_IRQHandler+0x20e>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	0a5b      	lsrs	r3, r3, #9
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 ffc4 	bl	8006318 <I2C_Slave_ADDR>
 8005390:	e066      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	0a5b      	lsrs	r3, r3, #9
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fffe 	bl	80063ac <I2C_Slave_STOPF>
 80053b0:	e056      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b21      	cmp	r3, #33	; 0x21
 80053b6:	d002      	beq.n	80053be <HAL_I2C_EV_IRQHandler+0x23a>
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b29      	cmp	r3, #41	; 0x29
 80053bc:	d125      	bne.n	800540a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <HAL_I2C_EV_IRQHandler+0x266>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	0a9b      	lsrs	r3, r3, #10
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_I2C_EV_IRQHandler+0x266>
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 feda 	bl	800619c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053e8:	e039      	b.n	800545e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	089b      	lsrs	r3, r3, #2
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d033      	beq.n	800545e <HAL_I2C_EV_IRQHandler+0x2da>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	0a5b      	lsrs	r3, r3, #9
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02d      	beq.n	800545e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 ff07 	bl	8006216 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005408:	e029      	b.n	800545e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	099b      	lsrs	r3, r3, #6
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	0a9b      	lsrs	r3, r3, #10
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 ff12 	bl	8006258 <I2C_SlaveReceive_RXNE>
 8005434:	e014      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	0a5b      	lsrs	r3, r3, #9
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 ff40 	bl	80062d4 <I2C_SlaveReceive_BTF>
 8005454:	e004      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005456:	bf00      	nop
 8005458:	e002      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800545e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00e      	beq.n	80054b4 <HAL_I2C_ER_IRQHandler+0x4e>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	0a5b      	lsrs	r3, r3, #9
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00e      	beq.n	80054de <HAL_I2C_ER_IRQHandler+0x78>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f043 0302 	orr.w	r3, r3, #2
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80054dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	0a9b      	lsrs	r3, r3, #10
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03f      	beq.n	800556a <HAL_I2C_ER_IRQHandler+0x104>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d039      	beq.n	800556a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80054f6:	7efb      	ldrb	r3, [r7, #27]
 80054f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005510:	7ebb      	ldrb	r3, [r7, #26]
 8005512:	2b20      	cmp	r3, #32
 8005514:	d112      	bne.n	800553c <HAL_I2C_ER_IRQHandler+0xd6>
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10f      	bne.n	800553c <HAL_I2C_ER_IRQHandler+0xd6>
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b21      	cmp	r3, #33	; 0x21
 8005520:	d008      	beq.n	8005534 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b29      	cmp	r3, #41	; 0x29
 8005526:	d005      	beq.n	8005534 <HAL_I2C_ER_IRQHandler+0xce>
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b28      	cmp	r3, #40	; 0x28
 800552c:	d106      	bne.n	800553c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b21      	cmp	r3, #33	; 0x21
 8005532:	d103      	bne.n	800553c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 f869 	bl	800660c <I2C_Slave_AF>
 800553a:	e016      	b.n	800556a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005544:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	f043 0304 	orr.w	r3, r3, #4
 800554c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800554e:	7efb      	ldrb	r3, [r7, #27]
 8005550:	2b10      	cmp	r3, #16
 8005552:	d002      	beq.n	800555a <HAL_I2C_ER_IRQHandler+0xf4>
 8005554:	7efb      	ldrb	r3, [r7, #27]
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d107      	bne.n	800556a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	0adb      	lsrs	r3, r3, #11
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <HAL_I2C_ER_IRQHandler+0x12e>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005592:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 f8a0 	bl	80066ec <I2C_ITError>
  }
}
 80055ac:	bf00      	nop
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	70fb      	strb	r3, [r7, #3]
 8005610:	4613      	mov	r3, r2
 8005612:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800569a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d150      	bne.n	800574c <I2C_MasterTransmit_TXE+0xc8>
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b21      	cmp	r3, #33	; 0x21
 80056ae:	d14d      	bne.n	800574c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d01d      	beq.n	80056f2 <I2C_MasterTransmit_TXE+0x6e>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d01a      	beq.n	80056f2 <I2C_MasterTransmit_TXE+0x6e>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056c2:	d016      	beq.n	80056f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2211      	movs	r2, #17
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ff62 	bl	80055b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056f0:	e060      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005700:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005710:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d107      	bne.n	800573c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff7d 	bl	8005634 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800573a:	e03b      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff35 	bl	80055b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800574a:	e033      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b21      	cmp	r3, #33	; 0x21
 8005750:	d005      	beq.n	800575e <I2C_MasterTransmit_TXE+0xda>
 8005752:	7bbb      	ldrb	r3, [r7, #14]
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d12d      	bne.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b22      	cmp	r3, #34	; 0x22
 800575c:	d12a      	bne.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d108      	bne.n	800577a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005776:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005778:	e01c      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d103      	bne.n	800578e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f88e 	bl	80058a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800578c:	e012      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	781a      	ldrb	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057b2:	e7ff      	b.n	80057b4 <I2C_MasterTransmit_TXE+0x130>
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b21      	cmp	r3, #33	; 0x21
 80057d4:	d164      	bne.n	80058a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d012      	beq.n	8005806 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005804:	e04c      	b.n	80058a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d01d      	beq.n	8005848 <I2C_MasterTransmit_BTF+0x8c>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b20      	cmp	r3, #32
 8005810:	d01a      	beq.n	8005848 <I2C_MasterTransmit_BTF+0x8c>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005818:	d016      	beq.n	8005848 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005828:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2211      	movs	r2, #17
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff feb7 	bl	80055b4 <HAL_I2C_MasterTxCpltCallback>
}
 8005846:	e02b      	b.n	80058a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005856:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d107      	bne.n	8005892 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fed2 	bl	8005634 <HAL_I2C_MemTxCpltCallback>
}
 8005890:	e006      	b.n	80058a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fe8a 	bl	80055b4 <HAL_I2C_MasterTxCpltCallback>
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11d      	bne.n	80058fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10b      	bne.n	80058e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80058de:	e073      	b.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	121b      	asrs	r3, r3, #8
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058fa:	e065      	b.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10b      	bne.n	800591c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	b2da      	uxtb	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	651a      	str	r2, [r3, #80]	; 0x50
}
 800591a:	e055      	b.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	2b02      	cmp	r3, #2
 8005922:	d151      	bne.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b22      	cmp	r3, #34	; 0x22
 8005928:	d10d      	bne.n	8005946 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005938:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005944:	e040      	b.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d015      	beq.n	800597c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b21      	cmp	r3, #33	; 0x21
 8005954:	d112      	bne.n	800597c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800597a:	e025      	b.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d120      	bne.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b21      	cmp	r3, #33	; 0x21
 800598a:	d11d      	bne.n	80059c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800599a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fe36 	bl	8005634 <HAL_I2C_MemTxCpltCallback>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b22      	cmp	r3, #34	; 0x22
 80059e2:	f040 80ac 	bne.w	8005b3e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d921      	bls.n	8005a38 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	f040 808c 	bne.w	8005b3e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005a36:	e082      	b.n	8005b3e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d075      	beq.n	8005b2c <I2C_MasterReceive_RXNE+0x15c>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d002      	beq.n	8005a4c <I2C_MasterReceive_RXNE+0x7c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d16f      	bne.n	8005b2c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 f827 	bl	8006aa0 <I2C_WaitOnSTOPRequestThroughIT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d142      	bne.n	8005ade <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a66:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a76:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d10a      	bne.n	8005ac8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fdc1 	bl	8005648 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ac6:	e03a      	b.n	8005b3e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2212      	movs	r2, #18
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fd76 	bl	80055c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005adc:	e02f      	b.n	8005b3e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fd99 	bl	800565c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b2a:	e008      	b.n	8005b3e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	605a      	str	r2, [r3, #4]
}
 8005b3c:	e7ff      	b.n	8005b3e <I2C_MasterReceive_RXNE+0x16e>
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d11b      	bne.n	8005b96 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b94:	e0bd      	b.n	8005d12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d129      	bne.n	8005bf4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d00a      	beq.n	8005bcc <I2C_MasterReceive_BTF+0x86>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d007      	beq.n	8005bcc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bf2:	e08e      	b.n	8005d12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d176      	bne.n	8005cec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d002      	beq.n	8005c0a <I2C_MasterReceive_BTF+0xc4>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d108      	bne.n	8005c1c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e019      	b.n	8005c50 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d002      	beq.n	8005c28 <I2C_MasterReceive_BTF+0xe2>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d108      	bne.n	8005c3a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e00a      	b.n	8005c50 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d007      	beq.n	8005c50 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005caa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d10a      	bne.n	8005cd6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fcba 	bl	8005648 <HAL_I2C_MemRxCpltCallback>
}
 8005cd4:	e01d      	b.n	8005d12 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2212      	movs	r2, #18
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fc6f 	bl	80055c8 <HAL_I2C_MasterRxCpltCallback>
}
 8005cea:	e012      	b.n	8005d12 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d117      	bne.n	8005d5e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d46:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d48:	e067      	b.n	8005e1a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
}
 8005d5c:	e05d      	b.n	8005e1a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d66:	d133      	bne.n	8005dd0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b21      	cmp	r3, #33	; 0x21
 8005d72:	d109      	bne.n	8005d88 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e008      	b.n	8005d9a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <I2C_Master_SB+0x92>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d032      	beq.n	8005e1a <I2C_Master_SB+0x100>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02d      	beq.n	8005e1a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	605a      	str	r2, [r3, #4]
}
 8005dce:	e024      	b.n	8005e1a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10e      	bne.n	8005df6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	11db      	asrs	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f063 030f 	orn	r3, r3, #15
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
}
 8005df4:	e011      	b.n	8005e1a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10d      	bne.n	8005e1a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	11db      	asrs	r3, r3, #7
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0306 	and.w	r3, r3, #6
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f063 030e 	orn	r3, r3, #14
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	611a      	str	r2, [r3, #16]
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <I2C_Master_ADD10+0x26>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <I2C_Master_ADD10+0x48>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	605a      	str	r2, [r3, #4]
  }
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b091      	sub	sp, #68	; 0x44
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b22      	cmp	r3, #34	; 0x22
 8005ea2:	f040 8169 	bne.w	8006178 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <I2C_Master_ADDR+0x54>
 8005eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d10b      	bne.n	8005ece <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	e160      	b.n	8006190 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11d      	bne.n	8005f12 <I2C_Master_ADDR+0x98>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ede:	d118      	bne.n	8005f12 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f04:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8005f10:	e13e      	b.n	8006190 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d113      	bne.n	8005f44 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e115      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	f040 808a 	bne.w	8006064 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f56:	d137      	bne.n	8005fc8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f66:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f76:	d113      	bne.n	8005fa0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f86:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	e0e7      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	623b      	str	r3, [r7, #32]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e0d3      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d02e      	beq.n	800602c <I2C_Master_ADDR+0x1b2>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d02b      	beq.n	800602c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	2b12      	cmp	r3, #18
 8005fd8:	d102      	bne.n	8005fe0 <I2C_Master_ADDR+0x166>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d125      	bne.n	800602c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d00e      	beq.n	8006004 <I2C_Master_ADDR+0x18a>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d00b      	beq.n	8006004 <I2C_Master_ADDR+0x18a>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d008      	beq.n	8006004 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e007      	b.n	8006014 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006012:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	e0a1      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e085      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d14d      	bne.n	800610a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b04      	cmp	r3, #4
 8006072:	d016      	beq.n	80060a2 <I2C_Master_ADDR+0x228>
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	2b02      	cmp	r3, #2
 8006078:	d013      	beq.n	80060a2 <I2C_Master_ADDR+0x228>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b10      	cmp	r3, #16
 800607e:	d010      	beq.n	80060a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e007      	b.n	80060b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	d117      	bne.n	80060f2 <I2C_Master_ADDR+0x278>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060c8:	d00b      	beq.n	80060e2 <I2C_Master_ADDR+0x268>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d008      	beq.n	80060e2 <I2C_Master_ADDR+0x268>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d005      	beq.n	80060e2 <I2C_Master_ADDR+0x268>
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d002      	beq.n	80060e2 <I2C_Master_ADDR+0x268>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d107      	bne.n	80060f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	e032      	b.n	8006170 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006118:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006128:	d117      	bne.n	800615a <I2C_Master_ADDR+0x2e0>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006130:	d00b      	beq.n	800614a <I2C_Master_ADDR+0x2d0>
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b01      	cmp	r3, #1
 8006136:	d008      	beq.n	800614a <I2C_Master_ADDR+0x2d0>
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b08      	cmp	r3, #8
 800613c:	d005      	beq.n	800614a <I2C_Master_ADDR+0x2d0>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b10      	cmp	r3, #16
 8006142:	d002      	beq.n	800614a <I2C_Master_ADDR+0x2d0>
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b20      	cmp	r3, #32
 8006148:	d107      	bne.n	800615a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006158:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006176:	e00b      	b.n	8006190 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
}
 800618e:	e7ff      	b.n	8006190 <I2C_Master_ADDR+0x316>
 8006190:	bf00      	nop
 8006192:	3744      	adds	r7, #68	; 0x44
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d02b      	beq.n	800620e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d114      	bne.n	800620e <I2C_SlaveTransmit_TXE+0x72>
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b29      	cmp	r3, #41	; 0x29
 80061e8:	d111      	bne.n	800620e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2221      	movs	r2, #33	; 0x21
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2228      	movs	r2, #40	; 0x28
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f9e7 	bl	80055dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d011      	beq.n	800624c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d02c      	beq.n	80062cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d114      	bne.n	80062cc <I2C_SlaveReceive_RXNE+0x74>
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b2a      	cmp	r3, #42	; 0x2a
 80062a6:	d111      	bne.n	80062cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2222      	movs	r2, #34	; 0x22
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2228      	movs	r2, #40	; 0x28
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff f992 	bl	80055f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d012      	beq.n	800630c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006332:	2b28      	cmp	r3, #40	; 0x28
 8006334:	d127      	bne.n	8006386 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006344:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006352:	2301      	movs	r3, #1
 8006354:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	81bb      	strh	r3, [r7, #12]
 8006368:	e002      	b.n	8006370 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006378:	89ba      	ldrh	r2, [r7, #12]
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff f940 	bl	8005604 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006384:	e00e      	b.n	80063a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006408:	d172      	bne.n	80064f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b22      	cmp	r3, #34	; 0x22
 800640e:	d002      	beq.n	8006416 <I2C_Slave_STOPF+0x6a>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b2a      	cmp	r3, #42	; 0x2a
 8006414:	d135      	bne.n	8006482 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006448:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fa96 	bl	8004980 <HAL_DMA_GetState>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d049      	beq.n	80064ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	4a69      	ldr	r2, [pc, #420]	; (8006604 <I2C_Slave_STOPF+0x258>)
 8006460:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe f8de 	bl	8004628 <HAL_DMA_Abort_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03d      	beq.n	80064ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006480:	e035      	b.n	80064ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f043 0204 	orr.w	r2, r3, #4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fa60 	bl	8004980 <HAL_DMA_GetState>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d014      	beq.n	80064f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <I2C_Slave_STOPF+0x258>)
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe f8a8 	bl	8004628 <HAL_DMA_Abort_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	e000      	b.n	80064f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d03e      	beq.n	8006578 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d112      	bne.n	800652e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d112      	bne.n	8006562 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	f043 0204 	orr.w	r2, r3, #4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8b3 	bl	80066ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006586:	e039      	b.n	80065fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d109      	bne.n	80065a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2228      	movs	r2, #40	; 0x28
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff f827 	bl	80055f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b28      	cmp	r3, #40	; 0x28
 80065ac:	d111      	bne.n	80065d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <I2C_Slave_STOPF+0x25c>)
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff f828 	bl	8005620 <HAL_I2C_ListenCpltCallback>
}
 80065d0:	e014      	b.n	80065fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2b22      	cmp	r3, #34	; 0x22
 80065d8:	d002      	beq.n	80065e0 <I2C_Slave_STOPF+0x234>
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b22      	cmp	r3, #34	; 0x22
 80065de:	d10d      	bne.n	80065fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fe fffa 	bl	80055f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08006951 	.word	0x08006951
 8006608:	ffff0000 	.word	0xffff0000

0800660c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d002      	beq.n	800662e <I2C_Slave_AF+0x22>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b20      	cmp	r3, #32
 800662c:	d129      	bne.n	8006682 <I2C_Slave_AF+0x76>
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b28      	cmp	r3, #40	; 0x28
 8006632:	d126      	bne.n	8006682 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <I2C_Slave_AF+0xdc>)
 8006638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006648:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006652:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe ffd0 	bl	8005620 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006680:	e02e      	b.n	80066e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b21      	cmp	r3, #33	; 0x21
 8006686:	d126      	bne.n	80066d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <I2C_Slave_AF+0xdc>)
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2221      	movs	r2, #33	; 0x21
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fe ff84 	bl	80055dc <HAL_I2C_SlaveTxCpltCallback>
}
 80066d4:	e004      	b.n	80066e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066de:	615a      	str	r2, [r3, #20]
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	ffff0000 	.word	0xffff0000

080066ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006702:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b10      	cmp	r3, #16
 8006708:	d002      	beq.n	8006710 <I2C_ITError+0x24>
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d10a      	bne.n	8006726 <I2C_ITError+0x3a>
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b22      	cmp	r3, #34	; 0x22
 8006714:	d107      	bne.n	8006726 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006724:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800672c:	2b28      	cmp	r3, #40	; 0x28
 800672e:	d107      	bne.n	8006740 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2228      	movs	r2, #40	; 0x28
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800673e:	e015      	b.n	800676c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674e:	d00a      	beq.n	8006766 <I2C_ITError+0x7a>
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b60      	cmp	r3, #96	; 0x60
 8006754:	d007      	beq.n	8006766 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677a:	d162      	bne.n	8006842 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800678a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d020      	beq.n	80067dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	4a6a      	ldr	r2, [pc, #424]	; (8006948 <I2C_ITError+0x25c>)
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fd ff3e 	bl	8004628 <HAL_DMA_Abort_IT>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8089 	beq.w	80068c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067d6:	4610      	mov	r0, r2
 80067d8:	4798      	blx	r3
 80067da:	e074      	b.n	80068c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	4a59      	ldr	r2, [pc, #356]	; (8006948 <I2C_ITError+0x25c>)
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fd ff1d 	bl	8004628 <HAL_DMA_Abort_IT>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d068      	beq.n	80068c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d10b      	bne.n	800681a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0201 	bic.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
 8006840:	e041      	b.n	80068c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b60      	cmp	r3, #96	; 0x60
 800684c:	d125      	bne.n	800689a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d10b      	bne.n	8006882 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fe feec 	bl	8005670 <HAL_I2C_AbortCpltCallback>
 8006898:	e015      	b.n	80068c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d10b      	bne.n	80068c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe fecb 	bl	800565c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006902:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b04      	cmp	r3, #4
 8006916:	d113      	bne.n	8006940 <I2C_ITError+0x254>
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b28      	cmp	r3, #40	; 0x28
 800691c:	d110      	bne.n	8006940 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a0a      	ldr	r2, [pc, #40]	; (800694c <I2C_ITError+0x260>)
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fe fe70 	bl	8005620 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	08006951 	.word	0x08006951
 800694c:	ffff0000 	.word	0xffff0000

08006950 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800696a:	4b4b      	ldr	r3, [pc, #300]	; (8006a98 <I2C_DMAAbort+0x148>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	4a4a      	ldr	r2, [pc, #296]	; (8006a9c <I2C_DMAAbort+0x14c>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0a1a      	lsrs	r2, r3, #8
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	00da      	lsls	r2, r3, #3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006996:	e00a      	b.n	80069ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b01      	subs	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ac:	d0ea      	beq.n	8006984 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	2200      	movs	r2, #0
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	2200      	movs	r2, #0
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f0:	2200      	movs	r2, #0
 80069f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	2200      	movs	r2, #0
 8006a02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b60      	cmp	r3, #96	; 0x60
 8006a1e:	d10e      	bne.n	8006a3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a36:	6978      	ldr	r0, [r7, #20]
 8006a38:	f7fe fe1a 	bl	8005670 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a3c:	e027      	b.n	8006a8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a44:	2b28      	cmp	r3, #40	; 0x28
 8006a46:	d117      	bne.n	8006a78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2228      	movs	r2, #40	; 0x28
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a76:	e007      	b.n	8006a88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a88:	6978      	ldr	r0, [r7, #20]
 8006a8a:	f7fe fde7 	bl	800565c <HAL_I2C_ErrorCallback>
}
 8006a8e:	bf00      	nop
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000440 	.word	0x20000440
 8006a9c:	14f8b589 	.word	0x14f8b589

08006aa0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006aac:	4b13      	ldr	r3, [pc, #76]	; (8006afc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	08db      	lsrs	r3, r3, #3
 8006ab2:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	0a1a      	lsrs	r2, r3, #8
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d107      	bne.n	8006ade <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e008      	b.n	8006af0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aec:	d0e9      	beq.n	8006ac2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	20000440 	.word	0x20000440
 8006b00:	14f8b589 	.word	0x14f8b589

08006b04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b14:	d103      	bne.n	8006b1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b1c:	e007      	b.n	8006b2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b26:	d102      	bne.n	8006b2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e267      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d075      	beq.n	8006c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b5a:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d00c      	beq.n	8006b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b66:	4b85      	ldr	r3, [pc, #532]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d112      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b72:	4b82      	ldr	r3, [pc, #520]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b7e:	d10b      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b80:	4b7e      	ldr	r3, [pc, #504]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d05b      	beq.n	8006c44 <HAL_RCC_OscConfig+0x108>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d157      	bne.n	8006c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e242      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x74>
 8006ba2:	4b76      	ldr	r3, [pc, #472]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a75      	ldr	r2, [pc, #468]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e01d      	b.n	8006bec <HAL_RCC_OscConfig+0xb0>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x98>
 8006bba:	4b70      	ldr	r3, [pc, #448]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6f      	ldr	r2, [pc, #444]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	4b6d      	ldr	r3, [pc, #436]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6c      	ldr	r2, [pc, #432]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e00b      	b.n	8006bec <HAL_RCC_OscConfig+0xb0>
 8006bd4:	4b69      	ldr	r3, [pc, #420]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b66      	ldr	r3, [pc, #408]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a65      	ldr	r2, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d013      	beq.n	8006c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf4:	f7fd fa84 	bl	8004100 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7fd fa80 	bl	8004100 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e207      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	4b5b      	ldr	r3, [pc, #364]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0xc0>
 8006c1a:	e014      	b.n	8006c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1c:	f7fd fa70 	bl	8004100 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c24:	f7fd fa6c 	bl	8004100 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	; 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e1f3      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c36:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0xe8>
 8006c42:	e000      	b.n	8006c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d063      	beq.n	8006d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5e:	4b47      	ldr	r3, [pc, #284]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d11c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c6a:	4b44      	ldr	r3, [pc, #272]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d116      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c76:	4b41      	ldr	r3, [pc, #260]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_RCC_OscConfig+0x152>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d001      	beq.n	8006c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e1c7      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8e:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4937      	ldr	r1, [pc, #220]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca2:	e03a      	b.n	8006d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cac:	4b34      	ldr	r3, [pc, #208]	; (8006d80 <HAL_RCC_OscConfig+0x244>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb2:	f7fd fa25 	bl	8004100 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cba:	f7fd fa21 	bl	8004100 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e1a8      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0f0      	beq.n	8006cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4925      	ldr	r1, [pc, #148]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	600b      	str	r3, [r1, #0]
 8006cec:	e015      	b.n	8006d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cee:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <HAL_RCC_OscConfig+0x244>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fd fa04 	bl	8004100 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cfc:	f7fd fa00 	bl	8004100 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e187      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f0      	bne.n	8006cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d036      	beq.n	8006d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2e:	4b15      	ldr	r3, [pc, #84]	; (8006d84 <HAL_RCC_OscConfig+0x248>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d34:	f7fd f9e4 	bl	8004100 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d3c:	f7fd f9e0 	bl	8004100 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e167      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <HAL_RCC_OscConfig+0x240>)
 8006d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x200>
 8006d5a:	e01b      	b.n	8006d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_OscConfig+0x248>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d62:	f7fd f9cd 	bl	8004100 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d68:	e00e      	b.n	8006d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d6a:	f7fd f9c9 	bl	8004100 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d907      	bls.n	8006d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e150      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	42470000 	.word	0x42470000
 8006d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d88:	4b88      	ldr	r3, [pc, #544]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ea      	bne.n	8006d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8097 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da6:	4b81      	ldr	r3, [pc, #516]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	4b7d      	ldr	r3, [pc, #500]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	4a7c      	ldr	r2, [pc, #496]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006dc2:	4b7a      	ldr	r3, [pc, #488]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd2:	4b77      	ldr	r3, [pc, #476]	; (8006fb0 <HAL_RCC_OscConfig+0x474>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d118      	bne.n	8006e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dde:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <HAL_RCC_OscConfig+0x474>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a73      	ldr	r2, [pc, #460]	; (8006fb0 <HAL_RCC_OscConfig+0x474>)
 8006de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dea:	f7fd f989 	bl	8004100 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006df2:	f7fd f985 	bl	8004100 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e10c      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e04:	4b6a      	ldr	r3, [pc, #424]	; (8006fb0 <HAL_RCC_OscConfig+0x474>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f0      	beq.n	8006df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d106      	bne.n	8006e26 <HAL_RCC_OscConfig+0x2ea>
 8006e18:	4b64      	ldr	r3, [pc, #400]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	4a63      	ldr	r2, [pc, #396]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	6713      	str	r3, [r2, #112]	; 0x70
 8006e24:	e01c      	b.n	8006e60 <HAL_RCC_OscConfig+0x324>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x30c>
 8006e2e:	4b5f      	ldr	r3, [pc, #380]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	4a5e      	ldr	r2, [pc, #376]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3a:	4b5c      	ldr	r3, [pc, #368]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	4a5b      	ldr	r2, [pc, #364]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	6713      	str	r3, [r2, #112]	; 0x70
 8006e46:	e00b      	b.n	8006e60 <HAL_RCC_OscConfig+0x324>
 8006e48:	4b58      	ldr	r3, [pc, #352]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4a57      	ldr	r2, [pc, #348]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	6713      	str	r3, [r2, #112]	; 0x70
 8006e54:	4b55      	ldr	r3, [pc, #340]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	4a54      	ldr	r2, [pc, #336]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e5a:	f023 0304 	bic.w	r3, r3, #4
 8006e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e68:	f7fd f94a 	bl	8004100 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e70:	f7fd f946 	bl	8004100 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e0cb      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e86:	4b49      	ldr	r3, [pc, #292]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0ee      	beq.n	8006e70 <HAL_RCC_OscConfig+0x334>
 8006e92:	e014      	b.n	8006ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e94:	f7fd f934 	bl	8004100 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fd f930 	bl	8004100 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e0b5      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eb2:	4b3e      	ldr	r3, [pc, #248]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1ee      	bne.n	8006e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec4:	4b39      	ldr	r3, [pc, #228]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	4a38      	ldr	r2, [pc, #224]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80a1 	beq.w	800701c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eda:	4b34      	ldr	r3, [pc, #208]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d05c      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d141      	bne.n	8006f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eee:	4b31      	ldr	r3, [pc, #196]	; (8006fb4 <HAL_RCC_OscConfig+0x478>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef4:	f7fd f904 	bl	8004100 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006efc:	f7fd f900 	bl	8004100 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e087      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0e:	4b27      	ldr	r3, [pc, #156]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f0      	bne.n	8006efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69da      	ldr	r2, [r3, #28]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	019b      	lsls	r3, r3, #6
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	3b01      	subs	r3, #1
 8006f34:	041b      	lsls	r3, r3, #16
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	061b      	lsls	r3, r3, #24
 8006f3e:	491b      	ldr	r1, [pc, #108]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <HAL_RCC_OscConfig+0x478>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4a:	f7fd f8d9 	bl	8004100 <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f52:	f7fd f8d5 	bl	8004100 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e05c      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0f0      	beq.n	8006f52 <HAL_RCC_OscConfig+0x416>
 8006f70:	e054      	b.n	800701c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <HAL_RCC_OscConfig+0x478>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f78:	f7fd f8c2 	bl	8004100 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fd f8be 	bl	8004100 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e045      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <HAL_RCC_OscConfig+0x470>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x444>
 8006f9e:	e03d      	b.n	800701c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e038      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	40007000 	.word	0x40007000
 8006fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <HAL_RCC_OscConfig+0x4ec>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d028      	beq.n	8007018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d121      	bne.n	8007018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d11a      	bne.n	8007018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d111      	bne.n	8007018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	3b01      	subs	r3, #1
 8007002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800

0800702c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0cc      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007040:	4b68      	ldr	r3, [pc, #416]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d90c      	bls.n	8007068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704e:	4b65      	ldr	r3, [pc, #404]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0b8      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d020      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007080:	4b59      	ldr	r3, [pc, #356]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4a58      	ldr	r2, [pc, #352]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800708a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007098:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4a52      	ldr	r2, [pc, #328]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	494d      	ldr	r1, [pc, #308]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d044      	beq.n	800714c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d119      	bne.n	800710a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e07f      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d003      	beq.n	80070ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d107      	bne.n	80070fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ea:	4b3f      	ldr	r3, [pc, #252]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e06f      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fa:	4b3b      	ldr	r3, [pc, #236]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e067      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800710a:	4b37      	ldr	r3, [pc, #220]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f023 0203 	bic.w	r2, r3, #3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4934      	ldr	r1, [pc, #208]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	4313      	orrs	r3, r2
 800711a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800711c:	f7fc fff0 	bl	8004100 <HAL_GetTick>
 8007120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	e00a      	b.n	800713a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007124:	f7fc ffec 	bl	8004100 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007132:	4293      	cmp	r3, r2
 8007134:	d901      	bls.n	800713a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e04f      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713a:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 020c 	and.w	r2, r3, #12
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	429a      	cmp	r2, r3
 800714a:	d1eb      	bne.n	8007124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800714c:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d20c      	bcs.n	8007174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715a:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e032      	b.n	80071da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4916      	ldr	r1, [pc, #88]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	490e      	ldr	r1, [pc, #56]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071b2:	f000 f821 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	490a      	ldr	r1, [pc, #40]	; (80071ec <HAL_RCC_ClockConfig+0x1c0>)
 80071c4:	5ccb      	ldrb	r3, [r1, r3]
 80071c6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 80071cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fc ff50 	bl	8004078 <HAL_InitTick>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023c00 	.word	0x40023c00
 80071e8:	40023800 	.word	0x40023800
 80071ec:	0800a020 	.word	0x0800a020
 80071f0:	20000440 	.word	0x20000440
 80071f4:	20000444 	.word	0x20000444

080071f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b094      	sub	sp, #80	; 0x50
 80071fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	647b      	str	r3, [r7, #68]	; 0x44
 8007204:	2300      	movs	r3, #0
 8007206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007208:	2300      	movs	r3, #0
 800720a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007210:	4b79      	ldr	r3, [pc, #484]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 030c 	and.w	r3, r3, #12
 8007218:	2b08      	cmp	r3, #8
 800721a:	d00d      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x40>
 800721c:	2b08      	cmp	r3, #8
 800721e:	f200 80e1 	bhi.w	80073e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x34>
 8007226:	2b04      	cmp	r3, #4
 8007228:	d003      	beq.n	8007232 <HAL_RCC_GetSysClockFreq+0x3a>
 800722a:	e0db      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800722c:	4b73      	ldr	r3, [pc, #460]	; (80073fc <HAL_RCC_GetSysClockFreq+0x204>)
 800722e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007230:	e0db      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007232:	4b73      	ldr	r3, [pc, #460]	; (8007400 <HAL_RCC_GetSysClockFreq+0x208>)
 8007234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007236:	e0d8      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007238:	4b6f      	ldr	r3, [pc, #444]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007242:	4b6d      	ldr	r3, [pc, #436]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d063      	beq.n	8007316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724e:	4b6a      	ldr	r3, [pc, #424]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	099b      	lsrs	r3, r3, #6
 8007254:	2200      	movs	r2, #0
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
 8007258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	633b      	str	r3, [r7, #48]	; 0x30
 8007262:	2300      	movs	r3, #0
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f04f 0000 	mov.w	r0, #0
 8007272:	f04f 0100 	mov.w	r1, #0
 8007276:	0159      	lsls	r1, r3, #5
 8007278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800727c:	0150      	lsls	r0, r2, #5
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4621      	mov	r1, r4
 8007284:	1a51      	subs	r1, r2, r1
 8007286:	6139      	str	r1, [r7, #16]
 8007288:	4629      	mov	r1, r5
 800728a:	eb63 0301 	sbc.w	r3, r3, r1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800729c:	4659      	mov	r1, fp
 800729e:	018b      	lsls	r3, r1, #6
 80072a0:	4651      	mov	r1, sl
 80072a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072a6:	4651      	mov	r1, sl
 80072a8:	018a      	lsls	r2, r1, #6
 80072aa:	4651      	mov	r1, sl
 80072ac:	ebb2 0801 	subs.w	r8, r2, r1
 80072b0:	4659      	mov	r1, fp
 80072b2:	eb63 0901 	sbc.w	r9, r3, r1
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ca:	4690      	mov	r8, r2
 80072cc:	4699      	mov	r9, r3
 80072ce:	4623      	mov	r3, r4
 80072d0:	eb18 0303 	adds.w	r3, r8, r3
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	462b      	mov	r3, r5
 80072d8:	eb49 0303 	adc.w	r3, r9, r3
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072ea:	4629      	mov	r1, r5
 80072ec:	024b      	lsls	r3, r1, #9
 80072ee:	4621      	mov	r1, r4
 80072f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072f4:	4621      	mov	r1, r4
 80072f6:	024a      	lsls	r2, r1, #9
 80072f8:	4610      	mov	r0, r2
 80072fa:	4619      	mov	r1, r3
 80072fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fe:	2200      	movs	r2, #0
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
 8007302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007308:	f7f9 fb84 	bl	8000a14 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4613      	mov	r3, r2
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007314:	e058      	b.n	80073c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007316:	4b38      	ldr	r3, [pc, #224]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	099b      	lsrs	r3, r3, #6
 800731c:	2200      	movs	r2, #0
 800731e:	4618      	mov	r0, r3
 8007320:	4611      	mov	r1, r2
 8007322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007326:	623b      	str	r3, [r7, #32]
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007330:	4642      	mov	r2, r8
 8007332:	464b      	mov	r3, r9
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f04f 0100 	mov.w	r1, #0
 800733c:	0159      	lsls	r1, r3, #5
 800733e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007342:	0150      	lsls	r0, r2, #5
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4641      	mov	r1, r8
 800734a:	ebb2 0a01 	subs.w	sl, r2, r1
 800734e:	4649      	mov	r1, r9
 8007350:	eb63 0b01 	sbc.w	fp, r3, r1
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007368:	ebb2 040a 	subs.w	r4, r2, sl
 800736c:	eb63 050b 	sbc.w	r5, r3, fp
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	00eb      	lsls	r3, r5, #3
 800737a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800737e:	00e2      	lsls	r2, r4, #3
 8007380:	4614      	mov	r4, r2
 8007382:	461d      	mov	r5, r3
 8007384:	4643      	mov	r3, r8
 8007386:	18e3      	adds	r3, r4, r3
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	464b      	mov	r3, r9
 800738c:	eb45 0303 	adc.w	r3, r5, r3
 8007390:	607b      	str	r3, [r7, #4]
 8007392:	f04f 0200 	mov.w	r2, #0
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739e:	4629      	mov	r1, r5
 80073a0:	028b      	lsls	r3, r1, #10
 80073a2:	4621      	mov	r1, r4
 80073a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073a8:	4621      	mov	r1, r4
 80073aa:	028a      	lsls	r2, r1, #10
 80073ac:	4610      	mov	r0, r2
 80073ae:	4619      	mov	r1, r3
 80073b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b2:	2200      	movs	r2, #0
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	61fa      	str	r2, [r7, #28]
 80073b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073bc:	f7f9 fb2a 	bl	8000a14 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	3301      	adds	r3, #1
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073e2:	e002      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCC_GetSysClockFreq+0x204>)
 80073e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3750      	adds	r7, #80	; 0x50
 80073f0:	46bd      	mov	sp, r7
 80073f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800
 80073fc:	00f42400 	.word	0x00f42400
 8007400:	007a1200 	.word	0x007a1200

08007404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <HAL_RCC_GetHCLKFreq+0x14>)
 800740a:	681b      	ldr	r3, [r3, #0]
}
 800740c:	4618      	mov	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20000440 	.word	0x20000440

0800741c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007420:	f7ff fff0 	bl	8007404 <HAL_RCC_GetHCLKFreq>
 8007424:	4602      	mov	r2, r0
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	0a9b      	lsrs	r3, r3, #10
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	4903      	ldr	r1, [pc, #12]	; (8007440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007432:	5ccb      	ldrb	r3, [r1, r3]
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40023800 	.word	0x40023800
 8007440:	0800a030 	.word	0x0800a030

08007444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007448:	f7ff ffdc 	bl	8007404 <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0b5b      	lsrs	r3, r3, #13
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4903      	ldr	r1, [pc, #12]	; (8007468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40023800 	.word	0x40023800
 8007468:	0800a030 	.word	0x0800a030

0800746c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e041      	b.n	8007502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fc fbea 	bl	8003c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f000 fd7e 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d001      	beq.n	8007524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e044      	b.n	80075ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <HAL_TIM_Base_Start_IT+0xb0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d018      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0x6c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d013      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0x6c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00e      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0x6c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d009      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0x6c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d004      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0x6c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a16      	ldr	r2, [pc, #88]	; (80075cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d111      	bne.n	800759c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b06      	cmp	r3, #6
 8007588:	d010      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0201 	orr.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759a:	e007      	b.n	80075ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40014000 	.word	0x40014000

080075d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e041      	b.n	8007666 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fc faca 	bl	8003b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f000 fccc 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d109      	bne.n	8007694 <HAL_TIM_PWM_Start+0x24>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	bf14      	ite	ne
 800768c:	2301      	movne	r3, #1
 800768e:	2300      	moveq	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	e022      	b.n	80076da <HAL_TIM_PWM_Start+0x6a>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d109      	bne.n	80076ae <HAL_TIM_PWM_Start+0x3e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	e015      	b.n	80076da <HAL_TIM_PWM_Start+0x6a>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d109      	bne.n	80076c8 <HAL_TIM_PWM_Start+0x58>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e008      	b.n	80076da <HAL_TIM_PWM_Start+0x6a>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e068      	b.n	80077b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Start+0x82>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f0:	e013      	b.n	800771a <HAL_TIM_PWM_Start+0xaa>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d104      	bne.n	8007702 <HAL_TIM_PWM_Start+0x92>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007700:	e00b      	b.n	800771a <HAL_TIM_PWM_Start+0xaa>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d104      	bne.n	8007712 <HAL_TIM_PWM_Start+0xa2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007710:	e003      	b.n	800771a <HAL_TIM_PWM_Start+0xaa>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2201      	movs	r2, #1
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fee8 	bl	80084f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a23      	ldr	r2, [pc, #140]	; (80077bc <HAL_TIM_PWM_Start+0x14c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d107      	bne.n	8007742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <HAL_TIM_PWM_Start+0x14c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d018      	beq.n	800777e <HAL_TIM_PWM_Start+0x10e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d013      	beq.n	800777e <HAL_TIM_PWM_Start+0x10e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <HAL_TIM_PWM_Start+0x150>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00e      	beq.n	800777e <HAL_TIM_PWM_Start+0x10e>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <HAL_TIM_PWM_Start+0x154>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_TIM_PWM_Start+0x10e>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <HAL_TIM_PWM_Start+0x158>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_TIM_PWM_Start+0x10e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a14      	ldr	r2, [pc, #80]	; (80077cc <HAL_TIM_PWM_Start+0x15c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d111      	bne.n	80077a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b06      	cmp	r3, #6
 800778e:	d010      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0201 	orr.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a0:	e007      	b.n	80077b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40010000 	.word	0x40010000
 80077c0:	40000400 	.word	0x40000400
 80077c4:	40000800 	.word	0x40000800
 80077c8:	40000c00 	.word	0x40000c00
 80077cc:	40014000 	.word	0x40014000

080077d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e097      	b.n	8007914 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7fc f9f1 	bl	8003be0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007814:	f023 0307 	bic.w	r3, r3, #7
 8007818:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f000 fbc1 	bl	8007fac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	4313      	orrs	r3, r2
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007870:	f023 030c 	bic.w	r3, r3, #12
 8007874:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800787c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	4313      	orrs	r3, r2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	011a      	lsls	r2, r3, #4
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	031b      	lsls	r3, r3, #12
 80078a0:	4313      	orrs	r3, r2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	4313      	orrs	r3, r2
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800792c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007934:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800793c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007944:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d110      	bne.n	800796e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d102      	bne.n	8007958 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007952:	7b7b      	ldrb	r3, [r7, #13]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e069      	b.n	8007a30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800796c:	e031      	b.n	80079d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d110      	bne.n	8007996 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d102      	bne.n	8007980 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800797a:	7b3b      	ldrb	r3, [r7, #12]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d001      	beq.n	8007984 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e055      	b.n	8007a30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007994:	e01d      	b.n	80079d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d108      	bne.n	80079ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d105      	bne.n	80079ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079a2:	7b7b      	ldrb	r3, [r7, #13]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d102      	bne.n	80079ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079a8:	7b3b      	ldrb	r3, [r7, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d001      	beq.n	80079b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e03e      	b.n	8007a30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_TIM_Encoder_Start+0xc4>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d008      	beq.n	80079f0 <HAL_TIM_Encoder_Start+0xd4>
 80079de:	e00f      	b.n	8007a00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fd85 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 80079ee:	e016      	b.n	8007a1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	2104      	movs	r1, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fd7d 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 80079fe:	e00e      	b.n	8007a1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2201      	movs	r2, #1
 8007a06:	2100      	movs	r1, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fd75 	bl	80084f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2201      	movs	r2, #1
 8007a14:	2104      	movs	r1, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fd6e 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 8007a1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0202 	mvn.w	r2, #2
 8007a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa77 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa69 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa7a 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d122      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d11b      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0204 	mvn.w	r2, #4
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa4d 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa3f 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fa50 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d122      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d11b      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0208 	mvn.w	r2, #8
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa23 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa15 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa26 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d122      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d11b      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0210 	mvn.w	r2, #16
 8007b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2208      	movs	r2, #8
 8007b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9f9 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007b7c:	e005      	b.n	8007b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9eb 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9fc 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d10e      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0201 	mvn.w	r2, #1
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fb fc0c 	bl	80033d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	2b80      	cmp	r3, #128	; 0x80
 8007bc8:	d10e      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d107      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fd78 	bl	80086d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d10e      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d107      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9c1 	bl	8007f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	d10e      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d107      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0220 	mvn.w	r2, #32
 8007c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fd42 	bl	80086c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e0ae      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b0c      	cmp	r3, #12
 8007c72:	f200 809f 	bhi.w	8007db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007db5 	.word	0x08007db5
 8007c84:	08007db5 	.word	0x08007db5
 8007c88:	08007db5 	.word	0x08007db5
 8007c8c:	08007cf1 	.word	0x08007cf1
 8007c90:	08007db5 	.word	0x08007db5
 8007c94:	08007db5 	.word	0x08007db5
 8007c98:	08007db5 	.word	0x08007db5
 8007c9c:	08007d33 	.word	0x08007d33
 8007ca0:	08007db5 	.word	0x08007db5
 8007ca4:	08007db5 	.word	0x08007db5
 8007ca8:	08007db5 	.word	0x08007db5
 8007cac:	08007d73 	.word	0x08007d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f9f8 	bl	80080ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0208 	orr.w	r2, r2, #8
 8007cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0204 	bic.w	r2, r2, #4
 8007cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6999      	ldr	r1, [r3, #24]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	619a      	str	r2, [r3, #24]
      break;
 8007cee:	e064      	b.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fa3e 	bl	8008178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6999      	ldr	r1, [r3, #24]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	021a      	lsls	r2, r3, #8
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	619a      	str	r2, [r3, #24]
      break;
 8007d30:	e043      	b.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fa89 	bl	8008250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0208 	orr.w	r2, r2, #8
 8007d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0204 	bic.w	r2, r2, #4
 8007d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69d9      	ldr	r1, [r3, #28]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	61da      	str	r2, [r3, #28]
      break;
 8007d70:	e023      	b.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fad3 	bl	8008324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69d9      	ldr	r1, [r3, #28]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	021a      	lsls	r2, r3, #8
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	61da      	str	r2, [r3, #28]
      break;
 8007db2:	e002      	b.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
      break;
 8007db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_TIM_ConfigClockSource+0x1c>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e0b4      	b.n	8007f52 <HAL_TIM_ConfigClockSource+0x186>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e20:	d03e      	beq.n	8007ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e26:	f200 8087 	bhi.w	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2e:	f000 8086 	beq.w	8007f3e <HAL_TIM_ConfigClockSource+0x172>
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e36:	d87f      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e38:	2b70      	cmp	r3, #112	; 0x70
 8007e3a:	d01a      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0xa6>
 8007e3c:	2b70      	cmp	r3, #112	; 0x70
 8007e3e:	d87b      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e40:	2b60      	cmp	r3, #96	; 0x60
 8007e42:	d050      	beq.n	8007ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8007e44:	2b60      	cmp	r3, #96	; 0x60
 8007e46:	d877      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e48:	2b50      	cmp	r3, #80	; 0x50
 8007e4a:	d03c      	beq.n	8007ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8007e4c:	2b50      	cmp	r3, #80	; 0x50
 8007e4e:	d873      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d058      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x13a>
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d86f      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d064      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15a>
 8007e5c:	2b30      	cmp	r3, #48	; 0x30
 8007e5e:	d86b      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d060      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15a>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d867      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d05c      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15a>
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d05a      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15a>
 8007e70:	e062      	b.n	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6899      	ldr	r1, [r3, #8]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f000 fb19 	bl	80084b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	609a      	str	r2, [r3, #8]
      break;
 8007e9e:	e04f      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6899      	ldr	r1, [r3, #8]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f000 fb02 	bl	80084b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ec2:	609a      	str	r2, [r3, #8]
      break;
 8007ec4:	e03c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6859      	ldr	r1, [r3, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f000 fa76 	bl	80083c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2150      	movs	r1, #80	; 0x50
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 facf 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007ee4:	e02c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6859      	ldr	r1, [r3, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f000 fa95 	bl	8008422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2160      	movs	r1, #96	; 0x60
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fabf 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007f04:	e01c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6859      	ldr	r1, [r3, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f000 fa56 	bl	80083c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2140      	movs	r1, #64	; 0x40
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 faaf 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007f24:	e00c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	f000 faa6 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007f36:	e003      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f3c:	e000      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a34      	ldr	r2, [pc, #208]	; (8008090 <TIM_Base_SetConfig+0xe4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_Base_SetConfig+0x38>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d00b      	beq.n	8007fe4 <TIM_Base_SetConfig+0x38>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a31      	ldr	r2, [pc, #196]	; (8008094 <TIM_Base_SetConfig+0xe8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_Base_SetConfig+0x38>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a30      	ldr	r2, [pc, #192]	; (8008098 <TIM_Base_SetConfig+0xec>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_Base_SetConfig+0x38>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a2f      	ldr	r2, [pc, #188]	; (800809c <TIM_Base_SetConfig+0xf0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d108      	bne.n	8007ff6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a25      	ldr	r2, [pc, #148]	; (8008090 <TIM_Base_SetConfig+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01b      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008004:	d017      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a22      	ldr	r2, [pc, #136]	; (8008094 <TIM_Base_SetConfig+0xe8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d013      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a21      	ldr	r2, [pc, #132]	; (8008098 <TIM_Base_SetConfig+0xec>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00f      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a20      	ldr	r2, [pc, #128]	; (800809c <TIM_Base_SetConfig+0xf0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00b      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <TIM_Base_SetConfig+0xf4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d007      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1e      	ldr	r2, [pc, #120]	; (80080a4 <TIM_Base_SetConfig+0xf8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d003      	beq.n	8008036 <TIM_Base_SetConfig+0x8a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <TIM_Base_SetConfig+0xfc>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d108      	bne.n	8008048 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a08      	ldr	r2, [pc, #32]	; (8008090 <TIM_Base_SetConfig+0xe4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d103      	bne.n	800807c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	615a      	str	r2, [r3, #20]
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40014000 	.word	0x40014000
 80080a4:	40014400 	.word	0x40014400
 80080a8:	40014800 	.word	0x40014800

080080ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0201 	bic.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f023 0302 	bic.w	r3, r3, #2
 80080f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <TIM_OC1_SetConfig+0xc8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0308 	bic.w	r3, r3, #8
 800810e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0304 	bic.w	r3, r3, #4
 8008120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a13      	ldr	r2, [pc, #76]	; (8008174 <TIM_OC1_SetConfig+0xc8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d111      	bne.n	800814e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	621a      	str	r2, [r3, #32]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	40010000 	.word	0x40010000

08008178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f023 0210 	bic.w	r2, r3, #16
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0320 	bic.w	r3, r3, #32
 80081c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <TIM_OC2_SetConfig+0xd4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d10d      	bne.n	80081f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <TIM_OC2_SetConfig+0xd4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d113      	bne.n	8008224 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800820a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	40010000 	.word	0x40010000

08008250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1d      	ldr	r2, [pc, #116]	; (8008320 <TIM_OC3_SetConfig+0xd0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d10d      	bne.n	80082ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <TIM_OC3_SetConfig+0xd0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d113      	bne.n	80082fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	621a      	str	r2, [r3, #32]
}
 8008314:	bf00      	nop
 8008316:	371c      	adds	r7, #28
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40010000 	.word	0x40010000

08008324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800835a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800836e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	031b      	lsls	r3, r3, #12
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a10      	ldr	r2, [pc, #64]	; (80083c0 <TIM_OC4_SetConfig+0x9c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d109      	bne.n	8008398 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	019b      	lsls	r3, r3, #6
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000

080083c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	f023 0201 	bic.w	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f023 030a 	bic.w	r3, r3, #10
 8008400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f023 0210 	bic.w	r2, r3, #16
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	031b      	lsls	r3, r3, #12
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800845e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	f043 0307 	orr.w	r3, r3, #7
 80084a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	431a      	orrs	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4313      	orrs	r3, r2
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2201      	movs	r2, #1
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	43db      	mvns	r3, r3
 800851a:	401a      	ands	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1a      	ldr	r2, [r3, #32]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008558:	2302      	movs	r3, #2
 800855a:	e050      	b.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1c      	ldr	r2, [pc, #112]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d018      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a8:	d013      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	; (8008610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a15      	ldr	r2, [pc, #84]	; (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a13      	ldr	r2, [pc, #76]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10c      	bne.n	80085ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	40014000 	.word	0x40014000

08008620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008638:	2302      	movs	r3, #2
 800863a:	e03d      	b.n	80086b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e03f      	b.n	800877e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fb fb48 	bl	8003da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2224      	movs	r2, #36	; 0x24
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fee1 	bl	80094f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	4613      	mov	r3, r2
 8008792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b20      	cmp	r3, #32
 800879e:	d130      	bne.n	8008802 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_UART_Transmit_IT+0x26>
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e029      	b.n	8008804 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_UART_Transmit_IT+0x38>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e022      	b.n	8008804 <HAL_UART_Transmit_IT+0x7e>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2221      	movs	r2, #33	; 0x21
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008802:	2302      	movs	r3, #2
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b20      	cmp	r3, #32
 8008828:	d152      	bne.n	80088d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e04b      	b.n	80088d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008844:	2302      	movs	r3, #2
 8008846:	e044      	b.n	80088d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	461a      	mov	r2, r3
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fbeb 	bl	8009038 <UART_Start_Receive_DMA>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800886c:	2b00      	cmp	r3, #0
 800886e:	d12c      	bne.n	80088ca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	2b01      	cmp	r3, #1
 8008876:	d125      	bne.n	80088c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008878:	2300      	movs	r3, #0
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	330c      	adds	r3, #12
 8008894:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	617b      	str	r3, [r7, #20]
   return(result);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f043 0310 	orr.w	r3, r3, #16
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	330c      	adds	r3, #12
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	627a      	str	r2, [r7, #36]	; 0x24
 80088b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6a39      	ldr	r1, [r7, #32]
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e5      	bne.n	800888e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80088c2:	e002      	b.n	80088ca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80088ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ce:	e000      	b.n	80088d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80088d0:	2302      	movs	r3, #2
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3730      	adds	r7, #48	; 0x30
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b0ba      	sub	sp, #232	; 0xe8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008902:	2300      	movs	r3, #0
 8008904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800891a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <HAL_UART_IRQHandler+0x66>
 800892e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd21 	bl	8009382 <UART_Receive_IT>
      return;
 8008940:	e256      	b.n	8008df0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 80de 	beq.w	8008b08 <HAL_UART_IRQHandler+0x22c>
 800894c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80d1 	beq.w	8008b08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <HAL_UART_IRQHandler+0xae>
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	f043 0201 	orr.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800898a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <HAL_UART_IRQHandler+0xd2>
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f043 0202 	orr.w	r2, r3, #2
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <HAL_UART_IRQHandler+0xf6>
 80089ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d011      	beq.n	8008a02 <HAL_UART_IRQHandler+0x126>
 80089de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f043 0208 	orr.w	r2, r3, #8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 81ed 	beq.w	8008de6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d008      	beq.n	8008a2a <HAL_UART_IRQHandler+0x14e>
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fcac 	bl	8009382 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <HAL_UART_IRQHandler+0x17a>
 8008a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d04f      	beq.n	8008af6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fbb4 	bl	80091c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d141      	bne.n	8008aee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3314      	adds	r3, #20
 8008a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1d9      	bne.n	8008a6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d013      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	4a7d      	ldr	r2, [pc, #500]	; (8008cb8 <HAL_UART_IRQHandler+0x3dc>)
 8008ac4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fb fdac 	bl	8004628 <HAL_DMA_Abort_IT>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d016      	beq.n	8008b04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae4:	e00e      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f9a4 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	e00a      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9a0 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	e006      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f99c 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b02:	e170      	b.n	8008de6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	bf00      	nop
    return;
 8008b06:	e16e      	b.n	8008de6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	f040 814a 	bne.w	8008da6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b16:	f003 0310 	and.w	r3, r3, #16
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8143 	beq.w	8008da6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 813c 	beq.w	8008da6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	f040 80b4 	bne.w	8008cbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8140 	beq.w	8008dea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b72:	429a      	cmp	r2, r3
 8008b74:	f080 8139 	bcs.w	8008dea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8a:	f000 8088 	beq.w	8008c9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1d9      	bne.n	8008b8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3314      	adds	r3, #20
 8008be0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e1      	bne.n	8008bda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3314      	adds	r3, #20
 8008c1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3314      	adds	r3, #20
 8008c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e3      	bne.n	8008c16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c80:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e3      	bne.n	8008c5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fb fc55 	bl	8004548 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fa fc68 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cb4:	e099      	b.n	8008dea <HAL_UART_IRQHandler+0x50e>
 8008cb6:	bf00      	nop
 8008cb8:	0800928b 	.word	0x0800928b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 808b 	beq.w	8008dee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8086 	beq.w	8008dee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d06:	647a      	str	r2, [r7, #68]	; 0x44
 8008d08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e3      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3314      	adds	r3, #20
 8008d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e3      	bne.n	8008d1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0310 	bic.w	r3, r3, #16
 8008d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d84:	61fa      	str	r2, [r7, #28]
 8008d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	617b      	str	r3, [r7, #20]
   return(result);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e3      	bne.n	8008d60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fa fbf0 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008da4:	e023      	b.n	8008dee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x4ea>
 8008db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa77 	bl	80092b2 <UART_Transmit_IT>
    return;
 8008dc4:	e014      	b.n	8008df0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <HAL_UART_IRQHandler+0x514>
 8008dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fab7 	bl	8009352 <UART_EndTransmit_IT>
    return;
 8008de4:	e004      	b.n	8008df0 <HAL_UART_IRQHandler+0x514>
    return;
 8008de6:	bf00      	nop
 8008de8:	e002      	b.n	8008df0 <HAL_UART_IRQHandler+0x514>
      return;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <HAL_UART_IRQHandler+0x514>
      return;
 8008dee:	bf00      	nop
  }
}
 8008df0:	37e8      	adds	r7, #232	; 0xe8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop

08008df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b09c      	sub	sp, #112	; 0x70
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d172      	bne.n	8008f4a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e66:	2200      	movs	r2, #0
 8008e68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	330c      	adds	r3, #12
 8008e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	330c      	adds	r3, #12
 8008e88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3314      	adds	r3, #20
 8008ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8008eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8008ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3314      	adds	r3, #20
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e5      	bne.n	8008ed2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d119      	bne.n	8008f4a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f023 0310 	bic.w	r3, r3, #16
 8008f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f36:	61fa      	str	r2, [r7, #28]
 8008f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	69b9      	ldr	r1, [r7, #24]
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	617b      	str	r3, [r7, #20]
   return(result);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d106      	bne.n	8008f60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f56:	4619      	mov	r1, r3
 8008f58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f5a:	f7fa fb13 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f5e:	e002      	b.n	8008f66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008f60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f62:	f7ff ff53 	bl	8008e0c <HAL_UART_RxCpltCallback>
}
 8008f66:	bf00      	nop
 8008f68:	3770      	adds	r7, #112	; 0x70
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d108      	bne.n	8008f96 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f88:	085b      	lsrs	r3, r3, #1
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7fa faf8 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f94:	e002      	b.n	8008f9c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff ff42 	bl	8008e20 <HAL_UART_RxHalfCpltCallback>
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b80      	cmp	r3, #128	; 0x80
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2301      	moveq	r3, #1
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b21      	cmp	r3, #33	; 0x21
 8008fd6:	d108      	bne.n	8008fea <UART_DMAError+0x46>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008fe4:	68b8      	ldr	r0, [r7, #8]
 8008fe6:	f000 f8c5 	bl	8009174 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff4:	2b40      	cmp	r3, #64	; 0x40
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b22      	cmp	r3, #34	; 0x22
 800900a:	d108      	bne.n	800901e <UART_DMAError+0x7a>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2200      	movs	r2, #0
 8009016:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009018:	68b8      	ldr	r0, [r7, #8]
 800901a:	f000 f8d3 	bl	80091c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	f043 0210 	orr.w	r2, r3, #16
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800902a:	68b8      	ldr	r0, [r7, #8]
 800902c:	f7ff ff02 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b098      	sub	sp, #96	; 0x60
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2222      	movs	r2, #34	; 0x22
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	4a40      	ldr	r2, [pc, #256]	; (8009168 <UART_Start_Receive_DMA+0x130>)
 8009066:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	4a3f      	ldr	r2, [pc, #252]	; (800916c <UART_Start_Receive_DMA+0x134>)
 800906e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	4a3e      	ldr	r2, [pc, #248]	; (8009170 <UART_Start_Receive_DMA+0x138>)
 8009076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	2200      	movs	r2, #0
 800907e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	f7fb f9fe 	bl	8004498 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d019      	beq.n	80090f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	330c      	adds	r3, #12
 80090c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80090e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e5      	bne.n	80090c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3314      	adds	r3, #20
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	f043 0301 	orr.w	r3, r3, #1
 800910c:	657b      	str	r3, [r7, #84]	; 0x54
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009116:	63ba      	str	r2, [r7, #56]	; 0x38
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800911c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e5      	bne.n	80090f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3314      	adds	r3, #20
 8009130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	617b      	str	r3, [r7, #20]
   return(result);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009140:	653b      	str	r3, [r7, #80]	; 0x50
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800914a:	627a      	str	r2, [r7, #36]	; 0x24
 800914c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6a39      	ldr	r1, [r7, #32]
 8009150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	61fb      	str	r3, [r7, #28]
   return(result);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3760      	adds	r7, #96	; 0x60
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	08008e49 	.word	0x08008e49
 800916c:	08008f6f 	.word	0x08008f6f
 8009170:	08008fa5 	.word	0x08008fa5

08009174 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b089      	sub	sp, #36	; 0x24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	60bb      	str	r3, [r7, #8]
   return(result);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	330c      	adds	r3, #12
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	61ba      	str	r2, [r7, #24]
 800919e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6979      	ldr	r1, [r7, #20]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	613b      	str	r3, [r7, #16]
   return(result);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e5      	bne.n	800917c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091b8:	bf00      	nop
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b095      	sub	sp, #84	; 0x54
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	330c      	adds	r3, #12
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ec:	643a      	str	r2, [r7, #64]	; 0x40
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e5      	bne.n	80091cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	64bb      	str	r3, [r7, #72]	; 0x48
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	2b01      	cmp	r3, #1
 800923a:	d119      	bne.n	8009270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	330c      	adds	r3, #12
 8009242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	60bb      	str	r3, [r7, #8]
   return(result);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f023 0310 	bic.w	r3, r3, #16
 8009252:	647b      	str	r3, [r7, #68]	; 0x44
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800925c:	61ba      	str	r2, [r7, #24]
 800925e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6979      	ldr	r1, [r7, #20]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	613b      	str	r3, [r7, #16]
   return(result);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800927e:	bf00      	nop
 8009280:	3754      	adds	r7, #84	; 0x54
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff fdc5 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b21      	cmp	r3, #33	; 0x21
 80092c4:	d13e      	bne.n	8009344 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d114      	bne.n	80092fa <UART_Transmit_IT+0x48>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d110      	bne.n	80092fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1c9a      	adds	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	621a      	str	r2, [r3, #32]
 80092f8:	e008      	b.n	800930c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	1c59      	adds	r1, r3, #1
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6211      	str	r1, [r2, #32]
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29b      	uxth	r3, r3
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4619      	mov	r1, r3
 800931a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10f      	bne.n	8009340 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800932e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800933e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	e000      	b.n	8009346 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009344:	2302      	movs	r3, #2
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009368:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff fd40 	bl	8008df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b08c      	sub	sp, #48	; 0x30
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b22      	cmp	r3, #34	; 0x22
 8009394:	f040 80ab 	bne.w	80094ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a0:	d117      	bne.n	80093d2 <UART_Receive_IT+0x50>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d113      	bne.n	80093d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	1c9a      	adds	r2, r3, #2
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28
 80093d0:	e026      	b.n	8009420 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e4:	d007      	beq.n	80093f6 <UART_Receive_IT+0x74>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <UART_Receive_IT+0x82>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e008      	b.n	8009416 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009410:	b2da      	uxtb	r2, r3
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29b      	uxth	r3, r3
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4619      	mov	r1, r3
 800942e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009430:	2b00      	cmp	r3, #0
 8009432:	d15a      	bne.n	80094ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0220 	bic.w	r2, r2, #32
 8009442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2220      	movs	r2, #32
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	2b01      	cmp	r3, #1
 8009472:	d135      	bne.n	80094e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	613b      	str	r3, [r7, #16]
   return(result);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f023 0310 	bic.w	r3, r3, #16
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	623a      	str	r2, [r7, #32]
 800949c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	69f9      	ldr	r1, [r7, #28]
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d10a      	bne.n	80094d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fa f853 	bl	8003584 <HAL_UARTEx_RxEventCallback>
 80094de:	e002      	b.n	80094e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fc93 	bl	8008e0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e002      	b.n	80094f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3730      	adds	r7, #48	; 0x30
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094fc:	b0c0      	sub	sp, #256	; 0x100
 80094fe:	af00      	add	r7, sp, #0
 8009500:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009514:	68d9      	ldr	r1, [r3, #12]
 8009516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	ea40 0301 	orr.w	r3, r0, r1
 8009520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	431a      	orrs	r2, r3
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	431a      	orrs	r2, r3
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	4313      	orrs	r3, r2
 8009540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009550:	f021 010c 	bic.w	r1, r1, #12
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800955e:	430b      	orrs	r3, r1
 8009560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	6999      	ldr	r1, [r3, #24]
 8009574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	ea40 0301 	orr.w	r3, r0, r1
 800957e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b8f      	ldr	r3, [pc, #572]	; (80097c4 <UART_SetConfig+0x2cc>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d005      	beq.n	8009598 <UART_SetConfig+0xa0>
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b8d      	ldr	r3, [pc, #564]	; (80097c8 <UART_SetConfig+0x2d0>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d104      	bne.n	80095a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009598:	f7fd ff54 	bl	8007444 <HAL_RCC_GetPCLK2Freq>
 800959c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095a0:	e003      	b.n	80095aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095a2:	f7fd ff3b 	bl	800741c <HAL_RCC_GetPCLK1Freq>
 80095a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b4:	f040 810c 	bne.w	80097d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095ca:	4622      	mov	r2, r4
 80095cc:	462b      	mov	r3, r5
 80095ce:	1891      	adds	r1, r2, r2
 80095d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80095d2:	415b      	adcs	r3, r3
 80095d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095da:	4621      	mov	r1, r4
 80095dc:	eb12 0801 	adds.w	r8, r2, r1
 80095e0:	4629      	mov	r1, r5
 80095e2:	eb43 0901 	adc.w	r9, r3, r1
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095fa:	4690      	mov	r8, r2
 80095fc:	4699      	mov	r9, r3
 80095fe:	4623      	mov	r3, r4
 8009600:	eb18 0303 	adds.w	r3, r8, r3
 8009604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009608:	462b      	mov	r3, r5
 800960a:	eb49 0303 	adc.w	r3, r9, r3
 800960e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800961e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009626:	460b      	mov	r3, r1
 8009628:	18db      	adds	r3, r3, r3
 800962a:	653b      	str	r3, [r7, #80]	; 0x50
 800962c:	4613      	mov	r3, r2
 800962e:	eb42 0303 	adc.w	r3, r2, r3
 8009632:	657b      	str	r3, [r7, #84]	; 0x54
 8009634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800963c:	f7f7 f9ea 	bl	8000a14 <__aeabi_uldivmod>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4b61      	ldr	r3, [pc, #388]	; (80097cc <UART_SetConfig+0x2d4>)
 8009646:	fba3 2302 	umull	r2, r3, r3, r2
 800964a:	095b      	lsrs	r3, r3, #5
 800964c:	011c      	lsls	r4, r3, #4
 800964e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009652:	2200      	movs	r2, #0
 8009654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009658:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800965c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	1891      	adds	r1, r2, r2
 8009666:	64b9      	str	r1, [r7, #72]	; 0x48
 8009668:	415b      	adcs	r3, r3
 800966a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800966c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009670:	4641      	mov	r1, r8
 8009672:	eb12 0a01 	adds.w	sl, r2, r1
 8009676:	4649      	mov	r1, r9
 8009678:	eb43 0b01 	adc.w	fp, r3, r1
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800968c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009690:	4692      	mov	sl, r2
 8009692:	469b      	mov	fp, r3
 8009694:	4643      	mov	r3, r8
 8009696:	eb1a 0303 	adds.w	r3, sl, r3
 800969a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800969e:	464b      	mov	r3, r9
 80096a0:	eb4b 0303 	adc.w	r3, fp, r3
 80096a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096bc:	460b      	mov	r3, r1
 80096be:	18db      	adds	r3, r3, r3
 80096c0:	643b      	str	r3, [r7, #64]	; 0x40
 80096c2:	4613      	mov	r3, r2
 80096c4:	eb42 0303 	adc.w	r3, r2, r3
 80096c8:	647b      	str	r3, [r7, #68]	; 0x44
 80096ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096d2:	f7f7 f99f 	bl	8000a14 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	4b3b      	ldr	r3, [pc, #236]	; (80097cc <UART_SetConfig+0x2d4>)
 80096de:	fba3 2301 	umull	r2, r3, r3, r1
 80096e2:	095b      	lsrs	r3, r3, #5
 80096e4:	2264      	movs	r2, #100	; 0x64
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	1acb      	subs	r3, r1, r3
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096f2:	4b36      	ldr	r3, [pc, #216]	; (80097cc <UART_SetConfig+0x2d4>)
 80096f4:	fba3 2302 	umull	r2, r3, r3, r2
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009700:	441c      	add	r4, r3
 8009702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009706:	2200      	movs	r2, #0
 8009708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	1891      	adds	r1, r2, r2
 800971a:	63b9      	str	r1, [r7, #56]	; 0x38
 800971c:	415b      	adcs	r3, r3
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009724:	4641      	mov	r1, r8
 8009726:	1851      	adds	r1, r2, r1
 8009728:	6339      	str	r1, [r7, #48]	; 0x30
 800972a:	4649      	mov	r1, r9
 800972c:	414b      	adcs	r3, r1
 800972e:	637b      	str	r3, [r7, #52]	; 0x34
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800973c:	4659      	mov	r1, fp
 800973e:	00cb      	lsls	r3, r1, #3
 8009740:	4651      	mov	r1, sl
 8009742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009746:	4651      	mov	r1, sl
 8009748:	00ca      	lsls	r2, r1, #3
 800974a:	4610      	mov	r0, r2
 800974c:	4619      	mov	r1, r3
 800974e:	4603      	mov	r3, r0
 8009750:	4642      	mov	r2, r8
 8009752:	189b      	adds	r3, r3, r2
 8009754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009758:	464b      	mov	r3, r9
 800975a:	460a      	mov	r2, r1
 800975c:	eb42 0303 	adc.w	r3, r2, r3
 8009760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009770:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009778:	460b      	mov	r3, r1
 800977a:	18db      	adds	r3, r3, r3
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
 800977e:	4613      	mov	r3, r2
 8009780:	eb42 0303 	adc.w	r3, r2, r3
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800978a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800978e:	f7f7 f941 	bl	8000a14 <__aeabi_uldivmod>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <UART_SetConfig+0x2d4>)
 8009798:	fba3 1302 	umull	r1, r3, r3, r2
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	2164      	movs	r1, #100	; 0x64
 80097a0:	fb01 f303 	mul.w	r3, r1, r3
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	3332      	adds	r3, #50	; 0x32
 80097aa:	4a08      	ldr	r2, [pc, #32]	; (80097cc <UART_SetConfig+0x2d4>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	f003 0207 	and.w	r2, r3, #7
 80097b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4422      	add	r2, r4
 80097be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097c0:	e105      	b.n	80099ce <UART_SetConfig+0x4d6>
 80097c2:	bf00      	nop
 80097c4:	40011000 	.word	0x40011000
 80097c8:	40011400 	.word	0x40011400
 80097cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	1891      	adds	r1, r2, r2
 80097e8:	6239      	str	r1, [r7, #32]
 80097ea:	415b      	adcs	r3, r3
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
 80097ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097f2:	4641      	mov	r1, r8
 80097f4:	1854      	adds	r4, r2, r1
 80097f6:	4649      	mov	r1, r9
 80097f8:	eb43 0501 	adc.w	r5, r3, r1
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	00eb      	lsls	r3, r5, #3
 8009806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980a:	00e2      	lsls	r2, r4, #3
 800980c:	4614      	mov	r4, r2
 800980e:	461d      	mov	r5, r3
 8009810:	4643      	mov	r3, r8
 8009812:	18e3      	adds	r3, r4, r3
 8009814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009818:	464b      	mov	r3, r9
 800981a:	eb45 0303 	adc.w	r3, r5, r3
 800981e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800982e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800983e:	4629      	mov	r1, r5
 8009840:	008b      	lsls	r3, r1, #2
 8009842:	4621      	mov	r1, r4
 8009844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009848:	4621      	mov	r1, r4
 800984a:	008a      	lsls	r2, r1, #2
 800984c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009850:	f7f7 f8e0 	bl	8000a14 <__aeabi_uldivmod>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4b60      	ldr	r3, [pc, #384]	; (80099dc <UART_SetConfig+0x4e4>)
 800985a:	fba3 2302 	umull	r2, r3, r3, r2
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	011c      	lsls	r4, r3, #4
 8009862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009866:	2200      	movs	r2, #0
 8009868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800986c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	1891      	adds	r1, r2, r2
 800987a:	61b9      	str	r1, [r7, #24]
 800987c:	415b      	adcs	r3, r3
 800987e:	61fb      	str	r3, [r7, #28]
 8009880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009884:	4641      	mov	r1, r8
 8009886:	1851      	adds	r1, r2, r1
 8009888:	6139      	str	r1, [r7, #16]
 800988a:	4649      	mov	r1, r9
 800988c:	414b      	adcs	r3, r1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800989c:	4659      	mov	r1, fp
 800989e:	00cb      	lsls	r3, r1, #3
 80098a0:	4651      	mov	r1, sl
 80098a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098a6:	4651      	mov	r1, sl
 80098a8:	00ca      	lsls	r2, r1, #3
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	4642      	mov	r2, r8
 80098b2:	189b      	adds	r3, r3, r2
 80098b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098b8:	464b      	mov	r3, r9
 80098ba:	460a      	mov	r2, r1
 80098bc:	eb42 0303 	adc.w	r3, r2, r3
 80098c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098dc:	4649      	mov	r1, r9
 80098de:	008b      	lsls	r3, r1, #2
 80098e0:	4641      	mov	r1, r8
 80098e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098e6:	4641      	mov	r1, r8
 80098e8:	008a      	lsls	r2, r1, #2
 80098ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098ee:	f7f7 f891 	bl	8000a14 <__aeabi_uldivmod>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4b39      	ldr	r3, [pc, #228]	; (80099dc <UART_SetConfig+0x4e4>)
 80098f8:	fba3 1302 	umull	r1, r3, r3, r2
 80098fc:	095b      	lsrs	r3, r3, #5
 80098fe:	2164      	movs	r1, #100	; 0x64
 8009900:	fb01 f303 	mul.w	r3, r1, r3
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	3332      	adds	r3, #50	; 0x32
 800990a:	4a34      	ldr	r2, [pc, #208]	; (80099dc <UART_SetConfig+0x4e4>)
 800990c:	fba2 2303 	umull	r2, r3, r2, r3
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009916:	441c      	add	r4, r3
 8009918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991c:	2200      	movs	r2, #0
 800991e:	673b      	str	r3, [r7, #112]	; 0x70
 8009920:	677a      	str	r2, [r7, #116]	; 0x74
 8009922:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009926:	4642      	mov	r2, r8
 8009928:	464b      	mov	r3, r9
 800992a:	1891      	adds	r1, r2, r2
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	415b      	adcs	r3, r3
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009936:	4641      	mov	r1, r8
 8009938:	1851      	adds	r1, r2, r1
 800993a:	6039      	str	r1, [r7, #0]
 800993c:	4649      	mov	r1, r9
 800993e:	414b      	adcs	r3, r1
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800994e:	4659      	mov	r1, fp
 8009950:	00cb      	lsls	r3, r1, #3
 8009952:	4651      	mov	r1, sl
 8009954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009958:	4651      	mov	r1, sl
 800995a:	00ca      	lsls	r2, r1, #3
 800995c:	4610      	mov	r0, r2
 800995e:	4619      	mov	r1, r3
 8009960:	4603      	mov	r3, r0
 8009962:	4642      	mov	r2, r8
 8009964:	189b      	adds	r3, r3, r2
 8009966:	66bb      	str	r3, [r7, #104]	; 0x68
 8009968:	464b      	mov	r3, r9
 800996a:	460a      	mov	r2, r1
 800996c:	eb42 0303 	adc.w	r3, r2, r3
 8009970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	663b      	str	r3, [r7, #96]	; 0x60
 800997c:	667a      	str	r2, [r7, #100]	; 0x64
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800998a:	4649      	mov	r1, r9
 800998c:	008b      	lsls	r3, r1, #2
 800998e:	4641      	mov	r1, r8
 8009990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009994:	4641      	mov	r1, r8
 8009996:	008a      	lsls	r2, r1, #2
 8009998:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800999c:	f7f7 f83a 	bl	8000a14 <__aeabi_uldivmod>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <UART_SetConfig+0x4e4>)
 80099a6:	fba3 1302 	umull	r1, r3, r3, r2
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	2164      	movs	r1, #100	; 0x64
 80099ae:	fb01 f303 	mul.w	r3, r1, r3
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	3332      	adds	r3, #50	; 0x32
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <UART_SetConfig+0x4e4>)
 80099ba:	fba2 2303 	umull	r2, r3, r2, r3
 80099be:	095b      	lsrs	r3, r3, #5
 80099c0:	f003 020f 	and.w	r2, r3, #15
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4422      	add	r2, r4
 80099cc:	609a      	str	r2, [r3, #8]
}
 80099ce:	bf00      	nop
 80099d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099d4:	46bd      	mov	sp, r7
 80099d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099da:	bf00      	nop
 80099dc:	51eb851f 	.word	0x51eb851f

080099e0 <arm_mat_trans_f32>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	8802      	ldrh	r2, [r0, #0]
 80099e6:	884b      	ldrh	r3, [r1, #2]
 80099e8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80099ec:	684f      	ldr	r7, [r1, #4]
 80099ee:	8840      	ldrh	r0, [r0, #2]
 80099f0:	4293      	cmp	r3, r2
 80099f2:	b083      	sub	sp, #12
 80099f4:	d14c      	bne.n	8009a90 <arm_mat_trans_f32+0xb0>
 80099f6:	f8b1 e000 	ldrh.w	lr, [r1]
 80099fa:	4586      	cmp	lr, r0
 80099fc:	d148      	bne.n	8009a90 <arm_mat_trans_f32+0xb0>
 80099fe:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8009a02:	009c      	lsls	r4, r3, #2
 8009a04:	f00e 0e03 	and.w	lr, lr, #3
 8009a08:	fb08 f904 	mul.w	r9, r8, r4
 8009a0c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8009a10:	011d      	lsls	r5, r3, #4
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009a18:	eb07 0a04 	add.w	sl, r7, r4
 8009a1c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009a20:	9201      	str	r2, [sp, #4]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	463b      	mov	r3, r7
 8009a26:	f1b8 0f00 	cmp.w	r8, #0
 8009a2a:	d01d      	beq.n	8009a68 <arm_mat_trans_f32+0x88>
 8009a2c:	9900      	ldr	r1, [sp, #0]
 8009a2e:	f10c 0210 	add.w	r2, ip, #16
 8009a32:	4439      	add	r1, r7
 8009a34:	4640      	mov	r0, r8
 8009a36:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8009a3a:	601e      	str	r6, [r3, #0]
 8009a3c:	ed52 7a03 	vldr	s15, [r2, #-12]
 8009a40:	191e      	adds	r6, r3, r4
 8009a42:	edc6 7a00 	vstr	s15, [r6]
 8009a46:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8009a4a:	600e      	str	r6, [r1, #0]
 8009a4c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8009a50:	190e      	adds	r6, r1, r4
 8009a52:	3801      	subs	r0, #1
 8009a54:	442b      	add	r3, r5
 8009a56:	f102 0210 	add.w	r2, r2, #16
 8009a5a:	edc6 7a00 	vstr	s15, [r6]
 8009a5e:	4429      	add	r1, r5
 8009a60:	d1e9      	bne.n	8009a36 <arm_mat_trans_f32+0x56>
 8009a62:	44dc      	add	ip, fp
 8009a64:	eb09 0307 	add.w	r3, r9, r7
 8009a68:	f1be 0f00 	cmp.w	lr, #0
 8009a6c:	d009      	beq.n	8009a82 <arm_mat_trans_f32+0xa2>
 8009a6e:	4672      	mov	r2, lr
 8009a70:	4661      	mov	r1, ip
 8009a72:	f851 0b04 	ldr.w	r0, [r1], #4
 8009a76:	6018      	str	r0, [r3, #0]
 8009a78:	3a01      	subs	r2, #1
 8009a7a:	4423      	add	r3, r4
 8009a7c:	d1f9      	bne.n	8009a72 <arm_mat_trans_f32+0x92>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	449c      	add	ip, r3
 8009a82:	3704      	adds	r7, #4
 8009a84:	4557      	cmp	r7, sl
 8009a86:	d1cd      	bne.n	8009a24 <arm_mat_trans_f32+0x44>
 8009a88:	2000      	movs	r0, #0
 8009a8a:	b003      	add	sp, #12
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	f06f 0002 	mvn.w	r0, #2
 8009a94:	e7f9      	b.n	8009a8a <arm_mat_trans_f32+0xaa>
 8009a96:	bf00      	nop

08009a98 <arm_mat_sub_f32>:
 8009a98:	b4f0      	push	{r4, r5, r6, r7}
 8009a9a:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009a9e:	6803      	ldr	r3, [r0, #0]
 8009aa0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009aa4:	6856      	ldr	r6, [r2, #4]
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	d15d      	bne.n	8009b66 <arm_mat_sub_f32+0xce>
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d15a      	bne.n	8009b66 <arm_mat_sub_f32+0xce>
 8009ab0:	8803      	ldrh	r3, [r0, #0]
 8009ab2:	8844      	ldrh	r4, [r0, #2]
 8009ab4:	fb04 f403 	mul.w	r4, r4, r3
 8009ab8:	08a5      	lsrs	r5, r4, #2
 8009aba:	d032      	beq.n	8009b22 <arm_mat_sub_f32+0x8a>
 8009abc:	f10c 0110 	add.w	r1, ip, #16
 8009ac0:	f107 0210 	add.w	r2, r7, #16
 8009ac4:	f106 0310 	add.w	r3, r6, #16
 8009ac8:	4628      	mov	r0, r5
 8009aca:	ed12 7a04 	vldr	s14, [r2, #-16]
 8009ace:	ed51 7a04 	vldr	s15, [r1, #-16]
 8009ad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ad6:	3801      	subs	r0, #1
 8009ad8:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009adc:	ed12 7a03 	vldr	s14, [r2, #-12]
 8009ae0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ae8:	f101 0110 	add.w	r1, r1, #16
 8009aec:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009af0:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009af4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8009af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009afc:	f102 0210 	add.w	r2, r2, #16
 8009b00:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009b04:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8009b08:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b10:	f103 0310 	add.w	r3, r3, #16
 8009b14:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009b18:	d1d7      	bne.n	8009aca <arm_mat_sub_f32+0x32>
 8009b1a:	012b      	lsls	r3, r5, #4
 8009b1c:	449c      	add	ip, r3
 8009b1e:	441f      	add	r7, r3
 8009b20:	441e      	add	r6, r3
 8009b22:	f014 0403 	ands.w	r4, r4, #3
 8009b26:	d01b      	beq.n	8009b60 <arm_mat_sub_f32+0xc8>
 8009b28:	eddc 7a00 	vldr	s15, [ip]
 8009b2c:	ed97 7a00 	vldr	s14, [r7]
 8009b30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b34:	3c01      	subs	r4, #1
 8009b36:	edc6 7a00 	vstr	s15, [r6]
 8009b3a:	d011      	beq.n	8009b60 <arm_mat_sub_f32+0xc8>
 8009b3c:	eddc 7a01 	vldr	s15, [ip, #4]
 8009b40:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b48:	2c01      	cmp	r4, #1
 8009b4a:	edc6 7a01 	vstr	s15, [r6, #4]
 8009b4e:	d007      	beq.n	8009b60 <arm_mat_sub_f32+0xc8>
 8009b50:	eddc 7a02 	vldr	s15, [ip, #8]
 8009b54:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b5c:	edc6 7a02 	vstr	s15, [r6, #8]
 8009b60:	2000      	movs	r0, #0
 8009b62:	bcf0      	pop	{r4, r5, r6, r7}
 8009b64:	4770      	bx	lr
 8009b66:	f06f 0002 	mvn.w	r0, #2
 8009b6a:	e7fa      	b.n	8009b62 <arm_mat_sub_f32+0xca>

08009b6c <arm_mat_mult_f32>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	8845      	ldrh	r5, [r0, #2]
 8009b72:	880b      	ldrh	r3, [r1, #0]
 8009b74:	8806      	ldrh	r6, [r0, #0]
 8009b76:	6847      	ldr	r7, [r0, #4]
 8009b78:	6854      	ldr	r4, [r2, #4]
 8009b7a:	6848      	ldr	r0, [r1, #4]
 8009b7c:	b08b      	sub	sp, #44	; 0x2c
 8009b7e:	42ab      	cmp	r3, r5
 8009b80:	9109      	str	r1, [sp, #36]	; 0x24
 8009b82:	9604      	str	r6, [sp, #16]
 8009b84:	8849      	ldrh	r1, [r1, #2]
 8009b86:	f040 808a 	bne.w	8009c9e <arm_mat_mult_f32+0x132>
 8009b8a:	8815      	ldrh	r5, [r2, #0]
 8009b8c:	42b5      	cmp	r5, r6
 8009b8e:	f040 8086 	bne.w	8009c9e <arm_mat_mult_f32+0x132>
 8009b92:	8852      	ldrh	r2, [r2, #2]
 8009b94:	428a      	cmp	r2, r1
 8009b96:	f040 8082 	bne.w	8009c9e <arm_mat_mult_f32+0x132>
 8009b9a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8009b9e:	1d01      	adds	r1, r0, #4
 8009ba0:	0116      	lsls	r6, r2, #4
 8009ba2:	9108      	str	r1, [sp, #32]
 8009ba4:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8009ba8:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8009bac:	9101      	str	r1, [sp, #4]
 8009bae:	fb06 f108 	mul.w	r1, r6, r8
 8009bb2:	0095      	lsls	r5, r2, #2
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	00d2      	lsls	r2, r2, #3
 8009bb8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8009bbc:	f003 0903 	and.w	r9, r3, #3
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	f107 0b10 	add.w	fp, r7, #16
 8009bc6:	eb04 0a05 	add.w	sl, r4, r5
 8009bca:	9107      	str	r1, [sp, #28]
 8009bcc:	9202      	str	r2, [sp, #8]
 8009bce:	9306      	str	r3, [sp, #24]
 8009bd0:	f1ab 0310 	sub.w	r3, fp, #16
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	9b07      	ldr	r3, [sp, #28]
 8009bd8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8009bdc:	eb03 0c0a 	add.w	ip, r3, sl
 8009be0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009ca8 <arm_mat_mult_f32+0x13c>
 8009be4:	f1b8 0f00 	cmp.w	r8, #0
 8009be8:	d053      	beq.n	8009c92 <arm_mat_mult_f32+0x126>
 8009bea:	9b02      	ldr	r3, [sp, #8]
 8009bec:	4644      	mov	r4, r8
 8009bee:	18c1      	adds	r1, r0, r3
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	465b      	mov	r3, fp
 8009bf4:	ed92 6a00 	vldr	s12, [r2]
 8009bf8:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009bfc:	ed53 4a03 	vldr	s9, [r3, #-12]
 8009c00:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009c04:	ed91 5a00 	vldr	s10, [r1]
 8009c08:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009c0c:	1957      	adds	r7, r2, r5
 8009c0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009c12:	ed97 6a00 	vldr	s12, [r7]
 8009c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c1a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009c1e:	194f      	adds	r7, r1, r5
 8009c20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009c24:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009c28:	edd7 7a00 	vldr	s15, [r7]
 8009c2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c30:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c34:	3c01      	subs	r4, #1
 8009c36:	4432      	add	r2, r6
 8009c38:	4431      	add	r1, r6
 8009c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c3e:	f103 0310 	add.w	r3, r3, #16
 8009c42:	d1d7      	bne.n	8009bf4 <arm_mat_mult_f32+0x88>
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	9a01      	ldr	r2, [sp, #4]
 8009c48:	4418      	add	r0, r3
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	d00b      	beq.n	8009c68 <arm_mat_mult_f32+0xfc>
 8009c50:	464b      	mov	r3, r9
 8009c52:	edd0 6a00 	vldr	s13, [r0]
 8009c56:	ecb2 7a01 	vldmia	r2!, {s14}
 8009c5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	4428      	add	r0, r5
 8009c62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c66:	d1f4      	bne.n	8009c52 <arm_mat_mult_f32+0xe6>
 8009c68:	ecec 7a01 	vstmia	ip!, {s15}
 8009c6c:	45d4      	cmp	ip, sl
 8009c6e:	4670      	mov	r0, lr
 8009c70:	f10e 0e04 	add.w	lr, lr, #4
 8009c74:	d1b4      	bne.n	8009be0 <arm_mat_mult_f32+0x74>
 8009c76:	9a01      	ldr	r2, [sp, #4]
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4419      	add	r1, r3
 8009c7e:	449b      	add	fp, r3
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	9101      	str	r1, [sp, #4]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	44aa      	add	sl, r5
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	d004      	beq.n	8009c96 <arm_mat_mult_f32+0x12a>
 8009c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8e:	6858      	ldr	r0, [r3, #4]
 8009c90:	e79e      	b.n	8009bd0 <arm_mat_mult_f32+0x64>
 8009c92:	9a05      	ldr	r2, [sp, #20]
 8009c94:	e7d9      	b.n	8009c4a <arm_mat_mult_f32+0xde>
 8009c96:	4618      	mov	r0, r3
 8009c98:	b00b      	add	sp, #44	; 0x2c
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	f06f 0002 	mvn.w	r0, #2
 8009ca2:	b00b      	add	sp, #44	; 0x2c
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca8:	00000000 	.word	0x00000000

08009cac <arm_mat_inverse_f32>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	8843      	ldrh	r3, [r0, #2]
 8009cb2:	8804      	ldrh	r4, [r0, #0]
 8009cb4:	684e      	ldr	r6, [r1, #4]
 8009cb6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009cba:	b087      	sub	sp, #28
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9603      	str	r6, [sp, #12]
 8009cc2:	f040 80ea 	bne.w	8009e9a <arm_mat_inverse_f32+0x1ee>
 8009cc6:	880a      	ldrh	r2, [r1, #0]
 8009cc8:	884b      	ldrh	r3, [r1, #2]
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	f040 80e5 	bne.w	8009e9a <arm_mat_inverse_f32+0x1ee>
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	f040 80e2 	bne.w	8009e9a <arm_mat_inverse_f32+0x1ee>
 8009cd6:	9005      	str	r0, [sp, #20]
 8009cd8:	b30c      	cbz	r4, 8009d1e <arm_mat_inverse_f32+0x72>
 8009cda:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8009cde:	1e67      	subs	r7, r4, #1
 8009ce0:	f846 bb04 	str.w	fp, [r6], #4
 8009ce4:	d01b      	beq.n	8009d1e <arm_mat_inverse_f32+0x72>
 8009ce6:	f04f 0801 	mov.w	r8, #1
 8009cea:	00ba      	lsls	r2, r7, #2
 8009cec:	eb06 0a02 	add.w	sl, r6, r2
 8009cf0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	f000 f97e 	bl	8009ff8 <memset>
 8009cfc:	eb0a 0605 	add.w	r6, sl, r5
 8009d00:	462a      	mov	r2, r5
 8009d02:	2100      	movs	r1, #0
 8009d04:	4650      	mov	r0, sl
 8009d06:	f1b8 0f00 	cmp.w	r8, #0
 8009d0a:	f000 80cb 	beq.w	8009ea4 <arm_mat_inverse_f32+0x1f8>
 8009d0e:	f000 f973 	bl	8009ff8 <memset>
 8009d12:	3f01      	subs	r7, #1
 8009d14:	f108 0801 	add.w	r8, r8, #1
 8009d18:	f846 bb04 	str.w	fp, [r6], #4
 8009d1c:	d1e5      	bne.n	8009cea <arm_mat_inverse_f32+0x3e>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80b5 	beq.w	8009e90 <arm_mat_inverse_f32+0x1e4>
 8009d26:	009d      	lsls	r5, r3, #2
 8009d28:	eb09 0205 	add.w	r2, r9, r5
 8009d2c:	46cc      	mov	ip, r9
 8009d2e:	9202      	str	r2, [sp, #8]
 8009d30:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009d34:	1d2a      	adds	r2, r5, #4
 8009d36:	9204      	str	r2, [sp, #16]
 8009d38:	462f      	mov	r7, r5
 8009d3a:	469e      	mov	lr, r3
 8009d3c:	2600      	movs	r6, #0
 8009d3e:	9b02      	ldr	r3, [sp, #8]
 8009d40:	eddc 6a00 	vldr	s13, [ip]
 8009d44:	42b4      	cmp	r4, r6
 8009d46:	eba3 0b07 	sub.w	fp, r3, r7
 8009d4a:	f000 80a1 	beq.w	8009e90 <arm_mat_inverse_f32+0x1e4>
 8009d4e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8009eb4 <arm_mat_inverse_f32+0x208>
 8009d52:	4632      	mov	r2, r6
 8009d54:	4663      	mov	r3, ip
 8009d56:	e00b      	b.n	8009d70 <arm_mat_inverse_f32+0xc4>
 8009d58:	eef4 7a47 	vcmp.f32	s15, s14
 8009d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d60:	f102 0201 	add.w	r2, r2, #1
 8009d64:	bfc8      	it	gt
 8009d66:	eeb0 7a67 	vmovgt.f32	s14, s15
 8009d6a:	42a2      	cmp	r2, r4
 8009d6c:	442b      	add	r3, r5
 8009d6e:	d014      	beq.n	8009d9a <arm_mat_inverse_f32+0xee>
 8009d70:	edd3 7a00 	vldr	s15, [r3]
 8009d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7c:	eeb1 6a67 	vneg.f32	s12, s15
 8009d80:	dcea      	bgt.n	8009d58 <arm_mat_inverse_f32+0xac>
 8009d82:	eeb4 6a47 	vcmp.f32	s12, s14
 8009d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8a:	f102 0201 	add.w	r2, r2, #1
 8009d8e:	bfc8      	it	gt
 8009d90:	eeb0 7a46 	vmovgt.f32	s14, s12
 8009d94:	42a2      	cmp	r2, r4
 8009d96:	442b      	add	r3, r5
 8009d98:	d1ea      	bne.n	8009d70 <arm_mat_inverse_f32+0xc4>
 8009d9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	d075      	beq.n	8009e90 <arm_mat_inverse_f32+0x1e4>
 8009da4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	d070      	beq.n	8009e90 <arm_mat_inverse_f32+0x1e4>
 8009dae:	4672      	mov	r2, lr
 8009db0:	4663      	mov	r3, ip
 8009db2:	ed93 7a00 	vldr	s14, [r3]
 8009db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dba:	3a01      	subs	r2, #1
 8009dbc:	ece3 7a01 	vstmia	r3!, {s15}
 8009dc0:	d1f7      	bne.n	8009db2 <arm_mat_inverse_f32+0x106>
 8009dc2:	9901      	ldr	r1, [sp, #4]
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	ed93 7a00 	vldr	s14, [r3]
 8009dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dce:	3901      	subs	r1, #1
 8009dd0:	ece3 7a01 	vstmia	r3!, {s15}
 8009dd4:	d1f7      	bne.n	8009dc6 <arm_mat_inverse_f32+0x11a>
 8009dd6:	9803      	ldr	r0, [sp, #12]
 8009dd8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8009ddc:	42b1      	cmp	r1, r6
 8009dde:	d039      	beq.n	8009e54 <arm_mat_inverse_f32+0x1a8>
 8009de0:	eddb 6a00 	vldr	s13, [fp]
 8009de4:	465a      	mov	r2, fp
 8009de6:	4673      	mov	r3, lr
 8009de8:	46e2      	mov	sl, ip
 8009dea:	ecba 7a01 	vldmia	sl!, {s14}
 8009dee:	edd2 7a00 	vldr	s15, [r2]
 8009df2:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009df6:	3b01      	subs	r3, #1
 8009df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009dfc:	ece2 7a01 	vstmia	r2!, {s15}
 8009e00:	d1f3      	bne.n	8009dea <arm_mat_inverse_f32+0x13e>
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	44bb      	add	fp, r7
 8009e06:	4602      	mov	r2, r0
 8009e08:	46ca      	mov	sl, r9
 8009e0a:	ecba 7a01 	vldmia	sl!, {s14}
 8009e0e:	edd2 7a00 	vldr	s15, [r2]
 8009e12:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009e16:	3b01      	subs	r3, #1
 8009e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e1c:	ece2 7a01 	vstmia	r2!, {s15}
 8009e20:	d1f3      	bne.n	8009e0a <arm_mat_inverse_f32+0x15e>
 8009e22:	4428      	add	r0, r5
 8009e24:	3101      	adds	r1, #1
 8009e26:	428c      	cmp	r4, r1
 8009e28:	44c3      	add	fp, r8
 8009e2a:	d1d7      	bne.n	8009ddc <arm_mat_inverse_f32+0x130>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	f1be 0e01 	subs.w	lr, lr, #1
 8009e32:	f106 0601 	add.w	r6, r6, #1
 8009e36:	449c      	add	ip, r3
 8009e38:	f1a7 0704 	sub.w	r7, r7, #4
 8009e3c:	44a9      	add	r9, r5
 8009e3e:	f47f af7e 	bne.w	8009d3e <arm_mat_inverse_f32+0x92>
 8009e42:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4a:	d006      	beq.n	8009e5a <arm_mat_inverse_f32+0x1ae>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	b007      	add	sp, #28
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	44bb      	add	fp, r7
 8009e56:	4428      	add	r0, r5
 8009e58:	e7e4      	b.n	8009e24 <arm_mat_inverse_f32+0x178>
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	9a01      	ldr	r2, [sp, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	edd3 7a00 	vldr	s15, [r3]
 8009e64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e68:	fb02 f204 	mul.w	r2, r2, r4
 8009e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e70:	4614      	mov	r4, r2
 8009e72:	bf08      	it	eq
 8009e74:	3304      	addeq	r3, #4
 8009e76:	d007      	beq.n	8009e88 <arm_mat_inverse_f32+0x1dc>
 8009e78:	e7e8      	b.n	8009e4c <arm_mat_inverse_f32+0x1a0>
 8009e7a:	ecf3 7a01 	vldmia	r3!, {s15}
 8009e7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e86:	d1e1      	bne.n	8009e4c <arm_mat_inverse_f32+0x1a0>
 8009e88:	f10e 0e01 	add.w	lr, lr, #1
 8009e8c:	4574      	cmp	r4, lr
 8009e8e:	d1f4      	bne.n	8009e7a <arm_mat_inverse_f32+0x1ce>
 8009e90:	f06f 0004 	mvn.w	r0, #4
 8009e94:	b007      	add	sp, #28
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	f06f 0002 	mvn.w	r0, #2
 8009e9e:	b007      	add	sp, #28
 8009ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	4656      	mov	r6, sl
 8009ea6:	3f01      	subs	r7, #1
 8009ea8:	f846 bb04 	str.w	fp, [r6], #4
 8009eac:	f47f af1b 	bne.w	8009ce6 <arm_mat_inverse_f32+0x3a>
 8009eb0:	e735      	b.n	8009d1e <arm_mat_inverse_f32+0x72>
 8009eb2:	bf00      	nop
 8009eb4:	00000000 	.word	0x00000000

08009eb8 <arm_mat_init_f32>:
 8009eb8:	8001      	strh	r1, [r0, #0]
 8009eba:	8042      	strh	r2, [r0, #2]
 8009ebc:	6043      	str	r3, [r0, #4]
 8009ebe:	4770      	bx	lr

08009ec0 <arm_mat_add_f32>:
 8009ec0:	b4f0      	push	{r4, r5, r6, r7}
 8009ec2:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009ec6:	6803      	ldr	r3, [r0, #0]
 8009ec8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009ecc:	6856      	ldr	r6, [r2, #4]
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	d15d      	bne.n	8009f8e <arm_mat_add_f32+0xce>
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d15a      	bne.n	8009f8e <arm_mat_add_f32+0xce>
 8009ed8:	8803      	ldrh	r3, [r0, #0]
 8009eda:	8844      	ldrh	r4, [r0, #2]
 8009edc:	fb04 f403 	mul.w	r4, r4, r3
 8009ee0:	08a5      	lsrs	r5, r4, #2
 8009ee2:	d032      	beq.n	8009f4a <arm_mat_add_f32+0x8a>
 8009ee4:	f10c 0110 	add.w	r1, ip, #16
 8009ee8:	f107 0210 	add.w	r2, r7, #16
 8009eec:	f106 0310 	add.w	r3, r6, #16
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	ed12 7a04 	vldr	s14, [r2, #-16]
 8009ef6:	ed51 7a04 	vldr	s15, [r1, #-16]
 8009efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009efe:	3801      	subs	r0, #1
 8009f00:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009f04:	ed12 7a03 	vldr	s14, [r2, #-12]
 8009f08:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f10:	f101 0110 	add.w	r1, r1, #16
 8009f14:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009f18:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009f1c:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8009f20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f24:	f102 0210 	add.w	r2, r2, #16
 8009f28:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009f2c:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8009f30:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f38:	f103 0310 	add.w	r3, r3, #16
 8009f3c:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009f40:	d1d7      	bne.n	8009ef2 <arm_mat_add_f32+0x32>
 8009f42:	012b      	lsls	r3, r5, #4
 8009f44:	449c      	add	ip, r3
 8009f46:	441f      	add	r7, r3
 8009f48:	441e      	add	r6, r3
 8009f4a:	f014 0403 	ands.w	r4, r4, #3
 8009f4e:	d01b      	beq.n	8009f88 <arm_mat_add_f32+0xc8>
 8009f50:	edd7 7a00 	vldr	s15, [r7]
 8009f54:	ed9c 7a00 	vldr	s14, [ip]
 8009f58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f5c:	3c01      	subs	r4, #1
 8009f5e:	edc6 7a00 	vstr	s15, [r6]
 8009f62:	d011      	beq.n	8009f88 <arm_mat_add_f32+0xc8>
 8009f64:	eddc 7a01 	vldr	s15, [ip, #4]
 8009f68:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f70:	2c01      	cmp	r4, #1
 8009f72:	edc6 7a01 	vstr	s15, [r6, #4]
 8009f76:	d007      	beq.n	8009f88 <arm_mat_add_f32+0xc8>
 8009f78:	eddc 7a02 	vldr	s15, [ip, #8]
 8009f7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f84:	edc6 7a02 	vstr	s15, [r6, #8]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	bcf0      	pop	{r4, r5, r6, r7}
 8009f8c:	4770      	bx	lr
 8009f8e:	f06f 0002 	mvn.w	r0, #2
 8009f92:	e7fa      	b.n	8009f8a <arm_mat_add_f32+0xca>

08009f94 <__libc_init_array>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	4d0d      	ldr	r5, [pc, #52]	; (8009fcc <__libc_init_array+0x38>)
 8009f98:	4c0d      	ldr	r4, [pc, #52]	; (8009fd0 <__libc_init_array+0x3c>)
 8009f9a:	1b64      	subs	r4, r4, r5
 8009f9c:	10a4      	asrs	r4, r4, #2
 8009f9e:	2600      	movs	r6, #0
 8009fa0:	42a6      	cmp	r6, r4
 8009fa2:	d109      	bne.n	8009fb8 <__libc_init_array+0x24>
 8009fa4:	4d0b      	ldr	r5, [pc, #44]	; (8009fd4 <__libc_init_array+0x40>)
 8009fa6:	4c0c      	ldr	r4, [pc, #48]	; (8009fd8 <__libc_init_array+0x44>)
 8009fa8:	f000 f82e 	bl	800a008 <_init>
 8009fac:	1b64      	subs	r4, r4, r5
 8009fae:	10a4      	asrs	r4, r4, #2
 8009fb0:	2600      	movs	r6, #0
 8009fb2:	42a6      	cmp	r6, r4
 8009fb4:	d105      	bne.n	8009fc2 <__libc_init_array+0x2e>
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fbc:	4798      	blx	r3
 8009fbe:	3601      	adds	r6, #1
 8009fc0:	e7ee      	b.n	8009fa0 <__libc_init_array+0xc>
 8009fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc6:	4798      	blx	r3
 8009fc8:	3601      	adds	r6, #1
 8009fca:	e7f2      	b.n	8009fb2 <__libc_init_array+0x1e>
 8009fcc:	0800a048 	.word	0x0800a048
 8009fd0:	0800a048 	.word	0x0800a048
 8009fd4:	0800a048 	.word	0x0800a048
 8009fd8:	0800a04c 	.word	0x0800a04c

08009fdc <memcpy>:
 8009fdc:	440a      	add	r2, r1
 8009fde:	4291      	cmp	r1, r2
 8009fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe4:	d100      	bne.n	8009fe8 <memcpy+0xc>
 8009fe6:	4770      	bx	lr
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	d1f9      	bne.n	8009fea <memcpy+0xe>
 8009ff6:	bd10      	pop	{r4, pc}

08009ff8 <memset>:
 8009ff8:	4402      	add	r2, r0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d100      	bne.n	800a002 <memset+0xa>
 800a000:	4770      	bx	lr
 800a002:	f803 1b01 	strb.w	r1, [r3], #1
 800a006:	e7f9      	b.n	8009ffc <memset+0x4>

0800a008 <_init>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr

0800a014 <_fini>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr
