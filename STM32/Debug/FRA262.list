
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006388  08006388  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006390  08006390  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08006398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000478  08006810  00020478  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08006810  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ac4  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c4  00000000  00000000  00032f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2d  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb85  00000000  00000000  0004dea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe96  00000000  00000000  0005da2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000ed8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000ed988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000f0ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000478 	.word	0x20000478
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006358 	.word	0x08006358

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000047c 	.word	0x2000047c
 80001d4:	08006358 	.word	0x08006358

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f005 fa7a 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f005 fa71 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f005 fa68 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f005 fa5f 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2203      	movs	r2, #3
 8000d72:	2103      	movs	r1, #3
 8000d74:	f005 fa56 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3364      	adds	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f005 fa4d 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3368      	adds	r3, #104	; 0x68
 8000d94:	2203      	movs	r2, #3
 8000d96:	2103      	movs	r1, #3
 8000d98:	f005 fa44 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	338c      	adds	r3, #140	; 0x8c
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f005 fa3b 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3398      	adds	r3, #152	; 0x98
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f005 fa32 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	33a4      	adds	r3, #164	; 0xa4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f005 fa29 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	33c8      	adds	r3, #200	; 0xc8
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f005 fa20 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33ec      	adds	r3, #236	; 0xec
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f005 fa17 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33f0      	adds	r3, #240	; 0xf0
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f005 fa0e 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33f4      	adds	r3, #244	; 0xf4
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f005 fa05 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33f8      	adds	r3, #248	; 0xf8
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f005 f9fc 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	f005 f9f2 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f005 f9e8 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000e60:	2203      	movs	r2, #3
 8000e62:	2103      	movs	r1, #3
 8000e64:	f005 f9de 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000e74:	2201      	movs	r2, #1
 8000e76:	2103      	movs	r1, #3
 8000e78:	f005 f9d4 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2203      	movs	r2, #3
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	f005 f9ca 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f005 f9c0 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f005 f9b6 	bl	8006224 <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	f005 f9ac 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000ed8:	2203      	movs	r2, #3
 8000eda:	2103      	movs	r1, #3
 8000edc:	f005 f9a2 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f005 f998 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	f005 f98e 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f14:	2201      	movs	r2, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	f005 f984 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	f005 f97a 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	2103      	movs	r1, #3
 8000f40:	f005 f970 	bl	8006224 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f50:	2203      	movs	r2, #3
 8000f52:	2103      	movs	r1, #3
 8000f54:	f005 f966 	bl	8006224 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f004 fef0 	bl	8005d4c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f004 fee6 	bl	8005d4c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f004 fedc 	bl	8005d4c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQGt));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7120 	add.w	r1, r3, #640	; 0x280
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f004 ff96 	bl	8005ed8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQGt), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f004 ff8a 	bl	8005ed8 <arm_mat_mult_f32>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 7128 	add.w	r1, r3, #672	; 0x2a0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000fea:	461a      	mov	r2, r3
 8000fec:	f004 ff74 	bl	8005ed8 <arm_mat_mult_f32>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800100c:	461a      	mov	r2, r3
 800100e:	f004 ff63 	bl	8005ed8 <arm_mat_mult_f32>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7138 	add.w	r1, r3, #736	; 0x2e0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800102e:	461a      	mov	r2, r3
 8001030:	f004 ff52 	bl	8005ed8 <arm_mat_mult_f32>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f503 7140 	add.w	r1, r3, #768	; 0x300
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001050:	461a      	mov	r2, r3
 8001052:	f005 f8eb 	bl	800622c <arm_mat_add_f32>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800107a:	461a      	mov	r2, r3
 800107c:	f004 ff2c 	bl	8005ed8 <arm_mat_mult_f32>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 7148 	add.w	r1, r3, #800	; 0x320
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800109c:	461a      	mov	r2, r3
 800109e:	f004 feb1 	bl	8005e04 <arm_mat_sub_f32>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80010be:	461a      	mov	r2, r3
 80010c0:	f004 ff0a 	bl	8005ed8 <arm_mat_mult_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80010e0:	461a      	mov	r2, r3
 80010e2:	f004 fef9 	bl	8005ed8 <arm_mat_mult_f32>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 704a 	add.w	r0, r3, #808	; 0x328
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 7122 	add.w	r1, r3, #648	; 0x288
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001102:	461a      	mov	r2, r3
 8001104:	f005 f892 	bl	800622c <arm_mat_add_f32>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f004 ff79 	bl	8006018 <arm_mat_inverse_f32>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001142:	461a      	mov	r2, r3
 8001144:	f004 fec8 	bl	8005ed8 <arm_mat_mult_f32>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001164:	461a      	mov	r2, r3
 8001166:	f004 feb7 	bl	8005ed8 <arm_mat_mult_f32>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001186:	461a      	mov	r2, r3
 8001188:	f004 fea6 	bl	8005ed8 <arm_mat_mult_f32>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 704e 	add.w	r0, r3, #824	; 0x338
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f005 f83f 	bl	800622c <arm_mat_add_f32>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80011ca:	461a      	mov	r2, r3
 80011cc:	f004 fe84 	bl	8005ed8 <arm_mat_mult_f32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 7150 	add.w	r1, r3, #832	; 0x340
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80011ec:	461a      	mov	r2, r3
 80011ee:	f004 fe09 	bl	8005e04 <arm_mat_sub_f32>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800120e:	461a      	mov	r2, r3
 8001210:	f004 fe62 	bl	8005ed8 <arm_mat_mult_f32>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PIDVelocityController_Init>:
 *  Created on: 4 Jun 2022
 *      Author: mobil
 */

#include "PIDVelocity.h"
void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = 0.0f;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

	pidVelocity->differentiatorOutput = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
	pidVelocity->integratorOutput = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
	pidVelocity->proportionalOutput = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

	pidVelocity->ControllerOut = 0.0f;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
	pidVelocity->ControllerLastOut = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PIDVelocityController_Update>:

float PIDVelocityController_Update(PIDVelocityController *pidVelocity, float setpoint, float measurement){
 8001272:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001280:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 8001284:	ed97 7a02 	vldr	s14, [r7, #8]
 8001288:	edd7 7a01 	vldr	s15, [r7, #4]
 800128c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001290:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute error of each term

    pidVelocity->proportionalOutput = (pidVelocity->Kp*error) - (pidVelocity->Kp * pidVelocity->Last1Error);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	edd7 7a05 	vldr	s15, [r7, #20]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	edc3 7a07 	vstr	s15, [r3, #28]

    pidVelocity->integratorOutput = (pidVelocity->Ki * error);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edc3 7a05 	vstr	s15, [r3, #20]

    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	ee17 0a90 	vmov	r0, s15
 80012e2:	f7ff f8dd 	bl	80004a0 <__aeabi_f2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8d6 	bl	80004a0 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	f7fe ff74 	bl	80001e4 <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4690      	mov	r8, r2
 8001302:	4699      	mov	r9, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f8c9 	bl	80004a0 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4640      	mov	r0, r8
 8001314:	4649      	mov	r1, r9
 8001316:	f7ff f91b 	bl	8000550 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ff5d 	bl	80001e0 <__aeabi_dsub>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
    									+((pidVelocity->Kd * pidVelocity->Last2Error))	;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	ed93 7a02 	vldr	s14, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f8ad 	bl	80004a0 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7fe ff49 	bl	80001e4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fb0b 	bl	8000974 <__aeabi_d2f>
 800135e:	4602      	mov	r2, r0
    pidVelocity->differentiatorOutput = ((pidVelocity->Kd*error)) - ((2.0 * pidVelocity->Kd * pidVelocity->Last1Error))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ed93 7a07 	vldr	s14, [r3, #28]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	edd3 7a06 	vldr	s15, [r3, #24]
 800137a:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pidVelocity->ControllerLastOut;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
    pidVelocity->ControllerOut = pidVelocity->proportionalOutput + pidVelocity->integratorOutput + pidVelocity->differentiatorOutput
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pidVelocity->ControllerOut > pidVelocity->OutputMax) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a04 	vldr	s15, [r3, #16]
 800139a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	dd04      	ble.n	80013ae <PIDVelocityController_Update+0x13c>

    	pidVelocity->ControllerOut = pidVelocity->OutputMax;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
 80013ac:	e00e      	b.n	80013cc <PIDVelocityController_Update+0x15a>

    } else if (pidVelocity->ControllerOut < pidVelocity->OutputMin) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d503      	bpl.n	80013cc <PIDVelocityController_Update+0x15a>

    	pidVelocity->ControllerOut = pidVelocity->OutputMin;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28

    }

    // Controller Memory

    pidVelocity->ControllerLastOut = pidVelocity->ControllerOut;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->Last1Error = error;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	621a      	str	r2, [r3, #32]
	pidVelocity->Last2Error = pidVelocity->Last1Error;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

	return pidVelocity->ControllerOut;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013f6 <AbsVal>:


#include "Trajectory.h"

float AbsVal(float number)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	d50e      	bpl.n	800142c <AbsVal+0x36>
  {
    return number*-1.0;
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f846 	bl	80004a0 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff faaa 	bl	8000974 <__aeabi_d2f>
 8001420:	4603      	mov	r3, r0
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef1 7a67 	vneg.f32	s15, s15
 800142a:	e001      	b.n	8001430 <AbsVal+0x3a>
  }
  else
  {
    return number;
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <VmaxOptimization>:

float VmaxOptimization(float Qinitial, float Qfinal){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	ed87 0a01 	vstr	s0, [r7, #4]
 8001446:	edc7 0a00 	vstr	s1, [r7]
	float Qrelative = AbsVal(Qfinal - Qinitial);
 800144a:	ed97 7a00 	vldr	s14, [r7]
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	f7ff ffcc 	bl	80013f6 <AbsVal>
 800145e:	ed87 0a02 	vstr	s0, [r7, #8]
	float Vmax = -1;
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <VmaxOptimization+0x100>)
 8001464:	60fb      	str	r3, [r7, #12]
	if(Qrelative >= 1.0  && Qrelative < 20.0)
 8001466:	edd7 7a02 	vldr	s15, [r7, #8]
 800146a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	db0b      	blt.n	8001490 <VmaxOptimization+0x54>
 8001478:	edd7 7a02 	vldr	s15, [r7, #8]
 800147c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d502      	bpl.n	8001490 <VmaxOptimization+0x54>
	{
		Vmax = 0.7f;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <VmaxOptimization+0x104>)
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e035      	b.n	80014fc <VmaxOptimization+0xc0>
	}
	else if(Qrelative >= 20.0  && Qrelative < 60.0)
 8001490:	edd7 7a02 	vldr	s15, [r7, #8]
 8001494:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	db0b      	blt.n	80014ba <VmaxOptimization+0x7e>
 80014a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001544 <VmaxOptimization+0x108>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d502      	bpl.n	80014ba <VmaxOptimization+0x7e>
	{
		Vmax = 3.0f;
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <VmaxOptimization+0x10c>)
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e020      	b.n	80014fc <VmaxOptimization+0xc0>
	}
	else if(Qrelative >= 60.0  && Qrelative < 160.0)
 80014ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80014be:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001544 <VmaxOptimization+0x108>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	db0b      	blt.n	80014e4 <VmaxOptimization+0xa8>
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800154c <VmaxOptimization+0x110>
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d502      	bpl.n	80014e4 <VmaxOptimization+0xa8>
	{
		Vmax = 6.0f;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <VmaxOptimization+0x114>)
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e00b      	b.n	80014fc <VmaxOptimization+0xc0>
	}
	else if(Qrelative >= 160.0)
 80014e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800154c <VmaxOptimization+0x110>
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	db02      	blt.n	80014fc <VmaxOptimization+0xc0>
	{
		Vmax = 8.0f;
 80014f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014fa:	60fb      	str	r3, [r7, #12]
	}
	// RPM to deg/sec
	return Vmax *360.0/60.0;
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7fe ffcf 	bl	80004a0 <__aeabi_f2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <VmaxOptimization+0x118>)
 8001508:	f7ff f822 	bl	8000550 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <VmaxOptimization+0x11c>)
 800151a:	f7ff f943 	bl	80007a4 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fa25 	bl	8000974 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	ee07 3a90 	vmov	s15, r3
}
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	bf800000 	.word	0xbf800000
 8001540:	3f333333 	.word	0x3f333333
 8001544:	42700000 	.word	0x42700000
 8001548:	40400000 	.word	0x40400000
 800154c:	43200000 	.word	0x43200000
 8001550:	40c00000 	.word	0x40c00000
 8001554:	40768000 	.word	0x40768000
 8001558:	404e0000 	.word	0x404e0000

0800155c <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	ed87 0a02 	vstr	s0, [r7, #8]
 8001568:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	// Set initial = 0;
	float Qrelative = Qfinal - Qinitial;
 800157c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001580:	edd7 7a02 	vldr	s15, [r7, #8]
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	edc7 7a05 	vstr	s15, [r7, #20]
	// Set Vmax
	traject -> Vmax = VmaxOptimization(Qinitial,Qfinal);
 800158c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001590:	ed97 0a02 	vldr	s0, [r7, #8]
 8001594:	f7ff ff52 	bl	800143c <VmaxOptimization>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (Qrelative/traject -> Vmax);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 6a00 	vldr	s13, [r3]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	ed93 6a02 	vldr	s12, [r3, #8]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	edd3 6a00 	vldr	s13, [r3]
 80015be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80015cc:	ed97 6a05 	vldr	s12, [r7, #20]
 80015d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	edd3 6a00 	vldr	s13, [r3]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	edd3 7a01 	vldr	s15, [r3, #4]
 8001616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	ed93 6a02 	vldr	s12, [r3, #8]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	edd3 6a00 	vldr	s13, [r3]
 8001626:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff08 	bl	80004a0 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f96c 	bl	8000974 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef1 7a67 	vneg.f32	s15, s15
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fef1 	bl	80004a0 <__aeabi_f2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f955 	bl	8000974 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef1 7a67 	vneg.f32	s15, s15
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edd3 6a01 	vldr	s13, [r3, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	ed93 7a01 	vldr	s14, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe feaf 	bl	80004a0 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f913 	bl	8000974 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef1 7a67 	vneg.f32	s15, s15
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe9c 	bl	80004a0 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ed93 7a01 	vldr	s14, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f7fe fe8b 	bl	80004a0 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd25 	bl	80001e0 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f8e9 	bl	8000974 <__aeabi_d2f>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	edd3 6a04 	vldr	s13, [r3, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800180e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800181e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	ed93 7a04 	vldr	s14, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800184e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800186c:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 6a05 	vldr	s13, [r3, #20]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001882:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800188e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800189e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80018ec:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	edd3 6a06 	vldr	s13, [r3, #24]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001902:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800190e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800191e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	ed93 7a06 	vldr	s14, [r3, #24]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800194e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800196c:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	edd3 6a07 	vldr	s13, [r3, #28]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001982:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800198e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800199e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80019c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80019de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80019ec:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 6a08 	vldr	s13, [r3, #32]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a0e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a8e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	ed93 7a03 	vldr	s14, [r3, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001aca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001afa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001afe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001b24:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001b50:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b66:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b6e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001baa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001bd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bde:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001be2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 6a05 	vldr	s13, [r3, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c30:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c46:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c4a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c4e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c56:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001c8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ca0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cbe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cc2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 6a06 	vldr	s13, [r3, #24]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d10:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d2e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d9e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001da2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 6a07 	vldr	s13, [r3, #28]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001de4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dec:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001df0:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e0a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e0e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 6a08 	vldr	s13, [r3, #32]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ec4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ecc:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ed0:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001ee6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001f06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f62:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fa4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fb0:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fc6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fca:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fe6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fee:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}

08002000 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 800200c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002014:	1a84      	subs	r4, r0, r2
 8002016:	eb61 0503 	sbc.w	r5, r1, r3
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fa61 	bl	80004e4 <__aeabi_ul2d>
 8002022:	a392      	add	r3, pc, #584	; (adr r3, 800226c <TrajectoryEvaluation+0x26c>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fbbc 	bl	80007a4 <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fc9e 	bl	8000974 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4a8b      	ldr	r2, [pc, #556]	; (8002268 <TrajectoryEvaluation+0x268>)
 800203c:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 800203e:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	db7e      	blt.n	800214c <TrajectoryEvaluation+0x14c>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002054:	4b84      	ldr	r3, [pc, #528]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	dd73      	ble.n	800214c <TrajectoryEvaluation+0x14c>
	{
		traject -> QJ = traject -> A[0];
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	ed93 7a03 	vldr	s14, [r3, #12]
 8002074:	4b7c      	ldr	r3, [pc, #496]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	ed93 7a03 	vldr	s14, [r3, #12]
 8002094:	4b74      	ldr	r3, [pc, #464]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <TrajectoryEvaluation+0x268>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <TrajectoryEvaluation+0x268>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <TrajectoryEvaluation+0x268>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <TrajectoryEvaluation+0x268>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <TrajectoryEvaluation+0x268>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002106:	4b58      	ldr	r3, [pc, #352]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002108:	ed93 6a00 	vldr	s12, [r3]
 800210c:	4b56      	ldr	r3, [pc, #344]	; (8002268 <TrajectoryEvaluation+0x268>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002116:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800211a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800211e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800212c:	4b4e      	ldr	r3, [pc, #312]	; (8002268 <TrajectoryEvaluation+0x268>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800214a:	e363      	b.n	8002814 <TrajectoryEvaluation+0x814>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	f200 8088 	bhi.w	8002274 <TrajectoryEvaluation+0x274>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <TrajectoryEvaluation+0x268>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dd7c      	ble.n	8002274 <TrajectoryEvaluation+0x274>
	{
		traject -> QJ = traject -> A[1];
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	ed93 7a04 	vldr	s14, [r3, #16]
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <TrajectoryEvaluation+0x268>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <TrajectoryEvaluation+0x268>)
 80021ac:	edd3 6a00 	vldr	s13, [r3]
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <TrajectoryEvaluation+0x268>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <TrajectoryEvaluation+0x268>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80021e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <TrajectoryEvaluation+0x268>)
 80021f2:	edd3 6a00 	vldr	s13, [r3]
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <TrajectoryEvaluation+0x268>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002212:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <TrajectoryEvaluation+0x268>)
 800221e:	ed93 6a00 	vldr	s12, [r3]
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee66 7a27 	vmul.f32	s15, s12, s15
 800222c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002230:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002234:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <TrajectoryEvaluation+0x268>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002260:	e2d8      	b.n	8002814 <TrajectoryEvaluation+0x814>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	20000494 	.word	0x20000494
 800226c:	00000000 	.word	0x00000000
 8002270:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	d87e      	bhi.n	8002388 <TrajectoryEvaluation+0x388>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002290:	4b83      	ldr	r3, [pc, #524]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	dd73      	ble.n	8002388 <TrajectoryEvaluation+0x388>
	{
		traject -> QJ = traject -> A[2];
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80022b0:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80022c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80022d0:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80022d2:	edd3 6a00 	vldr	s13, [r3]
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80022f2:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	ed93 7a05 	vldr	s14, [r3, #20]
 8002316:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002318:	edd3 6a00 	vldr	s13, [r3]
 800231c:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002334:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002338:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002342:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002344:	ed93 6a00 	vldr	s12, [r3]
 8002348:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002352:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002356:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800235a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800235e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002386:	e245      	b.n	8002814 <TrajectoryEvaluation+0x814>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800238e:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	f200 8082 	bhi.w	80024a4 <TrajectoryEvaluation+0x4a4>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	dd76      	ble.n	80024a4 <TrajectoryEvaluation+0x4a4>
	{
		traject -> QJ = traject -> A[3];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	ed93 7a06 	vldr	s14, [r3, #24]
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800242e:	edd3 6a00 	vldr	s13, [r3]
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800244e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 800245a:	ed93 6a00 	vldr	s12, [r3]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002468:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800246c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002470:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <TrajectoryEvaluation+0x4a0>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800249c:	e1ba      	b.n	8002814 <TrajectoryEvaluation+0x814>
 800249e:	bf00      	nop
 80024a0:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d87e      	bhi.n	80025b8 <TrajectoryEvaluation+0x5b8>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	dd73      	ble.n	80025b8 <TrajectoryEvaluation+0x5b8>
	{
		traject -> QJ = traject -> A[4];
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80024e0:	4b7b      	ldr	r3, [pc, #492]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002500:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002502:	edd3 6a00 	vldr	s13, [r3]
 8002506:	4b72      	ldr	r3, [pc, #456]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002518:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002522:	4b6b      	ldr	r3, [pc, #428]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ed93 7a07 	vldr	s14, [r3, #28]
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002548:	edd3 6a00 	vldr	s13, [r3]
 800254c:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002556:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002568:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002572:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002574:	ed93 6a00 	vldr	s12, [r3]
 8002578:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002582:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002586:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800258a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800258e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80025b6:	e12d      	b.n	8002814 <TrajectoryEvaluation+0x814>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	f200 8082 	bhi.w	80026d4 <TrajectoryEvaluation+0x6d4>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80025d6:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	dd76      	ble.n	80026d4 <TrajectoryEvaluation+0x6d4>
	{
		traject -> QJ = traject -> A[5];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	ed93 7a08 	vldr	s14, [r3, #32]
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002618:	edd3 6a00 	vldr	s13, [r3]
 800261c:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800262e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	ed93 7a08 	vldr	s14, [r3, #32]
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800267e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 800268a:	ed93 6a00 	vldr	s12, [r3]
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800269c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80026a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <TrajectoryEvaluation+0x6d0>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80026c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80026cc:	e0a2      	b.n	8002814 <TrajectoryEvaluation+0x814>
 80026ce:	bf00      	nop
 80026d0:	20000494 	.word	0x20000494
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <TrajectoryEvaluation+0x81c>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	d87e      	bhi.n	80027e8 <TrajectoryEvaluation+0x7e8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <TrajectoryEvaluation+0x81c>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	dd73      	ble.n	80027e8 <TrajectoryEvaluation+0x7e8>
	{
		traject -> QJ = traject -> A[6];
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002710:	4b42      	ldr	r3, [pc, #264]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002732:	edd3 6a00 	vldr	s13, [r3]
 8002736:	4b39      	ldr	r3, [pc, #228]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002744:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002778:	edd3 6a00 	vldr	s13, [r3]
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <TrajectoryEvaluation+0x81c>)
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <TrajectoryEvaluation+0x81c>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002798:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <TrajectoryEvaluation+0x81c>)
 80027a4:	ed93 6a00 	vldr	s12, [r3]
 80027a8:	4b1c      	ldr	r3, [pc, #112]	; (800281c <TrajectoryEvaluation+0x81c>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80027ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <TrajectoryEvaluation+0x81c>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80027e6:	e015      	b.n	8002814 <TrajectoryEvaluation+0x814>
	}
	else
	{
		traject -> QJ = 0;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = 0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QV = 0;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QX = traject -> Qfinal;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}


}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bdb0      	pop	{r4, r5, r7, pc}
 800281c:	20000494 	.word	0x20000494

08002820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002824:	f000 febe 	bl	80035a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002828:	f000 f854 	bl	80028d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800282c:	f000 fa2e 	bl	8002c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002830:	f000 fa02 	bl	8002c38 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002834:	f000 f8b6 	bl	80029a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002838:	f000 f938 	bl	8002aac <MX_TIM2_Init>
  MX_TIM3_Init();
 800283c:	f000 f98a 	bl	8002b54 <MX_TIM3_Init>
  MX_TIM11_Init();
 8002840:	f000 f9d6 	bl	8002bf0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  KalmanMatrixInit(&KalmanVar);
 8002844:	4817      	ldr	r0, [pc, #92]	; (80028a4 <main+0x84>)
 8002846:	f7fe fa67 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800284a:	2100      	movs	r1, #0
 800284c:	4816      	ldr	r0, [pc, #88]	; (80028a8 <main+0x88>)
 800284e:	f001 ff7d 	bl	800474c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002852:	4816      	ldr	r0, [pc, #88]	; (80028ac <main+0x8c>)
 8002854:	f001 fec8 	bl	80045e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8002858:	4815      	ldr	r0, [pc, #84]	; (80028b0 <main+0x90>)
 800285a:	f001 fec5 	bl	80045e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800285e:	213c      	movs	r1, #60	; 0x3c
 8002860:	4814      	ldr	r0, [pc, #80]	; (80028b4 <main+0x94>)
 8002862:	f002 f8c9 	bl	80049f8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	461a      	mov	r2, r3
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <main+0x98>)
 8002870:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <main+0x98>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <main+0x98>)
 8002878:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <main+0x98>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <main+0x9c>)
 8002880:	6013      	str	r3, [r2, #0]
  PIDVelocityController_Init(&PidVelo);
 8002882:	480f      	ldr	r0, [pc, #60]	; (80028c0 <main+0xa0>)
 8002884:	f7fe fccf 	bl	8001226 <PIDVelocityController_Init>
  PIDVelocityController_Init(&PidPos);
 8002888:	480e      	ldr	r0, [pc, #56]	; (80028c4 <main+0xa4>)
 800288a:	f7fe fccc 	bl	8001226 <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,TestDestination);
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <main+0xa8>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eef0 0a67 	vmov.f32	s1, s15
 8002898:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80028cc <main+0xac>
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <main+0xb0>)
 800289e:	f7fe fe5d 	bl	800155c <CoefficientAndTimeCalculation>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <main+0x82>
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000498 	.word	0x20000498
 80028ac:	20000570 	.word	0x20000570
 80028b0:	20000528 	.word	0x20000528
 80028b4:	200004e0 	.word	0x200004e0
 80028b8:	20000608 	.word	0x20000608
 80028bc:	20000614 	.word	0x20000614
 80028c0:	20000354 	.word	0x20000354
 80028c4:	20000384 	.word	0x20000384
 80028c8:	20000464 	.word	0x20000464
 80028cc:	00000000 	.word	0x00000000
 80028d0:	200003b4 	.word	0x200003b4

080028d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b094      	sub	sp, #80	; 0x50
 80028d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	2230      	movs	r2, #48	; 0x30
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fd30 	bl	8006348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <SystemClock_Config+0xc8>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <SystemClock_Config+0xc8>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <SystemClock_Config+0xc8>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <SystemClock_Config+0xcc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <SystemClock_Config+0xcc>)
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <SystemClock_Config+0xcc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002930:	2302      	movs	r3, #2
 8002932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002934:	2301      	movs	r3, #1
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002938:	2310      	movs	r3, #16
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800293c:	2302      	movs	r3, #2
 800293e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002944:	2308      	movs	r3, #8
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002948:	2364      	movs	r3, #100	; 0x64
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800294c:	2302      	movs	r3, #2
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002950:	2304      	movs	r3, #4
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002954:	f107 0320 	add.w	r3, r7, #32
 8002958:	4618      	mov	r0, r3
 800295a:	f001 f95d 	bl	8003c18 <HAL_RCC_OscConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002964:	f000 fc34 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002968:	230f      	movs	r3, #15
 800296a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2103      	movs	r1, #3
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fbbf 	bl	8004108 <HAL_RCC_ClockConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002990:	f000 fc1e 	bl	80031d0 <Error_Handler>
  }
}
 8002994:	bf00      	nop
 8002996:	3750      	adds	r7, #80	; 0x50
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000

080029a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b092      	sub	sp, #72	; 0x48
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2220      	movs	r2, #32
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fcba 	bl	8006348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <MX_TIM1_Init+0x104>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029dc:	2209      	movs	r2, #9
 80029de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f4:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <MX_TIM1_Init+0x100>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a00:	4828      	ldr	r0, [pc, #160]	; (8002aa4 <MX_TIM1_Init+0x100>)
 8002a02:	f001 fe53 	bl	80046ac <HAL_TIM_PWM_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002a0c:	f000 fbe0 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4821      	ldr	r0, [pc, #132]	; (8002aa4 <MX_TIM1_Init+0x100>)
 8002a20:	f002 fdfe 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002a2a:	f000 fbd1 	bl	80031d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2e:	2360      	movs	r3, #96	; 0x60
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <MX_TIM1_Init+0x100>)
 8002a54:	f002 f966 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002a5e:	f000 fbb7 	bl	80031d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <MX_TIM1_Init+0x100>)
 8002a86:	f002 fe39 	bl	80056fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002a90:	f000 fb9e 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <MX_TIM1_Init+0x100>)
 8002a96:	f000 fc7d 	bl	8003394 <HAL_TIM_MspPostInit>

}
 8002a9a:	bf00      	nop
 8002a9c:	3748      	adds	r7, #72	; 0x48
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000498 	.word	0x20000498
 8002aa8:	40010000 	.word	0x40010000

08002aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	; 0x30
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	2224      	movs	r2, #36	; 0x24
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fc44 	bl	8006348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002ade:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002af0:	2303      	movs	r3, #3
 8002af2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002af8:	2301      	movs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002b1c:	f001 fec6 	bl	80048ac <HAL_TIM_Encoder_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b26:	f000 fb53 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4806      	ldr	r0, [pc, #24]	; (8002b50 <MX_TIM2_Init+0xa4>)
 8002b38:	f002 fd72 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b42:	f000 fb45 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	3730      	adds	r7, #48	; 0x30
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200004e0 	.word	0x200004e0

08002b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	463b      	mov	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <MX_TIM3_Init+0x98>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b78:	2209      	movs	r2, #9
 8002b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b98:	f001 fcd6 	bl	8004548 <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ba2:	f000 fb15 	bl	80031d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	480d      	ldr	r0, [pc, #52]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002bb4:	f002 f978 	bl	8004ea8 <HAL_TIM_ConfigClockSource>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bbe:	f000 fb07 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bca:	463b      	mov	r3, r7
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4806      	ldr	r0, [pc, #24]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002bd0:	f002 fd26 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bda:	f000 faf9 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000528 	.word	0x20000528
 8002bec:	40000400 	.word	0x40000400

08002bf0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <MX_TIM11_Init+0x44>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002bfc:	2263      	movs	r2, #99	; 0x63
 8002bfe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c1a:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_TIM11_Init+0x40>)
 8002c1c:	f001 fc94 	bl	8004548 <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002c26:	f000 fad3 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000570 	.word	0x20000570
 8002c34:	40014800 	.word	0x40014800

08002c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <MX_USART2_UART_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c70:	f002 fdaa 	bl	80057c8 <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c7a:	f000 faa9 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200005b8 	.word	0x200005b8
 8002c88:	40004400 	.word	0x40004400

08002c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_GPIO_Init+0xe4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d18:	4816      	ldr	r0, [pc, #88]	; (8002d74 <MX_GPIO_Init+0xe8>)
 8002d1a:	f000 ff4b 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4619      	mov	r1, r3
 8002d34:	4810      	ldr	r0, [pc, #64]	; (8002d78 <MX_GPIO_Init+0xec>)
 8002d36:	f000 fdb9 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002d3a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d40:	2301      	movs	r3, #1
 8002d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4808      	ldr	r0, [pc, #32]	; (8002d74 <MX_GPIO_Init+0xe8>)
 8002d54:	f000 fdaa 	bl	80038ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2028      	movs	r0, #40	; 0x28
 8002d5e:	f000 fd6e 	bl	800383e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d62:	2028      	movs	r0, #40	; 0x28
 8002d64:	f000 fd87 	bl	8003876 <HAL_NVIC_EnableIRQ>

}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	00000000 	.word	0x00000000

08002d80 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <EncoderRead+0x100>)
 8002d8e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002d90:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <EncoderRead+0x100>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <EncoderRead+0x100>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	1ad2      	subs	r2, r2, r3
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <EncoderRead+0x104>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	425b      	negs	r3, r3
 8002da0:	429a      	cmp	r2, r3
 8002da2:	da07      	bge.n	8002db4 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <EncoderRead+0x108>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002dac:	3320      	adds	r3, #32
 8002dae:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <EncoderRead+0x108>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00f      	b.n	8002dd4 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <EncoderRead+0x100>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <EncoderRead+0x100>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	1ad2      	subs	r2, r2, r3
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <EncoderRead+0x104>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	db06      	blt.n	8002dd4 <EncoderRead+0x54>
		WrappingStep-=12000;
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <EncoderRead+0x108>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8002dce:	3b20      	subs	r3, #32
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <EncoderRead+0x108>)
 8002dd2:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <EncoderRead+0x100>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <EncoderRead+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <EncoderRead+0x10c>)
 8002de0:	6013      	str	r3, [r2, #0]
//	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
	PositionDeg = (PositionRaw/12000.0)*360.0;
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <EncoderRead+0x10c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb48 	bl	800047c <__aeabi_i2d>
 8002dec:	a322      	add	r3, pc, #136	; (adr r3, 8002e78 <EncoderRead+0xf8>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f7fd fcd7 	bl	80007a4 <__aeabi_ddiv>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <EncoderRead+0x110>)
 8002e04:	f7fd fba4 	bl	8000550 <__aeabi_dmul>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7fd fdb0 	bl	8000974 <__aeabi_d2f>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <EncoderRead+0x114>)
 8002e18:	6013      	str	r3, [r2, #0]
	VelocityDeg = (((EncoderRawData[0] - EncoderRawData[1])/dt)/12000.0)*360.0;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <EncoderRead+0x100>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <EncoderRead+0x100>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e2c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002e98 <EncoderRead+0x118>
 8002e30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e34:	ee16 0a90 	vmov	r0, s13
 8002e38:	f7fd fb32 	bl	80004a0 <__aeabi_f2d>
 8002e3c:	a30e      	add	r3, pc, #56	; (adr r3, 8002e78 <EncoderRead+0xf8>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd fcaf 	bl	80007a4 <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <EncoderRead+0x110>)
 8002e54:	f7fd fb7c 	bl	8000550 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd fd88 	bl	8000974 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <EncoderRead+0x11c>)
 8002e68:	6013      	str	r3, [r2, #0]
	EncoderRawData[1] = EncoderRawData[0];
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <EncoderRead+0x100>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <EncoderRead+0x100>)
 8002e70:	6053      	str	r3, [r2, #4]
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40c77000 	.word	0x40c77000
 8002e80:	20000608 	.word	0x20000608
 8002e84:	20000468 	.word	0x20000468
 8002e88:	20000610 	.word	0x20000610
 8002e8c:	20000614 	.word	0x20000614
 8002e90:	40768000 	.word	0x40768000
 8002e94:	20000618 	.word	0x20000618
 8002e98:	3a83126f 	.word	0x3a83126f
 8002e9c:	2000061c 	.word	0x2000061c

08002ea0 <PWMAbs>:

uint32_t PWMAbs(int32_t PWM)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da02      	bge.n	8002eb4 <PWMAbs+0x14>
		return PWM*-1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	425b      	negs	r3, r3
 8002eb2:	e000      	b.n	8002eb6 <PWMAbs+0x16>
	}else{
		return PWM;
 8002eb4:	687b      	ldr	r3, [r7, #4]
	}
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-PWM_MAX){
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc11      	bgt.n	8002ef6 <Drivemotor+0x32>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <Drivemotor+0xa8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	db0d      	blt.n	8002ef6 <Drivemotor+0x32>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <Drivemotor+0xac>)
 8002edc:	681c      	ldr	r4, [r3, #0]
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffde 	bl	8002ea0 <PWMAbs>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eee:	4821      	ldr	r0, [pc, #132]	; (8002f74 <Drivemotor+0xb0>)
 8002ef0:	f000 fe60 	bl	8003bb4 <HAL_GPIO_WritePin>
 8002ef4:	e036      	b.n	8002f64 <Drivemotor+0xa0>
	}else if (PWM<-PWM_MAX){
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <Drivemotor+0xa8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	da0b      	bge.n	8002f16 <Drivemotor+0x52>
		htim1.Instance->CCR1=PWM_MAX;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <Drivemotor+0xac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f0e:	4819      	ldr	r0, [pc, #100]	; (8002f74 <Drivemotor+0xb0>)
 8002f10:	f000 fe50 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}else if(PWM>PWM_MAX){
		htim1.Instance->CCR1=PWM_MAX;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}
}
 8002f14:	e026      	b.n	8002f64 <Drivemotor+0xa0>
	}else if(PWM>=0 && PWM<=PWM_MAX){
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db12      	blt.n	8002f42 <Drivemotor+0x7e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f22:	4293      	cmp	r3, r2
 8002f24:	dc0d      	bgt.n	8002f42 <Drivemotor+0x7e>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <Drivemotor+0xac>)
 8002f28:	681c      	ldr	r4, [r3, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffb8 	bl	8002ea0 <PWMAbs>
 8002f30:	4603      	mov	r3, r0
 8002f32:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8002f34:	2201      	movs	r2, #1
 8002f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <Drivemotor+0xb0>)
 8002f3c:	f000 fe3a 	bl	8003bb4 <HAL_GPIO_WritePin>
 8002f40:	e010      	b.n	8002f64 <Drivemotor+0xa0>
	}else if(PWM>PWM_MAX){
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	dd0b      	ble.n	8002f64 <Drivemotor+0xa0>
		htim1.Instance->CCR1=PWM_MAX;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <Drivemotor+0xac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f5c:	4805      	ldr	r0, [pc, #20]	; (8002f74 <Drivemotor+0xb0>)
 8002f5e:	f000 fe29 	bl	8003bb4 <HAL_GPIO_WritePin>
}
 8002f62:	e7ff      	b.n	8002f64 <Drivemotor+0xa0>
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	ffffd8f0 	.word	0xffffd8f0
 8002f70:	20000498 	.word	0x20000498
 8002f74:	40020000 	.word	0x40020000

08002f78 <ControllLoopAndErrorHandler>:

void ControllLoopAndErrorHandler()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af02      	add	r7, sp, #8
	// Set Start time
	if (flagT == 0)
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <ControllLoopAndErrorHandler+0x130>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <ControllLoopAndErrorHandler+0x22>
	{
	StartTime = Micros();
 8002f86:	f000 f8eb 	bl	8003160 <Micros>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4947      	ldr	r1, [pc, #284]	; (80030ac <ControllLoopAndErrorHandler+0x134>)
 8002f90:	e9c1 2300 	strd	r2, r3, [r1]
	flagT =1;
 8002f94:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <ControllLoopAndErrorHandler+0x130>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
	}
	// Trajectory Time
	CurrentTime = Micros();
 8002f9a:	f000 f8e1 	bl	8003160 <Micros>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4943      	ldr	r1, [pc, #268]	; (80030b0 <ControllLoopAndErrorHandler+0x138>)
 8002fa4:	e9c1 2300 	strd	r2, r3, [r1]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <ControllLoopAndErrorHandler+0x134>)
 8002faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <ControllLoopAndErrorHandler+0x138>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	483d      	ldr	r0, [pc, #244]	; (80030b4 <ControllLoopAndErrorHandler+0x13c>)
 8002fbe:	f7ff f81f 	bl	8002000 <TrajectoryEvaluation>
	// Sensor Read and Estimate
	EncoderRead();
 8002fc2:	f7ff fedd 	bl	8002d80 <EncoderRead>
	KalmanFilterFunction(&KalmanVar,PositionDeg);
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <ControllLoopAndErrorHandler+0x140>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd0:	483a      	ldr	r0, [pc, #232]	; (80030bc <ControllLoopAndErrorHandler+0x144>)
 8002fd2:	f7fd fffb 	bl	8000fcc <KalmanFilterFunction>
	  if(AbsVal(testDes - PositionDeg) < PositionErrorControl && AbsVal(KalmanVar.MatState_Data[1]) < VelocityErrorControl)
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <ControllLoopAndErrorHandler+0x140>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80030c0 <ControllLoopAndErrorHandler+0x148>
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	f7fe fa05 	bl	80013f6 <AbsVal>
 8002fec:	eef0 7a40 	vmov.f32	s15, s0
 8002ff0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80030c4 <ControllLoopAndErrorHandler+0x14c>
 8002ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d523      	bpl.n	8003046 <ControllLoopAndErrorHandler+0xce>
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <ControllLoopAndErrorHandler+0x144>)
 8003000:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	f7fe f9f5 	bl	80013f6 <AbsVal>
 800300c:	eef0 7a40 	vmov.f32	s15, s0
 8003010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d513      	bpl.n	8003046 <ControllLoopAndErrorHandler+0xce>
	  {
	    PWMCHECKER = 0.0;
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <ControllLoopAndErrorHandler+0x150>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
	    Drivemotor(PWMCHECKER);
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <ControllLoopAndErrorHandler+0x150>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003030:	ee17 0a90 	vmov	r0, s15
 8003034:	f7ff ff46 	bl	8002ec4 <Drivemotor>
	    // Reset Controller
		PIDVelocityController_Init(&PidVelo);
 8003038:	4824      	ldr	r0, [pc, #144]	; (80030cc <ControllLoopAndErrorHandler+0x154>)
 800303a:	f7fe f8f4 	bl	8001226 <PIDVelocityController_Init>
		PIDVelocityController_Init(&PidPos);
 800303e:	4824      	ldr	r0, [pc, #144]	; (80030d0 <ControllLoopAndErrorHandler+0x158>)
 8003040:	f7fe f8f1 	bl	8001226 <PIDVelocityController_Init>
 8003044:	e02c      	b.n	80030a0 <ControllLoopAndErrorHandler+0x128>
	  }
	  else
	  {
		PIDVelocityController_Update(&PidPos,traject.QX, PositionDeg);
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <ControllLoopAndErrorHandler+0x13c>)
 8003048:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <ControllLoopAndErrorHandler+0x140>)
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	eef0 0a47 	vmov.f32	s1, s14
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	481d      	ldr	r0, [pc, #116]	; (80030d0 <ControllLoopAndErrorHandler+0x158>)
 800305c:	f7fe f909 	bl	8001272 <PIDVelocityController_Update>
		PIDVelocityController_Update(&PidVelo, traject.QV + PidPos.ControllerOut , KalmanVar.MatState_Data[1]);
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <ControllLoopAndErrorHandler+0x13c>)
 8003062:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <ControllLoopAndErrorHandler+0x158>)
 8003068:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <ControllLoopAndErrorHandler+0x144>)
 8003072:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003076:	eef0 0a47 	vmov.f32	s1, s14
 800307a:	eeb0 0a67 	vmov.f32	s0, s15
 800307e:	4813      	ldr	r0, [pc, #76]	; (80030cc <ControllLoopAndErrorHandler+0x154>)
 8003080:	f7fe f8f7 	bl	8001272 <PIDVelocityController_Update>
		PWMCHECKER = PidVelo.ControllerOut;
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <ControllLoopAndErrorHandler+0x154>)
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <ControllLoopAndErrorHandler+0x150>)
 800308a:	6013      	str	r3, [r2, #0]
		Drivemotor(PWMCHECKER);
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <ControllLoopAndErrorHandler+0x150>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003096:	ee17 0a90 	vmov	r0, s15
 800309a:	f7ff ff13 	bl	8002ec4 <Drivemotor>
	  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000624 	.word	0x20000624
 80030ac:	20000628 	.word	0x20000628
 80030b0:	20000630 	.word	0x20000630
 80030b4:	200003b4 	.word	0x200003b4
 80030b8:	20000618 	.word	0x20000618
 80030bc:	20000000 	.word	0x20000000
 80030c0:	42b40000 	.word	0x42b40000
 80030c4:	3e19999a 	.word	0x3e19999a
 80030c8:	20000620 	.word	0x20000620
 80030cc:	20000354 	.word	0x20000354
 80030d0:	20000384 	.word	0x20000384

080030d4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10b      	bne.n	80030fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030f0:	eb12 0801 	adds.w	r8, r2, r1
 80030f4:	f143 0900 	adc.w	r9, r3, #0
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80030fa:	e9c3 8900 	strd	r8, r9, [r3]
	}
	if (htim == &htim3) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11b      	bne.n	800313e <HAL_TIM_PeriodElapsedCallback+0x6a>
		CheckLoopStartTime = Micros();
 8003106:	f000 f82b 	bl	8003160 <Micros>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4911      	ldr	r1, [pc, #68]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003110:	e9c1 2300 	strd	r2, r3, [r1]
		// Task Start
		ControllLoopAndErrorHandler();
 8003114:	f7ff ff30 	bl	8002f78 <ControllLoopAndErrorHandler>
		// Task End
		CheckLoopStopTime = Micros();
 8003118:	f000 f822 	bl	8003160 <Micros>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	490d      	ldr	r1, [pc, #52]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003122:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	1a84      	subs	r4, r0, r2
 8003134:	eb61 0503 	sbc.w	r5, r1, r3
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800313a:	e9c3 4500 	strd	r4, r5, [r3]
		}
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003148:	20000570 	.word	0x20000570
 800314c:	20000600 	.word	0x20000600
 8003150:	20000528 	.word	0x20000528
 8003154:	20000638 	.word	0x20000638
 8003158:	20000640 	.word	0x20000640
 800315c:	20000648 	.word	0x20000648

08003160 <Micros>:

uint64_t Micros(){
 8003160:	b4b0      	push	{r4, r5, r7}
 8003162:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <Micros+0x28>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2200      	movs	r2, #0
 800316a:	4618      	mov	r0, r3
 800316c:	4611      	mov	r1, r2
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <Micros+0x2c>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	1884      	adds	r4, r0, r2
 8003176:	eb41 0503 	adc.w	r5, r1, r3
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
}
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bcb0      	pop	{r4, r5, r7}
 8003186:	4770      	bx	lr
 8003188:	40014800 	.word	0x40014800
 800318c:	20000600 	.word	0x20000600

08003190 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d10c      	bne.n	80031bc <HAL_GPIO_EXTI_Callback+0x2c>
	{
		CoefficientAndTimeCalculation(&traject,PositionDeg,TestDestination);
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80031aa:	ed93 7a00 	vldr	s14, [r3]
 80031ae:	eef0 0a47 	vmov.f32	s1, s14
 80031b2:	eeb0 0a67 	vmov.f32	s0, s15
 80031b6:	4805      	ldr	r0, [pc, #20]	; (80031cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80031b8:	f7fe f9d0 	bl	800155c <CoefficientAndTimeCalculation>
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000618 	.word	0x20000618
 80031c8:	20000464 	.word	0x20000464
 80031cc:	200003b4 	.word	0x200003b4

080031d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <Error_Handler+0x8>
	...

080031dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_MspInit+0x4c>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <HAL_MspInit+0x4c>)
 80031ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f0:	6453      	str	r3, [r2, #68]	; 0x44
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_MspInit+0x4c>)
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_MspInit+0x4c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <HAL_MspInit+0x4c>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_MspInit+0x4c>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800321a:	2007      	movs	r0, #7
 800321c:	f000 fb04 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_TIM_PWM_MspInit+0x48>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d115      	bne.n	800326a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_TIM_PWM_MspInit+0x4c>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <HAL_TIM_PWM_MspInit+0x4c>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_TIM_PWM_MspInit+0x4c>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	2100      	movs	r1, #0
 800325e:	201a      	movs	r0, #26
 8003260:	f000 faed 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003264:	201a      	movs	r0, #26
 8003266:	f000 fb06 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d12b      	bne.n	80032f6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_TIM_Encoder_MspInit+0x84>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032d6:	2303      	movs	r3, #3
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032e6:	2301      	movs	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <HAL_TIM_Encoder_MspInit+0x88>)
 80032f2:	f000 fadb 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3728      	adds	r7, #40	; 0x28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40020000 	.word	0x40020000

08003308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <HAL_TIM_Base_MspInit+0x80>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d116      	bne.n	8003348 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a1a      	ldr	r2, [pc, #104]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	201d      	movs	r0, #29
 800333c:	f000 fa7f 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003340:	201d      	movs	r0, #29
 8003342:	f000 fa98 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003346:	e01a      	b.n	800337e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_TIM_Base_MspInit+0x88>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d115      	bne.n	800337e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_TIM_Base_MspInit+0x84>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	201a      	movs	r0, #26
 8003374:	f000 fa63 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003378:	201a      	movs	r0, #26
 800337a:	f000 fa7c 	bl	8003876 <HAL_NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40000400 	.word	0x40000400
 800338c:	40023800 	.word	0x40023800
 8003390:	40014800 	.word	0x40014800

08003394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_TIM_MspPostInit+0x68>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d11e      	bne.n	80033f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_TIM_MspPostInit+0x6c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_TIM_MspPostInit+0x6c>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_TIM_MspPostInit+0x6c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033e4:	2301      	movs	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <HAL_TIM_MspPostInit+0x70>)
 80033f0:	f000 fa5c 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40010000 	.word	0x40010000
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000

08003408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_UART_MspInit+0x84>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12b      	bne.n	8003482 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_UART_MspInit+0x88>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_UART_MspInit+0x88>)
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_UART_MspInit+0x88>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_UART_MspInit+0x88>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_UART_MspInit+0x88>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_UART_MspInit+0x88>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003462:	230c      	movs	r3, #12
 8003464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003472:	2307      	movs	r3, #7
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4619      	mov	r1, r3
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <HAL_UART_MspInit+0x8c>)
 800347e:	f000 fa15 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	3728      	adds	r7, #40	; 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40004400 	.word	0x40004400
 8003490:	40023800 	.word	0x40023800
 8003494:	40020000 	.word	0x40020000

08003498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800349c:	e7fe      	b.n	800349c <NMI_Handler+0x4>

0800349e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <HardFault_Handler+0x4>

080034a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <MemManage_Handler+0x4>

080034aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ae:	e7fe      	b.n	80034ae <BusFault_Handler+0x4>

080034b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <UsageFault_Handler+0x4>

080034b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e4:	f000 f8b0 	bl	8003648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}

080034ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80034f2:	f001 fb0f 	bl	8004b14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80034f6:	4803      	ldr	r0, [pc, #12]	; (8003504 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80034f8:	f001 fb0c 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000498 	.word	0x20000498
 8003504:	20000570 	.word	0x20000570

08003508 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <TIM3_IRQHandler+0x10>)
 800350e:	f001 fb01 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000528 	.word	0x20000528

0800351c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003520:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003524:	f000 fb60 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}

0800352c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <SystemInit+0x20>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <SystemInit+0x20>)
 8003538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800353c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003556:	490e      	ldr	r1, [pc, #56]	; (8003590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800355c:	e002      	b.n	8003564 <LoopCopyDataInit>

0800355e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003562:	3304      	adds	r3, #4

08003564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003568:	d3f9      	bcc.n	800355e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356a:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800356c:	4c0b      	ldr	r4, [pc, #44]	; (800359c <LoopFillZerobss+0x26>)
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003570:	e001      	b.n	8003576 <LoopFillZerobss>

08003572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003574:	3204      	adds	r2, #4

08003576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003578:	d3fb      	bcc.n	8003572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800357a:	f7ff ffd7 	bl	800352c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357e:	f002 febf 	bl	8006300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003582:	f7ff f94d 	bl	8002820 <main>
  bx  lr    
 8003586:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003590:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 8003594:	08006398 	.word	0x08006398
  ldr r2, =_sbss
 8003598:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 800359c:	20000654 	.word	0x20000654

080035a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a0:	e7fe      	b.n	80035a0 <ADC_IRQHandler>
	...

080035a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <HAL_Init+0x40>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_Init+0x40>)
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_Init+0x40>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f000 f92b 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f000 f808 	bl	80035e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d8:	f7ff fe00 	bl	80031dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_InitTick+0x54>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x58>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f943 	bl	8003892 <HAL_SYSTICK_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00e      	b.n	8003634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d80a      	bhi.n	8003632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f000 f90b 	bl	800383e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <HAL_InitTick+0x5c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2000046c 	.word	0x2000046c
 8003640:	20000474 	.word	0x20000474
 8003644:	20000470 	.word	0x20000470

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000474 	.word	0x20000474
 800366c:	20000650 	.word	0x20000650

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000650 	.word	0x20000650

08003688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <__NVIC_GetPriorityGrouping+0x18>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0307 	and.w	r3, r3, #7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4907      	ldr	r1, [pc, #28]	; (8003724 <__NVIC_EnableIRQ+0x38>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f202 	lsl.w	r2, r0, r2
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	; (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
         );
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f4:	d301      	bcc.n	80037fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00f      	b.n	800381a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <SysTick_Config+0x40>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003802:	210f      	movs	r1, #15
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f7ff ff8e 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SysTick_Config+0x40>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003812:	4b04      	ldr	r3, [pc, #16]	; (8003824 <SysTick_Config+0x40>)
 8003814:	2207      	movs	r2, #7
 8003816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff29 	bl	8003688 <__NVIC_SetPriorityGrouping>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003850:	f7ff ff3e 	bl	80036d0 <__NVIC_GetPriorityGrouping>
 8003854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff ff8e 	bl	800377c <NVIC_EncodePriority>
 8003860:	4602      	mov	r2, r0
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff5d 	bl	8003728 <__NVIC_SetPriority>
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff31 	bl	80036ec <__NVIC_EnableIRQ>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ffa2 	bl	80037e4 <SysTick_Config>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e159      	b.n	8003b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f040 8148 	bne.w	8003b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d005      	beq.n	80038fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d130      	bne.n	8003960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 0201 	and.w	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d017      	beq.n	800399c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d123      	bne.n	80039f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a2 	beq.w	8003b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4e:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d019      	beq.n	8003aae <HAL_GPIO_Init+0x202>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a48      	ldr	r2, [pc, #288]	; (8003ba0 <HAL_GPIO_Init+0x2f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_GPIO_Init+0x1fe>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a47      	ldr	r2, [pc, #284]	; (8003ba4 <HAL_GPIO_Init+0x2f8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00d      	beq.n	8003aa6 <HAL_GPIO_Init+0x1fa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <HAL_GPIO_Init+0x2fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <HAL_GPIO_Init+0x1f6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a45      	ldr	r2, [pc, #276]	; (8003bac <HAL_GPIO_Init+0x300>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_GPIO_Init+0x1f2>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	f67f aea2 	bls.w	80038c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40013c00 	.word	0x40013c00

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fac2 	bl	8003190 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40013c00 	.word	0x40013c00

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e267      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d075      	beq.n	8003d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d00c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c42:	4b85      	ldr	r3, [pc, #532]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d05b      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d157      	bne.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e242      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x74>
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e01d      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b70      	ldr	r3, [pc, #448]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6f      	ldr	r2, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6c      	ldr	r2, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003cb0:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7ff fcce 	bl	8003670 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7ff fcca 	bl	8003670 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e207      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7ff fcba 	bl	8003670 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7ff fcb6 	bl	8003670 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1f3      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c7      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_RCC_OscConfig+0x244>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7ff fc6f 	bl	8003670 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7ff fc6b 	bl	8003670 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1a8      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4925      	ldr	r1, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x244>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7ff fc4e 	bl	8003670 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7ff fc4a 	bl	8003670 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e187      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d036      	beq.n	8003e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_OscConfig+0x248>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7ff fc2e 	bl	8003670 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7ff fc2a 	bl	8003670 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e167      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x200>
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_OscConfig+0x248>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7ff fc17 	bl	8003670 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e00e      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7ff fc13 	bl	8003670 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d907      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e150      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470000 	.word	0x42470000
 8003e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	4b88      	ldr	r3, [pc, #544]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ea      	bne.n	8003e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8097 	beq.w	8003fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e82:	4b81      	ldr	r3, [pc, #516]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b7d      	ldr	r3, [pc, #500]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a7c      	ldr	r2, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b77      	ldr	r3, [pc, #476]	; (800408c <HAL_RCC_OscConfig+0x474>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b74      	ldr	r3, [pc, #464]	; (800408c <HAL_RCC_OscConfig+0x474>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	; (800408c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7ff fbd3 	bl	8003670 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7ff fbcf 	bl	8003670 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e10c      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_OscConfig+0x474>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2ea>
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a63      	ldr	r2, [pc, #396]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x324>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x30c>
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a5e      	ldr	r2, [pc, #376]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
 8003f16:	4b5c      	ldr	r3, [pc, #368]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a5b      	ldr	r2, [pc, #364]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0x324>
 8003f24:	4b58      	ldr	r3, [pc, #352]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a57      	ldr	r2, [pc, #348]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	4b55      	ldr	r3, [pc, #340]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7ff fb94 	bl	8003670 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7ff fb90 	bl	8003670 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0cb      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f70:	f7ff fb7e 	bl	8003670 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7ff fb7a 	bl	8003670 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0b5      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ee      	bne.n	8003f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	4a38      	ldr	r2, [pc, #224]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a1 	beq.w	80040f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d05c      	beq.n	800407c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d141      	bne.n	800404e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCC_OscConfig+0x478>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7ff fb4e 	bl	8003670 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7ff fb4a 	bl	8003670 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e087      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	3b01      	subs	r3, #1
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	491b      	ldr	r1, [pc, #108]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x478>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7ff fb23 	bl	8003670 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7ff fb1f 	bl	8003670 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e05c      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x416>
 800404c:	e054      	b.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x478>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7ff fb0c 	bl	8003670 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7ff fb08 	bl	8003670 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e045      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x470>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x444>
 800407a:	e03d      	b.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e038      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000
 8004090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x4ec>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d028      	beq.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d121      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d11a      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d111      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	3b01      	subs	r3, #1
 80040de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0cc      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d90c      	bls.n	8004144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800417e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d044      	beq.n	8004228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d119      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e067      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4934      	ldr	r1, [pc, #208]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f8:	f7ff fa3a 	bl	8003670 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7ff fa36 	bl	8003670 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e04f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d20c      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f821 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f99a 	bl	80035e8 <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08006370 	.word	0x08006370
 80042cc:	2000046c 	.word	0x2000046c
 80042d0:	20000470 	.word	0x20000470

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b094      	sub	sp, #80	; 0x50
 80042da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
 80042e0:	2300      	movs	r3, #0
 80042e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e4:	2300      	movs	r3, #0
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ec:	4b79      	ldr	r3, [pc, #484]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00d      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x40>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f200 80e1 	bhi.w	80044c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x3a>
 8004306:	e0db      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b73      	ldr	r3, [pc, #460]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800430c:	e0db      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430e:	4b73      	ldr	r3, [pc, #460]	; (80044dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004312:	e0d8      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431e:	4b6d      	ldr	r3, [pc, #436]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d063      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	2200      	movs	r2, #0
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
 8004334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433c:	633b      	str	r3, [r7, #48]	; 0x30
 800433e:	2300      	movs	r3, #0
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
 8004342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	f04f 0000 	mov.w	r0, #0
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	0159      	lsls	r1, r3, #5
 8004354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004358:	0150      	lsls	r0, r2, #5
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4621      	mov	r1, r4
 8004360:	1a51      	subs	r1, r2, r1
 8004362:	6139      	str	r1, [r7, #16]
 8004364:	4629      	mov	r1, r5
 8004366:	eb63 0301 	sbc.w	r3, r3, r1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004378:	4659      	mov	r1, fp
 800437a:	018b      	lsls	r3, r1, #6
 800437c:	4651      	mov	r1, sl
 800437e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004382:	4651      	mov	r1, sl
 8004384:	018a      	lsls	r2, r1, #6
 8004386:	4651      	mov	r1, sl
 8004388:	ebb2 0801 	subs.w	r8, r2, r1
 800438c:	4659      	mov	r1, fp
 800438e:	eb63 0901 	sbc.w	r9, r3, r1
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800439e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a6:	4690      	mov	r8, r2
 80043a8:	4699      	mov	r9, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	eb18 0303 	adds.w	r3, r8, r3
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	462b      	mov	r3, r5
 80043b4:	eb49 0303 	adc.w	r3, r9, r3
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043c6:	4629      	mov	r1, r5
 80043c8:	024b      	lsls	r3, r1, #9
 80043ca:	4621      	mov	r1, r4
 80043cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043d0:	4621      	mov	r1, r4
 80043d2:	024a      	lsls	r2, r1, #9
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043da:	2200      	movs	r2, #0
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e4:	f7fc fb16 	bl	8000a14 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f0:	e058      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	2200      	movs	r2, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	4611      	mov	r1, r2
 80043fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	2300      	movs	r3, #0
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
 8004408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	f04f 0000 	mov.w	r0, #0
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	0159      	lsls	r1, r3, #5
 800441a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800441e:	0150      	lsls	r0, r2, #5
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4641      	mov	r1, r8
 8004426:	ebb2 0a01 	subs.w	sl, r2, r1
 800442a:	4649      	mov	r1, r9
 800442c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800443c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004444:	ebb2 040a 	subs.w	r4, r2, sl
 8004448:	eb63 050b 	sbc.w	r5, r3, fp
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	00eb      	lsls	r3, r5, #3
 8004456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445a:	00e2      	lsls	r2, r4, #3
 800445c:	4614      	mov	r4, r2
 800445e:	461d      	mov	r5, r3
 8004460:	4643      	mov	r3, r8
 8004462:	18e3      	adds	r3, r4, r3
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	464b      	mov	r3, r9
 8004468:	eb45 0303 	adc.w	r3, r5, r3
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447a:	4629      	mov	r1, r5
 800447c:	028b      	lsls	r3, r1, #10
 800447e:	4621      	mov	r1, r4
 8004480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004484:	4621      	mov	r1, r4
 8004486:	028a      	lsls	r2, r1, #10
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	2200      	movs	r2, #0
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	61fa      	str	r2, [r7, #28]
 8004494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004498:	f7fc fabc 	bl	8000a14 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4613      	mov	r3, r2
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	3301      	adds	r3, #1
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044be:	e002      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3750      	adds	r7, #80	; 0x50
 80044cc:	46bd      	mov	sp, r7
 80044ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	00f42400 	.word	0x00f42400
 80044dc:	007a1200 	.word	0x007a1200

080044e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000046c 	.word	0x2000046c

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044fc:	f7ff fff0 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK1Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	08006380 	.word	0x08006380

08004520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004524:	f7ff ffdc 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0b5b      	lsrs	r3, r3, #13
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	08006380 	.word	0x08006380

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e041      	b.n	80045de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe feca 	bl	8003308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fd7e 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d001      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e044      	b.n	800468a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <HAL_TIM_Base_Start_IT+0xb0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <HAL_TIM_Base_Start_IT+0xb4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b06      	cmp	r3, #6
 8004664:	d010      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	e007      	b.n	8004688 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40014000 	.word	0x40014000

080046ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e041      	b.n	8004742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe fdaa 	bl	800322c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f000 fccc 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e022      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIM_PWM_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e015      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e068      	b.n	8004890 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0x82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	e013      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0x92>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	e00b      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fee8 	bl	80055d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a23      	ldr	r2, [pc, #140]	; (8004898 <HAL_TIM_PWM_Start+0x14c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d107      	bne.n	800481e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_TIM_PWM_Start+0x14c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d013      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_TIM_PWM_Start+0x150>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIM_PWM_Start+0x154>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_TIM_PWM_Start+0x158>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_TIM_PWM_Start+0x15c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b06      	cmp	r3, #6
 800486a:	d010      	beq.n	800488e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	e007      	b.n	800488e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40010000 	.word	0x40010000
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	40014000 	.word	0x40014000

080048ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e097      	b.n	80049f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fcd1 	bl	800327c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fbc1 	bl	8005088 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4313      	orrs	r3, r2
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800494c:	f023 030c 	bic.w	r3, r3, #12
 8004950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	4313      	orrs	r3, r2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4313      	orrs	r3, r2
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d102      	bne.n	8004a34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a2e:	7b7b      	ldrb	r3, [r7, #13]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e069      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a48:	e031      	b.n	8004aae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d110      	bne.n	8004a72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a56:	7b3b      	ldrb	r3, [r7, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e055      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a70:	e01d      	b.n	8004aae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	7b7b      	ldrb	r3, [r7, #13]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a84:	7b3b      	ldrb	r3, [r7, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03e      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_Encoder_Start+0xc4>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d008      	beq.n	8004acc <HAL_TIM_Encoder_Start+0xd4>
 8004aba:	e00f      	b.n	8004adc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fd85 	bl	80055d4 <TIM_CCxChannelCmd>
      break;
 8004aca:	e016      	b.n	8004afa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fd7d 	bl	80055d4 <TIM_CCxChannelCmd>
      break;
 8004ada:	e00e      	b.n	8004afa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fd75 	bl	80055d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2201      	movs	r2, #1
 8004af0:	2104      	movs	r1, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fd6e 	bl	80055d4 <TIM_CCxChannelCmd>
      break;
 8004af8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0202 	mvn.w	r2, #2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa77 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa69 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa7a 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0204 	mvn.w	r2, #4
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa4d 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa3f 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa50 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0208 	mvn.w	r2, #8
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa23 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa15 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa26 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0210 	mvn.w	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9f9 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9eb 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9fc 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0201 	mvn.w	r2, #1
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fe fa1e 	bl	80030d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fd78 	bl	80057b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9c1 	bl	8005072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0220 	mvn.w	r2, #32
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fd42 	bl	80057a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e0ae      	b.n	8004ea0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	f200 809f 	bhi.w	8004e90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004e91 	.word	0x08004e91
 8004d60:	08004e91 	.word	0x08004e91
 8004d64:	08004e91 	.word	0x08004e91
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004e91 	.word	0x08004e91
 8004d70:	08004e91 	.word	0x08004e91
 8004d74:	08004e91 	.word	0x08004e91
 8004d78:	08004e0f 	.word	0x08004e0f
 8004d7c:	08004e91 	.word	0x08004e91
 8004d80:	08004e91 	.word	0x08004e91
 8004d84:	08004e91 	.word	0x08004e91
 8004d88:	08004e4f 	.word	0x08004e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f9f8 	bl	8005188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
      break;
 8004dca:	e064      	b.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa3e 	bl	8005254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	619a      	str	r2, [r3, #24]
      break;
 8004e0c:	e043      	b.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa89 	bl	800532c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	61da      	str	r2, [r3, #28]
      break;
 8004e4c:	e023      	b.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fad3 	bl	8005400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	61da      	str	r2, [r3, #28]
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
      break;
 8004e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0b4      	b.n	800502e <HAL_TIM_ConfigClockSource+0x186>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d03e      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0xd4>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	f200 8087 	bhi.w	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	f000 8086 	beq.w	800501a <HAL_TIM_ConfigClockSource+0x172>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d87f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b70      	cmp	r3, #112	; 0x70
 8004f16:	d01a      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xa6>
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d87b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b60      	cmp	r3, #96	; 0x60
 8004f1e:	d050      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f20:	2b60      	cmp	r3, #96	; 0x60
 8004f22:	d877      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b50      	cmp	r3, #80	; 0x50
 8004f26:	d03c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f28:	2b50      	cmp	r3, #80	; 0x50
 8004f2a:	d873      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d058      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d86f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b30      	cmp	r3, #48	; 0x30
 8004f36:	d064      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15a>
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d86b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d060      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15a>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d867      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15a>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d05a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x15a>
 8004f4c:	e062      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f000 fb19 	bl	8005594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
      break;
 8004f7a:	e04f      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f000 fb02 	bl	8005594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	609a      	str	r2, [r3, #8]
      break;
 8004fa0:	e03c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fa76 	bl	80054a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2150      	movs	r1, #80	; 0x50
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 facf 	bl	800555e <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e02c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fa95 	bl	80054fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2160      	movs	r1, #96	; 0x60
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fabf 	bl	800555e <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e01c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 fa56 	bl	80054a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 faaf 	bl	800555e <TIM_ITRx_SetConfig>
      break;
 8005000:	e00c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 faa6 	bl	800555e <TIM_ITRx_SetConfig>
      break;
 8005012:	e003      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e000      	b.n	800501c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800501a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a34      	ldr	r2, [pc, #208]	; (800516c <TIM_Base_SetConfig+0xe4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a31      	ldr	r2, [pc, #196]	; (8005170 <TIM_Base_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <TIM_Base_SetConfig+0xec>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <TIM_Base_SetConfig+0xf0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a25      	ldr	r2, [pc, #148]	; (800516c <TIM_Base_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01b      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d017      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <TIM_Base_SetConfig+0xe8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <TIM_Base_SetConfig+0xec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00f      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <TIM_Base_SetConfig+0xf0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <TIM_Base_SetConfig+0xf4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <TIM_Base_SetConfig+0xf8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <TIM_Base_SetConfig+0xfc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <TIM_Base_SetConfig+0xe4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d103      	bne.n	8005158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800

08005188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 0302 	bic.w	r3, r3, #2
 80051d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <TIM_OC1_SetConfig+0xc8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10c      	bne.n	80051fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0308 	bic.w	r3, r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0304 	bic.w	r3, r3, #4
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <TIM_OC1_SetConfig+0xc8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d111      	bne.n	800522a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40010000 	.word	0x40010000

08005254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0210 	bic.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0320 	bic.w	r3, r3, #32
 800529e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <TIM_OC2_SetConfig+0xd4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10d      	bne.n	80052d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a15      	ldr	r2, [pc, #84]	; (8005328 <TIM_OC2_SetConfig+0xd4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d113      	bne.n	8005300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_OC3_SetConfig+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10d      	bne.n	80053a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC3_SetConfig+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d113      	bne.n	80053d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40010000 	.word	0x40010000

08005400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a10      	ldr	r2, [pc, #64]	; (800549c <TIM_OC4_SetConfig+0x9c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d109      	bne.n	8005474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000

080054a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 030a 	bic.w	r3, r3, #10
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054fe:	b480      	push	{r7}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0210 	bic.w	r2, r3, #16
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	031b      	lsls	r3, r3, #12
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800553a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	f043 0307 	orr.w	r3, r3, #7
 8005580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	609a      	str	r2, [r3, #8]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	2201      	movs	r2, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	401a      	ands	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	431a      	orrs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e050      	b.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d013      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10c      	bne.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40014000 	.word	0x40014000

080056fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005714:	2302      	movs	r3, #2
 8005716:	e03d      	b.n	8005794 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e03f      	b.n	800585a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fe0a 	bl	8003408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f829 	bl	8005864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005868:	b0c0      	sub	sp, #256	; 0x100
 800586a:	af00      	add	r7, sp, #0
 800586c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	ea40 0301 	orr.w	r3, r0, r1
 800588c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	431a      	orrs	r2, r3
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058bc:	f021 010c 	bic.w	r1, r1, #12
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ca:	430b      	orrs	r3, r1
 80058cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	6999      	ldr	r1, [r3, #24]
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	ea40 0301 	orr.w	r3, r0, r1
 80058ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b8f      	ldr	r3, [pc, #572]	; (8005b30 <UART_SetConfig+0x2cc>)
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d005      	beq.n	8005904 <UART_SetConfig+0xa0>
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b8d      	ldr	r3, [pc, #564]	; (8005b34 <UART_SetConfig+0x2d0>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d104      	bne.n	800590e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7fe fe0c 	bl	8004520 <HAL_RCC_GetPCLK2Freq>
 8005908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800590c:	e003      	b.n	8005916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800590e:	f7fe fdf3 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8005912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005920:	f040 810c 	bne.w	8005b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005928:	2200      	movs	r2, #0
 800592a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800592e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	1891      	adds	r1, r2, r2
 800593c:	65b9      	str	r1, [r7, #88]	; 0x58
 800593e:	415b      	adcs	r3, r3
 8005940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005946:	4621      	mov	r1, r4
 8005948:	eb12 0801 	adds.w	r8, r2, r1
 800594c:	4629      	mov	r1, r5
 800594e:	eb43 0901 	adc.w	r9, r3, r1
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800595e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005966:	4690      	mov	r8, r2
 8005968:	4699      	mov	r9, r3
 800596a:	4623      	mov	r3, r4
 800596c:	eb18 0303 	adds.w	r3, r8, r3
 8005970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005974:	462b      	mov	r3, r5
 8005976:	eb49 0303 	adc.w	r3, r9, r3
 800597a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800598a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800598e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005992:	460b      	mov	r3, r1
 8005994:	18db      	adds	r3, r3, r3
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
 8005998:	4613      	mov	r3, r2
 800599a:	eb42 0303 	adc.w	r3, r2, r3
 800599e:	657b      	str	r3, [r7, #84]	; 0x54
 80059a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059a8:	f7fb f834 	bl	8000a14 <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <UART_SetConfig+0x2d4>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	011c      	lsls	r4, r3, #4
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80059d4:	415b      	adcs	r3, r3
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059dc:	4641      	mov	r1, r8
 80059de:	eb12 0a01 	adds.w	sl, r2, r1
 80059e2:	4649      	mov	r1, r9
 80059e4:	eb43 0b01 	adc.w	fp, r3, r1
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fc:	4692      	mov	sl, r2
 80059fe:	469b      	mov	fp, r3
 8005a00:	4643      	mov	r3, r8
 8005a02:	eb1a 0303 	adds.w	r3, sl, r3
 8005a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	18db      	adds	r3, r3, r3
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2e:	4613      	mov	r3, r2
 8005a30:	eb42 0303 	adc.w	r3, r2, r3
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
 8005a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a3e:	f7fa ffe9 	bl	8000a14 <__aeabi_uldivmod>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2264      	movs	r2, #100	; 0x64
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	1acb      	subs	r3, r1, r3
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005a60:	fba3 2302 	umull	r2, r3, r3, r2
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a6c:	441c      	add	r4, r3
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a90:	4641      	mov	r1, r8
 8005a92:	1851      	adds	r1, r2, r1
 8005a94:	6339      	str	r1, [r7, #48]	; 0x30
 8005a96:	4649      	mov	r1, r9
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	00cb      	lsls	r3, r1, #3
 8005aac:	4651      	mov	r1, sl
 8005aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab2:	4651      	mov	r1, sl
 8005ab4:	00ca      	lsls	r2, r1, #3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	4642      	mov	r2, r8
 8005abe:	189b      	adds	r3, r3, r2
 8005ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	eb42 0303 	adc.w	r3, r2, r3
 8005acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005adc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	18db      	adds	r3, r3, r3
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aea:	4613      	mov	r3, r2
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005afa:	f7fa ff8b 	bl	8000a14 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005b04:	fba3 1302 	umull	r1, r3, r3, r2
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	2164      	movs	r1, #100	; 0x64
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3332      	adds	r3, #50	; 0x32
 8005b16:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	f003 0207 	and.w	r2, r3, #7
 8005b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4422      	add	r2, r4
 8005b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b2c:	e105      	b.n	8005d3a <UART_SetConfig+0x4d6>
 8005b2e:	bf00      	nop
 8005b30:	40011000 	.word	0x40011000
 8005b34:	40011400 	.word	0x40011400
 8005b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b4e:	4642      	mov	r2, r8
 8005b50:	464b      	mov	r3, r9
 8005b52:	1891      	adds	r1, r2, r2
 8005b54:	6239      	str	r1, [r7, #32]
 8005b56:	415b      	adcs	r3, r3
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b5e:	4641      	mov	r1, r8
 8005b60:	1854      	adds	r4, r2, r1
 8005b62:	4649      	mov	r1, r9
 8005b64:	eb43 0501 	adc.w	r5, r3, r1
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	00eb      	lsls	r3, r5, #3
 8005b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b76:	00e2      	lsls	r2, r4, #3
 8005b78:	4614      	mov	r4, r2
 8005b7a:	461d      	mov	r5, r3
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	18e3      	adds	r3, r4, r3
 8005b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b84:	464b      	mov	r3, r9
 8005b86:	eb45 0303 	adc.w	r3, r5, r3
 8005b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005baa:	4629      	mov	r1, r5
 8005bac:	008b      	lsls	r3, r1, #2
 8005bae:	4621      	mov	r1, r4
 8005bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	008a      	lsls	r2, r1, #2
 8005bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bbc:	f7fa ff2a 	bl	8000a14 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4b60      	ldr	r3, [pc, #384]	; (8005d48 <UART_SetConfig+0x4e4>)
 8005bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	011c      	lsls	r4, r3, #4
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	61b9      	str	r1, [r7, #24]
 8005be8:	415b      	adcs	r3, r3
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	1851      	adds	r1, r2, r1
 8005bf4:	6139      	str	r1, [r7, #16]
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	414b      	adcs	r3, r1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c08:	4659      	mov	r1, fp
 8005c0a:	00cb      	lsls	r3, r1, #3
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c12:	4651      	mov	r1, sl
 8005c14:	00ca      	lsls	r2, r1, #3
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c24:	464b      	mov	r3, r9
 8005c26:	460a      	mov	r2, r1
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c48:	4649      	mov	r1, r9
 8005c4a:	008b      	lsls	r3, r1, #2
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c52:	4641      	mov	r1, r8
 8005c54:	008a      	lsls	r2, r1, #2
 8005c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c5a:	f7fa fedb 	bl	8000a14 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <UART_SetConfig+0x4e4>)
 8005c64:	fba3 1302 	umull	r1, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2164      	movs	r1, #100	; 0x64
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	3332      	adds	r3, #50	; 0x32
 8005c76:	4a34      	ldr	r2, [pc, #208]	; (8005d48 <UART_SetConfig+0x4e4>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c82:	441c      	add	r4, r3
 8005c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c88:	2200      	movs	r2, #0
 8005c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c8c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c92:	4642      	mov	r2, r8
 8005c94:	464b      	mov	r3, r9
 8005c96:	1891      	adds	r1, r2, r2
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	415b      	adcs	r3, r3
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	1851      	adds	r1, r2, r1
 8005ca6:	6039      	str	r1, [r7, #0]
 8005ca8:	4649      	mov	r1, r9
 8005caa:	414b      	adcs	r3, r1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cba:	4659      	mov	r1, fp
 8005cbc:	00cb      	lsls	r3, r1, #3
 8005cbe:	4651      	mov	r1, sl
 8005cc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	00ca      	lsls	r2, r1, #3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4642      	mov	r2, r8
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	460a      	mov	r2, r1
 8005cd8:	eb42 0303 	adc.w	r3, r2, r3
 8005cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ce8:	667a      	str	r2, [r7, #100]	; 0x64
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	008b      	lsls	r3, r1, #2
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d00:	4641      	mov	r1, r8
 8005d02:	008a      	lsls	r2, r1, #2
 8005d04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d08:	f7fa fe84 	bl	8000a14 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <UART_SetConfig+0x4e4>)
 8005d12:	fba3 1302 	umull	r1, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2164      	movs	r1, #100	; 0x64
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	3332      	adds	r3, #50	; 0x32
 8005d24:	4a08      	ldr	r2, [pc, #32]	; (8005d48 <UART_SetConfig+0x4e4>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4422      	add	r2, r4
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	51eb851f 	.word	0x51eb851f

08005d4c <arm_mat_trans_f32>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	8802      	ldrh	r2, [r0, #0]
 8005d52:	884b      	ldrh	r3, [r1, #2]
 8005d54:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005d58:	684f      	ldr	r7, [r1, #4]
 8005d5a:	8840      	ldrh	r0, [r0, #2]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	b083      	sub	sp, #12
 8005d60:	d14c      	bne.n	8005dfc <arm_mat_trans_f32+0xb0>
 8005d62:	f8b1 e000 	ldrh.w	lr, [r1]
 8005d66:	4586      	cmp	lr, r0
 8005d68:	d148      	bne.n	8005dfc <arm_mat_trans_f32+0xb0>
 8005d6a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8005d6e:	009c      	lsls	r4, r3, #2
 8005d70:	f00e 0e03 	and.w	lr, lr, #3
 8005d74:	fb08 f904 	mul.w	r9, r8, r4
 8005d78:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8005d7c:	011d      	lsls	r5, r3, #4
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005d84:	eb07 0a04 	add.w	sl, r7, r4
 8005d88:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8005d8c:	9201      	str	r2, [sp, #4]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	463b      	mov	r3, r7
 8005d92:	f1b8 0f00 	cmp.w	r8, #0
 8005d96:	d01d      	beq.n	8005dd4 <arm_mat_trans_f32+0x88>
 8005d98:	9900      	ldr	r1, [sp, #0]
 8005d9a:	f10c 0210 	add.w	r2, ip, #16
 8005d9e:	4439      	add	r1, r7
 8005da0:	4640      	mov	r0, r8
 8005da2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8005da6:	601e      	str	r6, [r3, #0]
 8005da8:	ed52 7a03 	vldr	s15, [r2, #-12]
 8005dac:	191e      	adds	r6, r3, r4
 8005dae:	edc6 7a00 	vstr	s15, [r6]
 8005db2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8005db6:	600e      	str	r6, [r1, #0]
 8005db8:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005dbc:	190e      	adds	r6, r1, r4
 8005dbe:	3801      	subs	r0, #1
 8005dc0:	442b      	add	r3, r5
 8005dc2:	f102 0210 	add.w	r2, r2, #16
 8005dc6:	edc6 7a00 	vstr	s15, [r6]
 8005dca:	4429      	add	r1, r5
 8005dcc:	d1e9      	bne.n	8005da2 <arm_mat_trans_f32+0x56>
 8005dce:	44dc      	add	ip, fp
 8005dd0:	eb09 0307 	add.w	r3, r9, r7
 8005dd4:	f1be 0f00 	cmp.w	lr, #0
 8005dd8:	d009      	beq.n	8005dee <arm_mat_trans_f32+0xa2>
 8005dda:	4672      	mov	r2, lr
 8005ddc:	4661      	mov	r1, ip
 8005dde:	f851 0b04 	ldr.w	r0, [r1], #4
 8005de2:	6018      	str	r0, [r3, #0]
 8005de4:	3a01      	subs	r2, #1
 8005de6:	4423      	add	r3, r4
 8005de8:	d1f9      	bne.n	8005dde <arm_mat_trans_f32+0x92>
 8005dea:	9b01      	ldr	r3, [sp, #4]
 8005dec:	449c      	add	ip, r3
 8005dee:	3704      	adds	r7, #4
 8005df0:	4557      	cmp	r7, sl
 8005df2:	d1cd      	bne.n	8005d90 <arm_mat_trans_f32+0x44>
 8005df4:	2000      	movs	r0, #0
 8005df6:	b003      	add	sp, #12
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	f06f 0002 	mvn.w	r0, #2
 8005e00:	e7f9      	b.n	8005df6 <arm_mat_trans_f32+0xaa>
 8005e02:	bf00      	nop

08005e04 <arm_mat_sub_f32>:
 8005e04:	b4f0      	push	{r4, r5, r6, r7}
 8005e06:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005e0a:	6803      	ldr	r3, [r0, #0]
 8005e0c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005e10:	6856      	ldr	r6, [r2, #4]
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	d15d      	bne.n	8005ed2 <arm_mat_sub_f32+0xce>
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d15a      	bne.n	8005ed2 <arm_mat_sub_f32+0xce>
 8005e1c:	8803      	ldrh	r3, [r0, #0]
 8005e1e:	8844      	ldrh	r4, [r0, #2]
 8005e20:	fb04 f403 	mul.w	r4, r4, r3
 8005e24:	08a5      	lsrs	r5, r4, #2
 8005e26:	d032      	beq.n	8005e8e <arm_mat_sub_f32+0x8a>
 8005e28:	f10c 0110 	add.w	r1, ip, #16
 8005e2c:	f107 0210 	add.w	r2, r7, #16
 8005e30:	f106 0310 	add.w	r3, r6, #16
 8005e34:	4628      	mov	r0, r5
 8005e36:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005e3a:	ed51 7a04 	vldr	s15, [r1, #-16]
 8005e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e42:	3801      	subs	r0, #1
 8005e44:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005e48:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005e4c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e54:	f101 0110 	add.w	r1, r1, #16
 8005e58:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005e5c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005e60:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8005e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e68:	f102 0210 	add.w	r2, r2, #16
 8005e6c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005e70:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8005e74:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e7c:	f103 0310 	add.w	r3, r3, #16
 8005e80:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005e84:	d1d7      	bne.n	8005e36 <arm_mat_sub_f32+0x32>
 8005e86:	012b      	lsls	r3, r5, #4
 8005e88:	449c      	add	ip, r3
 8005e8a:	441f      	add	r7, r3
 8005e8c:	441e      	add	r6, r3
 8005e8e:	f014 0403 	ands.w	r4, r4, #3
 8005e92:	d01b      	beq.n	8005ecc <arm_mat_sub_f32+0xc8>
 8005e94:	eddc 7a00 	vldr	s15, [ip]
 8005e98:	ed97 7a00 	vldr	s14, [r7]
 8005e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	edc6 7a00 	vstr	s15, [r6]
 8005ea6:	d011      	beq.n	8005ecc <arm_mat_sub_f32+0xc8>
 8005ea8:	eddc 7a01 	vldr	s15, [ip, #4]
 8005eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8005eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eb4:	2c01      	cmp	r4, #1
 8005eb6:	edc6 7a01 	vstr	s15, [r6, #4]
 8005eba:	d007      	beq.n	8005ecc <arm_mat_sub_f32+0xc8>
 8005ebc:	eddc 7a02 	vldr	s15, [ip, #8]
 8005ec0:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ec8:	edc6 7a02 	vstr	s15, [r6, #8]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	bcf0      	pop	{r4, r5, r6, r7}
 8005ed0:	4770      	bx	lr
 8005ed2:	f06f 0002 	mvn.w	r0, #2
 8005ed6:	e7fa      	b.n	8005ece <arm_mat_sub_f32+0xca>

08005ed8 <arm_mat_mult_f32>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	8845      	ldrh	r5, [r0, #2]
 8005ede:	880b      	ldrh	r3, [r1, #0]
 8005ee0:	8806      	ldrh	r6, [r0, #0]
 8005ee2:	6847      	ldr	r7, [r0, #4]
 8005ee4:	6854      	ldr	r4, [r2, #4]
 8005ee6:	6848      	ldr	r0, [r1, #4]
 8005ee8:	b08b      	sub	sp, #44	; 0x2c
 8005eea:	42ab      	cmp	r3, r5
 8005eec:	9109      	str	r1, [sp, #36]	; 0x24
 8005eee:	9604      	str	r6, [sp, #16]
 8005ef0:	8849      	ldrh	r1, [r1, #2]
 8005ef2:	f040 808a 	bne.w	800600a <arm_mat_mult_f32+0x132>
 8005ef6:	8815      	ldrh	r5, [r2, #0]
 8005ef8:	42b5      	cmp	r5, r6
 8005efa:	f040 8086 	bne.w	800600a <arm_mat_mult_f32+0x132>
 8005efe:	8852      	ldrh	r2, [r2, #2]
 8005f00:	428a      	cmp	r2, r1
 8005f02:	f040 8082 	bne.w	800600a <arm_mat_mult_f32+0x132>
 8005f06:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8005f0a:	1d01      	adds	r1, r0, #4
 8005f0c:	0116      	lsls	r6, r2, #4
 8005f0e:	9108      	str	r1, [sp, #32]
 8005f10:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005f14:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005f18:	9101      	str	r1, [sp, #4]
 8005f1a:	fb06 f108 	mul.w	r1, r6, r8
 8005f1e:	0095      	lsls	r5, r2, #2
 8005f20:	9103      	str	r1, [sp, #12]
 8005f22:	00d2      	lsls	r2, r2, #3
 8005f24:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005f28:	f003 0903 	and.w	r9, r3, #3
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	f107 0b10 	add.w	fp, r7, #16
 8005f32:	eb04 0a05 	add.w	sl, r4, r5
 8005f36:	9107      	str	r1, [sp, #28]
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	9306      	str	r3, [sp, #24]
 8005f3c:	f1ab 0310 	sub.w	r3, fp, #16
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005f48:	eb03 0c0a 	add.w	ip, r3, sl
 8005f4c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006014 <arm_mat_mult_f32+0x13c>
 8005f50:	f1b8 0f00 	cmp.w	r8, #0
 8005f54:	d053      	beq.n	8005ffe <arm_mat_mult_f32+0x126>
 8005f56:	9b02      	ldr	r3, [sp, #8]
 8005f58:	4644      	mov	r4, r8
 8005f5a:	18c1      	adds	r1, r0, r3
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	465b      	mov	r3, fp
 8005f60:	ed92 6a00 	vldr	s12, [r2]
 8005f64:	ed13 7a04 	vldr	s14, [r3, #-16]
 8005f68:	ed53 4a03 	vldr	s9, [r3, #-12]
 8005f6c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005f70:	ed91 5a00 	vldr	s10, [r1]
 8005f74:	ed53 5a01 	vldr	s11, [r3, #-4]
 8005f78:	1957      	adds	r7, r2, r5
 8005f7a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005f7e:	ed97 6a00 	vldr	s12, [r7]
 8005f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f86:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005f8a:	194f      	adds	r7, r1, r5
 8005f8c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f90:	ee26 7a85 	vmul.f32	s14, s13, s10
 8005f94:	edd7 7a00 	vldr	s15, [r7]
 8005f98:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005f9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005fa0:	3c01      	subs	r4, #1
 8005fa2:	4432      	add	r2, r6
 8005fa4:	4431      	add	r1, r6
 8005fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005faa:	f103 0310 	add.w	r3, r3, #16
 8005fae:	d1d7      	bne.n	8005f60 <arm_mat_mult_f32+0x88>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	9a01      	ldr	r2, [sp, #4]
 8005fb4:	4418      	add	r0, r3
 8005fb6:	f1b9 0f00 	cmp.w	r9, #0
 8005fba:	d00b      	beq.n	8005fd4 <arm_mat_mult_f32+0xfc>
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	edd0 6a00 	vldr	s13, [r0]
 8005fc2:	ecb2 7a01 	vldmia	r2!, {s14}
 8005fc6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4428      	add	r0, r5
 8005fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fd2:	d1f4      	bne.n	8005fbe <arm_mat_mult_f32+0xe6>
 8005fd4:	ecec 7a01 	vstmia	ip!, {s15}
 8005fd8:	45d4      	cmp	ip, sl
 8005fda:	4670      	mov	r0, lr
 8005fdc:	f10e 0e04 	add.w	lr, lr, #4
 8005fe0:	d1b4      	bne.n	8005f4c <arm_mat_mult_f32+0x74>
 8005fe2:	9a01      	ldr	r2, [sp, #4]
 8005fe4:	9b06      	ldr	r3, [sp, #24]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4419      	add	r1, r3
 8005fea:	449b      	add	fp, r3
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	9101      	str	r1, [sp, #4]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	44aa      	add	sl, r5
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	d004      	beq.n	8006002 <arm_mat_mult_f32+0x12a>
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	6858      	ldr	r0, [r3, #4]
 8005ffc:	e79e      	b.n	8005f3c <arm_mat_mult_f32+0x64>
 8005ffe:	9a05      	ldr	r2, [sp, #20]
 8006000:	e7d9      	b.n	8005fb6 <arm_mat_mult_f32+0xde>
 8006002:	4618      	mov	r0, r3
 8006004:	b00b      	add	sp, #44	; 0x2c
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	f06f 0002 	mvn.w	r0, #2
 800600e:	b00b      	add	sp, #44	; 0x2c
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	00000000 	.word	0x00000000

08006018 <arm_mat_inverse_f32>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	8843      	ldrh	r3, [r0, #2]
 800601e:	8804      	ldrh	r4, [r0, #0]
 8006020:	684e      	ldr	r6, [r1, #4]
 8006022:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8006026:	b087      	sub	sp, #28
 8006028:	429c      	cmp	r4, r3
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	9603      	str	r6, [sp, #12]
 800602e:	f040 80ea 	bne.w	8006206 <arm_mat_inverse_f32+0x1ee>
 8006032:	880a      	ldrh	r2, [r1, #0]
 8006034:	884b      	ldrh	r3, [r1, #2]
 8006036:	4293      	cmp	r3, r2
 8006038:	f040 80e5 	bne.w	8006206 <arm_mat_inverse_f32+0x1ee>
 800603c:	429c      	cmp	r4, r3
 800603e:	f040 80e2 	bne.w	8006206 <arm_mat_inverse_f32+0x1ee>
 8006042:	9005      	str	r0, [sp, #20]
 8006044:	b30c      	cbz	r4, 800608a <arm_mat_inverse_f32+0x72>
 8006046:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800604a:	1e67      	subs	r7, r4, #1
 800604c:	f846 bb04 	str.w	fp, [r6], #4
 8006050:	d01b      	beq.n	800608a <arm_mat_inverse_f32+0x72>
 8006052:	f04f 0801 	mov.w	r8, #1
 8006056:	00ba      	lsls	r2, r7, #2
 8006058:	eb06 0a02 	add.w	sl, r6, r2
 800605c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8006060:	4630      	mov	r0, r6
 8006062:	2100      	movs	r1, #0
 8006064:	f000 f970 	bl	8006348 <memset>
 8006068:	eb0a 0605 	add.w	r6, sl, r5
 800606c:	462a      	mov	r2, r5
 800606e:	2100      	movs	r1, #0
 8006070:	4650      	mov	r0, sl
 8006072:	f1b8 0f00 	cmp.w	r8, #0
 8006076:	f000 80cb 	beq.w	8006210 <arm_mat_inverse_f32+0x1f8>
 800607a:	f000 f965 	bl	8006348 <memset>
 800607e:	3f01      	subs	r7, #1
 8006080:	f108 0801 	add.w	r8, r8, #1
 8006084:	f846 bb04 	str.w	fp, [r6], #4
 8006088:	d1e5      	bne.n	8006056 <arm_mat_inverse_f32+0x3e>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80b5 	beq.w	80061fc <arm_mat_inverse_f32+0x1e4>
 8006092:	009d      	lsls	r5, r3, #2
 8006094:	eb09 0205 	add.w	r2, r9, r5
 8006098:	46cc      	mov	ip, r9
 800609a:	9202      	str	r2, [sp, #8]
 800609c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80060a0:	1d2a      	adds	r2, r5, #4
 80060a2:	9204      	str	r2, [sp, #16]
 80060a4:	462f      	mov	r7, r5
 80060a6:	469e      	mov	lr, r3
 80060a8:	2600      	movs	r6, #0
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	eddc 6a00 	vldr	s13, [ip]
 80060b0:	42b4      	cmp	r4, r6
 80060b2:	eba3 0b07 	sub.w	fp, r3, r7
 80060b6:	f000 80a1 	beq.w	80061fc <arm_mat_inverse_f32+0x1e4>
 80060ba:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006220 <arm_mat_inverse_f32+0x208>
 80060be:	4632      	mov	r2, r6
 80060c0:	4663      	mov	r3, ip
 80060c2:	e00b      	b.n	80060dc <arm_mat_inverse_f32+0xc4>
 80060c4:	eef4 7a47 	vcmp.f32	s15, s14
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	f102 0201 	add.w	r2, r2, #1
 80060d0:	bfc8      	it	gt
 80060d2:	eeb0 7a67 	vmovgt.f32	s14, s15
 80060d6:	42a2      	cmp	r2, r4
 80060d8:	442b      	add	r3, r5
 80060da:	d014      	beq.n	8006106 <arm_mat_inverse_f32+0xee>
 80060dc:	edd3 7a00 	vldr	s15, [r3]
 80060e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e8:	eeb1 6a67 	vneg.f32	s12, s15
 80060ec:	dcea      	bgt.n	80060c4 <arm_mat_inverse_f32+0xac>
 80060ee:	eeb4 6a47 	vcmp.f32	s12, s14
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	f102 0201 	add.w	r2, r2, #1
 80060fa:	bfc8      	it	gt
 80060fc:	eeb0 7a46 	vmovgt.f32	s14, s12
 8006100:	42a2      	cmp	r2, r4
 8006102:	442b      	add	r3, r5
 8006104:	d1ea      	bne.n	80060dc <arm_mat_inverse_f32+0xc4>
 8006106:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800610a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610e:	d075      	beq.n	80061fc <arm_mat_inverse_f32+0x1e4>
 8006110:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006118:	d070      	beq.n	80061fc <arm_mat_inverse_f32+0x1e4>
 800611a:	4672      	mov	r2, lr
 800611c:	4663      	mov	r3, ip
 800611e:	ed93 7a00 	vldr	s14, [r3]
 8006122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006126:	3a01      	subs	r2, #1
 8006128:	ece3 7a01 	vstmia	r3!, {s15}
 800612c:	d1f7      	bne.n	800611e <arm_mat_inverse_f32+0x106>
 800612e:	9901      	ldr	r1, [sp, #4]
 8006130:	464b      	mov	r3, r9
 8006132:	ed93 7a00 	vldr	s14, [r3]
 8006136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800613a:	3901      	subs	r1, #1
 800613c:	ece3 7a01 	vstmia	r3!, {s15}
 8006140:	d1f7      	bne.n	8006132 <arm_mat_inverse_f32+0x11a>
 8006142:	9803      	ldr	r0, [sp, #12]
 8006144:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8006148:	42b1      	cmp	r1, r6
 800614a:	d039      	beq.n	80061c0 <arm_mat_inverse_f32+0x1a8>
 800614c:	eddb 6a00 	vldr	s13, [fp]
 8006150:	465a      	mov	r2, fp
 8006152:	4673      	mov	r3, lr
 8006154:	46e2      	mov	sl, ip
 8006156:	ecba 7a01 	vldmia	sl!, {s14}
 800615a:	edd2 7a00 	vldr	s15, [r2]
 800615e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006162:	3b01      	subs	r3, #1
 8006164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006168:	ece2 7a01 	vstmia	r2!, {s15}
 800616c:	d1f3      	bne.n	8006156 <arm_mat_inverse_f32+0x13e>
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	44bb      	add	fp, r7
 8006172:	4602      	mov	r2, r0
 8006174:	46ca      	mov	sl, r9
 8006176:	ecba 7a01 	vldmia	sl!, {s14}
 800617a:	edd2 7a00 	vldr	s15, [r2]
 800617e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006182:	3b01      	subs	r3, #1
 8006184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006188:	ece2 7a01 	vstmia	r2!, {s15}
 800618c:	d1f3      	bne.n	8006176 <arm_mat_inverse_f32+0x15e>
 800618e:	4428      	add	r0, r5
 8006190:	3101      	adds	r1, #1
 8006192:	428c      	cmp	r4, r1
 8006194:	44c3      	add	fp, r8
 8006196:	d1d7      	bne.n	8006148 <arm_mat_inverse_f32+0x130>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	f1be 0e01 	subs.w	lr, lr, #1
 800619e:	f106 0601 	add.w	r6, r6, #1
 80061a2:	449c      	add	ip, r3
 80061a4:	f1a7 0704 	sub.w	r7, r7, #4
 80061a8:	44a9      	add	r9, r5
 80061aa:	f47f af7e 	bne.w	80060aa <arm_mat_inverse_f32+0x92>
 80061ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d006      	beq.n	80061c6 <arm_mat_inverse_f32+0x1ae>
 80061b8:	2000      	movs	r0, #0
 80061ba:	b007      	add	sp, #28
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	44bb      	add	fp, r7
 80061c2:	4428      	add	r0, r5
 80061c4:	e7e4      	b.n	8006190 <arm_mat_inverse_f32+0x178>
 80061c6:	9b05      	ldr	r3, [sp, #20]
 80061c8:	9a01      	ldr	r2, [sp, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061d4:	fb02 f204 	mul.w	r2, r2, r4
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	4614      	mov	r4, r2
 80061de:	bf08      	it	eq
 80061e0:	3304      	addeq	r3, #4
 80061e2:	d007      	beq.n	80061f4 <arm_mat_inverse_f32+0x1dc>
 80061e4:	e7e8      	b.n	80061b8 <arm_mat_inverse_f32+0x1a0>
 80061e6:	ecf3 7a01 	vldmia	r3!, {s15}
 80061ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f2:	d1e1      	bne.n	80061b8 <arm_mat_inverse_f32+0x1a0>
 80061f4:	f10e 0e01 	add.w	lr, lr, #1
 80061f8:	4574      	cmp	r4, lr
 80061fa:	d1f4      	bne.n	80061e6 <arm_mat_inverse_f32+0x1ce>
 80061fc:	f06f 0004 	mvn.w	r0, #4
 8006200:	b007      	add	sp, #28
 8006202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006206:	f06f 0002 	mvn.w	r0, #2
 800620a:	b007      	add	sp, #28
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	4656      	mov	r6, sl
 8006212:	3f01      	subs	r7, #1
 8006214:	f846 bb04 	str.w	fp, [r6], #4
 8006218:	f47f af1b 	bne.w	8006052 <arm_mat_inverse_f32+0x3a>
 800621c:	e735      	b.n	800608a <arm_mat_inverse_f32+0x72>
 800621e:	bf00      	nop
 8006220:	00000000 	.word	0x00000000

08006224 <arm_mat_init_f32>:
 8006224:	8001      	strh	r1, [r0, #0]
 8006226:	8042      	strh	r2, [r0, #2]
 8006228:	6043      	str	r3, [r0, #4]
 800622a:	4770      	bx	lr

0800622c <arm_mat_add_f32>:
 800622c:	b4f0      	push	{r4, r5, r6, r7}
 800622e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8006232:	6803      	ldr	r3, [r0, #0]
 8006234:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006238:	6856      	ldr	r6, [r2, #4]
 800623a:	42a3      	cmp	r3, r4
 800623c:	d15d      	bne.n	80062fa <arm_mat_add_f32+0xce>
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	4293      	cmp	r3, r2
 8006242:	d15a      	bne.n	80062fa <arm_mat_add_f32+0xce>
 8006244:	8803      	ldrh	r3, [r0, #0]
 8006246:	8844      	ldrh	r4, [r0, #2]
 8006248:	fb04 f403 	mul.w	r4, r4, r3
 800624c:	08a5      	lsrs	r5, r4, #2
 800624e:	d032      	beq.n	80062b6 <arm_mat_add_f32+0x8a>
 8006250:	f10c 0110 	add.w	r1, ip, #16
 8006254:	f107 0210 	add.w	r2, r7, #16
 8006258:	f106 0310 	add.w	r3, r6, #16
 800625c:	4628      	mov	r0, r5
 800625e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006262:	ed51 7a04 	vldr	s15, [r1, #-16]
 8006266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800626a:	3801      	subs	r0, #1
 800626c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006270:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006274:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800627c:	f101 0110 	add.w	r1, r1, #16
 8006280:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006284:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006288:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800628c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006290:	f102 0210 	add.w	r2, r2, #16
 8006294:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006298:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800629c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80062a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a4:	f103 0310 	add.w	r3, r3, #16
 80062a8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80062ac:	d1d7      	bne.n	800625e <arm_mat_add_f32+0x32>
 80062ae:	012b      	lsls	r3, r5, #4
 80062b0:	449c      	add	ip, r3
 80062b2:	441f      	add	r7, r3
 80062b4:	441e      	add	r6, r3
 80062b6:	f014 0403 	ands.w	r4, r4, #3
 80062ba:	d01b      	beq.n	80062f4 <arm_mat_add_f32+0xc8>
 80062bc:	edd7 7a00 	vldr	s15, [r7]
 80062c0:	ed9c 7a00 	vldr	s14, [ip]
 80062c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c8:	3c01      	subs	r4, #1
 80062ca:	edc6 7a00 	vstr	s15, [r6]
 80062ce:	d011      	beq.n	80062f4 <arm_mat_add_f32+0xc8>
 80062d0:	eddc 7a01 	vldr	s15, [ip, #4]
 80062d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80062d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062dc:	2c01      	cmp	r4, #1
 80062de:	edc6 7a01 	vstr	s15, [r6, #4]
 80062e2:	d007      	beq.n	80062f4 <arm_mat_add_f32+0xc8>
 80062e4:	eddc 7a02 	vldr	s15, [ip, #8]
 80062e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80062ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f0:	edc6 7a02 	vstr	s15, [r6, #8]
 80062f4:	2000      	movs	r0, #0
 80062f6:	bcf0      	pop	{r4, r5, r6, r7}
 80062f8:	4770      	bx	lr
 80062fa:	f06f 0002 	mvn.w	r0, #2
 80062fe:	e7fa      	b.n	80062f6 <arm_mat_add_f32+0xca>

08006300 <__libc_init_array>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4d0d      	ldr	r5, [pc, #52]	; (8006338 <__libc_init_array+0x38>)
 8006304:	4c0d      	ldr	r4, [pc, #52]	; (800633c <__libc_init_array+0x3c>)
 8006306:	1b64      	subs	r4, r4, r5
 8006308:	10a4      	asrs	r4, r4, #2
 800630a:	2600      	movs	r6, #0
 800630c:	42a6      	cmp	r6, r4
 800630e:	d109      	bne.n	8006324 <__libc_init_array+0x24>
 8006310:	4d0b      	ldr	r5, [pc, #44]	; (8006340 <__libc_init_array+0x40>)
 8006312:	4c0c      	ldr	r4, [pc, #48]	; (8006344 <__libc_init_array+0x44>)
 8006314:	f000 f820 	bl	8006358 <_init>
 8006318:	1b64      	subs	r4, r4, r5
 800631a:	10a4      	asrs	r4, r4, #2
 800631c:	2600      	movs	r6, #0
 800631e:	42a6      	cmp	r6, r4
 8006320:	d105      	bne.n	800632e <__libc_init_array+0x2e>
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	f855 3b04 	ldr.w	r3, [r5], #4
 8006328:	4798      	blx	r3
 800632a:	3601      	adds	r6, #1
 800632c:	e7ee      	b.n	800630c <__libc_init_array+0xc>
 800632e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006332:	4798      	blx	r3
 8006334:	3601      	adds	r6, #1
 8006336:	e7f2      	b.n	800631e <__libc_init_array+0x1e>
 8006338:	08006390 	.word	0x08006390
 800633c:	08006390 	.word	0x08006390
 8006340:	08006390 	.word	0x08006390
 8006344:	08006394 	.word	0x08006394

08006348 <memset>:
 8006348:	4402      	add	r2, r0
 800634a:	4603      	mov	r3, r0
 800634c:	4293      	cmp	r3, r2
 800634e:	d100      	bne.n	8006352 <memset+0xa>
 8006350:	4770      	bx	lr
 8006352:	f803 1b01 	strb.w	r1, [r3], #1
 8006356:	e7f9      	b.n	800634c <memset+0x4>

08006358 <_init>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	bf00      	nop
 800635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635e:	bc08      	pop	{r3}
 8006360:	469e      	mov	lr, r3
 8006362:	4770      	bx	lr

08006364 <_fini>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr
